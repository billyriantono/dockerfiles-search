{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stable",
      "SourceCode": "FROM debian:stable",
      "Platform": "",
      "From": {
        "Image": "debian:stable"
      },
      "Commands": [
        {
          "Maintainer": "David Pose \u003cdpose@bitergia.com\u003e, Alvaro del Castillo \u003cacs@bitergia.com\u003e, David Muriel \u003cdmuriel@bitergia.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "KIBANA_BRANCH",
              "Value": "integration-4.4.1-public"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd --system kibana \u0026\u0026     useradd --system --create-home --gid kibana kibana"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends             ca-certificates             curl             wget             git             python             zip             make             g++             \u0026\u0026     curl -o /tmp/nvm-install.sh -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh \u0026\u0026     chmod +x /tmp/nvm-install.sh \u0026\u0026     bash -c /tmp/nvm-install.sh \u0026\u0026     . /root/.bashrc \u0026\u0026     git clone --depth 1 --branch ${KIBANA_BRANCH} https://github.com/grimoirelab/kibiter.git \u0026\u0026     cd kibiter \u0026\u0026     bash -c \"echo 4.3.0 \u003e .node-version\" \u0026\u0026     nvm install \"$( cat .node-version )\" \u0026\u0026     npm install -g grunt-cli \u0026\u0026     npm install \u0026\u0026     sed -e \"/return \\[/,/\\].map/ {/\\(windows\\|darwin\\|x86\\)/ d;s/,//g}\" -i tasks/config/platforms.js \u0026\u0026     grunt --no-color _build:downloadNodeBuilds:start _build:downloadNodeBuilds:finish \u0026\u0026     grunt --no-color build \u0026\u0026     tar xfz target/kibana-*-linux-x64.tar.gz --directory /opt \u0026\u0026     mv /opt/kibana-*-linux-x64* /opt/kibana \u0026\u0026     cd /root \u0026\u0026     chown -R kibana:kibana /opt/kibana  \u0026\u0026     rm -rf /kibiter \u0026\u0026     apt-get purge -y g++ make python git zip wget \u0026\u0026     apt-get autoremove --purge -y \u0026\u0026     apt-get clean \u0026\u0026     find /var/lib/apt/lists -type f -delete \u0026\u0026     rm -rf /root/.npm /root/.node-gyp /root/.nvm /tmp/* /var/tmp/* \u0026\u0026     bash -c 'find /usr/share/locale -maxdepth 1 -mindepth 1 -type d | grep -v -e \"en_US\" | xargs rm -rfv' \u0026\u0026     bash -c 'localedef --list-archive | grep -v -e \"en_US\" | xargs localedef --delete-from-archive' \u0026\u0026     rm -rf /usr/share/doc/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "arch=\"$(dpkg --print-architecture)\" \t\u0026\u0026 set -x \t\u0026\u0026 curl -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch\" \t\u0026\u0026 curl -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch.asc\" \t\u0026\u0026 gpg --verify /usr/local/bin/gosu.asc \t\u0026\u0026 rm /usr/local/bin/gosu.asc \t\u0026\u0026 chmod +x /usr/local/bin/gosu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/kibana/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rm -rf /opt/kibana/optimize/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5601"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "kibana"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}