{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:17.10",
      "SourceCode": "FROM ubuntu:17.10",
      "Platform": "",
      "From": {
        "Image": "ubuntu:17.10"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GOLANG_VERSION",
              "Value": "1.10"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/usr/local/go/bin:/usr/local/work/bin:${PATH}\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/usr/local/work"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y wget git libc6-dev make pkg-config g++ gcc mosquitto-clients mosquitto python3 python3-dev python3-pip python3-setuptools python3-scipy python3-ujson python3-flask python3-sklearn python3-numpy supervisor \u0026\u0026 \tpython3 -m pip install wheel \u0026\u0026 \tpython3 -m pip install base58 tqdm expiringdict \u0026\u0026 \tmkdir /usr/local/work \u0026\u0026 \trm -rf /var/lib/apt/lists/* \u0026\u0026 \tset -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) goRelArch='linux-amd64'; goRelSha256='b5a64335f1490277b585832d1f6c7f8c6c11206cba5cd3f771dcb87b98ad1a33' ;; \t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='6ff665a9ab61240cf9f11a07e03e6819e452a618a32ea05bbb2c80182f838f4f' ;; \t\tarm64) goRelArch='linux-arm64'; goRelSha256='efb47e5c0e020b180291379ab625c6ec1c2e9e9b289336bc7169e6aa1da43fd8' ;; \t\ti386) goRelArch='linux-386'; goRelSha256='2d26a9f41fd80eeb445cc454c2ba6b3d0db2fc732c53d7d0427a9f605bfc55a1' ;; \t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='a1e22e2fbcb3e551e0bf59d0f8aeb4b3f2df86714f09d2acd260c6597c43beee' ;; \t\ts390x) goRelArch='linux-s390x'; goRelSha256='71cde197e50afe17f097f81153edb450f880267699f22453272d184e0f4681d7' ;; \t\t*) goRelArch='src'; goRelSha256='f3de49289405fda5fd1483a8fe6bd2fa5469e005fd567df64485c4fa000c7f24'; \t\t\techo \u003e\u00262; echo \u003e\u00262 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo \u003e\u00262 ;; \tesac; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src' ]; then \t\techo \u003e\u00262; \t\techo \u003e\u00262 'error: UNIMPLEMENTED'; \t\techo \u003e\u00262 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \t\techo \u003e\u00262; \t\texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version \u0026\u0026 \tmkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \u0026\u0026 chmod -R 777 \"$GOPATH\" \u0026\u0026 \tgo get -v github.com/mattn/go-sqlite3 \u0026\u0026 \tgo install -v github.com/mattn/go-sqlite3 \u0026\u0026 \tgo get -v github.com/schollz/find3/... \u0026\u0026 \tmkdir /data \u0026\u0026 \tmkdir /app \u0026\u0026 \techo '#!/bin/bash\\npkill -9 mosquitto\\ncp -R -u -p /app/mosquitto_config /data\\nrm -f /data/find3/mosquitto_config/pid\\nmkdir -p /data/logs\\n/usr/bin/supervisord\\n'\u003e /app/startup.sh \u0026\u0026 \tchmod +x /app/startup.sh \u0026\u0026 echo '[supervisord]\\nnodaemon=true\\n[program:main]\\ndirectory=/app/main\\ncommand=main -debug -data /data/data -mqtt-dir /data/mosquitto_config\\npriority=1\\nstdout_logfile=/data/logs/main.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/main.stderr\\nstderr_logfile_maxbytes=0\\n[program:ai]\\ndirectory=/app/ai\\ncommand=make production\\npriority=2\\nstdout_logfile=/data/logs/ai.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/ai.stderr\\nstderr_logfile_maxbytes=0\\n'\u003e /etc/supervisor/conf.d/supervisord.conf \u0026\u0026 \tmkdir /app/mosquitto_config \u0026\u0026 \ttouch /app/mosquitto_config/acl  \u0026\u0026 \ttouch /app/mosquitto_config/passwd  \u0026\u0026 echo 'allow_anonymous false\\nacl_file /data/mosquitto_config/acl\\npassword_file /data/mosquitto_config/passwd\\npid_file /data/mosquitto_config/pid\\n'\u003e /app/mosquitto_config/mosquitto.conf \u0026\u0026 \techo \"moving to find3\" \u0026\u0026 cd /usr/local/work/src/github.com/schollz/find3/server/main \u0026\u0026 echo \"v3.0.0.5\" \u0026\u0026 git pull -v \u0026\u0026 go build -v \u0026\u0026 \techo \"installing find3\" \u0026\u0026 go install -v \u0026\u0026 \techo \"moving main\" \u0026\u0026 mv /usr/local/work/src/github.com/schollz/find3/server/main /app/main \u0026\u0026 \techo \"moving ai\" \u0026\u0026 mv /usr/local/work/src/github.com/schollz/find3/server/ai /app/ai \u0026\u0026 \techo \"removing go srces\" \u0026\u0026 rm -rf /usr/local/work/src \u0026\u0026 \techo \"purging packages\" \u0026\u0026 apt-get remove -y --auto-remove git libc6-dev pkg-config g++ gcc \u0026\u0026 \techo \"autoclean\" \u0026\u0026 apt-get autoclean \u0026\u0026 \techo \"clean\" \u0026\u0026 apt-get clean \u0026\u0026 \techo \"autoremove\" \u0026\u0026 apt-get autoremove \u0026\u0026 \techo \"rm trash\" \u0026\u0026 rm -rf ~/.local/share/Trash/* \u0026\u0026 \techo \"rm go\" \u0026\u0026 rm -rf /usr/local/go* \u0026\u0026 \techo \"rm perl\" \u0026\u0026 rm -rf /usr/share/perl* \u0026\u0026 \techo \"rm doc\" \u0026\u0026 rm -rf /usr/share/doc*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "CmdLine": [
            "/app/startup.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}