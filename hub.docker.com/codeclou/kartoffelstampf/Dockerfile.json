{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:11.6.0-alpine",
      "SourceCode": "FROM node:11.6.0-alpine",
      "Platform": "",
      "From": {
        "Image": "node:11.6.0-alpine"
      },
      "Commands": [
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/opt/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" \u003e\u003e /etc/apk/repositories"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo  \u003e\u003e /etc/apk/repositories \u0026\u0026     apk add --no-cache             bash             wget             gzip             exiftool             fbida-exiftran             jpegoptim@testing             pngquant@testing             imagemagick             optipng \u0026\u0026     mkdir -p /u/ \u0026\u0026     mkdir -p /opt/npm/ \u0026\u0026     mkdir -p /opt/node/ \u0026\u0026     mkdir -p /opt/npm/uploads \u0026\u0026     mkdir -p /opt/npm/app \u0026\u0026     addgroup -g 10777 nodeworker \u0026\u0026     adduser -D -G nodeworker -u 10777 nodeworker \u0026\u0026     chmod u+rx,g+rx,o+rx,a-w /opt/docker-entrypoint.sh \u0026\u0026     chown -R nodeworker:nodeworker /opt/npm \u0026\u0026     chown -R nodeworker:nodeworker /u"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps             libstdc++             binutils-gold             curl             g++             gcc             gnupg             libgcc             linux-headers             make             git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/optipng-build/ \u0026\u0026     wget -O /opt/optipng-0.7.6.zip https://codeclou.github.io/kartoffelstampf/repo/optipng-0.7.6-patched.zip \u0026\u0026     unzip /opt/optipng-0.7.6.zip -d /opt/optipng-build/ \u0026\u0026     cd /opt/optipng-build/optipng-0.7.6/ \u0026\u0026     ./configure  \u0026\u0026     make  \u0026\u0026     make install  \u0026\u0026     rm -rf /opt/optipng-build/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps-gflags cmake \u0026\u0026     mkdir -p /opt/build/gflags/gflags-2.2.0 \u0026\u0026     wget -O /opt/build/gflags/gflags-2.2.0.zip https://codeclou.github.io/kartoffelstampf/repo/gflags-2.2.0-pre-configured-cmake.zip \u0026\u0026     unzip /opt/build/gflags/gflags-2.2.0.zip -d /opt/build/gflags/gflags-2.2.0 \u0026\u0026     cd /opt/build/gflags/gflags-2.2.0 \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf /opt/build/gflags/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps-guetzli libpng libpng-dev \u0026\u0026     mkdir -p /opt/build/guetzli/guetzli-1.0 \u0026\u0026     wget -O /opt/build/guetzli/guetzli-1.0.zip https://github.com/google/guetzli/archive/v1.0.zip \u0026\u0026     unzip /opt/build/guetzli/guetzli-1.0.zip -d /opt/build/guetzli/guetzli-1.0 \u0026\u0026     cd /opt/build/guetzli/guetzli-1.0/guetzli-1.0 \u0026\u0026     make \u0026\u0026     mv /opt/build/guetzli/guetzli-1.0/guetzli-1.0/bin/Release/guetzli /usr/local/bin \u0026\u0026     rm -rf /opt/build/guetzli/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "nodeworker"
        },
        {
          "Env": [
            {
              "Key": "KARTOFFELSTAMPF_SERVER_VERSION",
              "Value": "v2.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "KARTOFFELSTAMPF_CLIENT_VERSION",
              "Value": "v2.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -O /opt/npm/kartoffelstampf-server.zip https://github.com/codeclou/kartoffelstampf-server/releases/download/${KARTOFFELSTAMPF_SERVER_VERSION}/dist.zip \u0026\u0026     unzip /opt/npm/kartoffelstampf-server.zip -d /opt/npm/app/ \u0026\u0026     rm -f /opt/npm/kartoffelstampf-server.zip  \u0026\u0026     ls -lah /opt/npm/app/ \u0026\u0026     mkdir /opt/npm/public/ \u0026\u0026     wget -O /opt/npm/kartoffelstampf-client.zip https://github.com/codeclou/kartoffelstampf-client/releases/download/${KARTOFFELSTAMPF_CLIENT_VERSION}/dist.zip \u0026\u0026     unzip /opt/npm/kartoffelstampf-client.zip -d /opt/npm/public/ \u0026\u0026     rm -f /opt/npm/kartoffelstampf-client.zip  \u0026\u0026     ls -lah /opt/npm/public/ \u0026\u0026     cd /opt/npm/app/ \u0026\u0026 npm install \u0026\u0026 npm prune --production"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "9999"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/opt/npm/app/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/u"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/npm/app/"
        },
        {
          "CmdLine": [
            "/opt/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "npm",
            "run",
            "start:prod"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}