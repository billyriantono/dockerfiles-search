{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-1.8.0-openjdk-amd64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$JAVA_HOME/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get -y install wget software-properties-common python-software-properties sudo \u0026\u0026     add-apt-repository ppa:git-core/ppa -y \u0026\u0026     add-apt-repository ppa:openjdk-r/ppa -y \u0026\u0026     wget -qO- https://deb.nodesource.com/setup_8.x | sudo -E bash - \u0026\u0026     apt-get update \u0026\u0026     apt-get -y install     locales     rsync     openssh-server     procps     unzip     mc     ca-certificates     curl     bash-completion     git     subversion     build-essential     libkrb5-dev     gcc     make     debian-keyring     python2.7     gnupg2     openjdk-8-jdk-headless=8u171-b11-0ubuntu0.16.04.1     openjdk-8-source=8u171-b11-0ubuntu0.16.04.1     nodejs \u0026\u0026     mkdir /var/run/sshd \u0026\u0026     sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \u0026\u0026     echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers \u0026\u0026     useradd -u 1000 -G users,sudo,root -d /home/user --shell /bin/bash -m user \u0026\u0026     usermod -p \"*\" user \u0026\u0026     apt-get clean \u0026\u0026     apt-get -y autoremove \u0026\u0026     sudo update-ca-certificates -f \u0026\u0026     sudo sudo /var/lib/dpkg/info/ca-certificates-java.postinst configure \u0026\u0026     apt-get -y clean \u0026\u0026     rm -rf /var/lib/apt/lists/* \u0026\u0026     gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \u0026\u0026     \\curl -sSL https://get.rvm.io | bash -s stable --ruby \u0026\u0026     sudo npm install --unsafe-perm -g yarn gulp bower grunt grunt-cli yeoman-generator yo generator-angular generator-karma generator-webapp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_GB.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "user"
        },
        {
          "CmdLine": [
            "sudo locale-gen en_US.UTF-8 \u0026\u0026     svn --version \u0026\u0026     cd /home/user \u0026\u0026 ls -la \u0026\u0026     sed -i 's/# store-passwords = no/store-passwords = yes/g' /home/user/.subversion/servers \u0026\u0026     sed -i 's/# store-plaintext-passwords = no/store-plaintext-passwords = yes/g' /home/user/.subversion/servers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "1337",
            "22",
            "3000",
            "35729",
            "4000",
            "4200",
            "4403",
            "5000",
            "8003",
            "9000"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/projects"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/user"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "for f in \"/home/user\" \"/etc/passwd\" \"/etc/group\" \"/projects\"; do           sudo chgrp -R 0 ${f} \u0026\u0026            sudo chmod -R g+rwX ${f};         done \u0026\u0026         cat /etc/passwd |         sed s#user:x.*#user:x:\\${USER_ID}:\\${GROUP_ID}::\\${HOME}:/bin/bash#g         \u003e /home/user/passwd.template \u0026\u0026         cat /etc/group |         sed s#root:x:0:#root:x:0:0,\\${USER_ID}:#g         \u003e /home/user/group.template \u0026\u0026         sudo sed -ri 's/StrictModes yes/StrictModes no/g' /etc/ssh/sshd_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/home/user/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/home/user/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "tail -f /dev/null"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "che:server:8003:ref",
              "Value": "angular"
            },
            {
              "Key": "che:server:8003:protocol",
              "Value": "http"
            },
            {
              "Key": "che:server:3000:ref",
              "Value": "node-3000"
            },
            {
              "Key": "che:server:3000:protocol",
              "Value": "http"
            },
            {
              "Key": "che:server:9000:ref",
              "Value": "node-9000"
            },
            {
              "Key": "che:server:9000:protocol",
              "Value": "http"
            }
          ],
          "Name": "label"
        }
      ]
    }
  ]
}