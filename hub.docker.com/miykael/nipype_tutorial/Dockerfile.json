{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "neurodebian:stretch-non-free",
      "SourceCode": "FROM neurodebian:stretch-non-free",
      "Platform": "",
      "From": {
        "Image": "neurodebian:stretch-non-free"
      },
      "Commands": [
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "\"noninteractive\""
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "LC_ALL",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "ND_ENTRYPOINT",
              "Value": "\"/neurodocker/startup.sh\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export ND_ENTRYPOINT=\"/neurodocker/startup.sh\"     \u0026\u0026 apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     \u0026\u0026 dpkg-reconfigure --frontend=noninteractive locales     \u0026\u0026 update-locale LANG=\"en_US.UTF-8\"     \u0026\u0026 chmod 777 /opt \u0026\u0026 chmod a+s /opt     \u0026\u0026 mkdir -p /neurodocker     \u0026\u0026 if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env bash' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'set -e' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'export USER=\"${USER:=`whoami`}\"' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'if [ -n \"$1\" ]; then \"$@\"; else /usr/bin/env bash; fi' \u003e\u003e \"$ND_ENTRYPOINT\";     fi     \u0026\u0026 chmod -R 777 /neurodocker \u0026\u0026 chmod a+s /neurodocker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/neurodocker/startup.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            convert3d            ants            fsl            gcc            g++            graphviz            tree            git-annex-standalone            vim            emacs-nox            nano            less            ncdu            tig            git-annex-remote-rclone            octave            netbase     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FORCE_SPMMCR",
              "Value": "\"1\""
            },
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2010a/v713/runtime/glnxa64:/opt/matlabmcr-2010a/v713/bin/glnxa64:/opt/matlabmcr-2010a/v713/sys/os/glnxa64:/opt/matlabmcr-2010a/v713/extern/bin/glnxa64\""
            },
            {
              "Key": "MATLABCMD",
              "Value": "\"/opt/matlabmcr-2010a/v713/toolbox/matlab\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export TMPDIR=\"$(mktemp -d)\"     \u0026\u0026 apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            bc            libncurses5            libxext6            libxmu6            libxpm-dev            libxt6     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 echo \"Downloading MATLAB Compiler Runtime ...\"     \u0026\u0026 curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb     \u0026\u0026 dpkg -i /tmp/toinstall.deb     \u0026\u0026 rm /tmp/toinstall.deb     \u0026\u0026 apt-get install -f     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 curl -fsSL --retry 5 -o \"$TMPDIR/MCRInstaller.bin\" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin     \u0026\u0026 chmod +x \"$TMPDIR/MCRInstaller.bin\"     \u0026\u0026 \"$TMPDIR/MCRInstaller.bin\" -silent -P installLocation=\"/opt/matlabmcr-2010a\"     \u0026\u0026 rm -rf \"$TMPDIR\"     \u0026\u0026 unset TMPDIR     \u0026\u0026 echo \"Downloading standalone SPM ...\"     \u0026\u0026 curl -fsSL --retry 5 -o /tmp/spm12.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7219_R2010a.zip     \u0026\u0026 unzip -q /tmp/spm12.zip -d /tmp     \u0026\u0026 mkdir -p /opt/spm12-r7219     \u0026\u0026 mv /tmp/spm12/* /opt/spm12-r7219/     \u0026\u0026 chmod -R 777 /opt/spm12-r7219     \u0026\u0026 rm -rf /tmp/*     \u0026\u0026 /opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 quit     \u0026\u0026 sed -i '$iexport SPMMCRCMD=\\\"/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 script\\\"' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "test \"$(getent passwd neuro)\" || useradd --no-user-group --create-home --shell /bin/bash neuro"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "neuro"
        },
        {
          "Name": "workdir",
          "Path": "/home/neuro"
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "\"/opt/miniconda-latest\""
            },
            {
              "Key": "PATH",
              "Value": "\"/opt/miniconda-latest/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export PATH=\"/opt/miniconda-latest/bin:$PATH\"     \u0026\u0026 echo \"Downloading Miniconda installer ...\"     \u0026\u0026 conda_installer=\"/tmp/miniconda.sh\"     \u0026\u0026 curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     \u0026\u0026 bash \"$conda_installer\" -b -p /opt/miniconda-latest     \u0026\u0026 rm -f \"$conda_installer\"     \u0026\u0026 conda update -yq -nbase conda     \u0026\u0026 conda config --system --prepend channels conda-forge     \u0026\u0026 conda config --system --set auto_update_conda false     \u0026\u0026 conda config --system --set show_channel_urls true     \u0026\u0026 sync \u0026\u0026 conda clean --all \u0026\u0026 sync     \u0026\u0026 conda create -y -q --name neuro     \u0026\u0026 conda install -y -q --name neuro            'python=3.6'            'pytest'            'jupyter'            'jupyterlab'            'jupyter_contrib_nbextensions'            'traits'            'pandas'            'matplotlib'            'scikit-learn'            'scikit-image'            'seaborn'            'nbformat'            'nb_conda'     \u0026\u0026 sync \u0026\u0026 conda clean --all \u0026\u0026 sync     \u0026\u0026 bash -c \"source activate neuro     \u0026\u0026   pip install --no-cache-dir               https://github.com/nipy/nipype/tarball/master              https://github.com/INCF/pybids/tarball/0.7.1              nilearn              datalad[full]              nipy              duecredit              nbval\"     \u0026\u0026 rm -rf ~/.cache/pip/*     \u0026\u0026 sync     \u0026\u0026 sed -i '$isource activate neuro' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"/opt/miniconda-latest/envs/neuro:/usr/lib/fsl/5.0\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "bash -c 'source activate neuro \u0026\u0026 jupyter nbextension enable exercise2/main \u0026\u0026 jupyter nbextension enable spellchecker/main'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "mkdir /data \u0026\u0026 chmod 777 /data \u0026\u0026 chmod a+s /data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /output \u0026\u0026 chmod 777 /output \u0026\u0026 chmod a+s /output"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "neuro"
        },
        {
          "CmdLine": [
            "printf \"[user]\\n\\tname = miykael\\n\\temail = michaelnotter@hotmail.com\\n\" \u003e ~/.gitconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c 'source activate neuro \u0026\u0026 cd /data \u0026\u0026 datalad install -r ///workshops/nih-2017/ds000114 \u0026\u0026 cd ds000114 \u0026\u0026 datalad update -r \u0026\u0026 datalad get -r sub-01/ses-test/anat sub-01/ses-test/func/*fingerfootlips*'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/580705089ad5a101f17944a9 -o /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz \u0026\u0026 tar xf /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz -C /data/ds000114/derivatives/fmriprep/. \u0026\u0026 rm /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz \u0026\u0026 find /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c -type f -not -name ?mm_T1.nii.gz -not -name ?mm_brainmask.nii.gz -not -name ?mm_tpm*.nii.gz -delete"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/home/neuro/nipype_tutorial"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "chown -R neuro /home/neuro/nipype_tutorial"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /opt/conda/pkgs/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "neuro"
        },
        {
          "CmdLine": [
            "mkdir -p ~/.jupyter \u0026\u0026 echo c.NotebookApp.ip = \\\"0.0.0.0\\\" \u003e ~/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/neuro/nipype_tutorial"
        },
        {
          "CmdLine": [
            "jupyter-notebook"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "echo '{     \\n  \"pkg_manager\": \"apt\",     \\n  \"instructions\": [     \\n    [     \\n      \"base\",     \\n      \"neurodebian:stretch-non-free\"     \\n    ],     \\n    [     \\n      \"install\",     \\n      [     \\n        \"convert3d\",     \\n        \"ants\",     \\n        \"fsl\",     \\n        \"gcc\",     \\n        \"g++\",     \\n        \"graphviz\",     \\n        \"tree\",     \\n        \"git-annex-standalone\",     \\n        \"vim\",     \\n        \"emacs-nox\",     \\n        \"nano\",     \\n        \"less\",     \\n        \"ncdu\",     \\n        \"tig\",     \\n        \"git-annex-remote-rclone\",     \\n        \"octave\",     \\n        \"netbase\"     \\n      ]     \\n    ],     \\n    [     \\n      \"add_to_entrypoint\",     \\n      \"source /etc/fsl/fsl.sh\"     \\n    ],     \\n    [     \\n      \"spm12\",     \\n      {     \\n        \"version\": \"r7219\"     \\n      }     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"neuro\"     \\n    ],     \\n    [     \\n      \"workdir\",     \\n      \"/home/neuro\"     \\n    ],     \\n    [     \\n      \"miniconda\",     \\n      {     \\n        \"miniconda_version\": \"4.3.31\",     \\n        \"conda_install\": [     \\n          \"python=3.6\",     \\n          \"pytest\",     \\n          \"jupyter\",     \\n          \"jupyterlab\",     \\n          \"jupyter_contrib_nbextensions\",     \\n          \"traits\",     \\n          \"pandas\",     \\n          \"matplotlib\",     \\n          \"scikit-learn\",     \\n          \"scikit-image\",     \\n          \"seaborn\",     \\n          \"nbformat\",     \\n          \"nb_conda\"     \\n        ],     \\n        \"pip_install\": [     \\n          \"https://github.com/nipy/nipype/tarball/master\",     \\n          \"https://github.com/INCF/pybids/tarball/0.7.1\",     \\n          \"nilearn\",     \\n          \"datalad[full]\",     \\n          \"nipy\",     \\n          \"duecredit\",     \\n          \"nbval\"     \\n        ],     \\n        \"create_env\": \"neuro\",     \\n        \"activate\": true     \\n      }     \\n    ],     \\n    [     \\n      \"env\",     \\n      {     \\n        \"LD_LIBRARY_PATH\": \"/opt/miniconda-latest/envs/neuro:/usr/lib/fsl/5.0\"     \\n      }     \\n    ],     \\n    [     \\n      \"run_bash\",     \\n      \"source activate neuro \u0026\u0026 jupyter nbextension enable exercise2/main \u0026\u0026 jupyter nbextension enable spellchecker/main\"     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"root\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"mkdir /data \u0026\u0026 chmod 777 /data \u0026\u0026 chmod a+s /data\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"mkdir /output \u0026\u0026 chmod 777 /output \u0026\u0026 chmod a+s /output\"     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"neuro\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"printf \\\"[user]\\\\\\n\\\\tname = miykael\\\\\\n\\\\temail = michaelnotter@hotmail.com\\\\\\n\\\" \u003e ~/.gitconfig\"     \\n    ],     \\n    [     \\n      \"run_bash\",     \\n      \"source activate neuro \u0026\u0026 cd /data \u0026\u0026 datalad install -r ///workshops/nih-2017/ds000114 \u0026\u0026 cd ds000114 \u0026\u0026 datalad update -r \u0026\u0026 datalad get -r sub-01/ses-test/anat sub-01/ses-test/func/*fingerfootlips*\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"curl -L https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/580705089ad5a101f17944a9 -o /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz \u0026\u0026 tar xf /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz -C /data/ds000114/derivatives/fmriprep/. \u0026\u0026 rm /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c.tar.gz \u0026\u0026 find /data/ds000114/derivatives/fmriprep/mni_icbm152_nlin_asym_09c -type f -not -name ?mm_T1.nii.gz -not -name ?mm_brainmask.nii.gz -not -name ?mm_tpm*.nii.gz -delete\"     \\n    ],     \\n    [     \\n      \"copy\",     \\n      [     \\n        \".\",     \\n        \"/home/neuro/nipype_tutorial\"     \\n      ]     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"root\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"chown -R neuro /home/neuro/nipype_tutorial\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"rm -rf /opt/conda/pkgs/*\"     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"neuro\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"mkdir -p ~/.jupyter \u0026\u0026 echo c.NotebookApp.ip = \\\\\\\"0.0.0.0\\\\\\\" \u003e ~/.jupyter/jupyter_notebook_config.py\"     \\n    ],     \\n    [     \\n      \"workdir\",     \\n      \"/home/neuro/nipype_tutorial\"     \\n    ],     \\n    [     \\n      \"cmd\",     \\n      [     \\n        \"jupyter-notebook\"     \\n      ]     \\n    ]     \\n  ]     \\n}' \u003e /neurodocker/neurodocker_specs.json"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}