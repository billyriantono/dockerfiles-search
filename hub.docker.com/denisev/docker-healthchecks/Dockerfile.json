{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stretch",
      "SourceCode": "FROM debian:stretch",
      "Platform": "",
      "From": {
        "Image": "debian:stretch"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Alexander Trost \u003cgalexrt@googlemail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "\"noninteractive\""
            },
            {
              "Key": "TZ",
              "Value": "\"UTC\""
            },
            {
              "Key": "DATA_DIR",
              "Value": "\"/data\""
            },
            {
              "Key": "HEALTHCHECKS_VERSION",
              "Value": "\"v1.11.0\""
            },
            {
              "Key": "HEALTHCHECKS_USER",
              "Value": "\"1000\""
            },
            {
              "Key": "HEALTHCHECKS_GROUP",
              "Value": "\"1000\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -g \"$HEALTHCHECKS_GROUP\" healthchecks \u0026\u0026     useradd -u \"$HEALTHCHECKS_USER\" -g \"$HEALTHCHECKS_GROUP\" -m -d /home/healthchecks -s /bin/bash healthchecks \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y wget sudo gnupg2 \u0026\u0026     echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main\" \u003e /etc/apt/sources.list.d/psql.list \u0026\u0026     wget -q -O- https://www.postgresql.org/media/keys/ACCC4CF8.asc |     apt-key add - \u0026\u0026     apt-get update \u0026\u0026     apt-get dist-upgrade -y \u0026\u0026     apt-get install -y git python3 python3-dev python3-setuptools python3-dateutil         python-mysqldb postgresql-server-dev-9.6 build-essential libxml2-dev         libxslt-dev libz-dev default-libmysqlclient-dev supervisor nginx \u0026\u0026     easy_install3 -U pip \u0026\u0026     mkdir -p /healthchecks \"$DATA_DIR\" \u0026\u0026     chown healthchecks:healthchecks -R /healthchecks \"$DATA_DIR\" \u0026\u0026     easy_install3 six \u0026\u0026     pip install gunicorn \u0026\u0026     sudo -u healthchecks -g healthchecks sh -c \"git clone https://github.com/healthchecks/healthchecks.git /healthchecks \u0026\u0026     cd /healthchecks \u0026\u0026     git checkout $HEALTHCHECKS_VERSION \u0026\u0026     pip install -r requirements.txt --user \u0026\u0026     pip install mysqlclient --user\" \u0026\u0026     echo \"\" \u003e /healthchecks/CHANGELOG.md \u0026\u0026     apt-get --purge remove -y build-essential python3-dev gnupg2 \u0026\u0026     apt-get -q autoremove -y \u0026\u0026     rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "includes/scripts/",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "includes/supervisor/",
            "/etc/supervisor/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "includes/nginx/",
            "/etc/nginx/"
          ]
        },
        {
          "CmdLine": [
            "chown -R healthchecks:healthchecks   /etc/nginx   /var/lib/nginx   /var/log   /run"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "1000"
        },
        {
          "Name": "volume",
          "Volumes": [
            "$DATA_DIR"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8000/tcp"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "app:run"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}