{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Maintainer": "Yann Verry \u003cdocker@verry.org\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get dist-upgrade -y \u0026\u0026     apt-get -y install wget git build-essential zlib1g-dev zlib1g zlibc locales ca-certificates libssl-dev libreadline-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     git clone https://github.com/yanntech/cryptcheck-rails \u0026\u0026     git clone https://github.com/yanntech/cryptcheck"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/src"
        },
        {
          "Env": [
            {
              "Key": "OPENSSL_VERSION",
              "Value": "1.0.2d"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz \u0026\u0026     tar xf openssl-$OPENSSL_VERSION.tar.gz \u0026\u0026     cd openssl-$OPENSSL_VERSION \u0026\u0026     ./config shared \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /usr/local/share/ca-certificates/cacert.org \u0026\u0026     wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt \u0026\u0026     /usr/sbin/update-ca-certificates \u0026\u0026     rmdir /usr/local/ssl/certs \u0026\u0026     ln -s /etc/ssl/certs /usr/local/ssl/certs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "RUBY_MAJOR",
              "Value": "2.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBY_VERSION",
              "Value": "2.2.3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz \u0026\u0026     tar xf ruby-$RUBY_VERSION.tar.gz \u0026\u0026     cd ruby-$RUBY_VERSION \u0026\u0026     patch -p0 \u003c /opt/cryptcheck/ruby-openssl-dh.patch \u0026\u0026     ./configure --prefix=/usr --with-openssl=yes --with-openssl-dir=/usr/local/ssl \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/cryptcheck"
        },
        {
          "CmdLine": [
            "gem install bundler \u0026\u0026 \tbundle install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/cryptcheck-rails"
        },
        {
          "CmdLine": [
            "bundle install --without development \u0026\u0026 \tRAILS_ENV=staging bundle exec rake assets:precompile \u0026\u0026 \tbundle install --without development test assets \u0026\u0026 \tbundle clean --force \u0026\u0026 \tbundle install --deployment --without development test assets \u0026\u0026 \tgem install puma \u0026\u0026 \techo \"production:\\n  secret_key_base: $(rake secret)\" \u003e config/secrets.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y purge build-essential zlib1g-dev krb5-locales \u0026\u0026     apt-get -y autoremove"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "REDIS_URL",
              "Value": "redis://redis:6379/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ES_URL",
              "Value": "http://elasticsearch:9200/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RAILS_SERVE_STATIC_FILES",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "9292:9292"
          ]
        },
        {
          "CmdLine": [
            "/opt/cryptcheck-rails/docker/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}