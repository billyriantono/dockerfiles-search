MetaArgs: null
Stages:
- BaseName: php:7.3-apache
  Commands:
  - Maintainer: jiri dedic <jirded@gmail.com>
    Name: maintainer
  - CmdLine:
    - apt-get -y update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y     git     wget     libpng-dev     libjpeg-dev     libfreetype6-dev     libxml2-dev     libedit-dev     libicu-dev     libssl-dev     freetds-dev     libc-client-dev     libkrb5-dev     uuid-dev     rsyslog     libzip-dev     gcc     libpcre3-dev
    Name: run
    PrependShell: true
  - Env:
    - Key: PHPIZE_DEPS
      Value: libpcre3-dev
    Name: env
  - CmdLine:
    - docker-php-ext-configure gd --with-jpeg-dir=/usr/include/         --with-png-dir=/usr/include
      --with-freetype-dir=/usr/include/     && docker-php-ext-install -j$(nproc) gd     &&
      docker-php-ext-install -j$(nproc) soap     && docker-php-ext-install -j$(nproc)
      pdo_mysql     && docker-php-ext-install -j$(nproc) mysqli     && docker-php-ext-install
      -j$(nproc) intl     && docker-php-ext-install -j$(nproc) pcntl     && docker-php-ext-install
      -j$(nproc) zip     && docker-php-ext-install -j$(nproc) calendar     && docker-php-ext-install
      -j$(nproc) xmlrpc     && docker-php-ext-install -j$(nproc) sysvsem     && docker-php-ext-install
      -j$(nproc) bcmath     && docker-php-ext-configure pdo_dblib --with-libdir=/lib/x86_64-linux-gnu     &&
      docker-php-ext-install -j$(nproc) pdo_dblib
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install zip mbstring opcache &&     pecl install apcu-5.1.18
      &&     echo extension=apcu.so > /usr/local/etc/php/conf.d/apcu.ini &&     pecl
      install uuid &&     echo extension=uuid.so > /usr/local/etc/php/conf.d/uuid.ini
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-configure imap --with-kerberos --with-imap-ssl     && docker-php-ext-install
      imap
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install --yes git libzmq3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone git://github.com/mkoppanen/php-zmq.git  && cd php-zmq  && phpize &&
      ./configure  && make  && make install  && cd ..  && rm -fr php-zmq RUN docker-php-ext-enable
      zmq
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install -o -f redis     && docker-php-ext-enable redis
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install -o -f ds     && docker-php-ext-enable ds
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install sockets     && docker-php-ext-enable sockets
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install libevent-dev     && pecl install -o -f event     && docker-php-ext-enable
      event
    Name: run
    PrependShell: true
  - CmdLine:
    - version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;")     && curl -A
      "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version     &&
      tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp     && mv /tmp/blackfire-*.so $(php
      -r "echo ini_get('extension_dir');")/blackfire.so     && printf "extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n"
      > $PHP_INI_DIR/conf.d/blackfire.ini
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install xdebug
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-enable xdebug
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "xdebug.remote_enable=1" >> /usr/local/etc/php/php.ini
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "session.gc_maxlifetime=1209600" >> /usr/local/etc/php/php.ini
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install mongodb
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-enable mongodb
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y supervisor
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sS https://getcomposer.org/installer | php     && mv composer.phar /usr/bin/composer     &&
      composer global require hirak/prestissimo     && composer global require symplify/monorepo-builder     &&
      ln -s /root/.composer/vendor/bin/* /usr/local/bin/
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get -y upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install curl gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - 'mkdir -p /usr/local/etc     && {         echo ''install: --no-document'';         echo
      ''update: --no-document'';     } >> /usr/local/etc/gemrc'
    Name: run
    PrependShell: true
  - Env:
    - Key: RUBY_MAJOR
      Value: "2.4"
    Name: env
  - Env:
    - Key: RUBY_VERSION
      Value: 2.4.6
    Name: env
  - Env:
    - Key: RUBY_DOWNLOAD_SHA256
      Value: 25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c
    Name: env
  - Env:
    - Key: RUBYGEMS_VERSION
      Value: 3.0.3
    Name: env
  - CmdLine:
    - set -ex         && buildDeps='         bison         dpkg-dev         libgdbm-dev         ruby     '     &&
      apt-get update     && apt-get install -y --no-install-recommends $buildDeps     &&
      rm -rf /var/lib/apt/lists/*         && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"     &&
      echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -         && mkdir
      -p /usr/src/ruby     && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1     &&
      rm ruby.tar.xz         && cd /usr/src/ruby         && {         echo '#define
      ENABLE_PATH_CHECK 0';         echo;         cat file.c;     } > file.c.new     &&
      mv file.c.new file.c         && autoconf     && gnuArch="$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)"     && ./configure         --build="$gnuArch"         --disable-install-doc         --enable-shared     &&
      make -j "$(nproc)"     && make install         && apt-get purge -y --auto-remove
      $buildDeps     && cd /     && rm -r /usr/src/ruby     && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"])
      > Gem::Version.create(Gem::VERSION))'     && gem update --system "$RUBYGEMS_VERSION"
      && rm -r /root/.gem/     && ruby --version && gem --version && bundle --version
    Name: run
    PrependShell: true
  - Env:
    - Key: GEM_HOME
      Value: /usr/local/bundle
    Name: env
  - Env:
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    Name: env
  - Env:
    - Key: PATH
      Value: $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
    Name: env
  - CmdLine:
    - echo "$PATH"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install scss_lint
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y apt-utils && apt-get install -y curl
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install git mc htop vim
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-source delete     && rm -rf /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_8.x | bash -
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install npm
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install npm@latest -g
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install nodejs
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install gulp-cli -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install gulp -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install gulp-yarn -g --save-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install gulp-util -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install apiaryio -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install eslint -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install sass-lint -g
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install sass-lint-auto-fix -g
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-entrypoint
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-entrypoint
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/ssl-cert-snakeoil.key
      -out /etc/ssl/certs/ssl-cert-snakeoil.pem -subj "/C=AT/ST=Vienna/L=Vienna/O=Security/OU=Development/CN=localhost"
    Name: run
    PrependShell: true
  - CmdLine:
    - a2enmod rewrite
    Name: run
    PrependShell: true
  - CmdLine:
    - a2enmod ssl
    Name: run
    PrependShell: true
  - CmdLine:
    - a2ensite default-ssl
    Name: run
    PrependShell: true
  - CmdLine:
    - apache2-foreground
    Name: cmd
    PrependShell: false
  From:
    Image: php:7.3-apache
  Name: ""
  Platform: ""
  SourceCode: FROM php:7.3-apache
