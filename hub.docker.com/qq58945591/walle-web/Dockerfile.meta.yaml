MetaArgs: null
Stages:
- BaseName: alpine:latest
  Commands:
  - Maintainer: YoungMan "bushengquan@eastspider.com"
    Name: maintainer
  - Labels:
    - Key: description
      Value: '"walle-web集成Nginx,MariaDB,PHP版"'
    Name: label
  - Env:
    - Key: PHPIZE_DEPS
      Value: "autoconf \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf
        \t\tre2c"
    Name: env
  - CmdLine:
    - "set -xe \t&&apk add --no-cache --virtual .persistent-deps \t\tca-certificates
      \t\topenssl \t\tcurl \t\ttar \t\txz         \tgit         \tnginx         \tmariadb
      \        \tmariadb-client         \tunzip         \tsubversion         \tansible
      \        \topenssh-client"
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /etc/php
    Name: env
  - CmdLine:
    - mkdir -p $PHP_INI_DIR/conf.d &&         mkdir -p /etc/ansible &&         touch
      /etc/ansible/hosts &&         wget -q -O /etc/ansible/ansible.cfg https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 5.6.26
    Name: env
  - Env:
    - Key: PHP_FILENAME
      Value: php-5.6.26.tar.xz
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: 203a854f0f243cb2810d1c832bc871ff133eccdf1ff69d32846f93bc1bef58a8
    Name: env
  - Env:
    - Key: REDIS_VERSION
      Value: 2.2.8
    Name: env
  - Env:
    - Key: REDIS_FILENAME
      Value: redis-2.2.8.tgz
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t&& mkdir
      -p /usr/src \t&& cd /usr/src \t&& curl -fSL \"https://secure.php.net/get/$PHP_FILENAME/from/this/mirror\"
      -o php.tar.xz     \t&& apk add --no-cache --virtual .build-deps     \t\t$PHPIZE_DEPS
      \    \t\tcurl-dev     \t\tlibedit-dev     \t\tlibxml2-dev \t\tlibssh2-dev \t\tlibressl-dev
      \    \t\tsqlite-dev             \tgettext             \tlibmcrypt-dev             \ticu-libs
      \            \tzlib-dev     \t\tlibpng-dev \t\tintltool \t\tgettext-dev \t\ticu
      \t\ticu-dev \t\tlibvpx-dev \t\tlibjpeg-turbo-dev \t\tfreetype-dev \t\timap-dev
      \t\tbzip2-dev     \t&& docker-php-source extract     \t&& cd /usr/src/php \t&&
      wget http://pecl.php.net/get/$REDIS_FILENAME -O /usr/src/php/ext/redis.tgz \t&&
      tar xf /usr/src/php/ext/redis.tgz -C /usr/src/php/ext \t&& mv /usr/src/php/ext/redis-${REDIS_VERSION}
      /usr/src/php/ext/redis     \t&& ./configure     \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \    \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\"     \t\t    \t\t--disable-cgi
      \t\t--disable-ipv6     \t\t    \t\t--enable-ftp     \t\t--enable-mbstring     \t\t--enable-mysqlnd
      \t\t--enable-sockets \t\t--enable-sysvsem \t\t--enable-sysvshm \t\t--enable-opcache
      \t\t--enable-exif \t\t--enable-zip \t\t--enable-intl \t\t--enable-mbregex     \t\t\t\t--with-pcre-regex
      \    \t\t--with-curl     \t\t--with-libedit     \t\t--with-openssl     \t\t--with-mysql
      \    \t\t--with-zlib \t\t--with-mcrypt \t\t--with-gettext \t\t--with-readline
      \t\t--with-gd \t\t--with-mhash \t\t--with-iconv-dir \t\t--with-pcre-dir \t\t--with-jpeg-dir
      \t\t--with-png-dir \t\t--with-vpx-dir \t\t--with-freetype-dir \t\t--with-imap
      \t\t--with-litespeed \t\t--with-bz2     \t\t    \t\t$PHP_EXTRA_CONFIGURE_ARGS
      \    \t&& make -j\"$(getconf _NPROCESSORS_ONLN)\"     \t&& make install \t&&
      cp php.ini-production $PHP_INI_DIR/php.ini \t&& cd /usr/src/php/ext/redis \t&&
      phpize \t&& ./configure --with-php-config=/usr/local/bin/php-config \t&& make
      \t&& make install \t&& echo 'extension=\"redis.so\"' >> $PHP_INI_DIR/php.ini
      \t&& cd /usr/src/php     \t&& { find /usr/local/bin /usr/local/sbin -type f
      -perm +0111 -exec strip --strip-all '{}' + || true; }     \t&& make clean     \t&&
      docker-php-source delete     \t    \t&& runDeps=\"$(     \t\tscanelf --needed
      --nobanner --recursive /usr/local     \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2);
      print \"so:\" $2 }'     \t\t\t| sort -u     \t\t\t| xargs -r apk info --installed
      \    \t\t\t| sort -u     \t)\"     \t&& apk add --no-cache --virtual .php-rundeps
      $runDeps"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex     && cd /etc     && if [ -d php-fpm.d ]; then         sed 's!=NONE/!=!g'
      php-fpm.conf.default | tee php-fpm.conf > /dev/null;         cp php-fpm.d/www.conf.default
      php-fpm.d/www.conf;     else         mkdir php-fpm.d;         cp php-fpm.conf.default
      php-fpm.d/www.conf;         {             echo '[global]';             echo
      'include=/etc/php-fpm.d/*.conf';         } | tee php-fpm.conf;     fi     &&
      {         echo '[global]';         echo 'error_log = /proc/self/fd/2';         echo
      'daemonize = no';         echo;         echo '[www]';         echo 'access.log
      = /proc/self/fd/2';         echo 'clear_env = no';         echo 'catch_workers_output
      = yes';         echo 'user = nginx';         echo 'group = nginx';         echo
      'listen.backlog = 4096';         echo 'listen.owner = nginx';         echo 'listen.group
      = nginx';         echo 'listen.mode = 0660';         echo 'listen = [::]:9000';
      \        echo ';listen = /var/run/php-fpm.sock';         echo 'rlimit_files
      = 65536';         echo 'pm = dynamic';         echo 'pm.max_children = 150';
      \        echo 'pm.start_servers = 10';         echo 'pm.min_spare_servers =
      10';         echo 'pm.max_spare_servers = 100';         echo 'request_terminate_timeout
      = 10m';     \t} | tee php-fpm.d/socket.conf \t&& ln -s /etc/php-fpm.conf /usr/local/etc/php-fpm.conf"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-ext-*
    - /usr/local/bin/
  - CmdLine:
    - docker-php-ext-install bcmath intl mbstring mcrypt mysqli opcache pdo_mysql
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./walle.ini
    - /etc/php/conf.d/walle.ini
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./entrypoint.sh
    - /entrypoint.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./nginx.conf
    - /etc/nginx/nginx.conf
  - Name: workdir
    Path: /opt/walle-web
  - CmdLine:
    - curl -sS https://getcomposer.org/installer | php       && mv composer.phar /usr/local/bin/composer       &&
      chmod +x /usr/local/bin/composer
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/meolu/walle-web /opt/walle-web       &&composer
      install --prefer-dist --no-dev --optimize-autoloader -vvvv       && chmod +x
      /entrypoint.sh       && chown -R nginx:nginx /opt/walle-web       && mkdir -p
      /opt/mysql/walle       && chown -R mysql:mysql /opt/mysql/walle       && apk
      del .build-deps       && apk del .fetch-deps       && rm -rf /usr/src/php*
    Name: run
    PrependShell: true
  - Env:
    - Key: SERVER_NAME
      Value: '"walle.company.com"'
    - Key: DATADIR
      Value: '"/opt/mysql"'
    Name: env
  - Name: expose
    Ports:
    - "3306"
    - "80"
    - "9000"
  - Name: volume
    Volumes:
    - /opt/walle-web
    - /opt/mysql
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - php-fpm
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:latest
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:latest
