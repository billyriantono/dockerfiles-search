{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "storezhang/alpine:3.8",
      "SourceCode": "FROM storezhang/alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "storezhang/alpine:3.8"
      },
      "Commands": [
        {
          "Maintainer": "storezhang \"storezhang@gmail.com\"",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "architecture",
              "Value": "\"AMD64/x86_64\""
            },
            {
              "Key": "version",
              "Value": "\"latest\""
            },
            {
              "Key": "build",
              "Value": "\"2018-11-22\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "set -ex;     postgresHome=\"$(getent passwd postgres)\";     postgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\";     [ \"$postgresHome\" = '/var/lib/postgresql' ];     mkdir -p \"$postgresHome\";     chown -R postgres:postgres \"$postgresHome\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.utf8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /docker-entrypoint-initdb.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PG_MAJOR",
              "Value": "11"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PG_VERSION",
              "Value": "11.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PG_SHA256",
              "Value": "90815e812874831e9a4bf6e1136bf73bc2c5a0464ef142e2dfea40cda206db08"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "POSTGRES_USER",
              "Value": "postgres"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "POSTGRES_PASSWORD",
              "Value": "35b2d803"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "POSTGRES_DB",
              "Value": "postgres"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex         \u0026\u0026 apk add --no-cache --virtual .fetch-deps         ca-certificates         openssl         tar         \u0026\u0026 wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\"     \u0026\u0026 echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c -     \u0026\u0026 mkdir -p /usr/src/postgresql     \u0026\u0026 tar         --extract         --file postgresql.tar.bz2         --directory /usr/src/postgresql         --strip-components 1     \u0026\u0026 rm postgresql.tar.bz2         \u0026\u0026 apk add --no-cache --virtual .build-deps         bison         coreutils         dpkg-dev dpkg         flex         gcc         libc-dev         libedit-dev         libxml2-dev         libxslt-dev         make         openssl-dev         perl-utils         perl-ipc-run         util-linux-dev         zlib-dev         icu-dev         \u0026\u0026 cd /usr/src/postgresql     \u0026\u0026 awk '$1 == \"#define\" \u0026\u0026 $2 == \"DEFAULT_PGSOCKET_DIR\" \u0026\u0026 $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h \u003e src/include/pg_config_manual.h.new     \u0026\u0026 grep '/var/run/postgresql' src/include/pg_config_manual.h.new     \u0026\u0026 mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h     \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"     \u0026\u0026 wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'     \u0026\u0026 wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'     \u0026\u0026 ./configure         --build=\"$gnuArch\"         --enable-integer-datetimes         --enable-thread-safety         --enable-tap-tests         --disable-rpath         --with-uuid=e2fs         --with-gnu-ld         --with-pgport=5432         --with-system-tzdata=/usr/share/zoneinfo         --prefix=/usr/local         --with-includes=/usr/local/include         --with-libraries=/usr/local/lib                 --with-openssl         --with-libxml         --with-libxslt         --with-icu     \u0026\u0026 make -j \"$(nproc)\" world     \u0026\u0026 make install-world     \u0026\u0026 make -C contrib install         \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner --format '%n#p' --recursive /usr/local             | tr ',' '\\n'             | sort -u             | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }'     )\"     \u0026\u0026 apk add --no-cache --virtual .postgresql-rundeps         $runDeps         bash         su-exec         tzdata     \u0026\u0026 apk del .fetch-deps .build-deps     \u0026\u0026 cd /     \u0026\u0026 rm -rf         /usr/src/postgresql         /usr/local/share/doc         /usr/local/share/man     \u0026\u0026 find /usr/local -name '*.a' -delete"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/run/postgresql \u0026\u0026 chown -R postgres:postgres /var/run/postgresql \u0026\u0026 chmod 2777 /var/run/postgresql"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PGDATA",
              "Value": "/var/lib/postgresql/data"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p \"$PGDATA\" \u0026\u0026 chown -R postgres:postgres \"$PGDATA\" \u0026\u0026 chmod 777 \"$PGDATA\" # this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/postgresql/data"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "5432"
          ]
        },
        {
          "CmdLine": [
            "postgres"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}