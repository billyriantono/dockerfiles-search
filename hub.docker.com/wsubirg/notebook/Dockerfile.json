{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-devel-ubuntu17.04",
      "SourceCode": "FROM nvidia/cuda:9.0-devel-ubuntu17.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-devel-ubuntu17.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Daniel P. Foose \u003cdpfoose@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     libopenblas-dev     wget     bzip2     ca-certificates     sudo     locales     fonts-liberation     build-essential     emacs     git     inkscape     jed     libsm6     libxext-dev     libxrender1     lmodern     pandoc     python-dev     texlive-fonts-extra     texlive-fonts-recommended     texlive-generic-recommended     texlive-latex-base     texlive-latex-extra     texlive-xetex     vim     unzip     fonts-dejavu     tzdata     gfortran"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \u0026\u0026     echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \u0026\u0026     mv tini /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            },
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            },
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            },
            {
              "Key": "HOME",
              "Value": "/home/$NB_USER"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "fix-permissions",
            "/usr/local/bin/fix-permissions"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p $CONDA_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \u0026\u0026     /bin/bash Miniconda3-latest-Linux-x86_64.sh -f -b -p$CONDA_DIR \u0026\u0026     rm Miniconda3-latest-Linux-x86_64.sh \u0026\u0026     $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \u0026\u0026     $CONDA_DIR/bin/conda config --system --set auto_update_conda false \u0026\u0026     $CONDA_DIR/bin/conda config --system --set show_channel_urls true \u0026\u0026     $CONDA_DIR/bin/conda update --all --quiet --yes \u0026\u0026     $CONDA_DIR/bin/conda clean -tipsy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "environment3.yml",
            "/tmp/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "environment2.yml",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "$CONDA_DIR/bin/conda install notebook jupyterlab widgetsnbextension jupyterhub"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "$CONDA_DIR/bin/conda env create -f /tmp/environment3.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "$CONDA_DIR/bin/conda env create -f /tmp/environment2.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "$CONDA_DIR/bin/conda clean -tipsy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter labextension install @jupyterlab/hub-extension \u0026\u0026     rm -rf $CONDA_DIR/share/jupyter/lab/staging \u0026\u0026     jupyter nbextension enable --py widgetsnbextension --sys-prefix \u0026\u0026     jupyter labextension install @jupyter-widgets/jupyterlab-manager"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py27 \u0026\u0026     conda remove --quiet --yes --force qt pyqt\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py36 \u0026\u0026     conda remove --quiet --yes --force qt pyqt\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     git clone https://github.com/PAIR-code/facets.git \u0026\u0026     cd facets \u0026\u0026     jupyter nbextension install facets-dist/ --sys-prefix \u0026\u0026     rm -rf facets"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py36 \u0026\u0026 ipython kernel install --name py36\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py27 \u0026\u0026 ipython kernel install --name python-2.7\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JULIA_PKGDIR",
              "Value": "/opt/julia"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_VERSION",
              "Value": "0.6.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /opt/julia-0.6.1 \u0026\u0026     cd /tmp \u0026\u0026     wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-0.6.1-linux-x86_64.tar.gz \u0026\u0026     tar xzf julia-0.6.1-linux-x86_64.tar.gz -C /opt/julia-0.6.1 --strip-components=1 \u0026\u0026     rm /tmp/julia-0.6.1-linux-x86_64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/julia \u0026\u0026     echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" \u003e\u003e /etc/julia/juliarc.jl \u0026\u0026     echo \"\" \u003e\u003e /etc/julia/juliarc.jl \u0026\u0026     echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/envs/py36/lib\\\")\" \u003e\u003e /etc/julia/juliarc.jl \u0026\u0026     mkdir $JULIA_PKGDIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "julia -e 'Pkg.init()' \u0026\u0026     julia -e 'Pkg.update()' \u0026\u0026     julia -e 'Pkg.add(\"HDF5\")' \u0026\u0026     julia -e 'Pkg.add(\"Gadfly\")' \u0026\u0026     julia -e 'Pkg.add(\"RDatasets\")' \u0026\u0026     julia -e 'Pkg.add(\"IJulia\")' \u0026\u0026     julia -e 'using HDF5' \u0026\u0026     julia -e 'using Gadfly' \u0026\u0026     julia -e 'using RDatasets' \u0026\u0026     julia -e 'using IJulia' \u0026\u0026     mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/envs/py36/share/jupyter/kernels/ \u0026\u0026     chmod -R go+rx $CONDA_DIR/share/jupyter \u0026\u0026     rm -rf $HOME/.local"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start-singleuser.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-notebook.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-singleuser.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/etc/jupyter/"
          ]
        },
        {
          "Env": [
            {
              "Key": "XDG_CACHE_HOME",
              "Value": "/home/$NB_USER/.cache/"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py36 \u0026\u0026     MPLBACKEND=Agg python -c \\\"import matplotlib.pyplot\\\"\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source $CONDA_DIR/bin/activate py27 \u0026\u0026     MPLBACKEND=Agg python -c \\\"import matplotlib.pyplot\\\"\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "nvblas.conf",
            "/usr/local/cuda"
          ]
        },
        {
          "Env": [
            {
              "Key": "NVBLAS_CONFIG_FILE",
              "Value": "/usr/local/cuda/nvblas.conf"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"NVBLAS_CONFIG_FILE=/usr/local/cuda/nvblas.conf\" \u003e\u003e /etc/profile.d/nvblas.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_PRELOAD",
              "Value": "/usr/local/cuda/lib64/libnvblas.so /usr/lib/libopenblas.so"
            }
          ],
          "Name": "env"
        }
      ]
    }
  ]
}