MetaArgs: null
Stages:
- BaseName: nvidia/cuda:10.1-runtime-ubuntu18.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.7.4
    Name: env
  - CmdLine:
    - apt update && apt install -y apt-transport-https ca-certificates wget gnupg
      libopenblas-base --no-install-recommends
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add
      -
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt -y update && apt -y install build-essential gcc gfortran libpcre3-dev libmagic1
      libmagickwand-dev wget git xvfb sudo       xauth libgtk2.0-0 libgconf-2-4 google-chrome-stable
      poppler-utils inkscape libssl-dev --no-install-recommends &&       rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update
      && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev
      \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev
      \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake
      \t\ttk-dev \t\tuuid-dev \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null
      || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-optimizations \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi
      \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tPROFILE_TASK='-m test.regrtest
      --pgo \t\t\ttest_array \t\t\ttest_base64 \t\t\ttest_binascii \t\t\ttest_binhex
      \t\t\ttest_binop \t\t\ttest_bytes \t\t\ttest_c_locale_coercion \t\t\ttest_class
      \t\t\ttest_cmath \t\t\ttest_codecs \t\t\ttest_compile \t\t\ttest_complex \t\t\ttest_csv
      \t\t\ttest_decimal \t\t\ttest_dict \t\t\ttest_float \t\t\ttest_fstring \t\t\ttest_hashlib
      \t\t\ttest_io \t\t\ttest_iter \t\t\ttest_json \t\t\ttest_long \t\t\ttest_math
      \t\t\ttest_memoryview \t\t\ttest_pickle \t\t\ttest_re \t\t\ttest_set \t\t\ttest_slice
      \t\t\ttest_struct \t\t\ttest_threading \t\t\ttest_time \t\t\ttest_traceback
      \t\t\ttest_unicode \t\t' \t&& make install \t&& ldconfig \t\t&& apt-mark auto
      '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type
      f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/
      { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut
      -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove
      -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/*
      \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o
      -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name
      '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&&
      python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.2.2
    Name: env
  - Env:
    - Key: PYTHON_GET_PIP_URL
      Value: https://github.com/pypa/get-pip/raw/0c72a3b4ece313faccb446a96c84770ccedc5ec5/get-pip.py
    Name: env
  - Env:
    - Key: PYTHON_GET_PIP_SHA256
      Value: 201edc6df416da971e64cc94992d2dd24bc328bada7444f0c4f2031ae31e8dad
    Name: env
  - CmdLine:
    - "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends wget; \t\twget -O get-pip.py \"$PYTHON_GET_PIP_URL\";
      \techo \"$PYTHON_GET_PIP_SHA256 *get-pip.py\" | sha256sum --check --strict -;
      \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual
      $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;
      \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check
      \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind
      /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests
      \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\)
      \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "NVBLAS_CPU_BLAS_LIB /usr/lib/x86_64-linux-gnu/libopenblas.so.0" >> /usr/local/cuda/nvblas.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "NVBLAS_GPU_LIST ALL0" >> /usr/local/cuda/nvblas.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "NVBLAS_LOGFILE /var/log/nvblas.log" >> /usr/local/cuda/nvblas.conf
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage
    - .
  - CmdLine:
    - chmod +x orca-1.2.1-x86_64.AppImage
    Name: run
    PrependShell: true
  - CmdLine:
    - ./orca-1.2.1-x86_64.AppImage --appimage-extract && rm -rf orca-1.2.1-x86_64.AppImage
    Name: run
    PrependShell: true
  - CmdLine:
    - mv /squashfs-root/app /orca && mv /squashfs-root/usr/lib/* /usr/lib && rm -rf
      /squashfs-root
    Name: run
    PrependShell: true
  - CmdLine:
    - echo '#!/bin/bash' >> /usr/bin/orca && echo 'sudo xvfb-run -a /orca/orca "$@"'
      >> /usr/bin/orca
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x /usr/bin/orca
    Name: run
    PrependShell: true
  From:
    Image: nvidia/cuda:10.1-runtime-ubuntu18.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:10.1-runtime-ubuntu18.04
