MetaArgs:
- DefaultValue: 1.17.4
  Key: NGINX_VERSION
  ProvidedValue: null
  Value: 1.17.4
- DefaultValue: 1.1.7.10
  Key: NGINX_RTMP_VERSION
  ProvidedValue: null
  Value: 1.1.7.10
- DefaultValue: dev
  Key: NGINX_RTMP_BRANCH
  ProvidedValue: null
  Value: dev
- DefaultValue: '"3bf75232676da7eeff85dcd0fc831533a5eafe6b"'
  Key: NGINX_RTMP_COMMIT
  ProvidedValue: null
  Value: '"3bf75232676da7eeff85dcd0fc831533a5eafe6b"'
- DefaultValue: "4.1"
  Key: FFMPEG_VERSION
  ProvidedValue: null
  Value: "4.1"
Stages:
- As: build-nginx
  BaseName: alpine:3.8
  Commands:
  - Key: NGINX_VERSION
    Name: arg
    Value: null
  - Key: NGINX_RTMP_VERSION
    Name: arg
    Value: null
  - CmdLine:
    - apk add --update   build-base   ca-certificates   curl   gcc   libc-dev   libgcc   linux-headers   make   musl-dev   openssl   openssl-dev   pcre   pcre-dev   pkgconf   pkgconfig   zlib-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp &&   wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz &&   tar
      zxf nginx-${NGINX_VERSION}.tar.gz &&   rm nginx-${NGINX_VERSION}.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp &&   echo https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/archive/${NGINX_RTMP_COMMIT}.tar.gz
      && wget https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/archive/3bf75232676da7eeff85dcd0fc831533a5eafe6b.tar.gz
      &&   tar zxf 3bf75232676da7eeff85dcd0fc831533a5eafe6b.tar.gz && rm 3bf75232676da7eeff85dcd0fc831533a5eafe6b.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /tmp/nginx-${NGINX_VERSION} && \t./configure \t\t--with-compat \t\t--add-dynamic-module=/tmp/nginx-rtmp-module-3bf75232676da7eeff85dcd0fc831533a5eafe6b
      \t\t&& \tcd /tmp/nginx-${NGINX_VERSION} && mkdir -p /etc/nginx/modules && make
      modules && cp -r objs/* /etc/nginx/modules/"
    Name: run
    PrependShell: true
  From:
    Image: alpine:3.8
  Name: build-nginx
  Platform: ""
  SourceCode: FROM alpine:3.8 as build-nginx
- As: build-ffmpeg
  BaseName: alpine:3.8
  Commands:
  - Key: FFMPEG_VERSION
    Name: arg
    Value: null
  - Key: PREFIX
    Name: arg
    Value: /usr/local
  - Key: MAKEFLAGS
    Name: arg
    Value: '"-j4"'
  - CmdLine:
    - apk add --update   build-base   freetype-dev   lame-dev   libogg-dev   libass   libass-dev   libvpx-dev   libvorbis-dev   libwebp-dev   libtheora-dev   opus-dev   pkgconf   pkgconfig   rtmpdump-dev   wget   x264-dev   x265-dev   yasm
    Name: run
    PrependShell: true
  - CmdLine:
    - echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update fdk-aac-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp/ &&   wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz
      &&   tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz && rm ffmpeg-${FFMPEG_VERSION}.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp/ffmpeg-${FFMPEG_VERSION} &&   ./configure   --prefix=${PREFIX}   --enable-version3   --enable-gpl   --enable-nonfree   --enable-small   --enable-libmp3lame   --enable-libx264   --enable-libx265   --enable-libvpx   --enable-libtheora   --enable-libvorbis   --enable-libopus   --enable-libfdk-aac   --enable-libass   --enable-libwebp   --enable-librtmp   --enable-postproc   --enable-avresample   --enable-libfreetype   --enable-openssl   --disable-debug   --disable-doc   --disable-ffplay   --extra-libs="-lpthread
      -lm" &&   make && make install && make distclean
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/cache/* /tmp/*
    Name: run
    PrependShell: true
  From:
    Image: alpine:3.8
  Name: build-ffmpeg
  Platform: ""
  SourceCode: FROM alpine:3.8 as build-ffmpeg
- BaseName: lsiobase/nginx:3.10
  Commands:
  - Chown: ""
    From: build-nginx
    Name: copy
    SourcesAndDest:
    - /etc/nginx/modules
    - /usr/lib/nginx/modules
  - Chown: ""
    From: build-ffmpeg
    Name: copy
    SourcesAndDest:
    - /usr/local
    - /usr/local
  - Chown: ""
    From: build-ffmpeg
    Name: copy
    SourcesAndDest:
    - /usr/lib/libfdk-aac.so.2
    - /usr/lib/libfdk-aac.so.2
  - Key: BUILD_DATE
    Name: arg
    Value: null
  - Key: VERSION
    Name: arg
    Value: null
  - Key: CERTBOT_VERSION
    Name: arg
    Value: null
  - Labels:
    - Key: build_version
      Value: '"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}"'
    Name: label
  - Labels:
    - Key: maintainer
      Value: '"aptalca"'
    Name: label
  - Env:
    - Key: DHLEVEL
      Value: "2048"
    - Key: ONLY_SUBDOMAINS
      Value: "false"
    - Key: AWS_CONFIG_FILE
      Value: /config/dns-conf/route53.ini
    Name: env
  - Env:
    - Key: S6_BEHAVIOUR_IF_STAGE2_FAILS
      Value: "2"
    Name: env
  - CmdLine:
    - "echo \"**** install runtime packages ****\" &&  apk add --no-cache --upgrade
      \tcurl \tfail2ban \tgnupg \tmemcached \tnginx \tnginx-mod-http-echo \tnginx-mod-http-fancyindex
      \tnginx-mod-http-geoip2 \tnginx-mod-http-headers-more \tnginx-mod-http-image-filter
      \tnginx-mod-http-lua \tnginx-mod-http-lua-upstream \tnginx-mod-http-nchan \tnginx-mod-http-perl
      \tnginx-mod-http-redis2 \tnginx-mod-http-set-misc \tnginx-mod-http-upload-progress
      \tnginx-mod-http-xslt-filter \tnginx-mod-mail \tnginx-mod-rtmp \tnginx-mod-stream
      \tnginx-vim \tphp7-bcmath \tphp7-bz2 \tphp7-ctype \tphp7-curl \tphp7-dom \tphp7-exif
      \tphp7-ftp \tphp7-gd \tphp7-iconv \tphp7-intl \tphp7-ldap \tphp7-mcrypt \tphp7-memcached
      \tphp7-mysqli \tphp7-mysqlnd \tphp7-opcache \tphp7-pdo_mysql \tphp7-pdo_pgsql
      \tphp7-pdo_sqlite \tphp7-pear \tphp7-pecl-redis \tphp7-pgsql \tphp7-phar \tphp7-posix
      \tphp7-soap \tphp7-sockets \tphp7-sqlite3 \tphp7-tokenizer \tphp7-xml \tphp7-xmlreader
      \tphp7-xmlrpc \tphp7-zip \tffmpeg \tphp7-cli php7-cgi php7-fpm \tpy3-cryptography
      \tpy3-future \tpy3-pip &&  echo \"**** install certbot plugins ****\" &&  if
      [ -z ${CERTBOT_VERSION+x} ]; then         CERTBOT=\"certbot\";  else         CERTBOT=\"certbot==${CERTBOT_VERSION}\";
      \ fi &&  pip3 install -U \tpip &&  pip3 install -U \t${CERTBOT} \tcertbot-dns-cloudflare
      \tcertbot-dns-cloudxns \tcertbot-dns-digitalocean \tcertbot-dns-dnsimple \tcertbot-dns-dnsmadeeasy
      \tcertbot-dns-google \tcertbot-dns-inwx \tcertbot-dns-luadns \tcertbot-dns-nsone
      \tcertbot-dns-ovh \tcertbot-dns-rfc2136 \tcertbot-dns-route53 \trequests &&
      \ echo \"**** remove unnecessary fail2ban filters ****\" &&  rm \t/etc/fail2ban/jail.d/alpine-ssh.conf
      &&  echo \"**** copy fail2ban default action and filter to /default ****\" &&
      \ mkdir -p /defaults/fail2ban &&  mv /etc/fail2ban/action.d /defaults/fail2ban/
      &&  mv /etc/fail2ban/filter.d /defaults/fail2ban/ &&  echo \"**** copy proxy
      confs to /default ****\" &&  mkdir -p /defaults/proxy-confs &&  curl -o \t/tmp/proxy.tar.gz
      -L \t\"https://github.com/linuxserver/reverse-proxy-confs/tarball/master\" &&
      \ tar xf \t/tmp/proxy.tar.gz -C \t/defaults/proxy-confs --strip-components=1
      --exclude=linux*/.gitattributes --exclude=linux*/.github --exclude=linux*/.gitignore
      --exclude=linux*/LICENSE &&  echo \"**** configure nginx ****\" &&  rm -f /etc/nginx/conf.d/default.conf
      &&  echo \"**** cleanup ****\" &&  for cleanfiles in *.pyc *.pyo; \tdo \tfind
      /usr/lib/python3.*  -iname \"${cleanfiles}\" -exec rm -f '{}' + \t; done &&
      \ rm -rf \t/tmp/* \t/root/.cache"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - root/
    - /
  From:
    Image: lsiobase/nginx:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM lsiobase/nginx:3.10
