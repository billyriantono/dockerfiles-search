{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:latest",
      "SourceCode": "FROM alpine:latest",
      "Platform": "",
      "From": {
        "Image": "alpine:latest"
      },
      "Commands": [
        {
          "Maintainer": "Troy Kelly \u003ctroy.kelly@really.ai\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "VERSION",
              "Value": "1.15.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENSSL_VERSION",
              "Value": "1.1.1a"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBPNG_VERSION",
              "Value": "1.6.35"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LUAJIT_VERSION",
              "Value": "2.0.5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGXDEVELKIT_VERSION",
              "Value": "0.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGXLUA_VERSION",
              "Value": "0.10.13"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MODSECURITY",
              "Value": "3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OWASPCRS_VERSION",
              "Value": "3.0.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.7.1"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VCS_REF",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "OPENSSL_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "LIBPNG_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "LUAJIT_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "MODSECURITY",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "OWASPCRS_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "PYTHON_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "org.label-schema.build-date",
              "Value": "$BUILD_DATE"
            },
            {
              "Key": "org.label-schema.name",
              "Value": "\"NGINX with ModSecurity, Certbot and lua support\""
            },
            {
              "Key": "org.label-schema.description",
              "Value": "\"Provides nginx ${VERSION} with ModSecurity v${MODSECURITY} (OWASP ModSecurity Core Rule Set CRS ${OWASPCRS_VERSION}) and lua (LuaJIT v${LUAJIT_VERSION}) support for certbot --nginx. Built with OpenSSL v${OPENSSL_VERSION} and LibPNG v${LIBPNG_VERSION}. Using Python ${PYTHON_VERSION} for Let's Encrypt Certbot\""
            },
            {
              "Key": "org.label-schema.url",
              "Value": "\"https://really.ai/about/opensource\""
            },
            {
              "Key": "org.label-schema.vcs-ref",
              "Value": "$VCS_REF"
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/reallyreally/docker-nginx-modsecurity\""
            },
            {
              "Key": "org.label-schema.vendor",
              "Value": "\"Really Really, Inc.\""
            },
            {
              "Key": "org.label-schema.version",
              "Value": "v$VERSION"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"1.0\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "build_pkgs=\"alpine-sdk apr-dev apr-util-dev autoconf automake binutils-gold curl curl-dev g++ gcc geoip-dev git gnupg icu-dev libcurl libffi-dev libjpeg-turbo-dev libstdc++ libtool libxml2-dev linux-headers lmdb-dev m4 make openssh-client pcre-dev pcre2-dev perl pkgconf wget yajl-dev zlib-dev\" \u0026\u0026   runtime_pkgs=\"ca-certificates pcre apr-util libjpeg-turbo icu icu-libs yajl lua geoip libxml2 lua5.3-maxminddb libffi\" \u0026\u0026   apk add --update --no-cache ${build_pkgs} ${runtime_pkgs} \u0026\u0026   mkdir -p /src /var/log/nginx /run/nginx /var/cache/nginx \u0026\u0026   addgroup nginx \u0026\u0026   adduser -s /usr/sbin/nologin -G nginx -D nginx \u0026\u0026   cd /src \u0026\u0026   git clone --depth 1 -b v${MODSECURITY}/master --single-branch https://github.com/SpiderLabs/ModSecurity \u0026\u0026   git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git \u0026\u0026   wget -qO - https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://nginx.org/download/nginx-${VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://prdownloads.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://github.com/simpl/ngx_devel_kit/archive/v${NGXDEVELKIT_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://github.com/openresty/lua-nginx-module/archive/v${NGXLUA_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v${OWASPCRS_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz | tar xzf  - -C /src \u0026\u0026   wget -qO /src/modsecurity.conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v${MODSECURITY}/master/modsecurity.conf-recommended \u0026\u0026   cd /src/openssl-${OPENSSL_VERSION} \u0026\u0026   ./config no-async -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)' \u0026\u0026   make -j$(nproc) depend \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   cd /src/Python-${PYTHON_VERSION} \u0026\u0026   ./configure --build=$CBUILD --host=$CHOST --prefix=/usr --enable-shared \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   python3 -m ensurepip \u0026\u0026   pip3 install --upgrade pip setuptools \u0026\u0026   if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi \u0026\u0026   if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi \u0026\u0026   cd /src/LuaJIT-${LUAJIT_VERSION} \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   cd /src/libpng-${LIBPNG_VERSION} \u0026\u0026   ./configure --build=$CBUILD --host=$CHOST --prefix=/usr --enable-shared --with-libpng-compat \u0026\u0026   make -j$(nproc) install V=0 \u0026\u0026   cd /src/ModSecurity \u0026\u0026   git submodule init \u0026\u0026   git submodule update \u0026\u0026   ./build.sh \u0026\u0026   ./configure \u0026\u0026   make -j$(nproc) \u0026\u0026   make install \u0026\u0026   cd /src/nginx-${VERSION} \u0026\u0026   ./configure   \t--prefix=/etc/nginx   \t--sbin-path=/usr/sbin/nginx   \t--conf-path=/etc/nginx/nginx.conf   \t--error-log-path=/var/log/nginx/error.log   \t--http-log-path=/var/log/nginx/access.log   \t--pid-path=/var/run/nginx.pid   \t--lock-path=/var/run/nginx.lock   \t--http-client-body-temp-path=/var/cache/nginx/client_temp   \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp   \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp   \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp   \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp   \t--user=nginx   \t--group=nginx   \t--with-http_ssl_module   \t--with-http_realip_module   \t--with-http_addition_module   \t--with-http_sub_module   \t--with-http_dav_module   \t--with-http_flv_module   \t--with-http_mp4_module   \t--with-http_gunzip_module   \t--with-http_gzip_static_module   \t--with-http_random_index_module   \t--with-http_secure_link_module   \t--with-http_stub_status_module   \t--with-http_auth_request_module   \t--without-http_autoindex_module   \t--without-http_ssi_module   \t--with-threads   \t--with-stream   \t--with-stream_ssl_module   \t--with-mail   \t--with-mail_ssl_module   \t--with-file-aio   \t--with-http_v2_module     --with-cc-opt=\"-fPIC -I /usr/include/apr-1\"     --with-ld-opt=\"-luuid -lapr-1 -laprutil-1 -licudata -licuuc -lpng16 -lturbojpeg -ljpeg\"     --with-openssl-opt=\"no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2\"   \t--with-ipv6   \t--with-pcre-jit   \t--with-openssl=/src/openssl-${OPENSSL_VERSION}     --add-module=/src/ngx_devel_kit-${NGXDEVELKIT_VERSION}     --add-module=/src/lua-nginx-module-${NGXLUA_VERSION}     --add-dynamic-module=/src/ModSecurity-nginx \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   make -j$(nproc) modules \u0026\u0026   cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules \u0026\u0026   sed -i 's!#user  nobody!user nginx nginx!g' /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^    # another virtual host!include /etc/nginx/conf.d/*.conf;\\n    # another virtual host!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^    #gzip  on;!    #gzip  on;\\n    server_names_hash_max_size 6144;\\n    server_names_hash_bucket_size 128;\\n\\nmodsecurity on;\\nmodsecurity_rules_file /etc/nginx/modsec/modsec_includes.conf;\\n!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^        #error_page  404              /404.html;!        include /etc/nginx/insert.d/*.conf;\\n\\n        #error_page  404              /404.html;!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i 's!events {!load_module modules/ngx_http_modsecurity_module.so;\\n\\nevents {!g' /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^        server_name  localhost;!        server_name  localhost;\\n\\n        #include /etc/nginx/modsec/modsec_on.conf;!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^            index  index.html index.htm;!            index  index.html index.htm;\\n            #include /etc/nginx/modsec/modsec_rules.conf;!g\" /etc/nginx/nginx.conf \u0026\u0026   cd ~ \u0026\u0026   git clone https://github.com/certbot/certbot \u0026\u0026   cd certbot \u0026\u0026   CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\" /usr/bin/pip install -r ./readthedocs.org.requirements.txt \u0026\u0026   CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\" /usr/bin/pip install --no-cache-dir \t--editable ./acme \t--editable ./certbot-dns-cloudxns \t--editable ./certbot-dns-digitalocean \t--editable ./certbot-dns-dnsimple \t--editable ./certbot-dns-dnsmadeeasy \t--editable ./certbot-dns-gehirn \t--editable ./certbot-dns-google \t--editable ./certbot-dns-linode \t--editable ./certbot-dns-luadns \t--editable ./certbot-dns-nsone \t--editable ./certbot-dns-ovh \t--editable ./certbot-dns-rfc2136 \t--editable ./certbot-dns-route53 \t--editable ./certbot-dns-sakuracloud \t--editable ./certbot-nginx \t--editable ./ \u0026\u0026   CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\" /usr/bin/pip install dns-lexicon \u0026\u0026   /usr/bin/certbot --version \u0026\u0026   mkdir -p /etc/nginx/modsec/conf.d \u0026\u0026   echo -e \"# Example placeholder\\n\" \u003e /etc/nginx/modsec/conf.d/example.conf \u0026\u0026   echo -e \"# Include the recommended configuration\\nInclude /etc/nginx/modsec/modsecurity.conf\\n# User generated\\nInclude /etc/nginx/modsec/conf.d/*.conf\\n\\n# OWASP CRS v${MODSECURITY} rules\\nInclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/crs-setup.conf\\nInclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/*.conf\\n\" \u003e /etc/nginx/modsec/main.conf \u0026\u0026   echo -e \"# For inclusion and centralized control\\nmodsecurity on;\\n\" \u003e /etc/nginx/modsec/modsec_on.conf \u0026\u0026   echo -e \"# For inclusion and centralized control\\nmodsecurity_rules_file /etc/nginx/modsec/modsec_includes.conf;\\n\" \u003e /etc/nginx/modsec/modsec_rules.conf \u0026\u0026   echo -e \"# For inclusion and centralized control\\ninclude /etc/nginx/modsec/modsecurity.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/crs-setup.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-901-INITIALIZATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-905-COMMON-EXCEPTIONS.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-910-IP-REPUTATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-911-METHOD-ENFORCEMENT.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-912-DOS-PROTECTION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-913-SCANNER-DETECTION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-921-PROTOCOL-ATTACK.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-931-APPLICATION-ATTACK-RFI.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-933-APPLICATION-ATTACK-PHP.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-949-BLOCKING-EVALUATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-950-DATA-LEAKAGES.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-951-DATA-LEAKAGES-SQL.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-952-DATA-LEAKAGES-JAVA.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-954-DATA-LEAKAGES-IIS.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-959-BLOCKING-EVALUATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-980-CORRELATION.conf\\ninclude /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf\\n\" \u003e /etc/nginx/modsec/modsec_includes.conf \u0026\u0026   mv /src/modsecurity.conf /etc/nginx/modsec \u0026\u0026   sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' /etc/nginx/modsec/modsecurity.conf \u0026\u0026   sed -i 's!SecAuditLog /var/log/modsec_audit.log!SecAuditLog /var/log/nginx/modsec_audit.log!g' /etc/nginx/modsec/modsecurity.conf \u0026\u0026   mv /src/owasp-modsecurity-crs-${OWASPCRS_VERSION} /usr/local/ \u0026\u0026   mv /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \u0026\u0026   mv /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \u0026\u0026   cp /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/crs-setup.conf.example /usr/local/owasp-modsecurity-crs-${OWASPCRS_VERSION}/crs-setup.conf \u0026\u0026   curl https://raw.githubusercontent.com/SpiderLabs/ModSecurity/49495f1925a14f74f93cb0ef01172e5abc3e4c55/unicode.mapping -o /etc/nginx/modsec/unicode.mapping \u0026\u0026   apk del ${build_pkgs} \u0026\u0026   apk add ${runtime_pkgs} \u0026\u0026   apk add gcc make perl \u0026\u0026   cd /src/openssl-${OPENSSL_VERSION} \u0026\u0026   make -j$(nproc) install \u0026\u0026   if [ -f /usr/bin/openssl ]; then rm -f /usr/bin/openssl; fi \u0026\u0026   if [ -f /usr/local/ssl/bin/openssl ]; then ln -s /usr/local/ssl/bin/openssl /usr/bin/; fi \u0026\u0026   if [ -f /usr/local/bin/openssl ]; then ln -s /usr/local/bin/openssl /usr/bin/; fi \u0026\u0026   cd ~ \u0026\u0026   apk del perl gcc make \u0026\u0026   rm -Rf /src \u0026\u0026   rm -Rf ~/.cache \u0026\u0026   echo -e \"#!/usr/bin/env sh\\n\\nif [ -f \"/usr/bin/certbot\" ]; then\\n  /usr/bin/certbot renew\\nfi\\n\" \u003e /etc/periodic/daily/certrenew \u0026\u0026   chmod 755 /etc/periodic/daily/certrenew \u0026\u0026   chown -R nginx:nginx /run/nginx /var/log/nginx /var/cache/nginx /etc/nginx \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/nginx.conf\\n\" \u0026\u0026   cat /etc/nginx/nginx.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/conf.d/example.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/conf.d/example.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/main.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/main.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/modsecurity.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/modsecurity.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/modsec_on.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/modsec_on.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/modsec_rules.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/modsec_rules.conf \u0026\u0026   echo -e \"\\n\\n** /etc/nginx/modsec/modsec_includes.conf\\n\" \u0026\u0026   cat /etc/nginx/modsec/modsec_includes.conf \u0026\u0026   echo -e \"\\n\\n** /etc/periodic/daily/certrenew\\n\" \u0026\u0026   cat /etc/periodic/daily/certrenew"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "certbot.default.sh",
            "/usr/local/sbin/"
          ]
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}