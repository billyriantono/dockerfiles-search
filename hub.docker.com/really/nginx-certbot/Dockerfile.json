{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:latest",
      "SourceCode": "FROM alpine:latest",
      "Platform": "",
      "From": {
        "Image": "alpine:latest"
      },
      "Commands": [
        {
          "Maintainer": "Troy Kelly \u003ctroy.kelly@really.ai\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "VERSION",
              "Value": "1.13.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENSSL_VERSION",
              "Value": "1.0.2m"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBPNG_VERSION",
              "Value": "1.6.34"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LUAJIT_VERSION",
              "Value": "2.0.5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGXDEVELKIT_VERSION",
              "Value": "0.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGXLUA_VERSION",
              "Value": "0.10.12rc1"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VCS_REF",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "OPENSSL_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "LIBPNG_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "LUAJIT_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "org.label-schema.build-date",
              "Value": "$BUILD_DATE"
            },
            {
              "Key": "org.label-schema.name",
              "Value": "\"NGINX with Certbot and lua support\""
            },
            {
              "Key": "org.label-schema.description",
              "Value": "\"Provides nginx ${VERSION} with lua (LuaJIT v${LUAJIT_VERSION}) support for certbot --nginx. Built with OpenSSL v${OPENSSL_VERSION} and LibPNG v${LIBPNG_VERSION}\""
            },
            {
              "Key": "org.label-schema.url",
              "Value": "\"https://really.ai/about/opensource\""
            },
            {
              "Key": "org.label-schema.vcs-ref",
              "Value": "$VCS_REF"
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/reallyreally/docker-nginx-certbot\""
            },
            {
              "Key": "org.label-schema.vendor",
              "Value": "\"Really Really, Inc.\""
            },
            {
              "Key": "org.label-schema.version",
              "Value": "v$VERSION"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"1.0\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "build_pkgs=\"alpine-sdk curl perl libffi-dev py-pip linux-headers pcre-dev zlib-dev apr-dev apr-util-dev libjpeg-turbo-dev icu-dev python2-dev\" \u0026\u0026   runtime_pkgs=\"ca-certificates pcre apr-util libjpeg-turbo icu icu-libs python2 py-setuptools\" \u0026\u0026   apk add --update --no-cache ${build_pkgs} ${runtime_pkgs} \u0026\u0026   mkdir -p /src /var/log/nginx /run/nginx /var/cache/nginx \u0026\u0026   addgroup nginx \u0026\u0026   adduser -s /usr/sbin/nologin -G nginx -D nginx \u0026\u0026   cd /src \u0026\u0026   wget -qO - https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://nginx.org/download/nginx-${VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://prdownloads.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://github.com/simpl/ngx_devel_kit/archive/v${NGXDEVELKIT_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   wget -qO - https://github.com/openresty/lua-nginx-module/archive/v${NGXLUA_VERSION}.tar.gz | tar xzf  - -C /src \u0026\u0026   cd /src/LuaJIT-${LUAJIT_VERSION} \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   cd /src/libpng-${LIBPNG_VERSION} \u0026\u0026   ./configure --build=$CBUILD --host=$CHOST --prefix=/usr --enable-shared --with-libpng-compat \u0026\u0026   make -j$(nproc) install V=0 \u0026\u0026   cd /src/openssl-${OPENSSL_VERSION} \u0026\u0026   ./config no-async \u0026\u0026   make -j$(nproc) depend \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   cd /src/nginx-${VERSION} \u0026\u0026   ./configure   \t--prefix=/etc/nginx   \t--sbin-path=/usr/sbin/nginx   \t--conf-path=/etc/nginx/nginx.conf   \t--error-log-path=/var/log/nginx/error.log   \t--http-log-path=/var/log/nginx/access.log   \t--pid-path=/var/run/nginx.pid   \t--lock-path=/var/run/nginx.lock   \t--http-client-body-temp-path=/var/cache/nginx/client_temp   \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp   \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp   \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp   \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp   \t--user=nginx   \t--group=nginx   \t--with-http_ssl_module   \t--with-http_realip_module   \t--with-http_addition_module   \t--with-http_sub_module   \t--with-http_dav_module   \t--with-http_flv_module   \t--with-http_mp4_module   \t--with-http_gunzip_module   \t--with-http_gzip_static_module   \t--with-http_random_index_module   \t--with-http_secure_link_module   \t--with-http_stub_status_module   \t--with-http_auth_request_module   \t--without-http_autoindex_module   \t--without-http_ssi_module   \t--with-threads   \t--with-stream   \t--with-stream_ssl_module   \t--with-mail   \t--with-mail_ssl_module   \t--with-file-aio   \t--with-http_v2_module     --with-cc-opt=\"-fPIC -I /usr/include/apr-1\"     --with-ld-opt=\"-luuid -lapr-1 -laprutil-1 -licudata -licuuc -lpng16 -lturbojpeg -ljpeg\"     --with-openssl-opt=\"no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2\"   \t--with-ipv6   \t--with-pcre-jit   \t--with-openssl=/src/openssl-${OPENSSL_VERSION}     --add-module=/src/ngx_devel_kit-${NGXDEVELKIT_VERSION}     --add-module=/src/lua-nginx-module-${NGXLUA_VERSION} \u0026\u0026   make -j$(nproc) \u0026\u0026   make -j$(nproc) install \u0026\u0026   sed -i 's!#user  nobody!user nginx nginx!g' /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^    # another virtual host!include /etc/nginx/conf.d/*.conf;\\n    # another virtual host!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^    #gzip  on;!    #gzip  on;\\n    server_names_hash_max_size 6144;\\n    server_names_hash_bucket_size 128;\\n!g\" /etc/nginx/nginx.conf \u0026\u0026   sed -i \"s!^        #error_page  404              /404.html;!        include /etc/nginx/insert.d/*.conf;\\n\\n        #error_page  404              /404.html;!g\" /etc/nginx/nginx.conf \u0026\u0026   cat /etc/nginx/nginx.conf \u0026\u0026   cd ~ \u0026\u0026   pip install virtualenv \u0026\u0026   virtualenv /env \u0026\u0026   git clone https://github.com/certbot/certbot \u0026\u0026   cd certbot \u0026\u0026   /env/bin/pip install -r ./readthedocs.org.requirements.txt \u0026\u0026   export VENV_ARGS=\"--python $(command -v python2 || command -v python2.7)\" \u0026\u0026   tools/_venv_common.sh -e acme -e . -e certbot-apache -e certbot-nginx \u0026\u0026   ln -s /root/certbot/venv/bin/certbot /usr/bin/certbot \u0026\u0026   apk del ${build_pkgs} \u0026\u0026   apk add ${runtime_pkgs} \u0026\u0026   apk add gcc make perl \u0026\u0026   cd /src/openssl-${OPENSSL_VERSION} \u0026\u0026   make -j$(nproc) install \u0026\u0026   ln -s /usr/local/ssl/bin/openssl /usr/bin/ \u0026\u0026   cd ~ \u0026\u0026   apk del perl gcc make \u0026\u0026   rm -Rf /src \u0026\u0026   echo -e \"#!/usr/bin/env sh\\n\\nif [ -f \"/usr/bin/certbot\" ]; then\\n  /usr/bin/certbot renew\\nfi\\n\" \u003e /etc/periodic/daily/certrenew \u0026\u0026   chmod 755 /etc/periodic/daily/certrenew \u0026\u0026   chown -R nginx:nginx /run/nginx /var/log/nginx /var/cache/nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}