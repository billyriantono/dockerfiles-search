{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Maintainer": "https://github.com/NII-cloud-operation",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "REPO=http://cdn-fastly.deb.debian.org  \u0026\u0026 echo \"deb $REPO/debian jessie main\\ndeb $REPO/debian jessie-updates main\\ndeb $REPO/debian-security jessie/updates main\" \u003e /etc/apt/sources.list  \u0026\u0026 apt-get update \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     wget     bzip2     ca-certificates     sudo     locales  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \u0026\u0026     echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \u0026\u0026     mv tini /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "bit_kun"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \u0026\u0026     mkdir /home/$NB_USER/.jupyter \u0026\u0026     chown -R $NB_USER:users /home/$NB_USER/.jupyter \u0026\u0026     echo \"$NB_USER ALL=(ALL) NOPASSWD: ALL\" \u003e /etc/sudoers.d/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c 'apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends              curl python2.7-dev python2.7 build-essential \u0026\u0026              curl -L https://bootstrap.pypa.io/get-pip.py | python2.7 \u0026\u0026              pip2 install -U pip setuptools six \u0026\u0026              apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install jupyter \u0026\u0026     pip install pandas matplotlib numpy                 seaborn scipy scikit-learn scikit-image                 sympy cython patsy                 statsmodels cloudpickle dill bokeh h5py \u0026\u0026     apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends     git     vim     jed     emacs     unzip     libsm6     pandoc     texlive-latex-base     texlive-latex-extra     texlive-fonts-extra     texlive-fonts-recommended     texlive-generic-recommended     libxrender1     inkscape     wget     curl     fonts-ipafont-gothic fonts-ipafont-mincho     \u0026\u0026 apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "conf",
            "/tmp/"
          ]
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.jupyter \u0026\u0026     cp -f /tmp/jupyter_notebook_config.py        $HOME/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "cat /tmp/sitecustomize.py \u003e\u003e /usr/lib/python2.7/sitecustomize.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "-c"
          ]
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get -y install sshpass openssl ipmitool libssl-dev libffi-dev groff \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026     pip install requests paramiko ansible ansible-tower-cli awscli boto boto3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y virtinst dnsutils zip tree jq \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026     pip install netaddr pyapi-gitlab runipy                 pysnmp pysnmp-mibs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/ansible \u0026\u0026 cp /tmp/ansible.cfg /etc/ansible/ansible.cfg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA3_DIR",
              "Value": "/opt/conda3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     mkdir -p $CONDA3_DIR \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh \u0026\u0026     echo \"c59b3dd3cad550ac7596e0d599b91e75d88826db132e4146030ef471bb434e9a *Miniconda3-4.2.12-Linux-x86_64.sh\" | sha256sum -c - \u0026\u0026     /bin/bash Miniconda3-4.2.12-Linux-x86_64.sh -f -b -p $CONDA3_DIR \u0026\u0026     rm Miniconda3-4.2.12-Linux-x86_64.sh \u0026\u0026     $CONDA3_DIR/bin/conda config --system --add channels conda-forge \u0026\u0026     $CONDA3_DIR/bin/conda config --system --set auto_update_conda false \u0026\u0026     $CONDA3_DIR/bin/conda install --quiet --yes     notebook matplotlib pandas pip \u0026\u0026     $CONDA3_DIR/bin/conda clean -tipsy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install jupyter_nbextensions_configurator \u0026\u0026     pip install six     https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master \u0026\u0026     pip install git+https://github.com/NII-cloud-operation/Jupyter-i18n_cells.git \u0026\u0026     pip install https://github.com/NII-cloud-operation/Jupyter-LC_nblineage/tarball/master \u0026\u0026     pip install https://github.com/NII-cloud-operation/Jupyter-LC_run_through/tarball/master \u0026\u0026     pip install https://github.com/NII-cloud-operation/Jupyter-LC_wrapper/tarball/master \u0026\u0026     pip install git+https://github.com/NII-cloud-operation/Jupyter-multi_outputs \u0026\u0026     pip install git+https://github.com/NII-cloud-operation/Jupyter-LC_index.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.local/share \u0026\u0026     jupyter contrib nbextension install --user \u0026\u0026     jupyter nbextension install --py nbextension_i18n_cells --user \u0026\u0026     jupyter nbextension enable --py nbextension_i18n_cells --user \u0026\u0026     jupyter nblineage quick-setup --user \u0026\u0026     jupyter run-through quick-setup --user \u0026\u0026     jupyter nbextension install --py lc_multi_outputs --user \u0026\u0026     jupyter nbextension enable --py lc_multi_outputs --user \u0026\u0026     jupyter nbextension install --py notebook_index --user \u0026\u0026     jupyter nbextension enable --py notebook_index --user \u0026\u0026     jupyter kernelspec install /tmp/kernels/python2-wrapper --user"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "$CONDA3_DIR/bin/pip install     https://github.com/NII-cloud-operation/Jupyter-LC_wrapper/tarball/master \u0026\u0026     $CONDA3_DIR/bin/pip install jupyter_nbextensions_configurator ipywidgets \u0026\u0026     $CONDA3_DIR/bin/pip install https://github.com/NII-cloud-operation/Jupyter-LC_nblineage/tarball/master \u0026\u0026     $CONDA3_DIR/bin/pip install bash_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "$CONDA3_DIR/bin/ipython kernel install --user \u0026\u0026     $CONDA3_DIR/bin/python -m bash_kernel.install --user \u0026\u0026     $CONDA3_DIR/bin/jupyter kernelspec install /tmp/kernels/python3-wrapper --user \u0026\u0026     $CONDA3_DIR/bin/jupyter kernelspec install /tmp/kernels/bash-wrapper --user \u0026\u0026     $CONDA3_DIR/bin/jupyter nblineage quick-setup --user \u0026\u0026     $CONDA3_DIR/bin/jupyter nbextension enable --user --py widgetsnbextension"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "mkdir -p /notebooks"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "sample-notebooks",
            "/notebooks"
          ]
        },
        {
          "CmdLine": [
            "chown $NB_USER:users -R /notebooks"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/notebooks"
        },
        {
          "CmdLine": [
            "cp /tmp/bash_env /etc/bash_env"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BASH_ENV",
              "Value": "/etc/bash_env"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.jupyter/nbconfig \u0026\u0026     cp /tmp/notebook.json $HOME/.jupyter/nbconfig/notebook.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.jupyter/custom/ \u0026\u0026     cd /tmp/ \u0026\u0026 curl -O http://fontawesome.io/assets/font-awesome-4.7.0.zip \u0026\u0026     unzip font-awesome-4.7.0.zip \u0026\u0026 cp -fr font-awesome-4.7.0/fonts $HOME/.jupyter/custom/ \u0026\u0026     cp /tmp/custom.css $HOME/.jupyter/custom/custom.css \u0026\u0026     cp /tmp/logo.png $HOME/.jupyter/custom/logo.png \u0026\u0026     sed -e s,../fonts/,./fonts/,g font-awesome-4.7.0/css/font-awesome.css \u003e\u003e $HOME/.jupyter/custom/custom.css"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.ipython/profile_default/startup \u0026\u0026     cp /tmp/10-custom-get_ipython_system.py $HOME/.ipython/profile_default/startup/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "jupyter",
            "notebook"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}