{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "stage1",
      "BaseName": "huggla/alpine-official:20180927-edge",
      "SourceCode": "FROM huggla/alpine-official:20180927-edge as stage1",
      "Platform": "",
      "As": "stage1",
      "From": {
        "Image": "huggla/alpine-official:20180927-edge"
      },
      "Commands": [
        {
          "Key": "APKS",
          "Name": "arg",
          "Value": "\"libressl2.7-libcrypto libressl2.7-libssl apk-tools\""
        },
        {
          "CmdLine": [
            "apk --no-cache --quiet manifest $APKS | awk -F \"  \" '{print $2;}' \u003e /apks_files.list  \u0026\u0026 tar -cvp -f /apks_files.tar -T /apks_files.list -C /  \u0026\u0026 rm -rf /lib/apk/db  \u0026\u0026 apk add --initdb  \u0026\u0026 mkdir -p /rootfs/rootfs/lib /rootfs/rootfs/etc /rootfs/rootfs/usr/local/bin /rootfs/etc/apk /rootfs/lib/apk /rootfs/var/cache/apk /rootfs/bin /rootfs/sbin /rootfs/usr/bin /rootfs/usr/sbin /rootfs/usr/local/bin /rootfs/tmp /rootfs/run  \u0026\u0026 cp -a /etc/apk/repositories /etc/apk/keys /rootfs/etc/apk/  \u0026\u0026 touch /rootfs/etc/apk/world  \u0026\u0026 cp -a /lib/apk/db /rootfs/lib/apk/  \u0026\u0026 tar -xvp -f /apks_files.tar -C /rootfs/  \u0026\u0026 cp -a /lib/libz.so* /lib/*musl* /rootfs/lib/  \u0026\u0026 cp -a /bin/busybox /bin/sh /rootfs/bin/  \u0026\u0026 cp -a $(find /bin/* -type l | xargs) /rootfs/bin/  \u0026\u0026 cp -a $(find /sbin/* -type l | xargs) /rootfs/sbin/  \u0026\u0026 cp -a $(find /usr/bin/* -type l | xargs) /rootfs/usr/bin/  \u0026\u0026 cp -a $(find /usr/sbin/* -type l | xargs) /rootfs/usr/sbin/  \u0026\u0026 echo 'root:x:0:0:root:/dev/null:/sbin/nologin' \u003e /rootfs/etc/passwd  \u0026\u0026 echo 'root:x:0:root' \u003e /rootfs/etc/group  \u0026\u0026 echo 'root:::0:::::' \u003e /rootfs/etc/shadow  \u0026\u0026 chmod o= /rootfs/etc/*  \u0026\u0026 chmod ugo=rwx /rootfs/tmp  \u0026\u0026 cd /rootfs/var  \u0026\u0026 ln -s ../tmp tmp  \u0026\u0026 cd /rootfs/rootfs/lib  \u0026\u0026 ln -s ../../lib/apk apk  \u0026\u0026 cd /rootfs/rootfs/etc  \u0026\u0026 ln -s ../../etc/apk apk  \u0026\u0026 find /rootfs -type l -exec sh -c 'for x; do [ -e \"$x\" ] || rm \"$x\"; done' _ {} +"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "scratch",
      "SourceCode": "FROM scratch",
      "Platform": "",
      "From": {
        "Scratch": true
      },
      "Commands": [
        {
          "Chown": "",
          "From": "stage1",
          "Name": "copy",
          "SourcesAndDest": [
            "/rootfs",
            "/"
          ]
        },
        {
          "Expression": "ARG ADDREPOS",
          "Name": "onbuild"
        },
        {
          "Expression": "ARG RUNDEPS",
          "Name": "onbuild"
        },
        {
          "Expression": "ARG RUNDEPS_TESTING",
          "Name": "onbuild"
        },
        {
          "Expression": "ARG BUILDDEPS",
          "Name": "onbuild"
        },
        {
          "Expression": "ARG BUILDDEPS_TESTING",
          "Name": "onbuild"
        },
        {
          "Expression": "ARG RUNCMDS",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY --from=stage2 / /",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY ./rootfs /rootfs",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN rm -f /Dockerfile          \u0026\u0026 echo $ADDREPOS \u003e\u003e /etc/apk/repositories          \u0026\u0026 apk --no-cache --root /rootfs --virtual .rundeps add $RUNDEPS          \u0026\u0026 apk --no-cache --root /rootfs --allow-untrusted --virtual .rundeps_testing add $RUNDEPS_TESTING          \u0026\u0026 apk --no-cache --virtual .builddeps add $BUILDDEPS          \u0026\u0026 apk --no-cache --allow-untrusted --virtual .builddeps_testing add $BUILDDEPS_TESTING          \u0026\u0026 eval \"$RUNCMDS\"",
          "Name": "onbuild"
        }
      ]
    }
  ]
}