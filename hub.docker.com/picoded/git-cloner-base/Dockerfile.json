{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "picoded/ubuntu-base",
      "SourceCode": "FROM picoded/ubuntu-base",
      "Platform": "",
      "From": {
        "Image": "picoded/ubuntu-base"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y git \u0026\u0026 apt-get clean;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GIT_REPO",
              "Value": "\"https://github.com/picoded/dockerfiles.git\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_COMMIT",
              "Value": "\"master\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_FOLDER",
              "Value": "\".\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_PRESCRIPT",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_POSTSCRIPT",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo '#!/bin/bash'                                                               \u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"###\"'                                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"### Start of picoded/git-cloner : entrypoint/git-cloner.sh\"'          \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"###\"'                                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '# Enters the /workspace'                                                    \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'cd /workspace;'                                                             \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'if [ -n \"$GIT_PRESCRIPT\" ]; then '                                          \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '   eval \"$GIT_PRESCRIPT\";'                                                  \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'fi '                                                                        \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '# Ensures the git repo is cloned'                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'if [ ! -d \"$GIT_FOLDER/.git\" ]; then '                                      \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '   git clone --recursive \"$GIT_REPO\" \"$GIT_FOLDER\";'                        \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'fi '                                                                        \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '# Enter git repo and pull updates (if needed)'                              \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'cd \"$GIT_FOLDER\"'                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'git fetch;'                                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'git checkout \"$GIT_COMMIT\";'                                                \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'git pull;'                                                                  \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'if [ -n \"$GIT_POSTSCRIPT\" ]; then '                                         \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo '   eval \"$GIT_POSTSCRIPT\";'                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'fi '                                                                        \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"###\"'                                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"### Finished picoded/git-cloner : entrypoint/git-cloner.sh\"'          \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'echo \"###\"'                                                                 \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo ''                                                                           \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'cd \"/workspace/$GIT_FOLDER/\"'                                               \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \techo 'exec \"$@\"'                                                                  \u003e\u003e /entrypoint/git-cloner.sh \u0026\u0026 \tchmod +x /entrypoint/git-cloner.sh;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/entrypoint/primer.sh",
            "/entrypoint/git-cloner.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "echo \"hello world : run your actual command here\""
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}