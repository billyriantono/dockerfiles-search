MetaArgs: null
Stages:
- BaseName: node:10-alpine
  Commands:
  - Key: TAG
    Name: arg
    Value: null
  - Labels:
    - Key: Author
      Value: '"rrdfe"'
    Name: label
  - Labels:
    - Key: Description
      Value: '"noah system is used for hot update of react native"'
    Name: label
  - CmdLine:
    - echo -e "http://mirrors.ustc.edu.cn/alpine/v3.8/main\nhttp://mirrors.ustc.edu.cn/alpine/v3.8/community"
      > /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - apk --update add git openssh &&     rm -rf /var/lib/apt/lists/* &&     rm /var/cache/apk/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: PYTHONIOENCODING
      Value: UTF-8
    Name: env
  - CmdLine:
    - apk add --no-cache ca-certificates
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 2.7.15
    Name: env
  - CmdLine:
    - "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz
      \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils
      \t\tdpkg-dev dpkg \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibnsl-dev
      \t\tlibressl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev
      \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev
      \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared
      \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\"
      \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name
      '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t|
      tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \"
      ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache
      --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth
      \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o
      \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec
      rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: "18.1"
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /usr/mysql-app
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /usr/mysql-app
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - startup.sh
    - /usr/mysql-app/startup.sh
  - CmdLine:
    - apk add --update mysql mysql-client && rm -f /var/cache/apk/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - my.cnf
    - /etc/mysql/my.cnf
  - CmdLine:
    - addgroup -S redis && adduser -S -G redis redis
    Name: run
    PrependShell: true
  - CmdLine:
    - "apk add --no-cache \t\t'su-exec>=0.2' \t\ttzdata"
    Name: run
    PrependShell: true
  - Env:
    - Key: REDIS_VERSION
      Value: 4.0.11
    Name: env
  - Env:
    - Key: REDIS_DOWNLOAD_URL
      Value: http://download.redis.io/releases/redis-4.0.11.tar.gz
    Name: env
  - Env:
    - Key: REDIS_DOWNLOAD_SHA
      Value: fc53e73ae7586bcdacb4b63875d1ff04f68c5474c1ddeda78f00e5ae2eed1bbb
    Name: env
  - CmdLine:
    - "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\tcoreutils \t\tgcc
      \t\tjemalloc-dev \t\tlinux-headers \t\tmake \t\tmusl-dev \t; \t\twget -O redis.tar.gz
      \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum
      -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;
      \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;
      \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h;
      \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;
      \t\tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install;
      \t\trm -r /usr/src/redis; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format
      '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk
      'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1
      }' \t)\"; \tapk add --virtual .redis-rundeps $runDeps; \tapk del .build-deps;
      \t\tredis-server --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /data && chown redis:redis /data
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /data
  - Name: workdir
    Path: /data
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - redis.conf
    - /etc/redis/redis.conf
  - Env:
    - Key: NODE_ENV
      Value: production
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - start-noah.sh
    - /usr/local/bin/
  - CmdLine:
    - mkdir -p ~/.ssh/
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - id_rsa.pub
    - /root/.ssh/id_rsa.pub
  - CmdLine:
    - mkdir -p /usr/app
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/app/
  - CmdLine:
    - apk add --update make
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update g++
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update bash
    Name: run
    PrependShell: true
  - CmdLine:
    - npm config set registry https://registry.npm.taobao.org
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g yarn
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g pm2@latest
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir ~/.npm-global
    Name: run
    PrependShell: true
  - CmdLine:
    - npm config set prefix '~/.npm-global'
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ~/.npm-global/bin:$PATH
    Name: env
  - CmdLine:
    - npm install -g leek-cli --unsafe-perm --registry https://registry.npmjs.org/
      --sass-binary-site=http://npm.taobao.org/mirrors/node-sass
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/rrd-fe/noah-system.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/app/noah-system
  - CmdLine:
    - yarn install
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /usr/app/noah-log/pm2log
    Name: run
    PrependShell: true
  - CmdLine:
    - yarn run docker:deploy
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/app
  - CmdLine:
    - git clone https://github.com/rrd-fe/react-native-tinker-node-api-demo.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/app/react-native-tinker-node-api-demo
  - CmdLine:
    - yarn install
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "9030"
  - Name: expose
    Ports:
    - "3000"
  - Name: expose
    Ports:
    - "3306"
  - CmdLine:
    - /usr/local/bin/start-noah.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: node:10-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM node:10-alpine
