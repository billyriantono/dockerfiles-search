{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "ZeroCho \u003czerohch0@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "CLOUD_SDK_VERSION",
              "Value": "247.0.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -qqy update \u0026\u0026 apt-get -qqy upgrade \u0026\u0026 apt-get install -qqy         curl         gcc         openjdk-8-jdk         python-dev         python-setuptools         python-pip         apt-transport-https         lsb-release         openssh-client         git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install -U crcmod   \u0026\u0026     export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" \u0026\u0026     echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" \u003e /etc/apt/sources.list.d/google-cloud-sdk.list \u0026\u0026     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y google-cloud-sdk=${CLOUD_SDK_VERSION}-0         google-cloud-sdk-app-engine-python         google-cloud-sdk-app-engine-java         google-cloud-sdk-app-engine-go         google-cloud-sdk-datalab         google-cloud-sdk-datastore-emulator         google-cloud-sdk-pubsub-emulator         google-cloud-sdk-bigtable-emulator         google-cloud-sdk-cbt         kubectl \u0026\u0026     gcloud config set core/disable_usage_reporting true \u0026\u0026     gcloud config set component_manager/disable_update_check true \u0026\u0026     gcloud config set metrics/environment github_docker_image"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'APT::Get::Assume-Yes \"true\";' \u003e /etc/apt/apt.conf.d/90circleci   \u0026\u0026 echo 'APT::Get::force-Yes \"true\";' \u003e\u003e /etc/apt/apt.conf.d/90circleci   \u0026\u0026 echo 'DPkg::Options \"--force-confnew\";' \u003e\u003e /etc/apt/apt.conf.d/90circleci"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update   \u0026\u0026 apt-get install -y  -q --no-install-recommends     git mercurial xvfb     locales sudo openssh-client ca-certificates tar gzip parallel     net-tools netcat unzip zip bzip2 apt-transport-https build-essential libssl-dev     curl g++ gcc git make wget \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026 apt-get -y autoclean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen C.UTF-8 || true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "JQ_URL=$(curl --location --fail --retry 3 https://api.github.com/repos/stedolan/jq/releases/latest  | grep browser_download_url | grep '/jq-linux64\"' | grep -o -e 'https.*jq-linux64')   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL   \u0026\u0026 chmod +x /usr/bin/jq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 export DOCKER_VERSION=$(curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/  | grep -P -o 'docker-\\d+\\.\\d+\\.\\d+-ce\\.tgz' | head -n 1)   \u0026\u0026 DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\"   \u0026\u0026 echo Docker URL: $DOCKER_URL   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\"   \u0026\u0026 ls -lha /tmp/docker.tgz   \u0026\u0026 tar -xz -C /tmp -f /tmp/docker.tgz   \u0026\u0026 mv /tmp/docker/* /usr/bin   \u0026\u0026 rm -rf /tmp/docker /tmp/docker.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "COMPOSE_URL=$(curl --location --fail --retry 3 https://api.github.com/repos/docker/compose/releases/latest | jq -r '.assets[] | select(.name == \"docker-compose-Linux-x86_64\") | .browser_download_url')   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL   \u0026\u0026 chmod +x /usr/bin/docker-compose"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "DOCKERIZE_URL=$(curl --location --fail --retry 3 https://api.github.com/repos/jwilder/dockerize/releases/latest | jq -r '.assets[] | select(.name | startswith(\"dockerize-linux-amd64\")) | .browser_download_url')   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL   \u0026\u0026 tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz   \u0026\u0026 rm -rf /tmp/dockerize-linux-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd --gid 3434 circleci   \u0026\u0026 useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci   \u0026\u0026 echo 'circleci ALL=NOPASSWD: ALL' \u003e\u003e /etc/sudoers.d/50-circleci   \u0026\u0026 echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' \u003e\u003e /etc/sudoers.d/env_keep"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "circleci"
        },
        {
          "Env": [
            {
              "Key": "NPM_CONFIG_LOGLEVEL",
              "Value": "info"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "12.13.1"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update --fix-missing"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm /bin/sh \u0026\u0026 ln -s /bin/bash /bin/sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/nvm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod 775 /usr/local/nvm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown circleci:circleci /usr/local/nvm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "circleci"
        },
        {
          "Env": [
            {
              "Key": "NVM_DIR",
              "Value": "/usr/local/nvm"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash     \u0026\u0026 source $NVM_DIR/nvm.sh     \u0026\u0026 nvm install $NODE_VERSION     \u0026\u0026 nvm alias default $NODE_VERSION     \u0026\u0026 nvm use default"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_PATH",
              "Value": "$NVM_DIR/v$NODE_VERSION/lib/node_modules"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "npm i -g npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "node"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}