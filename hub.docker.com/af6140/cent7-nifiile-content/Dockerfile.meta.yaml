MetaArgs: null
Stages:
- BaseName: ansibleplaybookbundle/apb-base
  Commands:
  - Labels:
    - Key: '"com.redhat.apb.spec"'
      Value: '""'
    Name: label
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - playbooks
    - /opt/apb/project
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - playbooks
    - /opt/apb/actions
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - roles
    - /opt/ansible/roles
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - vars
    - /opt/ansible/vars
  - CmdLine:
    - chmod -R g=u /opt/{ansible,apb}
    Name: run
    PrependShell: true
  - Name: user
    User: apb
  From:
    Image: ansibleplaybookbundle/apb-base
  Name: ""
  Platform: ""
  SourceCode: FROM ansibleplaybookbundle/apb-base
