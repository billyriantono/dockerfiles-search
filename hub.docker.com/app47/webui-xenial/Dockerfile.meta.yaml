MetaArgs: null
Stages:
- BaseName: ubuntu:xenial
  Commands:
  - Key: MONGO_PACKAGE
    Name: arg
    Value: mongodb-org
  - Key: MONGO_REPO
    Name: arg
    Value: repo.mongodb.org
  - Env:
    - Key: RUBY_MAJOR
      Value: "2.4"
    - Key: RUBY_VERSION
      Value: 2.4.1
    - Key: RUBY_DOWNLOAD_SHA256
      Value: 25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c
    - Key: RUBYGEMS_VERSION
      Value: 3.0.3
    - Key: GEM_HOME
      Value: /usr/local/bundle
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    - Key: GOSU_VERSION
      Value: "1.11"
    - Key: REDIS_VERSION
      Value: 5.0.5
    - Key: REDIS_DOWNLOAD_URL
      Value: http://download.redis.io/releases/redis-5.0.5.tar.gz
    - Key: REDIS_DOWNLOAD_SHA
      Value: 2139009799d21d8ff94fc40b7f36ac46699b9e1254086299f8d3b223ca54a375
    - Key: JSYAML_VERSION
      Value: 3.13.0
    - Key: GPG_KEYS
      Value: 0C49F3730359A14518585931BC711F9BA15703C6
    - Key: MONGO_MAJOR
      Value: "3.4"
    - Key: MONGO_VERSION
      Value: 3.4.22
    Name: env
  - Env:
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    - Key: PATH
      Value: $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
    - Key: MONGO_PACKAGE
      Value: ${MONGO_PACKAGE}
    - Key: MONGO_REPO
      Value: ${MONGO_REPO}
    Name: env
  - CmdLine:
    - "set -eux;     mkdir -p /usr/local/etc; \t{ \t\techo 'install: --no-document';
      \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc;     apt-get update
      -qq;     apt-get install -y --no-install-recommends                 bison                 build-essential
      \                ca-certificates                 curl                 dpkg-dev
      \                gcc                 git                 gnupg2                 gzip
      \                imagemagick                 jq                 libc6-dev                 libcurl3-dev
      \                libfftw3-double3                 libgdbm-dev                 libgmp3-dev
      \                libgsl0-dev                 libgtkmm-3.0.1                 libpq-dev
      \                libnotify4                 make                 nodejs                 numactl
      \                openjdk-8-jdk                 ruby                 ssh \t            tar
      \                tcl8.5                 unzip \t            wget                 zip;
      \    if ! command -v ps > /dev/null; then         apt-get install -y --no-install-recommends
      procps;     fi;     if ! command -v gpg > /dev/null; then         apt-get install
      -y --no-install-recommends gnupg2 dirmngr;     elif gpg --version | grep -q
      '^gpg (GnuPG) 1\\.'; then         apt-get install -y --no-install-recommends
      gnupg-curl;     fi;     rm -rf /var/lib/apt/lists/*;"
    Name: run
    PrependShell: true
  - CmdLine:
    - set -eux;     cd /opt;     mkdir -p android_sdk;     cd /usr/src;     wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip;     unzip
      sdk-tools-linux-4333796.zip;     echo y | tools/bin/sdkmanager 'build-tools;29.0.2'
      --sdk_root=/opt/android_sdk;     rm -f sdk-tools-linux-4333796.zip;     rm -rf
      tools;
    Name: run
    PrependShell: true
  - CmdLine:
    - 'wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz";     echo
      "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum --check --strict;     mkdir
      -p /usr/src/ruby;     tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1;     rm
      ruby.tar.xz;     cd /usr/src/ruby;     {         echo ''#define ENABLE_PATH_CHECK
      0'';         echo;         cat file.c;     } > file.c.new;     mv file.c.new
      file.c;     autoconf;     gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";     ./configure
      --build="$gnuArch" --disable-install-doc --enable-shared;     make -j "$(nproc)";     make
      install;     find /usr/local -type f -executable -not \( -name ''*tkinter*''
      \) -exec ldd ''{}'' '';''          | awk ''/=>/ { print $(NF-1) }''          |
      sort -u          | xargs -r dpkg-query --search          | cut -d: -f1          |
      sort -u          | xargs -r apt-mark manual     ;     cd /;     rm -r /usr/src/ruby;     ruby
      -e ''exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'';     gem
      update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/;     ! dpkg -l | grep
      -i ruby;     [ "$(command -v ruby)" = ''/usr/local/bin/ruby'' ];     mkdir -p
      "$GEM_HOME" && chmod 777 "$GEM_HOME";'
    Name: run
    PrependShell: true
  - CmdLine:
    - command curl -sSL https://rvm.io/mpapis.asc | gpg --import -;     command curl
      -sSL https://rvm.io/pkyczynski.asc | gpg --import -;     gpg --keyserver hkp://pool.sks-keyservers.net
      --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB;     unset
      GEM_HOME;     bash -c "curl -sSL https://get.rvm.io | bash -s stable --ruby=$RUBY_VERSION
      --rails; exit 0"
    Name: run
    PrependShell: true
  - CmdLine:
    - savedAptMark="$(apt-mark showmanual)";     dpkgArch="$(dpkg --print-architecture
      | awk -F- '{ print $NF }')";     wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";     wget
      -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";     export
      GNUPGHOME="$(mktemp -d)";     gpg --batch --keyserver hkps://keys.openpgp.org
      --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;     gpg --batch --verify
      /usr/local/bin/gosu.asc /usr/local/bin/gosu;     command -v gpgconf && gpgconf
      --kill all || :;     rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;     chmod
      +x /usr/local/bin/gosu;     gosu nobody true;
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r -g 999 redis && useradd -r -g redis -u 999 redis;     wget -O redis.tar.gz
      "$REDIS_DOWNLOAD_URL";     echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum
      -c -;     mkdir -p /usr/src/redis;     tar -xzf redis.tar.gz -C /usr/src/redis
      --strip-components=1;     rm redis.tar.gz;     grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE
      1$' /usr/src/redis/src/server.h;     sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE)
      1$!\1 0!' /usr/src/redis/src/server.h;     grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE
      0$' /usr/src/redis/src/server.h;     make -C /usr/src/redis -j "$(nproc)";     make
      -C /usr/src/redis install;     serverMd5="$(md5sum /usr/local/bin/redis-server
      | cut -d' ' -f1)"; export serverMd5;     find /usr/local/bin/redis* -maxdepth
      0          -type f -not -name redis-server          -exec sh -eux -c '              md5="$(md5sum
      "$1" | cut -d" " -f1)";              test "$md5" = "$serverMd5";          '
      -- '{}' ';'          -exec ln -svfT 'redis-server' '{}' ';'     ;     rm -r
      /usr/src/redis;     mkdir /data && chown redis:redis /data;
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /data
  - CmdLine:
    - set -eux;     groupadd -r mongodb && useradd -r -g mongodb mongodb;     wget
      -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";     mkdir
      /docker-entrypoint-initdb.d;     export GNUPGHOME="$(mktemp -d)";     for key
      in $GPG_KEYS; do         gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key";     done;     gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;     command
      -v gpgconf && gpgconf --kill all || :;     rm -r "$GNUPGHOME";     apt-key list;     set
      -x  && echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR
      multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"  &&
      apt-get update  && apt-get install -y         ${MONGO_PACKAGE}=$MONGO_VERSION         ${MONGO_PACKAGE}-server=$MONGO_VERSION         ${MONGO_PACKAGE}-shell=$MONGO_VERSION         ${MONGO_PACKAGE}-mongos=$MONGO_VERSION         ${MONGO_PACKAGE}-tools=$MONGO_VERSION  &&
      rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf
      /etc/mongod.conf.orig;     set -eux;     mkdir -p /data/db /data/configdb  &&
      chown -R mongodb:mongodb /data/db /data/configdb
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /data/db
    - /data/configdb
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin/
  - CmdLine:
    - ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh;     mkdir /app;     mongod
      --version;     redis-server --version;     ruby --version;     gem --version;     bundle
      --version;     git --version;     ssh -V;     tar --version;     gzip --version;
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: expose
    Ports:
    - "27017"
  - Name: expose
    Ports:
    - "6379"
  - Name: workdir
    Path: /app
  From:
    Image: ubuntu:xenial
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:xenial
