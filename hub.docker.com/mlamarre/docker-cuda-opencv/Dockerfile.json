{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "Mathieu Lamarre \u003cmathieu.lamarre@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026         apt-get install -y         build-essential         git         wget         unzip         yasm         pkg-config         libcurl4-openssl-dev         zlib1g-dev         nano"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CMAKE_VERSION",
              "Value": "3.10"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CMAKE_BUILD",
              "Value": "2.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir ~/temp \u0026\u0026 cd ~/temp \u0026\u0026 wget https://github.com/mlamarre/CMake/archive/v${CMAKE_VERSION}.${CMAKE_BUILD}.tar.gz -O cmake-${CMAKE_VERSION}.${CMAKE_BUILD}.tar.gz\u0026\u0026 tar -xzvf cmake-${CMAKE_VERSION}.${CMAKE_BUILD}.tar.gz \u0026\u0026 cd ~/temp/CMake-${CMAKE_VERSION}.${CMAKE_BUILD}/ \u0026\u0026 ./bootstrap --system-curl \u0026\u0026 make -j$(nproc) \u0026\u0026 make install \u0026\u0026 make clean \u0026\u0026 cd ~ \u0026\u0026 rm -rf temp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y         libswscale-dev         libtbb2         libtbb-dev         libjpeg-dev         libpng-dev         libtiff-dev         libjasper-dev         libavformat-dev         libpq-dev         libhdf5-dev     \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=/opt/conda/bin:$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.31-Linux-x86_64.sh -O ~/miniconda.sh \u0026\u0026     /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026\u0026     rm ~/miniconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "conda create -y -n ocvpy3 python=3.6.4 numpy=1.14.0 mkl-devel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda create -y -n ocvpy2 python=2.7.14 numpy=1.14.0 mkl-devel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /opt/conda/envs/ocvpy3/include/mkl*.h /usr/local/include\u0026\u0026 cp /opt/conda/envs/ocvpy3/lib/libmkl*.so /usr/local/lib \u0026\u0026 ldconfig -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "EIGEN_VERSION",
              "Value": "\"3.3.4\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "EIGEN_SUBPATH",
              "Value": "\"5a0156e40feb\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /temp \u0026\u0026 wget http://bitbucket.org/eigen/eigen/get/3.3.4.zip -O /temp/eigen-${EIGEN_VERSION}.zip \u0026\u0026 unzip /temp/eigen-${EIGEN_VERSION}.zip \u0026\u0026 cd /eigen-eigen-${EIGEN_SUBPATH}\u0026\u0026 mkdir build\u0026\u0026 cd build\u0026\u0026 cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local\u0026\u0026 make install\u0026\u0026 rm -rf /temp\u0026\u0026 rm -rf /eigen-eigen-${EIGEN_SUBPATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "\"3.4.0\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /temp \u0026\u0026 wget -nv https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -O /temp/opencvcontrib-${OPENCV_VERSION}.zip \u0026\u0026 wget -nv https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -O /temp/opencv-${OPENCV_VERSION}.zip \u0026\u0026 wget -nv https://github.com/VLAM3D/opencv-python/archive/9.1.zip -O /temp/opencv-python-9.1.zip \u0026\u0026 unzip /temp/opencv-${OPENCV_VERSION}.zip\u0026\u0026 unzip /temp/opencvcontrib-${OPENCV_VERSION}.zip\u0026\u0026 unzip /temp/opencv-python-9.1.zip\u0026\u0026 cd /opencv-${OPENCV_VERSION} \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake .. -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DWITH_CUDA=ON -DCUDA_ARCH_BIN:STRING=\"6.1\" -DWITH_OPENGL=ON -DWITH_OPENCL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_MKL=ON -DMKL_WITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_FFMPEG=ON -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DOPENCV_ENABLE_NONFREE=ON -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-${OPENCV_VERSION}/modules -DBUILD_opencv_legacy=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \u0026\u0026 make -j $(nproc) install \u0026\u0026 cd /opencv-${OPENCV_VERSION} \u0026\u0026 mkdir build_python \u0026\u0026 cd build_python \u0026\u0026 cmake .. -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DWITH_CUDA=OFF -DWITH_OPENGL=ON -DWITH_OPENCL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_LAPACK=OFF -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_FFMPEG=ON -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-${OPENCV_VERSION}/modules -DBUILD_opencv_legacy=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/opencv-python-9.1/cv2 -DPYTHON2_EXECUTABLE=/opt/conda/envs/ocvpy2/bin/python -DPYTHON2_INCLUDE_DIR=$(/opt/conda/envs/ocvpy2/bin/python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") -DPYTHON2_PACKAGES_PATH=$(/opt/conda/envs/ocvpy2/bin/python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") -DPYTHON3_EXECUTABLE=/opt/conda/envs/ocvpy3/bin/python -DPYTHON3_INCLUDE_DIR=$(/opt/conda/envs/ocvpy3/bin/python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") -DPYTHON3_PACKAGES_PATH=$(/opt/conda/envs/ocvpy3/bin/python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \u0026\u0026 make -j$(nproc) opencv_python3 \u0026\u0026 make -j$(nproc) opencv_python2 \u0026\u0026 cp /opencv-${OPENCV_VERSION}/build_python/lib/python3/cv2.*.so /opencv-python-9.1/cv2/ \u0026\u0026 mkdir -p /usr/local/etc/wheels \u0026\u0026 cd /opencv-python-9.1 \u0026\u0026 python find_version.py \u0026\u0026 /bin/bash -c \"source /opt/conda/envs/ocvpy3/bin/activate ocvpy3 \u0026\u0026 python setup.py bdist_wheel\" \u0026\u0026 rm /opencv-python-9.1/cv2/cv2.cpython-36m-x86_64-linux-gnu.so \u0026\u0026 cp /opencv-${OPENCV_VERSION}/build_python/lib/cv2.so /opencv-python-9.1/cv2/ \u0026\u0026 /bin/bash -c \"source /opt/conda/envs/ocvpy2/bin/activate ocvpy2 \u0026\u0026 python setup.py bdist_wheel\" \u0026\u0026 cp /opencv-python-9.1/dist/opencv_python-*.whl /usr/local/etc/wheels \u0026\u0026 cd / \u0026\u0026 rm -rf /opencv-python-9.1 \u0026\u0026 rm -rf /opencv-${OPENCV_VERSION} \u0026\u0026 rm -rf /opencv_contrib-${OPENCV_VERSION} \u0026\u0026 rm -rf /temp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig -v"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}