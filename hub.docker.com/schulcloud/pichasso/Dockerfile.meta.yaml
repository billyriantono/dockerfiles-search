MetaArgs: null
Stages:
- As: builder
  BaseName: node:8.15-alpine
  Commands:
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: PYTHONIOENCODING
      Value: UTF-8
    Name: env
  - CmdLine:
    - apk add --no-cache ca-certificates
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 2.7.16
    Name: env
  - CmdLine:
    - "set -ex \t&& apk add --no-cache --virtual .fetch-deps \tgnupg \ttar \txz \t\t&&
      wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& apk add --no-cache --virtual .build-deps  \tbzip2-dev \tcoreutils \tdpkg-dev
      dpkg \texpat-dev \tfindutils \tgcc \tgdbm-dev \tlibc-dev \tlibffi-dev \tlibnsl-dev
      \tlibtirpc-dev \tlinux-headers \tmake \tncurses-dev \topenssl-dev \tpax-utils
      \treadline-dev \tsqlite-dev \ttcl-dev \ttk \ttk-dev \tzlib-dev \t&& apk del
      .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query
      DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t--build=\"$gnuArch\" \t--enable-shared
      \t--enable-unicode=ucs4 \t--with-system-expat \t--with-system-ffi \t&& make
      -j \"$(nproc)\" \tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install
      \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec
      scanelf --needed --nobanner --format '%n#p' '{}' ';' \t| tr ',' '\\n' \t| sort
      -u \t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print
      \"so:\" $1 }' \t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&&
      apk del .build-deps \t\t&& find /usr/local -depth \t\\( \t\\( -type d -a \\(
      -name test -o -name tests \\) \\) \t-o \t\\( -type f -a \\( -name '*.pyc' -o
      -name '*.pyo' \\) \\) \t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python
      \t\t&& python2 --version"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t--disable-pip-version-check \t--no-cache-dir \t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\\( \t\\( -type d -a \\( -name
      test -o -name tests \\) \\) \t-o \t\\( -type f -a \\( -name '*.pyc' -o -name
      '*.pyo' \\) \\) \t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing/" >>
      /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "@community https://alpine.global.ssl.fastly.net/alpine/edge/community/"
      >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "@edge https://alpine.global.ssl.fastly.net/alpine/edge/main/" >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - apk update && apk upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - "apk add --update --no-cache \tbuild-base \topenblas-dev \tunzip \twget \tcmake
      \tlibtbb@testing  \tlibtbb-dev@testing   \tlibjpeg  \tlibjpeg-turbo-dev \tlibpng-dev
      \tjasper-dev \ttiff-dev \tlibwebp-dev \tclang-dev \tlinux-headers"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install numpy
    Name: run
    PrependShell: true
  - Env:
    - Key: CC
      Value: /usr/bin/clang
    Name: env
  - Env:
    - Key: CXX
      Value: /usr/bin/clang++
    Name: env
  - CmdLine:
    - "cd /opt && \twget https://github.com/opencv/opencv/archive/3.1.0.zip && \tunzip
      3.1.0.zip && \tcd /opt/opencv-3.1.0 && \tmkdir build && \tcd build && \tcmake
      -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_FFMPEG=NO
      \t-D WITH_IPP=NO -D WITH_OPENEXR=NO .. && \tmake VERBOSE=1 && \tmake && \tmake
      install"
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - "apk update && apk upgrade && \techo @edgeChrome http://nl.alpinelinux.org/alpine/edge/community
      >> /etc/apk/repositories && \techo @edgeChrome http://nl.alpinelinux.org/alpine/edge/main
      >> /etc/apk/repositories && \tapk add --no-cache \tchromium@edgeChrome \tnss@edgeChrome
      \tfreetype@edgeChrome \tharfbuzz@edgeChrome \tttf-freefont@edgeChrome"
    Name: run
    PrependShell: true
  - Env:
    - Key: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
      Value: "true"
    Name: env
  - CmdLine:
    - apk add vips-dev@testing fftw-dev@edge build-base@edge --update-cache
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/src/app
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - package.json
    - package.json
  - CmdLine:
    - ls -lah
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x && \tnpm set progress=true && \tnpm config set depth 0 && \tnpm install
      --dev"
    Name: run
    PrependShell: true
  From:
    Image: node:8.15-alpine
  Name: builder
  Platform: ""
  SourceCode: FROM node:8.15-alpine as builder
