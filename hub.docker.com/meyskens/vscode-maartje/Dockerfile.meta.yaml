MetaArgs: null
Stages:
- BaseName: meyskens/desktop-base:gtkdev
  Commands:
  - CmdLine:
    - "apt-get update && apt-get install -y         curl \tapt-transport-https \tgpg
      \tgit     \tsudo \tdirenv \tjq \txxd \tshellcheck \tyamllint \tsshuttle"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
      &&    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg &&    echo "deb
      [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y code
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y pkg-config libwebkit2gtk-4.0-dev libgtk-3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y build-essential unison nano
    Name: run
    PrependShell: true
  - Env:
    - Key: EDITOR
      Value: nano
    Name: env
  - CmdLine:
    - apt-get install -y fish
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -s /usr/bin/fish user
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y wget tar git
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O -  "https://golang.org/dl/go1.12.linux-amd64.tar.gz" | tar xzC /usr/local
    Name: run
    PrependShell: true
  - CmdLine:
    - cp /usr/local/go/bin/* /usr/local/bin
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /home/user/go
    Name: env
  - Env:
    - Key: GOROOT
      Value: /usr/local/go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:/usr/local/go/bin:$PATH
    Name: env
  - Env:
    - Key: arduinoversion
      Value: 1.8.5
    Name: env
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_10.x | bash - &&    apt-get install
      -y nodejs
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo npm install -g eslint babel-eslint http-server babel-cli webpack nodemon
      yarn
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g cordova ionic
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g zoho-extension-toolkit
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/gohugoio/hugo/releases/download/v0.51/hugo_0.51_Linux-64bit.deb
      &&    dpkg -i hugo_0.51_Linux-64bit.deb  && rm -f /hugo_0.51_Linux-64bit.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y ruby ruby-dev &&     gem install travis -v 1.8.8 --no-rdoc
      --no-ri
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install php7.0 php7.0-curl php7.0-mbstring
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install httpie
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s)
      main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg
      | apt-key add - &&    apt-get update && apt-get install -y google-cloud-sdk
      google-cloud-sdk-app-engine-go
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /usr/bin/gcloud /usr/local/bin/gcloud
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://get.docker.com | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install docker-compose
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -u github.com/golang/dep/cmd/dep
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y software-properties-common && add-apt-repository -y "deb
      https://cli-assets.heroku.com/branches/stable/apt ./" &&    curl -L https://cli-assets.heroku.com/apt/release.key
      | sudo apt-key add - &&    apt-get update && apt-get install -y heroku
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O arduino.tar.xz https://downloads.arduino.cc/arduino-${arduinoversion}-linux64.tar.xz
      && tar -xJf arduino.tar.xz && rm -f arduino.tar.xz
    Name: run
    PrependShell: true
  - CmdLine:
    - mv arduino-${arduinoversion} /usr/local/share/arduino/ && /usr/local/share/arduino/install.sh
      && ln -s /usr/local/share/arduino/arduino /usr/local/bin/arduino
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add
      - &&     echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >/etc/apt/sources.list.d/kubernetes.list
      &&     apt-get update &&     apt-get install -y kubectl
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz
      &&     tar xzf helm-v2.9.1-linux-amd64.tar.gz &&     mv linux-amd64/helm /usr/local/bin/
      &&     rm -f helm-v2.9.1-linux-amd64.tar.gz &&    rm -fr linux-amd64
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.8.2-linux-amd64.tar.gz
      &&     tar xzf helm-v2.8.2-linux-amd64.tar.gz &&     mv linux-amd64/helm /usr/local/bin/helm282
      &&     rm -f helm-v2.8.2-linux-amd64.tar.gz &&    rm -fr linux-amd64
    Name: run
    PrependShell: true
  - Env:
    - Key: CT_VERSION
      Value: 2.3.3
    Name: env
  - CmdLine:
    - mkdir /ct && cd /ct &&     curl -Lo chart-testing_${CT_VERSION}_linux_amd64.tar.gz
      https://github.com/helm/chart-testing/releases/download/v${CT_VERSION}/chart-testing_${CT_VERSION}_linux_amd64.tar.gz  &&     tar
      xzf chart-testing_${CT_VERSION}_linux_amd64.tar.gz  &&     chmod +x ct && sudo
      mv ct /usr/local/bin/  &&     mv etc /etc/ct &&     cd / && rm -fr /ct
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/etcd-io/etcd/releases/download/v3.3.8/etcd-v3.3.8-linux-amd64.tar.gz
      &&     tar xzf etcd-v3.3.8-linux-amd64.tar.gz &&     mv etcd-v3.3.8-linux-amd64/etcdctl
      /usr/local/bin/ &&     mv etcd-v3.3.8-linux-amd64/etcd /usr/local/bin/ &&     rm
      -f etcd-v3.3.8-linux-amd64.tar.gz &&    rm -fr etcd-v3.3.8-linux-amd64
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y ffmpeg
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://releases.hashicorp.com/terraform/0.11.14/terraform_0.11.14_linux_amd64.zip
      &&    unzip terraform_0.11.14_linux_amd64.zip &&    mv terraform /usr/local/bin/
      &&    rm terraform_0.11.14_linux_amd64.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://releases.hashicorp.com/terraform/0.12.0/terraform_0.12.0_linux_amd64.zip
      &&    unzip terraform_0.12.0_linux_amd64.zip &&    mv terraform /usr/local/bin/tf12
      &&    rm terraform_0.12.0_linux_amd64.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y python-pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install ansible==2.7
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install awscli
    Name: run
    PrependShell: true
  - CmdLine:
    - PROTOC_ZIP=protoc-3.6.1-linux-x86_64.zip &&    curl -OL https://github.com/google/protobuf/releases/download/v3.6.1/$PROTOC_ZIP  &&    unzip
      -o $PROTOC_ZIP -d /usr/local bin/protoc  &&    rm -f $PROTOC_ZIP
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -aG docker user
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo -u user code --verbose
    Name: cmd
    PrependShell: true
  From:
    Image: meyskens/desktop-base:gtkdev
  Name: ""
  Platform: ""
  SourceCode: FROM meyskens/desktop-base:gtkdev
