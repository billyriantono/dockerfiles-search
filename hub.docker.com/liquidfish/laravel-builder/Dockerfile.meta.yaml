MetaArgs:
- DefaultValue: null
  Key: PHP_VERSION
  ProvidedValue: null
  Value: null
- DefaultValue: "false"
  Key: INSTALL_V8
  ProvidedValue: null
  Value: "false"
Stages:
- As: v8-source-false
  BaseName: php:${PHP_VERSION}-fpm-alpine
  Commands:
  - CmdLine:
    - mkdir -p /opt/v8
    Name: run
    PrependShell: true
  From:
    Image: php:${PHP_VERSION}-fpm-alpine
  Name: v8-source-false
  Platform: ""
  SourceCode: FROM php:${PHP_VERSION}-fpm-alpine as v8-source-false
- As: v8-source-true
  BaseName: liquidfish/v8-alpine
  Commands: null
  From:
    Image: liquidfish/v8-alpine
  Name: v8-source-true
  Platform: ""
  SourceCode: FROM liquidfish/v8-alpine as v8-source-true
- As: v8-build
  BaseName: v8-source-${INSTALL_V8}
  Commands: null
  From:
    Image: v8-source-${INSTALL_V8}
  Name: v8-build
  Platform: ""
  SourceCode: FROM v8-source-${INSTALL_V8} as v8-build
- BaseName: php:${PHP_VERSION}-fpm-alpine
  Commands:
  - Chown: ""
    From: composer
    Name: copy
    SourcesAndDest:
    - /usr/bin/composer
    - /usr/bin/composer
  - Expression: ARG INSTALL_V8=false
    Name: onbuild
  - Expression: ARG INSTALL_BCMATH
    Name: onbuild
  - Expression: ARG INSTALL_EXIF
    Name: onbuild
  - Expression: ARG INSTALL_GD
    Name: onbuild
  - Expression: ARG INSTALL_IMAGICK
    Name: onbuild
  - Expression: ARG INSTALL_INTL
    Name: onbuild
  - Expression: ARG INSTALL_MCRYPT
    Name: onbuild
  - Expression: ARG INSTALL_MYSQL
    Name: onbuild
  - Expression: ARG INSTALL_PGSQL
    Name: onbuild
  - Expression: ARG INSTALL_REDIS
    Name: onbuild
  - Expression: ARG INSTALL_XDEBUG
    Name: onbuild
  - Expression: ARG INSTALL_ZIP
    Name: onbuild
  - Expression: ARG DEPS
    Name: onbuild
  - Chown: ""
    From: v8-build
    Name: copy
    SourcesAndDest:
    - /opt/v8
    - /opt/v8
  - Expression: RUN     if [ "$INSTALL_BCMATH" != "false" ]; then         export EXT_INSTALL="${EXT_INSTALL}
      bcmath"     ; fi     && if [ "$INSTALL_EXIF" = "true" ]; then         export
      DEPS="${DEPS} exiftool"         && export EXT_INSTALL="${EXT_INSTALL} exif"     ;
      fi     && if [ "$INSTALL_GD" = "true" ]; then         export EXT_INSTALL="${EXT_INSTALL}
      gd"         && export BUILD_DEPS="${BUILD_DEPS} freetype-dev libjpeg-turbo-dev
      libpng-dev libwebp-dev"         && export DEPS="${DEPS} freetype libjpeg-turbo
      libpng libwebp"     ; fi     && if [ "$INSTALL_IMAGICK" = "true" ]; then         export
      BUILD_DEPS="${BUILD_DEPS} imagemagick-dev"         && export DEPS="${DEPS} imagemagick"         &&
      PECLS="${PECLS} imagick"         && EXT_ENABLE="${EXT_ENABLE} imagick"     ;
      fi     && if [ "$INSTALL_INTL" = "true" ]; then         export BUILD_DEPS="${BUILD_DEPS}
      icu-dev"         && export DEPS="${DEPS} icu"         && EXT_INSTALL="${EXT_INSTALL}
      intl"     ; fi     && if [ "$INSTALL_MCRYPT" = "true" ]; then         export
      BUILD_DEPS="${BUILD_DEPS} libmcrypt-dev"         && export DEPS="${DEPS} libmcrypt"         &&
      EXT_INSTALL="${EXT_INSTALL} mcrypt"     ; fi     && if [ "$INSTALL_MYSQL" !=
      "false" ]; then         export EXT_INSTALL="${EXT_INSTALL} mysqli pdo_mysql"     ;
      fi     && if [ "$INSTALL_PGSQL" = "true" ]; then         export EXT_INSTALL="${EXT_INSTALL}
      pgsql pdo_pgsql"         && export BUILD_DEPS="${BUILD_DEPS} postgresql-dev"         &&
      export DEPS="${DEPS} postgresql-client postgresql-libs"     ; fi     && if [
      "$INSTALL_REDIS" = "true" ]; then         export PECLS="${PECLS} redis"         &&
      export EXT_ENABLE="${EXT_ENABLE} redis"     ; fi     && if [ "$INSTALL_XDEBUG"
      = "true" ]; then         export PECLS="${PECLS} xdebug"         && export EXT_ENABLE="${EXT_ENABLE}
      xdebug"     ; fi     && if [ "$INSTALL_V8" = "true" ]; then         export BUILD_DEPS="${BUILD_DEPS}
      git"         && export DEPS="${DEPS} libgcc libstdc++"         && export EXT_ENABLE="${EXT_ENABLE}
      v8js"     ; fi     && if [ "$INSTALL_ZIP" = "true" ]; then         export BUILD_DEPS="${BUILD_DEPS}
      libzip-dev"         && export DEPS="${DEPS} libzip zip"         && export EXT_INSTALL="${EXT_INSTALL}
      zip"     ; fi     && set -x     && apk add --virtual .build-deps $BUILD_DEPS
      $PHPIZE_DEPS     && apk add $DEPS fcgi nginx s6     && if [ "$INSTALL_GD" =
      "true" ]; then         docker-php-ext-configure gd     ; fi     && if [ "$INSTALL_V8"
      = "true" ]; then         git clone --depth 1 --single-branch --progress --verbose
      https://github.com/phpv8/v8js.git /tmp/v8js         && cd /tmp/v8js         &&
      git checkout php7         && phpize         && ./configure --with-v8js=/opt/v8         &&
      NO_INTERACTION=1         && make -j"$(nproc)"         && make -j"$(nproc)" test         &&
      make -j"$(nproc)" install         && cd -     ; fi     && if [ "$INSTALL_ZIP"
      = "true" ]; then         docker-php-ext-configure zip     ; fi     && if [ -n
      "$EXT_INSTALL" ]; then         docker-php-ext-install -j"$(nproc)" $EXT_INSTALL     ;
      fi     && if [ -n "$PECLS" ]; then         pecl install $PECLS     ; fi     &&
      if [ -n "$EXT_ENABLE" ]; then         docker-php-ext-enable $EXT_ENABLE     ;
      fi     && apk del .build-deps     && rm -rf /tmp/* /var/cache/apk/*     && cd
      "$PHP_INI_DIR"     && sed -ri         -e 's/;(ping\.path)/\1/'         ../php-fpm.d/www.conf     &&
      ln -s php.ini-production php.ini     && sed -ri         -e 's/^(expose_php).*$/\1
      = Off/'         php.ini-production     && mkdir /run/nginx
    Name: onbuild
  From:
    Image: php:${PHP_VERSION}-fpm-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM php:${PHP_VERSION}-fpm-alpine
