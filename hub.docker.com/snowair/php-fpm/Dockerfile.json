{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "snowair/debian:php-base",
      "SourceCode": "FROM snowair/debian:php-base",
      "Platform": "",
      "From": {
        "Image": "snowair/debian:php-base"
      },
      "Commands": [
        {
          "Key": "APT_PROXY",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "/usr/local/etc/php"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $PHP_INI_DIR/conf.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_EXTRA_CONFIGURE_ARGS",
              "Value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CFLAGS",
              "Value": "\"-fstack-protector-strong -fpic -fpie -O2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CPPFLAGS",
              "Value": "\"$PHP_CFLAGS\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_LDFLAGS",
              "Value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GPG_KEYS",
              "Value": "0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "5.6.31"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_URL",
              "Value": "\"https://secure.php.net/get/php-5.6.31.tar.xz/from/this/mirror\""
            },
            {
              "Key": "PHP_ASC_URL",
              "Value": "\"https://secure.php.net/get/php-5.6.31.tar.xz.asc/from/this/mirror\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_SHA256",
              "Value": "\"c464af61240a9b7729fabe0314cdbdd5a000a4f0c9bd201f89f8628732fe4ae4\""
            },
            {
              "Key": "PHP_MD5",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -xe;     if [ -n \"$HTTP_PROXY\" ]; then         export http_proxy=$HTTP_PROXY ;         export https_proxy=$HTTP_PROXY ;         export HTTPS_PROXY=$HTTP_PROXY ; \tfi; \tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then     \twget -O php.tar.xz.asc \"$PHP_ASC_URL\";         unset HTTP_PROXY ;         unset http_proxy ;         unset https_proxy ;         unset HTTPS_PROXY ;     \texport GNUPGHOME=\"$(mktemp -d)\";     \tfor key in $GPG_KEYS; do     \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\";     \tdone;     \tgpg --batch --verify php.tar.xz.asc php.tar.xz;     \trm -r \"$GNUPGHOME\"; \tfi;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-php-source",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "set -xe; \tif [ -n \"$HTTP_PROXY\" -a -n \"$APT_PROXY\"  ]; then         apt_http_config=\"-o Acquire::http::proxy=$HTTP_PROXY\" ;         apt_https_config=\"-o Acquire::https::proxy=$HTTP_PROXY\" ; \tfi;  \tif [ -n \"$PHP_EXTRA_BUILD_DEPS\" ]; then         buildDeps=\"             $PHP_EXTRA_BUILD_DEPS         \" ;         apt-get update $apt_http_config $apt_https_config \u0026\u0026 apt-get $apt_http_config $apt_https_config install -y $buildDeps --no-install-recommends \u0026\u0026 rm -rf /var/lib/apt/lists/* ; \tfi; \texport CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\u0026\u0026 docker-php-source extract \t\u0026\u0026 cd /usr/src/php \t\u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t\u0026\u0026 ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--disable-cgi \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t        --enable-sockets         --with-readline \t\t--with-recode \t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib         --with-oci8=shared,instantclient,$OCI_INSTANT_PATH         --with-pdo-oci=shared,instantclient,$OCI_INSTANT_PATH,12.1.0.2 \t\t\t\t--with-pcre-regex=/usr \t\t--with-libdir=\"lib/$gnuArch\" \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t\u0026\u0026 make -j \"$(nproc)\" \t\u0026\u0026 make install \t\u0026\u0026 { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \t\u0026\u0026 make clean \t\u0026\u0026 cd / \t\u0026\u0026 docker-php-source delete \t\t\u0026\u0026 apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps \t\t\u0026\u0026 pecl update-channels \t\u0026\u0026 rm -rf /tmp/pear ~/.pearrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-php-ext-*",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "docker-php-ext-configure imap --with-imap --with-imap-ssl --with-kerberos     \u0026\u0026 docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --enable-gd-native-ttf     \u0026\u0026 docker-php-ext-configure hash --with-mhash     \u0026\u0026 docker-php-ext-install tidy intl wddx xmlrpc  xsl opcache bz2 bcmath calendar dba gd exif gettext imap  mcrypt mysqli pcntl pdo_mysql pdo_pgsql pgsql shmop  sysvsem soap sysvmsg  sysvshm zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ -n \"$HTTP_PROXY\" ]; then         export http_proxy=$HTTP_PROXY ;         export https_proxy=$HTTP_PROXY ;         export HTTPS_PROXY=$HTTP_PROXY ; \tfi;     cwd=`pwd` ;     modules=\"event msgpack inotify hprose crypto eio memcached redis solr mongodb xdebug ev igbinary imagick yaf\" ;    if [ 5 -eq 5 ]; then         memcached_version=\"-2.2.0\" ;         msgpack_version=\"-0.5.7\" ;         inotify_version=\"-0.1.6\" ;         modules=\"$modules libevent memcache apc xhprof trace sphinx\"; \tfi;     for m in $modules; do         url=http://pecl.php.net/get/$m;         if [ \"$m\" = \"msgpack\" ]; then             url=http://pecl.php.net/get/msgpack$msgpack_version;         fi;         if [ \"$m\" = \"inotify\" ]; then             url=http://pecl.php.net/get/inotify$inotify_version;         fi;         if [ \"$m\" = \"memcached\" ]; then             url=http://pecl.php.net/get/memcached$memcached_version;         fi;         cd $cwd ; wget -O $m.tgz $url \u0026\u0026 tar -xf $m.tgz \u0026\u0026 cd `ls -d $m*/` \u0026\u0026 phpize \u0026\u0026 ./configure  \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 docker-php-ext-enable $m ;         cd $cwd ; rm -fr $m* ;     done;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ -n \"$HTTP_PROXY\" ]; then         export http_proxy=$HTTP_PROXY ;         export https_proxy=$HTTP_PROXY ;         export HTTPS_PROXY=$HTTP_PROXY ; \tfi;     if [ 5 -eq 5 ]; then             wget -O cphalcon.zip https://github.com/phalcon/cphalcon/archive/master.zip \u0026\u0026 unzip cphalcon.zip \u0026\u0026 cd cphalcon-master/build/php5/64bits \u0026\u0026 phpize \u0026\u0026 ./configure \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd - \u0026\u0026 rm -fr cphalcon*  \u0026\u0026 docker-php-ext-enable phalcon; \tfi;     if [ 5 -eq 7 ]; then         wget -O cphalcon.zip https://github.com/phalcon/cphalcon/archive/master.zip \u0026\u0026 unzip cphalcon.zip \u0026\u0026 cd cphalcon-master/build/php5/64bits \u0026\u0026 phpize \u0026\u0026 ./configure \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd - \u0026\u0026 rm -fr cphalcon*  \u0026\u0026 docker-php-ext-enable phalcon; \tfi;     wget -O hiredis.zip https://github.com/redis/hiredis/archive/master.zip \u0026\u0026 unzip hiredis.zip \u0026\u0026 cd hiredis-master \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 ldconfig \u0026\u0026 cd - \u0026\u0026 rm -fr hiredis*     \u0026\u0026 wget -O swoole.zip https://github.com/swoole/swoole-src/archive/v2.0.7.zip \u0026\u0026 unzip swoole.zip \u0026\u0026 cd swoole-src-2.0.7 \u0026\u0026 phpize         \u0026\u0026 ./configure --enable-sockets --enable-openssl --with-openssl-dir --enable-async-redis --enable-coroutine         \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd - \u0026\u0026 rm -fr swoole*     \u0026\u0026 docker-php-ext-enable swoole     \u0026\u0026 curl -sS https://getcomposer.org/installer | php --  \u0026\u0026  mv composer.phar /usr/local/bin/composer \u0026\u0026 chmod 777 /usr/local/bin/composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-php-entrypoint",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "docker-php-entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 cd /usr/local/etc \t\u0026\u0026 if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf \u003e /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = [::]:9000'; \t} | tee php-fpm.d/zz-docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        },
        {
          "CmdLine": [
            "php-fpm"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}