{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos",
      "SourceCode": "FROM centos",
      "Platform": "",
      "From": {
        "Image": "centos"
      },
      "Commands": [
        {
          "CmdLine": [
            "curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y epel-release \u0026\u0026 yum install -y git jq nodejs patch sudo yarn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSL -o /usr/local/bin/umoci https://github.com/openSUSE/umoci/releases/download/v0.4.2/umoci.amd64 \u0026\u0026 chmod +x /usr/local/bin/umoci"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSL -o /usr/local/bin/runc https://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64 \u0026\u0026 chmod +x /usr/local/bin/runc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install     make     golang     bats     btrfs-progs-devel     device-mapper-devel     glib2-devel     gpgme-devel     libassuan-devel     libseccomp-devel     ostree-devel     bzip2     go-md2man     skopeo-containers     skopeo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install automake                    autoconf                    gettext-devel                    libtool                    libxslt                    libsemanage-devel                    bison                    libcap-devel                    podman"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp/ \u0026\u0026     git clone https://github.com/shadow-maint/shadow \u0026\u0026     cd shadow \u0026\u0026     ./autogen.sh --prefix=/usr --enable-man \u0026\u0026     make \u0026\u0026     sudo make -C src install \u0026\u0026     rm -rf /tmp/shadow"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /tmp/buildah \u0026\u0026   cd /tmp/buildah \u0026\u0026   export GOPATH=`pwd` \u0026\u0026   git clone https://github.com/containers/buildah ./src/github.com/containers/buildah \u0026\u0026   cd ./src/github.com/containers/buildah \u0026\u0026   make  \u0026\u0026   make install \u0026\u0026   rm -rf /tmp/buildah"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lo /tmp/openshift-origin-client-tools.tar.gz https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar --strip 1 -zxf /tmp/openshift-origin-client-tools.tar.gz -C /usr/local/bin \u0026\u0026 rm -f /tmp/openshift-origin-client-tools.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODEJS_VERSION",
              "Value": "6"
            },
            {
              "Key": "NPM_RUN",
              "Value": "start"
            },
            {
              "Key": "NPM_CONFIG_PREFIX",
              "Value": "$HOME/.npm-global"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker_build.sh",
            "/usr/local/bin/docker_build"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "publish_plugin.sh",
            "/usr/local/bin/publish_plugin"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/projects"
        },
        {
          "CmdLine": [
            "mkdir /node_modules /umoci_images"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"%wheel ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers \u0026\u0026     useradd -u 1000 -G users,wheel,root -d /home/user --shell /bin/bash -m user \u0026\u0026     usermod -p \"*\" user \u0026\u0026     echo '\"--*.modules-folder\" \"/node_modules\"' \u003e /home/user/.yarnrc \u0026\u0026     touch /etc/subuid \u0026\u0026     touch /etc/subgid"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "user"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/user"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "for f in \"/home/user\" \"/etc/passwd\" \"/etc/group\" \"/etc/subuid\" \"/etc/subgid\" \"/projects\" \"/node_modules\" \"/umoci_images\"; do           sudo chgrp -R 0 ${f} \u0026\u0026            sudo chmod -R g+rwX ${f};         done \u0026\u0026         cat /etc/passwd |         sed s#user:x.*#user:x:\\${USER_ID}:\\${GROUP_ID}::\\${HOME}:/bin/bash#g         \u003e /home/user/passwd.template \u0026\u0026         cat /etc/group |         sed s#root:x:0:#root:x:0:0,\\${USER_ID}:#g         \u003e /home/user/group.template \u0026\u0026         echo \\${USER_ID}:110000:65536 \u003e /home/user/subuid.template \u0026\u0026         echo \\${USER_ID}:110000:65536 \u003e /home/user/subgid.template"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/cyphar/orca-build.git \u0026\u0026             cd  orca-build \u0026\u0026             sudo make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/tests/",
            "/tests/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/home/user/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/home/user/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "tail -f /dev/null"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}