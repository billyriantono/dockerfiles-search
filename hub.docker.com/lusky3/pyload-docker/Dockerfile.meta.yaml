MetaArgs:
- DefaultValue: '"bionic"'
  Key: UBUNTU_RELEASE
  ProvidedValue: null
  Value: '"bionic"'
Stages:
- As: builder
  BaseName: lsiobase/ubuntu:$UBUNTU_RELEASE
  Commands:
  - Key: APT_INSTALL_OPTIONS
    Name: arg
    Value: '"--no-install-recommends --yes"'
  - Key: PIP_INSTALL_OPTIONS
    Name: arg
    Value: '"--disable-pip-version-check --no-cache-dir --no-compile --upgrade"'
  - Key: APK_PACKAGES
    Name: arg
    Value: '"python3 openssl python3-distutils wget"'
  - Key: PIP_PACKAGES
    Name: arg
    Value: '"pip setuptools wheel"'
  - CmdLine:
    - echo "**** install Python ****" && apt-get update && apt-get install $APT_INSTALL_OPTIONS
      $APK_PACKAGES && ln -sf python3 /usr/bin/python && echo "**** install pip ****"
      && wget -q -O - "https://bootstrap.pypa.io/get-pip.py" | python /dev/stdin $PIP_INSTALL_OPTIONS
      && ln -sf pip3 /usr/bin/pip
    Name: run
    PrependShell: true
  From:
    Image: lsiobase/ubuntu:$UBUNTU_RELEASE
  Name: builder
  Platform: ""
  SourceCode: FROM lsiobase/ubuntu:$UBUNTU_RELEASE as builder
- As: wheels_builder
  BaseName: builder
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - setup.cfg
    - /source/setup.cfg
  - Name: workdir
    Path: /wheels
  - CmdLine:
    - echo "**** build pyLoad dependencies ****" && python -c "import configparser
      as cp; c = cp.ConfigParser(); c.read('/source/setup.cfg'); print(c['options']['install_requires']
      + c['options.extras_require']['extra'])" | xargs pip wheel --wheel-dir=.
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: builder
  Name: wheels_builder
  Platform: ""
  SourceCode: FROM builder as wheels_builder
- As: source_builder
  BaseName: builder
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /source
  - Name: workdir
    Path: /source
  - Key: PIP_INSTALL_OPTIONS
    Name: arg
    Value: '"--disable-pip-version-check --no-cache-dir --no-compile --upgrade"'
  - Key: PIP_PACKAGES
    Name: arg
    Value: '"Babel Jinja2"'
  - CmdLine:
    - echo "**** build pyLoad locales ****" && pip install $PIP_INSTALL_OPTIONS $PIP_PACKAGES
      && python setup.py build_locale
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: builder
  Name: source_builder
  Platform: ""
  SourceCode: FROM builder as source_builder
- As: package_builder
  BaseName: builder
  Commands:
  - Chown: ""
    From: wheels_builder
    Name: copy
    SourcesAndDest:
    - /wheels
    - /wheels
  - Chown: ""
    From: source_builder
    Name: copy
    SourcesAndDest:
    - /source
    - /source
  - Name: workdir
    Path: /package
  - Key: PIP_INSTALL_OPTIONS
    Name: arg
    Value: '"--disable-pip-version-check --no-cache-dir --no-compile --upgrade"'
  - CmdLine:
    - echo "**** build pyLoad package ****" && pip install $PIP_INSTALL_OPTIONS --find-links=/wheels
      --no-index --prefix=. /source[extra]
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: builder
  Name: package_builder
  Platform: ""
  SourceCode: FROM builder as package_builder
- BaseName: builder
  Commands:
  - Labels:
    - Key: version
      Value: '"1.0"'
    - Key: description
      Value: '"The free and open-source Download Manager written in pure Python"'
    - Key: maintainer
      Value: '"vuolter@gmail.com"'
    Name: label
  - Env:
    - Key: PYTHONUNBUFFERED
      Value: "1"
    Name: env
  - Key: APT_INSTALL_OPTIONS
    Name: arg
    Value: '"--no-install-recommends --yes"'
  - Key: APT_PACKAGES
    Name: arg
    Value: '"sqlite tesseract-ocr unrar"'
  - Key: TEMP_PATHS
    Name: arg
    Value: '"/root/.cache /tmp/* /var/lib/apt/lists/* /var/tmp/*"'
  - CmdLine:
    - echo "**** install binary packages ****" && apt-get install $APT_INSTALL_OPTIONS
      $APT_PACKAGES && echo "**** create s6 fix-attr script ****" && echo -e " /config
      true abc:abc 0644 0755 \n /downloads false abc:abc 0644 0755 \n " > /etc/fix-attrs.d/10-run
      && echo "**** create s6 service script ****" && mkdir -p /etc/services.d/pyload
      && echo -e " umask 022 \n exec s6-setuidgid abc pyload --userdir /config --storagedir
      /downloads " > /etc/services.d/pyload/run && echo "**** cleanup ****" && rm
      -rf $TEMP_PATHS && echo "**** finalize pyLoad ****"
    Name: run
    PrependShell: true
  - Chown: ""
    From: package_builder
    Name: copy
    SourcesAndDest:
    - /package
    - /usr/local
  - Name: expose
    Ports:
    - "8001"
    - "9666"
  - Name: volume
    Volumes:
    - /config
    - /downloads
  From:
    Stage:
      Index: 0
      Named: builder
  Name: ""
  Platform: ""
  SourceCode: FROM builder
