MetaArgs: null
Stages:
- BaseName: ubuntu:xenial
  Commands:
  - Maintainer: AXErunners <info@axerunners.com>
    Name: maintainer
  - Key: USER_ID
    Name: arg
    Value: null
  - Key: GROUP_ID
    Name: arg
    Value: null
  - Key: VERSION
    Name: arg
    Value: null
  - Env:
    - Key: USER
      Value: axecore
    Name: env
  - Env:
    - Key: COMPONENT
      Value: ${USER}
    Name: env
  - Env:
    - Key: HOME
      Value: /${USER}
    Name: env
  - Env:
    - Key: USER_ID
      Value: ${USER_ID:-1000}
    Name: env
  - Env:
    - Key: GROUP_ID
      Value: ${GROUP_ID:-1000}
    Name: env
  - CmdLine:
    - "groupadd -g ${GROUP_ID} ${USER} \t&& useradd -u ${USER_ID} -g ${USER} -s /bin/bash
      -m -d ${HOME} ${USER}"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.7"
    Name: env
  - CmdLine:
    - set -x     && apt-get update && apt-get install -y --no-install-recommends ca-certificates
      wget software-properties-common     && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture)"     && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture).asc"     && export GNUPGHOME="$(mktemp -d)"     && gpg
      --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4     &&
      gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu     && rm -r
      "$GNUPGHOME" /usr/local/bin/gosu.asc     && chmod +x /usr/local/bin/gosu     &&
      apt-add-repository ppa:bitcoin/bitcoin     && apt-get update && apt-get install
      -y libdb4.8-dev libdb4.8++-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev
      qttools5-dev-tools     && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*
      /var/tmp/*     && gosu nobody true
    Name: run
    PrependShell: true
  - Env:
    - Key: VERSION
      Value: ${VERSION:-1.3.0}
    Name: env
  - CmdLine:
    - wget -O /tmp/${COMPONENT}.tar.gz "https://github.com/AXErunners/axe/releases/download/v${VERSION}/axecore-${VERSION}-x86_64-linux-gnu.tar.gz"     &&
      cd /tmp/     && tar zxvf ${COMPONENT}.tar.gz     && mv /tmp/${COMPONENT}-* /opt/${COMPONENT}     &&
      rm -rf /tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - set -x     && apt-get update && apt-get install -y libminiupnpc-dev python-virtualenv
      git virtualenv cron     && mkdir -p /sentinel     && cd /sentinel     && git
      clone https://github.com/axerunners/sentinel.git .     && virtualenv ./venv     &&
      ./venv/bin/pip install -r requirements.txt     && touch sentinel.log     &&
      chown -R ${USER} /sentinel     && echo '* * * * * '${USER}' cd /sentinel &&
      SENTINEL_DEBUG=1 ./venv/bin/python bin/sentinel.py >> sentinel.log 2>&1' >>
      /etc/cron.d/sentinel     && chmod 0644 /etc/cron.d/sentinel     && touch /var/log/cron.log
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "9337"
    - "9937"
  - Name: volume
    Volumes:
    - ${HOME}
  - Name: workdir
    Path: ${HOME}
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./bin
    - /usr/local/bin
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - start-unprivileged.sh
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:xenial
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:xenial
