{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "lsiobase/alpine:3.5",
      "SourceCode": "FROM lsiobase/alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "lsiobase/alpine:3.5"
      },
      "Commands": [
        {
          "Maintainer": "sparklyballs, ajw107 (Alex Wood)",
          "Name": "maintainer"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "build_version",
              "Value": "\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm-color"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "prebuilds/",
            "/defaults/"
          ]
        },
        {
          "Key": "BRAINZ_VER",
          "Name": "arg",
          "Value": "\"v-2017-02-27\""
        },
        {
          "Env": [
            {
              "Key": "BABEL_DISABLE_CACHE",
              "Value": "\"1\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "\"/root\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "\"en_US.utf8\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAX_WORKERS",
              "Value": "\"1\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MBDATA",
              "Value": "\"/data/import\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGCONF",
              "Value": "\"/config\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGDATA",
              "Value": "\"/data/dbase\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "UPDATE_SLAVE_LOGDIR",
              "Value": "\"/config/log/musicbrainz\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "URL_ROOT",
              "Value": "\"ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual=build-dependencies \tdb-dev \texpat-dev \tg++ \tgcc \ticu-dev \tlibxml2-dev \tmake \tperl-dev \u0026\u0026 apk add --no-cache \tbzip2 \tcurl \tdb \texpat \tgit \ticu-libs \tnodejs \tpatch \tlogrotate \tperl \tperl-crypt-rijndael \tperl-dbd-pg \tperl-db_file \tperl-net-ssleay \tpostgresql \tpostgresql-contrib \tpostgresql-dev \tprocps \tredis \ttar \twget \tnano \u0026\u0026 mkdir -p \t/app/musicbrainz \u0026\u0026 curl -o  /tmp/musicbrainz.tar.gz -L \t\"https://github.com/metabrainz/musicbrainz-server/archive/${BRAINZ_VER}.tar.gz\" \u0026\u0026 tar xf  /tmp/musicbrainz.tar.gz -C \t/app/musicbrainz --strip-components=1 \u0026\u0026 if [ ! -e \"/app/musicbrainz/cpanfile\" ]; then \tcat /app/musicbrainz/Makefile.PL | grep ^requires \u003e /app/musicbrainz/cpanfile; fi  \u0026\u0026 sed -i '/![^#]/ s/\\(^.*test_requires 'Coro';.*$\\)/#\\ \\1/' /app/musicbrainz/cpanfile \u0026\u0026 sed -i 's#$MB_SERVER_ROOT/#$UPDATE_SLAVE_LOGDIR/#g' /app/musicbrainz/admin/cron/slave.sh \u0026\u0026 cp /defaults/DBDefs.pm /app/musicbrainz/lib/DBDefs.pm \u0026\u0026 cd /app/musicbrainz \u0026\u0026 curl -L http://cpanmin.us | perl - App::cpanminus \u0026\u0026 cpanm --installdeps --notest . \u0026\u0026 cpanm --notest \tCache::Memcached::Fast \tCache::Memory \tCatalyst::Plugin::Cache::HTTP \tCatalyst::Plugin::StackTrace \tDigest::MD5::File \tPlack::Handler::Starlet \tPlack::Middleware::Debug::Base \tServer::Starter \tStarlet \tStarlet::Server \tTerm::Size::Any \u0026\u0026 npm install \u0026\u0026 ./script/compile_resources.sh \u0026\u0026 git clone git://github.com/metabrainz/postgresql-musicbrainz-unaccent \t/tmp/postgresql-musicbrainz-unaccent \u0026\u0026 cd /tmp/postgresql-musicbrainz-unaccent \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 git clone git://github.com/metabrainz/postgresql-musicbrainz-collate.git \t/tmp/postgresql-musicbrainz-collate \u0026\u0026 cd /tmp/postgresql-musicbrainz-collate \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 apk del --purge \tbuild-dependencies \u0026\u0026 rm -rf \t/root/.cpanm \t/root/.npm \t/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "root/",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/bin/ll"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config",
            "/data"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5000"
          ]
        }
      ]
    }
  ]
}