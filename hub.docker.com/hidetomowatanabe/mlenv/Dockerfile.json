{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "hidetomo",
          "Name": "maintainer"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/root_pass",
            "root_pass"
          ]
        },
        {
          "CmdLine": [
            "echo \"root:$(cat root_pass)\" | chpasswd \u0026\u0026   useradd hidetomo \u0026\u0026   mkdir /home/hidetomo \u0026\u0026   chown hidetomo:hidetomo /home/hidetomo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/hidetomo_pass",
            "hidetomo_pass"
          ]
        },
        {
          "CmdLine": [
            "echo \"hidetomo:$(cat hidetomo_pass)\" | chpasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt -y update \u0026\u0026   apt -y install sudo \u0026\u0026   echo \"hidetomo ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "hidetomo"
        },
        {
          "Name": "workdir",
          "Path": "/home/hidetomo"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/hidetomo"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"alias ls='ls --color'\" \u003e\u003e .bashrc \u0026\u0026   echo \"alias ll='ls -lat'\" \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install vim"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/.vimrc",
            ".vimrc"
          ]
        },
        {
          "CmdLine": [
            "sudo tr \\\\r \\\\n \u003c.vimrc\u003e tmp \u0026\u0026 sudo mv tmp .vimrc \u0026\u0026   sudo chown hidetomo:hidetomo .vimrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir share"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "share"
          ]
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install     ntp     htop     less     zip     unzip     bzip2     gcc     g++     cmake     git     subversion     wget     curl     nkf     language-pack-ja-base     language-pack-ja     xvfb     xfonts-100dpi     xfonts-75dpi     xfonts-scalable     xfonts-cyrillic     fonts-takao-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"export LC_ALL=ja_JP.UTF-8\" \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "ja_JP.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/yyuu/pyenv.git .pyenv \u0026\u0026   echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYENV_ROOT",
              "Value": "$HOME/.pyenv"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' \u003e\u003e .bashrc \u0026\u0026   echo 'eval \"$(pyenv init -)\"' \u003e\u003e .bashrc \u0026\u0026   echo 'export PYTHONIOENCODING=utf-8' \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PYENV_ROOT/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "pyVer",
          "Name": "arg",
          "Value": "miniconda3-4.3.30"
        },
        {
          "CmdLine": [
            "pyenv install ${pyVer} \u0026\u0026   pyenv rehash \u0026\u0026   pyenv global ${pyVer} \u0026\u0026   echo 'export PATH=\"$PYENV_ROOT/versions/'${pyVer}'/bin/:$PATH\"' \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PYENV_ROOT/versions/${pyVer}/bin/:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "conda install -y pip \u0026\u0026   conda install -y openCV \u0026\u0026   pip install opencv-python==4.1.2.30     memory_profiler==0.55.0     flake8==3.7.9     tqdm==4.40.0     pandas-profiling==2.3.0     Cython==0.29.14     schema==0.7.1     dask==2.9.0     scikit-learn==0.21.3     imbalanced-learn==0.5.0     eli5==0.10.1     heamy==0.0.7     kaggle==1.5.6"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install scikit-image==0.14.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install jupyter==1.0.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter-notebook --generate-config \u0026\u0026   echo 'c.NotebookApp.ip = \"0.0.0.0\"' \u003e\u003e .jupyter/jupyter_notebook_config.py \u0026\u0026   echo 'c.NotebookApp.open_browser = False' \u003e\u003e .jupyter/jupyter_notebook_config.py \u0026\u0026   pip install jupyterthemes==0.20.0 \u0026\u0026   jt -t grade3 -f hack \u0026\u0026   jupyter nbextension enable --py --sys-prefix widgetsnbextension"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install optuna==0.19.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install python-Levenshtein==0.12.0   zenhan==0.5.2   pykakasi==1.2   nltk==3.4.5   spacy==2.2.3   gensim==3.8.1   fasttext==0.9.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install     swig     mecab     libmecab-dev     mecab-ipadic     mecab-ipadic-utf8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install mecab-python3==0.996.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/CRF++-0.58.tar.gz",
            "."
          ]
        },
        {
          "CmdLine": [
            "tar zxvf CRF++-0.58.tar.gz \u0026\u0026   rm CRF++-0.58.tar.gz \u0026\u0026   cd CRF++-0.58 \u0026\u0026   ./configure \u0026\u0026   make \u0026\u0026   sudo make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo \"include /usr/local/bin\" \u003e\u003e /etc/ld.so.conf \u0026\u0026   ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "hidetomo"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/cabocha-0.69.tar.bz2",
            "."
          ]
        },
        {
          "CmdLine": [
            "bzip2 -dc cabocha-0.69.tar.bz2 | tar xvf - \u0026\u0026   rm cabocha-0.69.tar.bz2 \u0026\u0026   cd cabocha-0.69 \u0026\u0026   ./configure --with-charset=UTF8 --enable-utf8-only \u0026\u0026   make \u0026\u0026   sudo make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd cabocha-0.69 \u0026\u0026   cd python \u0026\u0026   python setup.py build_ext \u0026\u0026   python setup.py install \u0026\u0026   sudo ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install keras-bert==0.80.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install     tesseract-ocr     libtesseract-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install pyocr==0.7.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install xgboost==0.90"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install lightgbm==2.3.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install catboost==0.20.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install rgf-python==3.6.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install tensorflow==2.0.0   Keras==2.3.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install torch==1.3.1   torchvision==0.4.2   skorch==0.7.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install graphviz \u0026\u0026   pip install graphviz==0.13.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install seaborn==0.9.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt -y update \u0026\u0026   sudo apt -y install xdg-utils \u0026\u0026   pip install dtreeviz==0.8.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install shap==0.33.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter",
            "notebook",
            "--notebook-dir=share",
            "--port=8888"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}