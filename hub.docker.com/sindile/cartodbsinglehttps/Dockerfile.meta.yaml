MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y -q apt-utils software-properties-common
      locales && dpkg-reconfigure locales &&       locale-gen en_US.UTF-8 &&       update-locale
      LANG=en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: CARTODB_VERSION
      Value: master
    Name: env
  - Env:
    - Key: SQLAPI_VERSION
      Value: master
    Name: env
  - Env:
    - Key: CRANKSHAFT_VERSION
      Value: master
    Name: env
  - Env:
    - Key: WINDSHAFT_VERSION
      Value: master
    Name: env
  - Env:
    - Key: DATASERVICES_VERSION
      Value: master
    Name: env
  - Env:
    - Key: DATAERVICESAPI_VERSION
      Value: master
    Name: env
  - Env:
    - Key: OBSERVATORY_VERSION
      Value: master
    Name: env
  - Env:
    - Key: RAILS_ENV
      Value: production
    Name: env
  - CmdLine:
    - useradd -m -d /home/cartodb -s /bin/bash cartodb &&   apt-get install -y -q     build-essential     autoconf     automake     libtool     checkinstall     unp     zip     unzip     git-core     git     subversion     curl     libgeos-c1v5     libgeos-dev     libjson-c-dev     python-simplejson     proj-bin     proj-data     libproj-dev     gdal-bin     libgdal-dev     postgresql-10     postgresql-client-10     postgresql-contrib-10     postgresql-server-dev-10     postgresql-plpython-10     postgresql-10-plproxy     postgresql-10-postgis-2.4     postgresql-10-postgis-scripts     postgis     liblwgeom-2.4-0     ca-certificates     redis-server     python2.7-dev     python-setuptools     imagemagick     libmapnik-dev     mapnik-utils     python-mapnik     python-argparse     python-gdal     python-chardet     python-all-dev     python-docutils     openssl     libreadline7     zlib1g     zlib1g-dev     libssl-dev     libyaml-dev     libsqlite3-dev     sqlite3     libxml2-dev     libxslt-dev     libc6-dev     ncurses-dev     bison     pkg-config     libpq5     libpq-dev     libcurl4-gnutls-dev     libffi-dev     libgdbm-dev     gnupg     libreadline6-dev     libcairo2-dev     libjpeg8-dev     libpango1.0-dev     libgif-dev     libgmp-dev     libicu-dev     wget     nginx-light     net-tools     ruby2.5-dev     xz-utils   --no-install-recommends
      &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - git config --global user.email you@example.com
    Name: run
    PrependShell: true
  - CmdLine:
    - git config --global user.name "Your Name"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /opt &&     wget http://varnish-cache.org/_downloads/varnish-3.0.7.tgz &&     tar
      -zxf varnish-3.0.7.tgz &&     cd varnish-3.0.7 &&     ./configure --prefix=/opt/varnish
      &&     make &&     make install &&     cd /opt &&     rm -rf varnish-3.0.7 varnish-3.0.7.tgz
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz |tar -Jxf
      - --strip-components=1 -C /usr &&   npm install -g grunt-cli &&   npm install
      -g npm@6 &&   rm -r /tmp/npm-* /root/.npm
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i 's/\(peer\|md5\)/trust/' /etc/postgresql/10/main/pg_hba.conf &&     sed
      -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/10/main/postgresql.conf
      &&     service postgresql start &&     createuser publicuser --no-createrole
      --no-createdb --no-superuser -U postgres &&     createuser tileuser --no-createrole
      --no-createdb --no-superuser -U postgres &&     service postgresql stop
    Name: run
    PrependShell: true
  - CmdLine:
    - cd / &&     curl https://bootstrap.pypa.io/get-pip.py | python &&     git clone
      https://github.com/CartoDB/crankshaft.git &&     cd /crankshaft &&     git checkout
      $CRANKSHAFT_VERSION &&     make install &&     pip install --force-reinstall
      --no-cache-dir scikit-learn==0.17.0 &&     cd ..
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./template_postgis.sh
    - /tmp/template_postgis.sh
  - CmdLine:
    - service postgresql start && /bin/su postgres -c       /tmp/template_postgis.sh
      && service postgresql stop
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./cartodb_pgsql.sh
    - /tmp/cartodb_pgsql.sh
  - CmdLine:
    - git clone git://github.com/CartoDB/CartoDB-SQL-API.git &&     cd CartoDB-SQL-API
      &&     git checkout $SQLAPI_VERSION &&     npm install -g yarn &&     yarn install
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone git://github.com/CartoDB/Windshaft-cartodb.git &&     cd Windshaft-cartodb
      &&     git checkout $WINDSHAFT_VERSION &&     yarn install &&     mkdir logs
    Name: run
    PrependShell: true
  - CmdLine:
    - 'git clone --recursive git://github.com/CartoDB/cartodb.git &&     cd cartodb
      &&     git checkout $CARTODB_VERSION &&     cd lib/sql &&     PGUSER=postgres
      make install &&     service postgresql start && /bin/su postgres -c       /tmp/cartodb_pgsql.sh
      && service postgresql stop &&     cd - &&     npm install &&     rm -r /tmp/npm-*
      /root/.npm &&     perl -pi -e ''s/gdal==1\.10\.0/gdal==2.2.2/'' python_requirements.txt
      &&     pip install --no-binary :all: -r python_requirements.txt &&     gem install
      bundler --version=1.17.3 && gem install compass archive-tar-minitar rack &&     bundle
      update thin &&     /bin/bash -l -c ''bundle install'' &&     cp config/grunt_development.json
      ./config/grunt_true.json &&     /bin/bash -l -c ''bundle exec grunt'''
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/CartoDB/data-services.git &&   cd /data-services/geocoder/extension
      &&   git checkout $DATASERVICES_VERSION &&   PGUSER=postgres make all install
      && cd / &&   git clone https://github.com/CartoDB/dataservices-api.git &&   cd
      /dataservices-api/server/extension &&   git checkout $DATAERVICESAPI_VERSION
      &&   PGUSER=postgres make install &&   cd ../lib/python/cartodb_services &&   pip
      install -r requirements.txt && pip install . &&   cd ../../../../client && PGUSER=postgres
      make install
    Name: run
    PrependShell: true
  - CmdLine:
    - cd / && git clone --recursive https://github.com/CartoDB/observatory-extension.git
      &&   cd observatory-extension &&   git checkout $OBSERVATORY_VERSION &&   PGUSER=postgres
      make deploy
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/CartoDB-prod.js
    - /CartoDB-SQL-API/config/environments/production.js
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/WS-prod.js
    - /Windshaft-cartodb/config/environments/production.js
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/app_config.yml
    - /cartodb/config/app_config.yml
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/database.yml
    - /cartodb/config/database.yml
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./create_dev_user
    - /cartodb/script/create_dev_user
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./setup_organization.sh
    - /cartodb/script/setup_organization.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/cartodb.nginx.proxy.conf
    - /etc/nginx/sites-enabled/default
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./config/varnish.vcl
    - /etc/varnish.vcl
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./geocoder.sh
    - /cartodb/script/geocoder.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./geocoder_server.sql
    - /cartodb/script/geocoder_server.sql
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./fill_geocoder.sh
    - /cartodb/script/fill_geocoder.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./sync_tables_trigger.sh
    - /cartodb/script/sync_tables_trigger.sh
  - Env:
    - Key: PATH
      Value: /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    Name: env
  - CmdLine:
    - "mkdir -p /cartodb/log && touch /cartodb/log/users_modifications &&     /opt/varnish/sbin/varnishd
      -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl &&     perl -pi.bak
      -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf &&     service
      postgresql start && service redis-server start &&     perl -pi -e 's/0\\.22\\.0/0.22.2/'
      /cartodb/app/models/user/db_service.rb && \tbash -l -c \"cd /cartodb && bash
      script/create_dev_user &&     bash script/setup_organization.sh && bash script/geocoder.sh\"
      && \tservice postgresql stop && service redis-server stop &&     chmod +x /cartodb/script/fill_geocoder.sh
      &&     chmod +x /cartodb/script/sync_tables_trigger.sh"
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository ppa:certbot/certbot
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt -q -y install nano && apt -q -y install python-certbot-nginx
      && apt -q -y install openssl
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "3000"
    - "8080"
    - "8181"
  - Env:
    - Key: GDAL_DATA
      Value: /usr/share/gdal/2.2
    Name: env
  - Env:
    - Key: SYNC_TABLES_INTERVAL
      Value: "3600"
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./startup.sh
    - /opt/startup.sh
  - CmdLine:
    - /bin/bash
    - /opt/startup.sh
    Name: cmd
    PrependShell: false
  - Health:
      Test:
      - CMD-SHELL
      - curl -f http://localhost || exit 1
    Name: healthcheck
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
