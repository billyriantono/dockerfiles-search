MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"janikarh@gmail.com"'
    Name: label
  - Env:
    - Key: LANGUAGE
      Value: C.UTF-8
    - Key: LC_ALL
      Value: C.UTF-8
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories
      \t&& apk update && apk upgrade \t&& apk add --no-cache tini python3 libstdc++
      openblas freetype wget ca-certificates \t&& python3 -m ensurepip && rm -r /usr/lib/python*/ensurepip
      \t&& pip3 install --upgrade pip setuptools \t&& apk add --no-cache --virtual
      .build-deps@testing python3-dev make cmake clang clang-dev g++            linux-headers
      libtbb libtbb-dev openblas-dev freetype-dev libxml2-dev libxslt-dev nano \t&&
      export CC=/usr/bin/clang CXX=/usr/bin/clang++ \t&& ln -s /usr/include/locale.h
      /usr/include/xlocale.h \t&& mkdir -p /opt/tmp && cd /opt/tmp \t&& pip3 install
      --no-cache-dir jupyter ipywidgets numpy pandas xlrd lxml matplotlib seaborn
      \                pandas-highcharts ipysankeywidget calmap requests beautifulsoup4
      minio sqlalchemy jupyterlab \t&& jupyter nbextension enable --py widgetsnbextension
      \t&& jupyter nbextension enable --py ipysankeywidget \t&& echo \"c.NotebookApp.token
      = ''\" > /root/.jupyter/jupyter_notebook_config.py \t&& cd /opt && rm -r /opt/tmp
      && mkdir -p /opt/notebook \t&& unset CC CXX \t&& apk del .build-deps \t&& rm
      -r /root/.cache \t&& find /usr/lib/python3.6/ -type d -name tests -depth -exec
      rm -rf {} \\; \t&& find /usr/lib/python3.6/ -type d -name test -depth -exec
      rm -rf {} \\; \t&& find /usr/lib/python3.6/ -name __pycache__ -depth -exec rm
      -rf {} \\;"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories
      \t&& apk update && apk upgrade \t&& apk add --no-cache tini python3 libstdc++
      openblas freetype wget ca-certificates \t&& pip3 install --upgrade pip setuptools
      \t&& apk add --no-cache --virtual .build-deps@testing python3-dev make cmake
      clang clang-dev g++ linux-headers libtbb libtbb-dev openblas-dev freetype-dev
      \t&& export CC=/usr/bin/clang CXX=/usr/bin/clang++ \t&& mkdir -p /opt/tmp &&
      cd /opt/tmp \t&& pip3 download -d /opt/tmp numpy \t&& unzip -q numpy*.zip \t&&
      cd numpy* && echo \"Building numpy...\" \t&& echo -e \"[ALL]\\nlibrary_dirs
      = /usr/lib\\ninclude_dirs = /usr/include\\n[atlas]\\natlas_libs = openblas\\nlibraries
      = openblas\\n[openblas]\\nlibraries = openblas\\nlibrary_dirs = /usr/lib\\ninclude_dirs
      = /usr/include\\n\" > site.cfg \t&& python3 setup.py build -j 4 install &> /dev/null
      && echo \"Successfully installed numpy\" \t&& cd /opt/tmp \t&& echo \"Downloading
      opencv\" && wget --quiet https://github.com/opencv/opencv/archive/4.0.1.zip
      \t&& unzip -q 4.0.1.zip \t&& cd opencv* \t&& mkdir build && cd build && echo
      \"Building opencv...\" \t&& cmake -D CMAKE_BUILD_TYPE=RELEASE \t\t-D CMAKE_INSTALL_PREFIX=/usr
      \t\t-D INSTALL_C_EXAMPLES=OFF \t\t-D INSTALL_PYTHON_EXAMPLES=OFF \t\t-D WITH_FFMPEG=NO
      \t\t-D WITH_IPP=NO \t\t-D WITH_OPENEXR=NO \t\t-D WITH_WEBP=NO \t\t-D WITH_TIFF=NO
      \t\t-D WITH_JASPER=NO \t\t-D BUILD_EXAMPLES=OFF \t\t-D BUILD_PERF_TESTS=NO \t\t-D
      BUILD_TESTS=NO .. \t&& make && make install && echo \"Successfully installed
      opencv\"         && cd /opt && rm -r /opt/tmp \t&& unset CC CXX \t&& apk del
      .build-deps \t&& rm -r /root/.cache \t&& find /usr/lib/python3.6/ -type d -name
      tests -depth -exec rm -rf {} \\; \t&& find /usr/lib/python3.6/ -type d -name
      test -depth -exec rm -rf {} \\; \t&& find /usr/lib/python3.6/ -name __pycache__
      -depth -exec rm -rf {} \\;"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /certs
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "jupyter lab --ip=0.0.0.0 --port=80 --no-browser --allow-root" > /bin/lab
      && chmod +x /bin/lab
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "/sbin/tini ; jupyter notebook --NotebookApp.token=test-secret --NotebookApp.allow_origin='*'
      --NotebookApp.ip=0.0.0.0 --NotebookApp.port=999 --no-browser --allow-root" >
      /bin/notebook && chmod +x /bin/notebook
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/notebook
  - CmdLine:
    - /sbin/tini ; jupyter lab --ip=0.0.0.0 --port=80 --no-browser --allow-root
    Name: entrypoint
    PrependShell: true
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
