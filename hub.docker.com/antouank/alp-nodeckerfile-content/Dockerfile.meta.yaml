MetaArgs: null
Stages:
- BaseName: antonchernik/docker-image-ubuntu:18.04
  Commands:
  - CmdLine:
    - "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo
      'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \t\tlibgearman-dev \t\tlibzip-dev \t--no-install-recommends"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \tkey='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \texport GNUPGHOME=\"$(mktemp
      -d)\"; \tgpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys \"$key\";
      \tgpg --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \tgpgconf --kill
      all; \trm -rf \"$GNUPGHOME\"; \tapt-key list > /dev/null"
    Name: run
    PrependShell: true
  - Env:
    - Key: MYSQL_MAJOR
      Value: "8.0"
    Name: env
  - Env:
    - Key: MYSQL_VERSION
      Value: 8.0.13-1ubuntu18.04
    Name: env
  - CmdLine:
    - echo "deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-${MYSQL_MAJOR}" > /etc/apt/sources.list.d/mysql.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y mysql-community-client="${MYSQL_VERSION}"
      && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - mkdir -p $PHP_INI_DIR/conf.d
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --disable-cgi
    Name: env
  - Env:
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    Name: env
  - Env:
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.3.0
    Name: env
  - Env:
    - Key: PHP_URL
      Value: '"https://secure.php.net/get/php-7.3.0.tar.xz/from/this/mirror"'
    - Key: PHP_ASC_URL
      Value: '"https://secure.php.net/get/php-7.3.0.tar.xz.asc/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: '"7d195cad55af8b288c3919c67023a14ff870a73e3acc2165a6d17a4850a560b5"'
    - Key: PHP_MD5
      Value: '""'
    Name: env
  - CmdLine:
    - "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then
      \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get
      update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*;
      \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif
      [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum
      -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\"
      | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc
      \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS;
      do \t\t\t\t   for server in $(shuf -e  hkp://p80.pool.sks-keyservers.net:80
      \                                            keyserver.ubuntu.com                                             hkp://keyserver.ubuntu.com:80
      \                                            ha.pool.sks-keyservers.net                                             pgp.mit.edu)
      ; do                         gpg --keyserver \"$server\" --recv-keys \"$key\"
      && break || : ;                     done; \t\tdone; \t\tgpg --batch --verify
      php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill
      all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o
      APT::AutoRemove::RecommendsImportant=false $fetchDeps"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-source
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev
      \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev
      \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list
      > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin:
      release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package:
      libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990';
      \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install
      -y --no-install-recommends libargon2-0-dev; \trm -rf /var/lib/apt/lists/*; \t\texport
      \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\"
      \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query
      DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\"
      /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t--enable-intl \t\t--enable-wddx
      \t\t--enable-gd-jis-conv \t\t--enable-calendar \t\t--enable-pcntl \t\t--enable-soap
      \ \t\t--enable-sockets \t\t--enable-zip \t\t--with-mysqli=mysqlnd \t\t--with-pdo-mysql=mysqlnd
      \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp
      \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared
      \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test
      \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\"
      \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tmake install;
      \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all
      '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd
      /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\"
      ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec
      ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r
      dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark
      manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;
      \t\tphp --version; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-ext-*
    - docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-ext-install
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-ext-enable
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-ext-configure
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-entrypoint
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-enable sodium
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www/html
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./etc/cli/php.ini
    - /usr/local/etc/php/php.ini
  - CmdLine:
    - set -x     && curl -sS https://getcomposer.org/installer | php     && mv composer.phar
      /usr/local/bin/composer
    Name: run
    PrependShell: true
  - CmdLine:
    - set -x     && php -r "copy('https://pear.php.net/go-pear.phar', 'go-pear.phar');"     &&
      php go-pear.phar     && php -r "unlink('go-pear.phar');"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp &&     git clone https://github.com/wcgallego/pecl-gearman.git &&     cd
      pecl-gearman &&     phpize &&     ./configure &&     make && make install &&     rm
      -rf /tmp/pecl-gearman &&     docker-php-ext-enable gearman
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean     && rm -r /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /var/www/domains/
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R www-data:www-data /var/www/*
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-entrypoint
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - php
    - -a
    Name: cmd
    PrependShell: false
  From:
    Image: antonchernik/docker-image-ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM antonchernik/docker-image-ubuntu:18.04
