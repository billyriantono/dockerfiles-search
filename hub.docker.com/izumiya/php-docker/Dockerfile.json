{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:alpine",
      "SourceCode": "FROM php:alpine",
      "Platform": "",
      "From": {
        "Image": "php:alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "mkdir -p /usr/local/etc     \u0026\u0026 {         echo 'install: --no-document';         echo 'update: --no-document';     } \u003e\u003e /usr/local/etc/gemrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "RUBY_MAJOR",
              "Value": "2.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBY_VERSION",
              "Value": "2.3.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBY_DOWNLOAD_SHA256",
              "Value": "b87c738cb2032bf4920fef8e3864dc5cf8eae9d89d8d523ce0236945c5797dcd"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBYGEMS_VERSION",
              "Value": "2.6.6"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk add --no-cache --virtual .ruby-builddeps         autoconf         bison         bzip2         bzip2-dev         ca-certificates         coreutils         curl         gcc         gdbm-dev         glib-dev         libc-dev         libffi-dev         libxml2-dev         libxslt-dev         linux-headers         make         ncurses-dev         openssl-dev         procps         readline-dev         ruby         yaml-dev         zlib-dev     \u0026\u0026 curl -fSL -o ruby.tar.gz \"http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\"     \u0026\u0026 echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.gz\" | sha256sum -c -     \u0026\u0026 mkdir -p /usr/src     \u0026\u0026 tar -xzf ruby.tar.gz -C /usr/src     \u0026\u0026 mv \"/usr/src/ruby-$RUBY_VERSION\" /usr/src/ruby     \u0026\u0026 rm ruby.tar.gz     \u0026\u0026 cd /usr/src/ruby     \u0026\u0026 { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } \u003e file.c.new \u0026\u0026 mv file.c.new file.c     \u0026\u0026 autoconf     \u0026\u0026 ac_cv_func_isnan=yes ac_cv_func_isinf=yes         ./configure --disable-install-doc     \u0026\u0026 make -j\"$(getconf _NPROCESSORS_ONLN)\"     \u0026\u0026 make install     \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner --recursive /usr/local             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )\"     \u0026\u0026 apk add --virtual .ruby-rundeps $runDeps         bzip2         ca-certificates         curl         libffi-dev         openssl-dev         yaml-dev         procps         zlib-dev     \u0026\u0026 apk del .ruby-builddeps     \u0026\u0026 gem update --system $RUBYGEMS_VERSION     \u0026\u0026 rm -r /usr/src/ruby"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BUNDLER_VERSION",
              "Value": "1.12.5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "gem install bundler --version \"$BUNDLER_VERSION\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GEM_HOME",
              "Value": "/usr/local/bundle"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUNDLE_PATH",
              "Value": "\"$GEM_HOME\""
            },
            {
              "Key": "BUNDLE_BIN",
              "Value": "\"$GEM_HOME/bin\""
            },
            {
              "Key": "BUNDLE_SILENCE_ROOT_WARNING",
              "Value": "1"
            },
            {
              "Key": "BUNDLE_APP_CONFIG",
              "Value": "\"$GEM_HOME\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$BUNDLE_BIN:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\"     \u0026\u0026 chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_BUCKET",
              "Value": "get.docker.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "1.11.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_SHA256",
              "Value": "8c2e0c35e3cda11706f54b2d46c2521a6e9026a7b13c7d4b8ae1f3a706fc55e1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 curl -fSL \"https://${DOCKER_BUCKET}/builds/Linux/x86_64/docker-$DOCKER_VERSION.tgz\" -o docker.tgz     \u0026\u0026 echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c -     \u0026\u0026 tar -xzvf docker.tgz     \u0026\u0026 mv docker/* /usr/local/bin/     \u0026\u0026 rmdir docker     \u0026\u0026 rm docker.tgz     \u0026\u0026 docker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache         git         openssh-client         python         py-pip         zip         bash     \u0026\u0026 pip install docker-compose     \u0026\u0026 pip install awscli --ignore-installed six"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_COMPOSER_VERSION",
              "Value": "1.2.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer   | php -- --install-dir=/usr/local/bin --filename=composer --version=$PHP_COMPOSER_VERSION"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk add --no-cache --virtual .xdebug-builddeps         autoconf         gcc         libc-dev         make     \u0026\u0026 pecl install xdebug     \u0026\u0026 docker-php-ext-enable xdebug     \u0026\u0026 apk del .xdebug-builddeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DPL_VERSION",
              "Value": "1.8.17"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NOKOGIRI_VERSION",
              "Value": "1.6.8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "AWS_SDK_VERSION",
              "Value": "1.66.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBY_ZIP_VERSION",
              "Value": "1.2.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk add --no-cache --virtual .dpl-builddeps         autoconf         gcc         libc-dev         libxml2-dev         make     \u0026\u0026 gem install nokogiri -v $NOKOGIRI_VERSION     \u0026\u0026 gem install dpl -v $DPL_VERSION     \u0026\u0026 gem install aws-sdk-v1 -v $AWS_SDK_VERSION     \u0026\u0026 gem install rubyzip -v $RUBY_ZIP_VERSION     \u0026\u0026 apk del .dpl-builddeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-install pdo_mysql"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}