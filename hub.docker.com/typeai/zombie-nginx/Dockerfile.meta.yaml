MetaArgs: null
Stages:
- BaseName: alpine:edge
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Marcin Baczy≈Ñski <marcin.baczynski@dlabs.pl>"'
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.6
    Name: env
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     && CONFIG="        --prefix=/etc/nginx         --sbin-path=/usr/sbin/nginx         --modules-path=/usr/lib/nginx/modules         --conf-path=/etc/nginx/nginx.conf         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --pid-path=/var/run/nginx.pid         --lock-path=/var/run/nginx.lock         --http-client-body-temp-path=/var/cache/nginx/client_temp         --http-proxy-temp-path=/var/cache/nginx/proxy_temp         --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp         --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp         --http-scgi-temp-path=/var/cache/nginx/scgi_temp         --user=nginx         --group=nginx         --with-http_ssl_module         --with-http_realip_module         --with-http_addition_module         --with-http_sub_module         --with-http_dav_module         --with-http_mp4_module         --with-http_gunzip_module         --with-http_gzip_static_module         --with-http_secure_link_module         --with-http_stub_status_module         --with-http_auth_request_module         --with-threads         --with-stream         --with-stream_ssl_module         --with-stream_ssl_preread_module         --with-stream_realip_module         --with-http_slice_module         --with-file-aio         --with-http_v2_module     "     &&
      addgroup -S nginx     && adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx     && apk update && apk upgrade     && apk add --virtual .build-deps         curl         gcc         gnupg         libc-dev         libffi-dev         linux-headers         make         openssl-dev         pcre-dev         python3-dev         zlib-dev     &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     &&
      export GNUPGHOME="$(mktemp -d)"     && found='''';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ;
      do         echo "Fetching GPG key $GPG_KEYS from $server";         gpg --keyserver
      "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes
      && break;     done;     test -z "$found" && echo >&2 "error: failed to fetch
      GPG key $GPG_KEYS" && exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     &&
      rm -rf "$GNUPGHOME" nginx.tar.gz.asc     && mkdir -p /usr/src     && tar -zxC
      /usr/src -f nginx.tar.gz     && rm nginx.tar.gz     && cd /usr/src/nginx-$NGINX_VERSION     &&
      ./configure $CONFIG     && make -j$(getconf _NPROCESSORS_ONLN)     && make install     &&
      rm -rf /etc/nginx/html/     && mkdir /etc/nginx/conf.d/     && mkdir -p /usr/share/nginx/html/     &&
      install -m644 html/index.html /usr/share/nginx/html/     && install -m644 html/50x.html
      /usr/share/nginx/html/     && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules     &&
      strip /usr/sbin/nginx*     && rm -rf /usr/src/nginx-$NGINX_VERSION         &&
      apk add --virtual .gettext gettext     && cd / && apk add python3     && pip3
      install -U pip && pip3 install PyYAML==3.13 certbot     && mv /usr/bin/envsubst
      /tmp/         && runDeps="$(         scanelf --needed --nobanner --format ''%n#p''
      /usr/sbin/nginx /usr/lib/python3.6/site-packages /tmp/envsubst             |
      tr '','' ''\n''             | sort -u             | awk ''system("[ -e /usr/local/lib/"
      $1 " ]") == 0 { next } { print "so:" $1 }''     )"     && apk add --no-cache
      --virtual .nginx-rundeps $runDeps     && apk del .build-deps     && apk del
      .gettext     && rm -rf /root/.cache /var/cache/apk     && mv /tmp/envsubst /usr/local/bin/     &&
      mkdir /etc/nginx/certs     && mkdir -p /var/www/letsencrypt     && ln -sf /dev/stdout
      /var/log/nginx/access.log     && ln -sf /dev/stderr /var/log/nginx/error.log'
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - crontab
    - /etc/cron.d/cert_renew
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - renew-certs.sh
    - /renew-certs.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /entrypoint.sh
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - appconf.py
    - /opt/appconf.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dhparam-2048.pem
    - /etc/ssl/
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:edge
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:edge
