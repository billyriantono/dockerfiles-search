{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "golang:1.13",
      "SourceCode": "FROM golang:1.13",
      "Platform": "",
      "From": {
        "Image": "golang:1.13"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Baohua Yang \u003cyeasy.github.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "expose",
          "Ports": [
            "7050",
            "7051",
            "7054",
            "8443",
            "9443"
          ]
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FABRIC_ROOT",
              "Value": "$GOPATH/src/github.com/hyperledger/fabric"
            },
            {
              "Key": "FABRIC_CA_ROOT",
              "Value": "$GOPATH/src/github.com/hyperledger/fabric-ca"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CHAINTOOL_RELEASE",
              "Value": "1.1.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BASEIMAGE_RELEASE",
              "Value": "0.4.18"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BASE_VERSION",
              "Value": "2.0.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROJECT_VERSION",
              "Value": "2.0.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_NS",
              "Value": "hyperledger"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BASE_DOCKER_NS",
              "Value": "hyperledger"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_FLAGS",
              "Value": "\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}               -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric               -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger               -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FABRIC_CFG_PATH",
              "Value": "/etc/hyperledger/fabric"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CORE_PEER_MSPCONFIGPATH",
              "Value": "$FABRIC_CFG_PATH/msp"
            },
            {
              "Key": "FABRIC_LOGGING_SPEC",
              "Value": "DEBUG"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ORDERER_GENERAL_LOCALMSPDIR",
              "Value": "$FABRIC_CFG_PATH/msp"
            },
            {
              "Key": "ORDERER_GENERAL_LISTENADDRESS",
              "Value": "0.0.0.0"
            },
            {
              "Key": "ORDERER_GENERAL_GENESISPROFILE",
              "Value": "TwoOrgsOrdererGenesis"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FABRIC_CA_HOME",
              "Value": "/etc/hyperledger/fabric-ca-server"
            },
            {
              "Key": "FABRIC_CA_SERVER_HOME",
              "Value": "/etc/hyperledger/fabric-ca-server"
            },
            {
              "Key": "FABRIC_CA_CLIENT_HOME",
              "Value": "/root/.fabric-ca-client"
            },
            {
              "Key": "CA_CFG_PATH",
              "Value": "/etc/hyperledger/fabric-ca"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /var/hyperledger/production         $GOPATH/src/github.com/hyperledger         $FABRIC_CFG_PATH         $FABRIC_CFG_PATH/crypto-config         $FABRIC_CA_SERVER_HOME         $FABRIC_CA_CLIENT_HOME         $CA_CFG_PATH         /chaincode/input         /chaincode/output         /var/hyperledger/fabric-ca-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update         \u0026\u0026 apt-get install -y apt-utils python-dev         \u0026\u0026 apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool         \u0026\u0026 apt-get install -y python-pip         \u0026\u0026 apt-get install -y vim tree jq unzip         \u0026\u0026 pip install behave nose docker-compose         \u0026\u0026 pip install pyinotify         \u0026\u0026 rm -rf /var/cache/apt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O /go/bin/yq https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64         \u0026\u0026 chmod a+x /go/bin/yq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar \u003e /usr/local/bin/chaintool         \u0026\u0026 chmod a+x /usr/local/bin/chaintool"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get github.com/golang/protobuf/protoc-gen-go         \u0026\u0026 go get github.com/maxbrunsfeld/counterfeiter         \u0026\u0026 go get github.com/axw/gocov/...         \u0026\u0026 go get github.com/AlekSi/gocov-xml         \u0026\u0026 go get golang.org/x/tools/cmd/goimports         \u0026\u0026 go get golang.org/x/lint/golint         \u0026\u0026 go get github.com/estesp/manifest-tool         \u0026\u0026 go get github.com/client9/misspell/cmd/misspell         \u0026\u0026 go get github.com/estesp/manifest-tool         \u0026\u0026 go get github.com/onsi/ginkgo/ginkgo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $GOPATH/src/github.com/hyperledger         \u0026\u0026 git clone --single-branch -b master --depth 1 http://gerrit.hyperledger.org/r/fabric         \u0026\u0026 echo \"*                hard    nofile          10000\" \u003e\u003e /etc/security/limits.conf         \u0026\u0026 echo \"*                soft    nofile          10000\" \u003e\u003e /etc/security/limits.conf         \u0026\u0026 cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get github.com/hyperledger/fabric-chaincode-go/shim         \u0026\u0026 go get github.com/hyperledger/fabric-protos-go/peer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $FABRIC_ROOT/         \u0026\u0026 CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/configtxgen         \u0026\u0026 CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/cryptogen         \u0026\u0026 CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/configtxlator         \u0026\u0026 CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=2.0.0\" github.com/hyperledger/fabric/cmd/discover         \u0026\u0026 CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/idemixgen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"$LD_FLAGS\" github.com/hyperledger/fabric/cmd/peer         \u0026\u0026 go clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"$LD_FLAGS\" github.com/hyperledger/fabric/cmd/orderer         \u0026\u0026 go clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $GOPATH/src/github.com/hyperledger         \u0026\u0026 git clone --single-branch -b master --depth 1 https://github.com/hyperledger/fabric-ca         \u0026\u0026 go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/...         \u0026\u0026 go clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "$GOPATH/src/github.com/hyperledger"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/hyperledger"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "$FABRIC_CFG_PATH"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "$FABRIC_CA_SERVER_HOME"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "$FABRIC_CA_CLIENT_HOME"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "scripts/",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "bash /tmp/clean_pkg.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "/usr/local/go"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$FABRIC_ROOT"
        },
        {
          "CmdLine": [
            "ln -s $GOPATH /opt/gopath"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "org.hyperledger.fabric.version",
              "Value": "${PROJECT_VERSION}"
            },
            {
              "Key": "org.hyperledger.fabric.base.version",
              "Value": "${BASEIMAGE_RELEASE}"
            }
          ],
          "Name": "label"
        }
      ]
    }
  ]
}