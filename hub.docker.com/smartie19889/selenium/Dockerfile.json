{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:wily-20150829",
      "SourceCode": "FROM ubuntu:wily-20150829",
      "Platform": "",
      "From": {
        "Image": "ubuntu:wily-20150829"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "UBUNTU_FLAVOR",
              "Value": "wily"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"deb http://archive.ubuntu.com/ubuntu ${UBUNTU_FLAVOR} main universe\\n\" \u003e /etc/apt/sources.list   \u0026\u0026 echo \"deb http://archive.ubuntu.com/ubuntu ${UBUNTU_FLAVOR}-updates main universe\\n\" \u003e\u003e /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Maintainer": "Leo Gallucci \u003celgalu3@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBCONF_NONINTERACTIVE_SEEN",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     apt-utils     sudo     net-tools     telnet     jq     netcat-openbsd     iputils-ping     unzip     wget     curl     pwgen     bc     grc     moreutils     tree     dbus-x11   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG_WHICH",
              "Value": "en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG_WHERE",
              "Value": "US"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENCODING",
              "Value": "UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "${LANG_WHICH}_${LANG_WHERE}.${ENCODING}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "${LANGUAGE}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "locale-gen ${LANGUAGE}   \u0026\u0026 dpkg-reconfigure --frontend noninteractive locales   \u0026\u0026 apt-get update -qqy   \u0026\u0026 apt-get -qqy install     language-pack-en   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "\"Europe/Berlin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo $TZ | tee /etc/timezone   \u0026\u0026 dpkg-reconfigure --frontend noninteractive tzdata"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     openjdk-8-jre-headless   \u0026\u0026 sed -i 's/securerandom.source=file:\\/dev\\/urandom/securerandom.source=file:\\/dev\\/.\\/urandom/g'        /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security   \u0026\u0026 sed -i 's/securerandom.source=file:\\/dev\\/random/securerandom.source=file:\\/dev\\/.\\/urandom/g'        /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     fonts-ipafont-gothic     xfonts-100dpi     xfonts-75dpi     xfonts-cyrillic     xfonts-scalable     ttf-ubuntu-font-family     libfreetype6     libfontconfig   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     openbox obconf menu   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     fluxbox   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NORMAL_USER",
              "Value": "application"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NORMAL_GROUP",
              "Value": "${NORMAL_USER}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NORMAL_USER_UID",
              "Value": "998"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NORMAL_USER_GID",
              "Value": "997"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -g ${NORMAL_USER_GID} ${NORMAL_GROUP}   \u0026\u0026 useradd ${NORMAL_USER} --uid ${NORMAL_USER_UID}          --shell /bin/bash  --gid ${NORMAL_USER_GID}          --create-home   \u0026\u0026 usermod -a -G sudo ${NORMAL_USER}   \u0026\u0026 gpasswd -a ${NORMAL_USER} video   \u0026\u0026 echo 'ALL ALL = (ALL) NOPASSWD: ALL' \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NORMAL_USER_HOME",
              "Value": "/home/${NORMAL_USER}"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     x11vnc     pyvnc2swf     xvfb     xorg     xserver-xorg-video-dummy   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "RUN_DIR",
              "Value": "/var/run/sele"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     openssh-server   \u0026\u0026 echo \"PidFile ${RUN_DIR}/sshd.pid\" \u003e\u003e /etc/ssh/sshd_config   \u0026\u0026 echo \"X11Forwarding yes\" \u003e\u003e /etc/ssh/sshd_config   \u0026\u0026 echo \"GatewayPorts yes\"  \u003e\u003e /etc/ssh/sshd_config   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ${NORMAL_USER_HOME}/tmp \u0026\u0026 cd ${NORMAL_USER_HOME}/tmp   \u0026\u0026 export NOVNC_SHA=\"8f3c0f6b9b5e5c23a7dc7e90bd22901017ab4fc7\"   \u0026\u0026 wget --no-verbose -O noVNC.zip       \"https://github.com/kanaka/noVNC/archive/${NOVNC_SHA}.zip\"   \u0026\u0026 unzip -x noVNC.zip   \u0026\u0026 mv noVNC-${NOVNC_SHA}        ${NORMAL_USER_HOME}/noVNC   \u0026\u0026 export WEBSOCKIFY_SHA=\"558a6439f14b0d85a31145541745e25c255d576b\"   \u0026\u0026 wget --no-verbose -O websockify.zip       \"https://github.com/kanaka/websockify/archive/${WEBSOCKIFY_SHA}.zip\"   \u0026\u0026 unzip -x websockify.zip   \u0026\u0026 mv websockify-${WEBSOCKIFY_SHA}        ${NORMAL_USER_HOME}/noVNC/utils/websockify"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     libx264-dev     libvorbis-dev     libx11-dev     libav-tools   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     python2.7     python-pip     python2.7-dev     python-openssl     libssl-dev libffi-dev   \u0026\u0026 easy_install --upgrade pip   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CPU_ARCH",
              "Value": "64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SEL_HOME",
              "Value": "${NORMAL_USER_HOME}/selenium"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FF_LANG",
              "Value": "\"en-US\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 mkdir -p ${SEL_HOME}   \u0026\u0026 pip install mozlog==2.10   \u0026\u0026 export MOZ_DOWN_SHA=\"7f2680cd75fbd3937630d896aefec3f8a061c10b\"   \u0026\u0026 pip install       \"https://github.com/elgalu/mozdownload/zipball/${MOZ_DOWN_SHA}\"   \u0026\u0026 pip install mozInstall==1.12   \u0026\u0026 echo \"\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade       \"https://github.com/Supervisor/supervisor/zipball/304b4f388d3e3f\"   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS1",
              "Value": "\"24.0, 25.0.1, 26.0, 27.0.1, 28.0, 29.0.1\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS1} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS2",
              "Value": "\"30.0, 31.0, 32.0.3\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS2} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS2",
              "Value": "\"33.0.3, 34.0.5, 35.0.1\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS2} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS3",
              "Value": "\"36.0.4, 37.0.2, 38.0.6\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS3} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS3",
              "Value": "\"39.0.3\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS3} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SAUCE_CONN_VER",
              "Value": "\"sc-4.3.11-linux\""
            },
            {
              "Key": "SAUCE_CONN_DOWN_URL",
              "Value": "\"https://saucelabs.com/downloads\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget --no-verbose \"${SAUCE_CONN_DOWN_URL}/${SAUCE_CONN_VER}.tar.gz\"   \u0026\u0026 tar -zxf ${SAUCE_CONN_VER}.tar.gz   \u0026\u0026 rm -rf /usr/local/${SAUCE_CONN_VER}   \u0026\u0026 mv ${SAUCE_CONN_VER} /usr/local   \u0026\u0026 ln -sf /usr/local/${SAUCE_CONN_VER}/bin/sc /usr/local/bin/sc   \u0026\u0026 which sc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BSTACK_TUNNEL_URL",
              "Value": "\"https://www.browserstack.com/browserstack-local\""
            },
            {
              "Key": "BSTACK_TUNNEL_ZIP",
              "Value": "\"BrowserStackLocal-linux-x64.zip\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget --no-verbose \"${BSTACK_TUNNEL_URL}/${BSTACK_TUNNEL_ZIP}\"   \u0026\u0026 unzip ${BSTACK_TUNNEL_ZIP}   \u0026\u0026 chmod 755 BrowserStackLocal   \u0026\u0026 rm ${BSTACK_TUNNEL_ZIP}   \u0026\u0026 mv BrowserStackLocal /usr/local/bin   \u0026\u0026 which BrowserStackLocal"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS3",
              "Value": "\"40.0.3\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS3} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS3",
              "Value": "\"41.0\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd ${NORMAL_USER_HOME}/firefox-src   \u0026\u0026 for FF_VER in $(echo ${FIREFOX_VERSIONS3} | tr \",\" \"\\n\"); do          mozdownload --application=firefox            --locale=${FF_LANG} --retry-attempts=1            --platform=linux64 --log-level=WARN --version=${FF_VER}       \u0026\u0026 export FIREFOX_DEST=\"${SEL_HOME}/firefox-${FF_VER}\"       \u0026\u0026 mkdir -p ${FIREFOX_DEST}       \u0026\u0026 mozinstall --app=firefox           firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2           --destination=${FIREFOX_DEST}       \u0026\u0026 rm firefox-${FF_VER}.${FF_LANG}.linux64.tar.bz2      ;done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${SEL_HOME}   \u0026\u0026 chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${NORMAL_USER_HOME}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "${NORMAL_USER}"
        },
        {
          "Env": [
            {
              "Key": "SEL_MAJOR_MINOR_VER",
              "Value": "2.47"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SEL_PATCH_LEVEL_VER",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${SEL_HOME}   \u0026\u0026 export SELBASE=\"http://selenium-release.storage.googleapis.com\"   \u0026\u0026 export SELPATH=\"${SEL_MAJOR_MINOR_VER}/selenium-server-standalone-${SEL_MAJOR_MINOR_VER}.${SEL_PATCH_LEVEL_VER}.jar\"   \u0026\u0026 wget --no-verbose ${SELBASE}/${SELPATH}       -O ${SEL_HOME}/selenium-server-standalone.jar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CHROME_DRIVER_FILE",
              "Value": "\"chromedriver_linux${CPU_ARCH}.zip\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CHROME_DRIVER_BASE",
              "Value": "chromedriver.storage.googleapis.com"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${NORMAL_USER_HOME}/tmp \u0026\u0026 cd ${NORMAL_USER_HOME}/tmp   \u0026\u0026 CHROME_DRIVER_VERSION=\"2.19\"   \u0026\u0026 CHROME_DRIVER_URL=\"${CHROME_DRIVER_BASE}/${CHROME_DRIVER_VERSION}/${CHROME_DRIVER_FILE}\"   \u0026\u0026 wget --no-verbose -O chromedriver_linux${CPU_ARCH}.zip ${CHROME_DRIVER_URL}   \u0026\u0026 cd ${SEL_HOME}   \u0026\u0026 rm -rf chromedriver   \u0026\u0026 unzip ${NORMAL_USER_HOME}/tmp/chromedriver_linux${CPU_ARCH}.zip   \u0026\u0026 rm ${NORMAL_USER_HOME}/tmp/chromedriver_linux${CPU_ARCH}.zip   \u0026\u0026 mv ${SEL_HOME}/chromedriver         ${SEL_HOME}/chromedriver-$CHROME_DRIVER_VERSION   \u0026\u0026 chmod 755 ${SEL_HOME}/chromedriver-$CHROME_DRIVER_VERSION   \u0026\u0026 ln -s ${SEL_HOME}/chromedriver-${CHROME_DRIVER_VERSION}            ${SEL_HOME}/chromedriver"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "latest_chrome_version_trigger=\"latest\"   \u0026\u0026 mkdir -p ${NORMAL_USER_HOME}/chrome-deb   \u0026\u0026 export CHROME_URL=\"https://dl.google.com/linux/direct\"   \u0026\u0026 wget --no-verbose -O     ${NORMAL_USER_HOME}/chrome-deb/google-chrome-stable_current_amd64.deb     \"${CHROME_URL}/google-chrome-stable_current_amd64.deb\"   \u0026\u0026 wget --no-verbose -O     ${NORMAL_USER_HOME}/chrome-deb/google-chrome-beta_current_amd64.deb     \"${CHROME_URL}/google-chrome-beta_current_amd64.deb\"   \u0026\u0026 wget --no-verbose -O     ${NORMAL_USER_HOME}/chrome-deb/google-chrome-unstable_current_amd64.deb     \"${CHROME_URL}/google-chrome-unstable_current_amd64.deb\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "CHROME_BASE_DEB_PATH",
              "Value": "\"${NORMAL_USER_HOME}/chrome-deb/google-chrome\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GREP_ONLY_NUMS_VER",
              "Value": "\"[0-9.]{2,20}\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     gdebi   \u0026\u0026 gdebi --non-interactive ${CHROME_BASE_DEB_PATH}-stable_current_amd64.deb   \u0026\u0026 gdebi --non-interactive ${CHROME_BASE_DEB_PATH}-beta_current_amd64.deb   \u0026\u0026 gdebi --non-interactive ${CHROME_BASE_DEB_PATH}-unstable_current_amd64.deb   \u0026\u0026 export CH_STABLE_VER=$(/usr/bin/google-chrome-stable --version | grep -iEo \"${GREP_ONLY_NUMS_VER}\")   \u0026\u0026 export CH_BETA_VER=$(/usr/bin/google-chrome-beta --version | grep -iEo \"${GREP_ONLY_NUMS_VER}\")   \u0026\u0026 export CH_UNSTABLE_VER=$(/usr/bin/google-chrome-unstable --version | grep -iEo \"${GREP_ONLY_NUMS_VER}\")   \u0026\u0026 mv ${CHROME_BASE_DEB_PATH}-stable_current_amd64.deb      ${CHROME_BASE_DEB_PATH}-stable_${CH_STABLE_VER}_amd64.deb   \u0026\u0026 mv ${CHROME_BASE_DEB_PATH}-beta_current_amd64.deb      ${CHROME_BASE_DEB_PATH}-beta_${CH_BETA_VER}_amd64.deb   \u0026\u0026 mv ${CHROME_BASE_DEB_PATH}-unstable_current_amd64.deb      ${CHROME_BASE_DEB_PATH}-unstable_${CH_UNSTABLE_VER}_amd64.deb   \u0026\u0026 ln -s ${SEL_HOME}/chromedriver /usr/bin   \u0026\u0026 chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${SEL_HOME}   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "supervisor/etc/supervisor/supervisord.conf",
            "/etc/supervisor/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "**/etc/supervisor/conf.d/*",
            "/etc/supervisor/conf.d/"
          ]
        },
        {
          "CmdLine": [
            "apt-get update -qqy   \u0026\u0026 apt-get -qqy install     haveged rng-tools   \u0026\u0026 service haveged start   \u0026\u0026 update-rc.d haveged defaults   \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "${NORMAL_USER}"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./dns/etc/hosts",
            "/tmp/hosts"
          ]
        },
        {
          "Env": [
            {
              "Key": "FIREFOX_VERSIONS",
              "Value": "\"${FIREFOX_VERSIONS1}, ${FIREFOX_VERSIONS2}, ${FIREFOX_VERSIONS3}\""
            },
            {
              "Key": "FIREFOX_VERSION",
              "Value": "\"41.0\""
            },
            {
              "Key": "CHROME_FLAVOR",
              "Value": "\"stable\""
            },
            {
              "Key": "USER",
              "Value": "\"${NORMAL_USER}\""
            },
            {
              "Key": "HOME",
              "Value": "\"${NORMAL_USER_HOME}\""
            },
            {
              "Key": "VNC_STORE_PWD_FILE",
              "Value": "\"${NORMAL_USER_HOME}/.vnc/passwd\""
            },
            {
              "Key": "BIN_UTILS",
              "Value": "\"/bin-utils\""
            },
            {
              "Key": "MEM_JAVA_PERCENT",
              "Value": "80"
            },
            {
              "Key": "WAIT_TIMEOUT",
              "Value": "\"5s\""
            },
            {
              "Key": "SCREEN_WIDTH",
              "Value": "1900"
            },
            {
              "Key": "SCREEN_HEIGHT",
              "Value": "1480"
            },
            {
              "Key": "SCREEN_MAIN_DEPTH",
              "Value": "24"
            },
            {
              "Key": "SCREEN_SUB_DEPTH",
              "Value": "32"
            },
            {
              "Key": "DISP_N",
              "Value": "10"
            },
            {
              "Key": "SCREEN_NUM",
              "Value": "0"
            },
            {
              "Key": "SELENIUM_HUB_PORT",
              "Value": "24444"
            },
            {
              "Key": "SELENIUM_HUB_HOST",
              "Value": "\"127.0.0.1\""
            },
            {
              "Key": "SELENIUM_NODE_HOST",
              "Value": "\"127.0.0.1\""
            },
            {
              "Key": "SELENIUM_NODE_CH_PORT",
              "Value": "25550"
            },
            {
              "Key": "SELENIUM_NODE_FF_PORT",
              "Value": "25551"
            },
            {
              "Key": "SELENIUM_HUB_PARAMS",
              "Value": "\"\""
            },
            {
              "Key": "SELENIUM_NODE_PARAMS",
              "Value": "\"\""
            },
            {
              "Key": "MAX_INSTANCES",
              "Value": "1"
            },
            {
              "Key": "MAX_SESSIONS",
              "Value": "1"
            },
            {
              "Key": "SEL_RELEASE_TIMEOUT_SECS",
              "Value": "19000"
            },
            {
              "Key": "SEL_BROWSER_TIMEOUT_SECS",
              "Value": "16000"
            },
            {
              "Key": "SEL_CLEANUPCYCLE_MS",
              "Value": "90000"
            },
            {
              "Key": "SEL_NODEPOLLING_MS",
              "Value": "80000"
            },
            {
              "Key": "VNC_PORT",
              "Value": "25900"
            },
            {
              "Key": "NOVNC_PORT",
              "Value": "26080"
            },
            {
              "Key": "NOVNC",
              "Value": "false"
            },
            {
              "Key": "SSHD_PORT",
              "Value": "22222"
            },
            {
              "Key": "SUPERVISOR_HTTP_PORT",
              "Value": "29001"
            },
            {
              "Key": "SUPERVISOR_HTTP_USERNAME",
              "Value": "supervisorweb"
            },
            {
              "Key": "SUPERVISOR_HTTP_PASSWORD",
              "Value": "somehttpbasicauthpwd"
            },
            {
              "Key": "SUPERVISOR_REQUIRED_SRV_LIST",
              "Value": "\"vnc|sshd|xmanager|xvfb\""
            },
            {
              "Key": "SUPERVISOR_NOT_REQUIRED_SRV_LIST1",
              "Value": "\"ignoreMe\""
            },
            {
              "Key": "SUPERVISOR_NOT_REQUIRED_SRV_LIST2",
              "Value": "\"ignoreMe\""
            },
            {
              "Key": "SLEEP_SECS_AFTER_KILLING_SUPERVISORD",
              "Value": "3"
            },
            {
              "Key": "SUPERVISOR_STOPWAITSECS",
              "Value": "20"
            },
            {
              "Key": "LOG_LEVEL",
              "Value": "info"
            },
            {
              "Key": "DISABLE_ROLLBACK",
              "Value": "false"
            },
            {
              "Key": "LOGFILE_MAXBYTES",
              "Value": "10MB"
            },
            {
              "Key": "LOGFILE_BACKUPS",
              "Value": "5"
            },
            {
              "Key": "LOGS_DIR",
              "Value": "\"/var/log/sele\""
            },
            {
              "Key": "VNC2SWF_ENCODING",
              "Value": "swf5"
            },
            {
              "Key": "VNC2SWF_FRAMERATE",
              "Value": "25"
            },
            {
              "Key": "FFMPEG_FRAME_RATE",
              "Value": "15"
            },
            {
              "Key": "FFMPEG_CODEC_ARGS",
              "Value": "\"-vcodec libx264 -crf 0 -preset ultrafast\""
            },
            {
              "Key": "VIDEO",
              "Value": "false"
            },
            {
              "Key": "GRID",
              "Value": "true"
            },
            {
              "Key": "CHROME",
              "Value": "true"
            },
            {
              "Key": "FIREFOX",
              "Value": "true"
            },
            {
              "Key": "VIDEO_FILE_EXTENSION",
              "Value": "\"mkv\""
            },
            {
              "Key": "VIDEO_FILE_NAME",
              "Value": "\"test\""
            },
            {
              "Key": "VIDEO_FLUSH_SECS",
              "Value": "\"0.5\""
            },
            {
              "Key": "VIDEO_CHUNK_SECS",
              "Value": "\"00:05:00\""
            },
            {
              "Key": "VIDEO_CHUNKS_MAX",
              "Value": "999"
            },
            {
              "Key": "VIDEOS_DIR",
              "Value": "\"${NORMAL_USER_HOME}/videos\""
            },
            {
              "Key": "XMANAGER",
              "Value": "\"fluxbox\""
            },
            {
              "Key": "SAUCE_TUNNEL",
              "Value": "\"false\""
            },
            {
              "Key": "SAUCE_USER_NAME",
              "Value": "\"\""
            },
            {
              "Key": "SAUCE_API_KEY",
              "Value": "\"\""
            },
            {
              "Key": "SAUCE_TUNNEL_DOCTOR_TEST",
              "Value": "\"false\""
            },
            {
              "Key": "SAUCE_TUNNEL_ID",
              "Value": "\"docker-selenium\""
            },
            {
              "Key": "SAUCE_TUNNEL_READY_FILE",
              "Value": "\"/tmp/sauce-connect-ready\""
            },
            {
              "Key": "SAUCE_LOCAL_SEL_PORT",
              "Value": "\"4445\""
            },
            {
              "Key": "SAUCE_WAIT_TIMEOUT",
              "Value": "\"140s\""
            },
            {
              "Key": "SAUCE_WAIT_RETRY_TIMEOUT",
              "Value": "\"290s\""
            },
            {
              "Key": "SAUCE_TUNNEL_MAX_RETRY_ATTEMPTS",
              "Value": "\"1\""
            },
            {
              "Key": "BSTACK_TUNNEL",
              "Value": "\"false\""
            },
            {
              "Key": "BSTACK_ACCESS_KEY",
              "Value": "\"\""
            },
            {
              "Key": "BSTACK_TUNNEL_ID",
              "Value": "\"docker-selenium\""
            },
            {
              "Key": "BSTACK_TUNNEL_OPTS",
              "Value": "\"-skipCheck -v -forcelocal\""
            },
            {
              "Key": "BSTACK_WAIT_TIMEOUT",
              "Value": "\"100s\""
            },
            {
              "Key": "BSTACK_WAIT_RETRY_TIMEOUT",
              "Value": "\"220s\""
            },
            {
              "Key": "TAIL_LOG_LINES",
              "Value": "\"15\""
            },
            {
              "Key": "SHM_TRY_MOUNT_UNMOUNT",
              "Value": "\"false\""
            },
            {
              "Key": "SHM_SIZE",
              "Value": "\"512M\""
            },
            {
              "Key": "ETHERNET_DEVICE_NAME",
              "Value": "\"eth0\""
            },
            {
              "Key": "DOCKER_SOCK",
              "Value": "\"/var/run/docker.sock\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "${SSHD_PORT}"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "bin/*",
            "${BIN_UTILS}/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "**/bin/*",
            "${BIN_UTILS}/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "utils/bin/selenium-grep.sh",
            "/usr/bin/errors"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "xterm/bin/timeout-wait-xterm.sh",
            "/usr/bin/wait_all_done"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "host-scripts/*",
            "/host-scripts/"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p ${NORMAL_USER_HOME}/.vnc   \u0026\u0026 mkdir -p ${VIDEOS_DIR}   \u0026\u0026 sudo ln -s ${VIDEOS_DIR} /   \u0026\u0026 mkdir -p ${NORMAL_USER_HOME}/.ssh   \u0026\u0026 touch ${NORMAL_USER_HOME}/.ssh/authorized_keys   \u0026\u0026 chmod 700 ${NORMAL_USER_HOME}/.ssh   \u0026\u0026 chmod 600 ${NORMAL_USER_HOME}/.ssh/authorized_keys   \u0026\u0026 sudo mkdir -p ${LOGS_DIR}   \u0026\u0026 sudo mkdir -p ${RUN_DIR}   \u0026\u0026 sudo chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${SEL_HOME}   \u0026\u0026 sudo chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${NORMAL_USER_HOME}   \u0026\u0026 sudo chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${LOGS_DIR}   \u0026\u0026 sudo chown -R ${NORMAL_USER}:${NORMAL_GROUP} ${RUN_DIR}   \u0026\u0026 sudo chown -R ${NORMAL_USER}:${NORMAL_GROUP} /etc/supervisor   \u0026\u0026 sudo mkdir -p /tmp/.X11-unix /tmp/.ICE-unix   \u0026\u0026 sudo chmod 1777 /tmp/.X11-unix /tmp/.ICE-unix   \u0026\u0026 sudo mkdir -p /var/run/sshd   \u0026\u0026 sudo chmod 744 /var/run/sshd   \u0026\u0026 echo \"\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scm-source.json",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/bin-utils/entry.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}