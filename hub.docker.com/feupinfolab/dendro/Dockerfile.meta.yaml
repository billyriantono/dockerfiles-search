MetaArgs: null
Stages:
- As: base
  BaseName: '"ubuntu:19.04"'
  Commands:
  - Key: SOURCE_BRANCH
    Name: arg
    Value: master
  - Env:
    - Key: DENDRO_GITHUB_URL
      Value: https://github.com/feup-infolab/dendro.git
    Name: env
  - Env:
    - Key: DENDRO_GIT_BRANCH
      Value: '"$SOURCE_BRANCH"'
    Name: env
  - Env:
    - Key: DENDRO_INSTALL_DIR
      Value: /tmp/dendro
    Name: env
  - Env:
    - Key: DENDRO_RUNNING_DIR
      Value: /dendro
    Name: env
  - Env:
    - Key: DENDRO_PORT
      Value: "3001"
    Name: env
  - Env:
    - Key: HOME
      Value: /root
    Name: env
  - Env:
    - Key: NVM_DIR
      Value: /root/.nvm
    Name: env
  - Env:
    - Key: BOWER_TMP_DIR
      Value: /tmp/public
    Name: env
  - Env:
    - Key: NPM_TMP_DIR
      Value: /tmp/npm
    Name: env
  - Env:
    - Key: NODE_VERSION
      Value: v8.10.0
    Name: env
  - Name: shell
    Shell:
    - /bin/bash
    - -c
  - CmdLine:
    - mkdir -p "$NVM_DIR"
    Name: run
    PrependShell: true
  - Name: user
    User: root
  From:
    Image: '"ubuntu:19.04"'
  Name: base
  Platform: ""
  SourceCode: FROM "ubuntu:19.04" as base
- As: dependencies
  BaseName: base
  Commands:
  - CmdLine:
    - apt-get -qq update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y -f -qq install sudo unzip devscripts autoconf automake libtool flex
      bison gperf gawk m4 make libssl-dev imagemagick subversion zip wget curl git
      rsync --fix-missing
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y -qq install apt-utils --no-install-recommends
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y -f -qq install poppler-utils antiword unrtf tesseract-ocr
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y -f -qq install python2.7
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /usr/bin/python2.7 /usr/bin/python
    Name: run
    PrependShell: true
  - CmdLine:
    - 'set -eux;     ARCH="$(dpkg --print-architecture)";     case "${ARCH}" in        ppc64el|ppc64le)          ESUM=''485533573e0a6aa4188a9adb336d24e795f9de8c59499d5b88a651b263fa1c34'';          BINARY_URL=''https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_ppc64le_linux_hotspot_8u202b08.tar.gz'';          ;;        s390x)          ESUM=''d47b6cfcf974e50363635bfc7c989b25b4681cd29286ba5ed426cfd486b65c5f'';          BINARY_URL=''https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_s390x_linux_hotspot_8u202b08.tar.gz'';          ;;        amd64|x86_64)          ESUM=''f5a1c9836beb3ca933ec3b1d39568ecbb68bd7e7ca6a9989a21ff16a74d910ab'';          BINARY_URL=''https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_linux_hotspot_8u202b08.tar.gz'';          ;;        aarch64|arm64)          ESUM=''8eee0aede947b804f9a5f49c8a38b52aace8a30a9ebd9383b7d06042fb5a237c'';          BINARY_URL=''https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u191-b12/OpenJDK8U-jdk_aarch64_linux_hotspot_8u191b12.tar.gz'';          ;;        *)          echo
      "Unsupported arch: ${ARCH}";          exit 1;          ;;     esac;     curl
      -Lso /tmp/openjdk.tar.gz ${BINARY_URL};     sha256sum /tmp/openjdk.tar.gz;     mkdir
      -p /opt/java/openjdk;     cd /opt/java/openjdk;     echo "${ESUM}  /tmp/openjdk.tar.gz"
      | sha256sum -c -;     tar -xf /tmp/openjdk.tar.gz;     jdir=$(dirname $(dirname
      $(find /opt/java/openjdk -name java | grep -v "/jre/bin")));     mv ${jdir}/*
      /opt/java/openjdk;     rm -rf ${jdir} /tmp/openjdk.tar.gz;'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /opt/java/openjdk
    - Key: PATH
      Value: '"/opt/java/openjdk/bin:$PATH"'
    Name: env
  - Env:
    - Key: JAVA_TOOL_OPTIONS
      Value: '""'
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: '"$JAVA_HOME/jre/lib/amd64/server"'
    Name: env
  - CmdLine:
    - ln -s /usr/bin/nodejs /usr/bin/node
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: dependencies
  Platform: ""
  SourceCode: FROM base AS dependencies
- As: nvm_installed
  BaseName: dependencies
  Commands:
  - CmdLine:
    - curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh
      | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - ". \"$NVM_DIR/nvm.sh\" \t&& nvm install $NODE_VERSION \t&& nvm use --delete-prefix
      $NODE_VERSION \t&& nvm alias default $NODE_VERSION"
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_PATH
      Value: $NVM_DIR/versions/node/$NODE_VERSION/lib/node_modules
    Name: env
  - Env:
    - Key: PATH
      Value: $NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH
    Name: env
  From:
    Stage:
      Index: 1
      Named: dependencies
  Name: nvm_installed
  Platform: ""
  SourceCode: FROM dependencies as nvm_installed
- As: global_npms
  BaseName: nvm_installed
  Commands:
  - CmdLine:
    - "npm i -g npm@5.6.0 \t&& npm i -g grunt@1.0.3 \t&& npm i -g gulp-cli@2.0.1 \t&&
      npm i -g bower@1.8.8"
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 2
      Named: nvm_installed
  Name: global_npms
  Platform: ""
  SourceCode: FROM nvm_installed as global_npms
- As: app_libs_installed
  BaseName: global_npms
  Commands:
  - CmdLine:
    - mkdir -p "$BOWER_TMP_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p "$NPM_TMP_DIR"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./package.json
    - '"$NPM_TMP_DIR"'
  - Name: workdir
    Path: '"$NPM_TMP_DIR"'
  - CmdLine:
    - cd "$NPM_TMP_DIR" && npm install
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "contents of $NPM_TMP_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - ls -la
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./public/bower.json
    - '"$BOWER_TMP_DIR"'
  - Name: workdir
    Path: '"$BOWER_TMP_DIR"'
  - CmdLine:
    - cd "$BOWER_TMP_DIR" && bower install --allow-root
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "contents of $BOWER_TMP_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - ls -la
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 3
      Named: global_npms
  Name: app_libs_installed
  Platform: ""
  SourceCode: FROM global_npms as app_libs_installed
- As: dendro_installed
  BaseName: app_libs_installed
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - '"$DENDRO_INSTALL_DIR"'
  - CmdLine:
    - ls -la "$DENDRO_INSTALL_DIR"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/scripts/docker/start_dendro_inside_docker.sh
    - '"$DENDRO_INSTALL_DIR/dendro.sh"'
  - CmdLine:
    - chmod ugo+rx "$DENDRO_INSTALL_DIR/dendro.sh"
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -R "$NPM_TMP_DIR/node_modules" "$DENDRO_INSTALL_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -R "$BOWER_TMP_DIR/bower_components" "$DENDRO_INSTALL_DIR/public"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - $DENDRO_RUNNING_DIR/conf
  - Name: volume
    Volumes:
    - $DENDRO_RUNNING_DIR/logs
  - Name: volume
    Volumes:
    - $DENDRO_RUNNING_DIR/orchestras
  - Name: volume
    Volumes:
    - $DENDRO_RUNNING_DIR/profiling
  - CmdLine:
    - echo "Contents of Dendro install dir are:"
    Name: run
    PrependShell: true
  - CmdLine:
    - ls -la "$DENDRO_INSTALL_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "Contents of Dendro running dir are:"
    Name: run
    PrependShell: true
  - CmdLine:
    - ls -la "$DENDRO_RUNNING_DIR"
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo "Contents of Dendro active configuration file: $(cat $DENDRO_INSTALL_DIR/conf/active_deployment_config.yml)"'
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - '"$DENDRO_PORT"'
  - CmdLine:
    - /bin/bash
    - /tmp/dendro/dendro.sh
    Name: cmd
    PrependShell: false
  From:
    Stage:
      Index: 4
      Named: app_libs_installed
  Name: dendro_installed
  Platform: ""
  SourceCode: FROM app_libs_installed AS dendro_installed
