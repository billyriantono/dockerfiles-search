MetaArgs: null
Stages:
- BaseName: alpine:3.9
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.4
    Name: env
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module
      \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module
      \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module
      \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic
      \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic
      \t\t--with-http_perl_module=dynamic \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module
      \t\t--with-stream_ssl_preread_module \t\t--with-stream_realip_module \t\t--with-stream_geoip_module=dynamic
      \t\t--with-http_slice_module \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat
      \t\t--with-file-aio \t\t--with-http_v2_module \t\t--with-ipv6 \t\t--with-cc-opt=-I/usr/src/boringssl/.openssl/include
      \t\t--with-ld-opt=-L/usr/src/boringssl/.openssl/lib \t\t--add-dynamic-module=/usr/src/ngx_headers_more
      \t\t--add-dynamic-module=/usr/src/ngx_brotli \t\" \t&& addgroup -S nginx \t&&
      adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&& apk add
      --no-cache --virtual .build-deps \t\tautoconf \t\tautomake \t\tbind-tools \t\tbinutils
      \t\tbuild-base \t\tca-certificates \t\tcmake \t\tcurl \t\tgcc \t\tgd-dev \t\tgeoip-dev
      \t\tgit \t\tgnupg \t\tgnupg \t\tgo \t\tlibc-dev \t\tlibgcc \t\tlibstdc++ \t\tlibtool
      \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tpcre \t\tpcre-dev \t\tperl-dev
      \t\tsu-exec \t\ttar \t\ttzdata \t\tzlib \t\tzlib-dev \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found='';
      \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& mkdir -p /usr/src \t\t&& git clone --depth=1 --recurse-submodules
      https://github.com/eustas/ngx_brotli /usr/src/ngx_brotli \t&& git clone --depth=1
      https://github.com/openresty/headers-more-nginx-module /usr/src/ngx_headers_more
      \t&& (git clone --depth=1 https://boringssl.googlesource.com/boringssl /usr/src/boringssl
      \t\t&& sed -i 's@out \\([>=]\\) TLS1_2_VERSION@out \\1 TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_lib.cc
      \t\t&& sed -i 's@ssl->version[ ]*=[ ]*TLS1_2_VERSION@ssl->version = TLS1_3_VERSION@'
      /usr/src/boringssl/ssl/s3_lib.cc \t\t&& sed -i 's@(SSL3_VERSION, TLS1_2_VERSION@(SSL3_VERSION,
      TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_test.cc \t\t&& sed -i 's@\\$shaext[
      ]*=[ ]*0;@\\$shaext = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \t\t&& sed -i
      's@\\$avx[ ]*=[ ]*[0|1];@\\$avx = 2;@' /usr/src/boringssl/crypto/*/asm/*.pl
      \t\t&& sed -i 's@\\$addx[ ]*=[ ]*0;@\\$addx = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl
      \t\t&& mkdir -p /usr/src/boringssl/build /usr/src/boringssl/.openssl/lib /usr/src/boringssl/.openssl/include
      \t\t&& ln -sf /usr/src/boringssl/include/openssl /usr/src/boringssl/.openssl/include/openssl
      \t\t&& touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \t\t&& cmake
      -B/usr/src/boringssl/build -H/usr/src/boringssl \t\t&& make -C/usr/src/boringssl/build
      -j$(getconf _NPROCESSORS_ONLN) \t\t&& cp /usr/src/boringssl/build/crypto/libcrypto.a
      /usr/src/boringssl/build/ssl/libssl.a /usr/src/boringssl/.openssl/lib) \t\t&&
      tar -zxC /usr/src -f nginx.tar.gz \t&& rm nginx.tar.gz \t&& cd /usr/src/nginx-$NGINX_VERSION
      \t&& curl -fSL https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/0.4/nginx__dynamic_tls_records_1.15.5%2B.patch
      -o dynamic_tls_records.patch \t&& patch -p1 < dynamic_tls_records.patch \t&&
      ./configure $CONFIG --with-debug \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&&
      mv objs/nginx objs/nginx-debug \t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so
      \t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so
      \t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \t&&
      mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \t&& mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so \t&& ./configure $CONFIG \t&& make -j$(getconf
      _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/ \t&& mkdir
      /etc/nginx/conf.d/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install -m644 html/index.html
      /usr/share/nginx/html/ \t&& install -m644 html/50x.html /usr/share/nginx/html/
      \t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t&& install -m755
      objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so
      \t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so
      \t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so
      \t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so
      \t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so
      \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx*
      \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf /usr/src/nginx-$NGINX_VERSION
      \t&& rm -rf /usr/src/boringssl /usr/src/ngx_* \t\t&& apk add --no-cache --virtual
      .gettext gettext \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$( \t\tscanelf
      --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst
      \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u
      \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t) tzdata ca-certificates\"
      \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \t&& apk del .build-deps
      \t&& apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/ \t\t&& ln -sf /dev/stdout
      /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.vh.no-default.conf
    - /etc/nginx/conf.d/default.conf
  - Labels:
    - Key: description
      Value: '"NGINX Docker built top of rolling release BoringSSL"'
    - Key: maintainer
      Value: '"Denis Denisov <denji0k@gmail.com>"'
    - Key: openssl
      Value: '"BoringSSL"'
    - Key: nginx
      Value: '"nginx $NGINX_VERSION"'
    Name: label
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.9
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.9
