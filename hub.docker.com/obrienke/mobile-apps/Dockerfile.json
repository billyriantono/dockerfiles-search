{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "buildpack-deps:disco",
      "SourceCode": "FROM buildpack-deps:disco",
      "Platform": "",
      "From": {
        "Image": "buildpack-deps:disco"
      },
      "Commands": [
        {
          "CmdLine": [
            "yes | unminimize     \u0026\u0026 apt-get install -yq         asciidoctor         bash-completion         build-essential         htop         jq         less         locales         man-db         nano         software-properties-common         sudo         vim         multitail     \u0026\u0026 locale-gen en_US.UTF-8     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod     \u0026\u0026 sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/gitpod"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "{ echo \u0026\u0026 echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\\\\\$ '\" ; } \u003e\u003e .bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -     \u0026\u0026 apt-add-repository -yu \"deb http://apt.llvm.org/disco/ llvm-toolchain-disco main\"     \u0026\u0026 apt-get install -yq         clang-format-10         clang-tidy-10         clang-tools-10         clangd-10         gdb         lld-10     \u0026\u0026 ln -s /usr/bin/clangd-10 /usr/bin/clangd     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -yq         apache2         nginx         nginx-extras     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/*     \u0026\u0026 mkdir /var/run/apache2     \u0026\u0026 mkdir /var/lock/apache2     \u0026\u0026 mkdir /var/run/nginx     \u0026\u0026 ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load     \u0026\u0026 chown -R gitpod:gitpod /etc/apache2 /var/run/apache2 /var/lock/apache2 /var/log/apache2     \u0026\u0026 chown -R gitpod:gitpod /etc/nginx /var/run/nginx /var/lib/nginx/ /var/log/nginx/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "apache2/",
            "/etc/apache2/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx",
            "/etc/nginx/"
          ]
        },
        {
          "Env": [
            {
              "Key": "APACHE_DOCROOT_IN_REPO",
              "Value": "\"public\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_DOCROOT_IN_REPO",
              "Value": "\"public\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -yq         composer         php         php-all-dev         php-ctype         php-curl         php-date         php-gd         php-gettext         php-intl         php-json         php-mbstring         php-mysql         php-net-ftp         php-pgsql         php-sqlite3         php-tokenizer         php-xml         php-zip     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "gitpod"
        },
        {
          "CmdLine": [
            "sudo echo \"Running 'sudo' for Gitpod: success\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir ~/.cache \u0026\u0026 sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin/\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MANPATH",
              "Value": "\"$MANPATH:/home/linuxbrew/.linuxbrew/share/man\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "INFOPATH",
              "Value": "\"$INFOPATH:/home/linuxbrew/.linuxbrew/share/info\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "sudo apt-get remove -y cmake \u0026\u0026 brew install cmake"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_VERSION",
              "Value": "1.12"
            },
            {
              "Key": "GOPATH",
              "Value": "$HOME/go-packages"
            },
            {
              "Key": "GOROOT",
              "Value": "$HOME/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$GOROOT/bin:$GOPATH/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fsSL https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -xzv     \u0026\u0026 go get -u -v     github.com/mdempsky/gocode     github.com/uudashr/gopkgs/cmd/gopkgs     github.com/ramya-rao-a/go-outline     github.com/acroca/go-symbols     golang.org/x/tools/cmd/guru     golang.org/x/tools/cmd/gorename     github.com/fatih/gomodifytags     github.com/haya14busa/goplay/cmd/goplay     github.com/josharian/impl     github.com/tylerb/gotype-live     github.com/rogpeppe/godef     github.com/zmb3/gogetdoc     golang.org/x/tools/cmd/goimports     github.com/sqs/goreturns     winterdrache.de/goformat/goformat     golang.org/x/lint/golint     github.com/cweill/gotests/...     github.com/alecthomas/gometalinter     honnef.co/go/tools/...     github.com/golangci/golangci-lint/cmd/golangci-lint     github.com/mgechev/revive     github.com/sourcegraph/go-langserver     golang.org/x/tools/cmd/gopls     github.com/go-delve/delve/cmd/dlv     github.com/davidrjenni/reftools/cmd/fillstruct     github.com/godoctor/godoctor \u0026\u0026     go get -u -v -d github.com/stamblerre/gocode \u0026\u0026     go build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode \u0026\u0026     rm -rf $GOPATH/src \u0026\u0026     rm -rf $GOPATH/pkg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/workspace/go"
            },
            {
              "Key": "PATH",
              "Value": "/workspace/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -s \"https://get.sdkman.io\" | bash  \u0026\u0026 bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh              \u0026\u0026 sdk install java 8.0.202-zulufx              \u0026\u0026 sdk install java 11.0.2-zulufx              \u0026\u0026 sdk default java 8.0.202-zulufx              \u0026\u0026 sdk install gradle              \u0026\u0026 sdk install maven              \u0026\u0026 mkdir /home/gitpod/.m2              \u0026\u0026 printf '\u003csettings\u003e\\n  \u003clocalRepository\u003e/workspace/m2-repository/\u003c/localRepository\u003e\\n\u003c/settings\u003e\\n' \u003e /home/gitpod/.m2/settings.xml              \u0026\u0026 echo 'export SDKMAN_DIR=\\\"/home/gitpod/.sdkman\\\"' \u003e\u003e /home/gitpod/.profile              \u0026\u0026 echo '[[ -s \\\"/home/gitpod/.sdkman/bin/sdkman-init.sh\\\" ]] \u0026\u0026 source \\\"/home/gitpod/.sdkman/bin/sdkman-init.sh\\\"' \u003e\u003e /home/gitpod/.profile\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GRADLE_USER_HOME",
              "Value": "/workspace/.gradle/"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "NODE_VERSION",
          "Name": "arg",
          "Value": "10.15.3"
        },
        {
          "CmdLine": [
            "curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | PROFILE=/dev/null bash     \u0026\u0026 bash -c \". .nvm/nvm.sh         \u0026\u0026 nvm install $NODE_VERSION         \u0026\u0026 npm config set python /usr/bin/python --global         \u0026\u0026 npm config set python /usr/bin/python         \u0026\u0026 npm install -g typescript yarn\"     \u0026\u0026 echo \". ~/.nvm/nvm-lazy.sh\" | tee -a /home/gitpod/.profile /home/gitpod/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "gitpod:gitpod",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nvm-lazy.sh",
            "/home/gitpod/.nvm/nvm-lazy.sh"
          ]
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/home/gitpod/.nvm/versions/node/v${NODE_VERSION}/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash     \u0026\u0026 { echo;         echo 'eval \"$(pyenv init -)\"';         echo 'eval \"$(pyenv virtualenv-init -)\"'; } \u003e\u003e .bashrc     \u0026\u0026 pyenv install 2.7.16     \u0026\u0026 pyenv install 3.7.4     \u0026\u0026 pyenv global 2.7.16 3.7.4     \u0026\u0026 pip2 install --upgrade pip     \u0026\u0026 pip2 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit notebook python-language-server[all]==0.25.0     \u0026\u0026 pip3 install --upgrade pip     \u0026\u0026 pip3 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit notebook python-language-server[all]==0.25.0     \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSL https://rvm.io/mpapis.asc | gpg --import -     \u0026\u0026 curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -     \u0026\u0026 curl -fsSL https://get.rvm.io | bash -s stable     \u0026\u0026 bash -lc \"         rvm requirements         \u0026\u0026 rvm install 2.4         \u0026\u0026 rvm install 2.5         \u0026\u0026 rvm install 2.6         \u0026\u0026 rvm use 2.6 --default         \u0026\u0026 rvm rubygems current         \u0026\u0026 gem install bundler --no-document         \u0026\u0026 gem install solargraph --no-document\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GEM_HOME",
              "Value": "/workspace/.rvm"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "sudo apt-get update     \u0026\u0026 DEBIAN_FRONTEND=noninteractive sudo apt-get install -yq         musl         musl-dev         musl-tools     \u0026\u0026 sudo apt-get clean     \u0026\u0026 sudo rm -rf /var/lib/apt/lists/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL https://sh.rustup.rs | sh -s -- -y     \u0026\u0026 .cargo/bin/rustup update     \u0026\u0026 .cargo/bin/rustup component add rls-preview rust-analysis rust-src     \u0026\u0026 .cargo/bin/rustup completions bash | sudo tee /etc/bash_completion.d/rustup.bash-completion \u003e /dev/null     \u0026\u0026 .cargo/bin/rustup target add x86_64-unknown-linux-musl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -lc \"cargo install cargo-watch\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "notOwnedFile=$(find . -not \"(\" -user gitpod -and -group gitpod \")\" -print -quit)     \u0026\u0026 { [ -z \"$notOwnedFile\" ]         || { echo \"Error: not all files/dirs in $HOME are owned by 'gitpod' user \u0026 group\"; exit 1; } }"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}