{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "helm",
      "BaseName": "alpine/helm:2.16.1",
      "SourceCode": "FROM alpine/helm:2.16.1 AS helm",
      "Platform": "",
      "As": "helm",
      "From": {
        "Image": "alpine/helm:2.16.1"
      },
      "Commands": null
    },
    {
      "Name": "",
      "BaseName": "alpine:3.11",
      "SourceCode": "FROM alpine:3.11",
      "Platform": "",
      "From": {
        "Image": "alpine:3.11"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "CLOUD_SDK_VERSION",
              "Value": "274.0.0"
            },
            {
              "Key": "PATH",
              "Value": "/google-cloud-sdk/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "helm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/bin/helm",
            "/usr/local/bin/helm"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "apk --no-cache add         curl         python         py-crcmod         bash         libc6-compat         openssh-client         git     \u0026\u0026 curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026     tar xzf google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026     rm google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026     ln -s /lib /lib64 \u0026\u0026     gcloud config set core/disable_usage_reporting true \u0026\u0026     gcloud config set component_manager/disable_update_check true \u0026\u0026     gcloud config set metrics/environment github_docker_image \u0026\u0026     gcloud --version \u0026\u0026     addgroup alpine \u0026\u0026 adduser -s /bin/bash -D -G alpine alpine \u0026\u0026     chmod 777 /home/alpine \u0026\u0026     echo -e '[compute]\\ngce_metadata_read_timeout_sec = 30' \u003e\u003e /google-cloud-sdk/properties \u0026\u0026     gcloud components install beta -q \u0026\u0026     curl https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o /usr/local/bin/cloud_sql_proxy \u0026\u0026     chmod +x /usr/local/bin/cloud_sql_proxy \u0026\u0026     cd /tmp \u0026\u0026     curl https://downloads.rclone.org/rclone-current-linux-amd64.zip -o rclone.zip \u0026\u0026     unzip rclone.zip \u0026\u0026     mv rclone-v*/rclone* /usr/local/bin \u0026\u0026     rm -rf rclone* \u0026\u0026     kubectlversion=1.14.9 \u0026\u0026     cd /usr/local/bin \u0026\u0026     wget https://storage.googleapis.com/kubernetes-release/release/v${kubectlversion}/bin/linux/amd64/kubectl -O kubectl-${kubectlversion} \u0026\u0026     chmod +x kubectl-${kubectlversion} \u0026\u0026     ln -s kubectl-${kubectlversion} kubectl \u0026\u0026     mkdir /.config \u0026\u0026 chmod 777 /.config \u0026\u0026     apk add --no-cache jq coreutils mysql-client grep \u0026\u0026     chmod +x /*.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/alpine"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "alpine"
        },
        {
          "Name": "workdir",
          "Path": "/home/alpine"
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}