MetaArgs: null
Stages:
- As: helm
  BaseName: alpine/helm:2.16.1
  Commands: null
  From:
    Image: alpine/helm:2.16.1
  Name: helm
  Platform: ""
  SourceCode: FROM alpine/helm:2.16.1 AS helm
- BaseName: alpine:3.11
  Commands:
  - Env:
    - Key: CLOUD_SDK_VERSION
      Value: 274.0.0
    - Key: PATH
      Value: /google-cloud-sdk/bin:$PATH
    Name: env
  - Chown: ""
    From: helm
    Name: copy
    SourcesAndDest:
    - /usr/bin/helm
    - /usr/local/bin/helm
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./entrypoint.sh
    - /
  - CmdLine:
    - apk --no-cache add         curl         python         py-crcmod         bash         libc6-compat         openssh-client         git     &&
      curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz
      &&     tar xzf google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz &&     rm
      google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz &&     ln -s /lib
      /lib64 &&     gcloud config set core/disable_usage_reporting true &&     gcloud
      config set component_manager/disable_update_check true &&     gcloud config
      set metrics/environment github_docker_image &&     gcloud --version &&     addgroup
      alpine && adduser -s /bin/bash -D -G alpine alpine &&     chmod 777 /home/alpine
      &&     echo -e '[compute]\ngce_metadata_read_timeout_sec = 30' >> /google-cloud-sdk/properties
      &&     gcloud components install beta -q &&     curl https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
      -o /usr/local/bin/cloud_sql_proxy &&     chmod +x /usr/local/bin/cloud_sql_proxy
      &&     cd /tmp &&     curl https://downloads.rclone.org/rclone-current-linux-amd64.zip
      -o rclone.zip &&     unzip rclone.zip &&     mv rclone-v*/rclone* /usr/local/bin
      &&     rm -rf rclone* &&     kubectlversion=1.14.9 &&     cd /usr/local/bin
      &&     wget https://storage.googleapis.com/kubernetes-release/release/v${kubectlversion}/bin/linux/amd64/kubectl
      -O kubectl-${kubectlversion} &&     chmod +x kubectl-${kubectlversion} &&     ln
      -s kubectl-${kubectlversion} kubectl &&     mkdir /.config && chmod 777 /.config
      &&     apk add --no-cache jq coreutils mysql-client grep &&     chmod +x /*.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: HOME
      Value: /home/alpine
    Name: env
  - Name: user
    User: alpine
  - Name: workdir
    Path: /home/alpine
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.11
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.11
