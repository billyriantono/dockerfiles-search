{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "blitznote/debootstrap-amd64:17.10",
      "SourceCode": "FROM blitznote/debootstrap-amd64:17.10",
      "Platform": "",
      "From": {
        "Image": "blitznote/debootstrap-amd64:17.10"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "ISO.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "ISO.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONDA",
              "Value": "\"/opt/conda\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$CONDA/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -kL https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -o ~/install.sh \u0026\u0026     bash ~/install.sh -b -f -p \"$CONDA\" \u0026\u0026     rm -f ~/install.sh \u0026\u0026     conda install -y -c conda-forge netifaces \u0026\u0026     conda update --yes --all \u0026\u0026     conda install -y oracle-instantclient \u0026\u0026     conda clean -ya \u0026\u0026     rm -rf \"$CONDA/pkgs/\" \u0026\u0026     echo \"$CONDA/orahome\"\u003e/etc/ld.so.conf.d/oracle.conf \u0026\u0026     ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get install -y libaio1 openssh-client rsync \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip \u0026\u0026     pip install --no-cache-dir cx_oracle ansible ara pywinrm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/log/ansible/hosts \u0026\u0026     mkdir /etc/ansible \u0026\u0026     echo -e \"[local]\\nlocalhost\\n\" \u003e /etc/ansible/hosts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ANSIBLE_GATHERING",
              "Value": "smart"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANSIBLE_HOST_KEY_CHECKING",
              "Value": "False"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANSIBLE_RETRY_FILES_ENABLED",
              "Value": "False"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANSIBLE_PIPELINING",
              "Value": "True"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/ansible/playbooks"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` \u0026\u0026     curl -L https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini -o /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/bin/tini",
            "-g",
            "--",
            "/usr/local/bin/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}