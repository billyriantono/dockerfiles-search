MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Env:
    - Key: OVSV
      Value: '"v2.9.2"'
    Name: env
  - Env:
    - Key: DPDK
      Value: '"18.02.2"'
    Name: env
  - Env:
    - Key: MININETV
      Value: '"2.3.0d4   "'
    Name: env
  - Env:
    - Key: OVSDEPS
      Value: '"autoconf automake libpcap-dev libcap-ng-dev libnuma-dev libtool libssl-dev
        linux-headers-generic libffi-dev"'
    Name: env
  - Env:
    - Key: AG
      Value: '"apt-get -qqy --no-install-recommends -o=Dpkg::Use-Pty=0"'
    Name: env
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: PIPDEPS
      Value: '"setuptools wheel virtualenv"'
    Name: env
  - Env:
    - Key: PIP3
      Value: '"pip3 -q --no-cache-dir install --upgrade"'
    Name: env
  - Env:
    - Key: SETUPQ
      Value: '"setup.py -q easy_install --always-unzip ."'
    Name: env
  - Env:
    - Key: MAKEFLAGS
      Value: '"-s"'
    Name: env
  - Env:
    - Key: BUILDDIR
      Value: '"/var/tmp/build"'
    Name: env
  - Env:
    - Key: DPDK_TARGET
      Value: x86_64-native-linuxapp-gcc
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - setupproxy.sh
    - /
  - CmdLine:
    - ./setupproxy.sh &&   $AG update &&   $AG install     $OVSDEPS     apt-transport-https     bc     bridge-utils     build-essential     curl     dsniff     freeradius     fping     gcc     git     iperf     iputils-ping     iproute2     ladvd     locales     libnuma-dev     libpython3-dev     libyaml-dev     lsof     netcat     ndisc6     net-tools     netcat-openbsd     nmap     numactl     openvswitch-common     parallel     patch     psmisc     python3-pip     software-properties-common     sudo     tcpdump     tshark     vlan     wget     wpasupplicant
      &&   $AG install linux-headers-`uname -r` &&   git config --global url.https://github.com/.insteadOf
      git://github.com/ &&     mkdir -p $BUILDDIR &&     cd $BUILDDIR &&     wget
      -q -O- http://fast.dpdk.org/rel/dpdk-$DPDK.tar.xz | tar -Jxf- &&       cd dpdk*
      &&       make install T=$DPDK_TARGET DESTDIR=install &&     cd .. &&     git
      clone https://github.com/openvswitch/ovs -b ${OVSV} &&       cd ovs &&       ./boot.sh
      &&       ./configure --enable-silent-rules --quiet --with-dpdk=`echo ../dpdk*/$DPDK_TARGET`
      &&       make install &&     cd .. &&     git clone https://github.com/mininet/mininet
      &&       cd mininet &&       git checkout -b mininet-$mininetv $mininetv &&       perl
      -pi -e "s/setup.py install/${SETUPQ}/g" Makefile &&       perl -pi -e "s/apt-get/${AG}/g"
      util/install.sh &&       for i in ssh pep8 pyflakes python-pexpect pylint xterm
      ; do           perl -pi -e "s/${i}//g" util/install.sh ; done &&       PYTHON=python3
      util/install.sh -n &&     cd .. &&   cd / && rm -rf $BUILDDIR &&   $AG purge
      $OVSDEPS linux-headers-`uname -r` &&   $AG autoremove
    Name: run
    PrependShell: true
  - CmdLine:
    - ./setupproxy.sh &&   $AG update &&   $AG install cython3 &&   $AG purge pylint
      &&   $PIP3 scapy $PIPDEPS &&   $PIP3 ryu
    Name: run
    PrependShell: true
  - CmdLine:
    - ./setupproxy.sh &&     curl -fsSL https://download.docker.com/linux/ubuntu/gpg
      | sudo apt-key add - &&     add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu
      $(lsb_release -cs) stable" &&     $AG update && $AG install docker-ce
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
