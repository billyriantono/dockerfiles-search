{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "OVSV",
              "Value": "\"v2.9.2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DPDK",
              "Value": "\"18.02.2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MININETV",
              "Value": "\"2.3.0d4   \""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OVSDEPS",
              "Value": "\"autoconf automake libpcap-dev libcap-ng-dev libnuma-dev libtool libssl-dev linux-headers-generic libffi-dev\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "AG",
              "Value": "\"apt-get -qqy --no-install-recommends -o=Dpkg::Use-Pty=0\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIPDEPS",
              "Value": "\"setuptools wheel virtualenv\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIP3",
              "Value": "\"pip3 -q --no-cache-dir install --upgrade\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SETUPQ",
              "Value": "\"setup.py -q easy_install --always-unzip .\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAKEFLAGS",
              "Value": "\"-s\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILDDIR",
              "Value": "\"/var/tmp/build\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DPDK_TARGET",
              "Value": "x86_64-native-linuxapp-gcc"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "setupproxy.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "./setupproxy.sh \u0026\u0026   $AG update \u0026\u0026   $AG install     $OVSDEPS     apt-transport-https     bc     bridge-utils     build-essential     curl     dsniff     freeradius     fping     gcc     git     iperf     iputils-ping     iproute2     ladvd     locales     libnuma-dev     libpython3-dev     libyaml-dev     lsof     netcat     ndisc6     net-tools     netcat-openbsd     nmap     numactl     openvswitch-common     parallel     patch     psmisc     python3-pip     software-properties-common     sudo     tcpdump     tshark     vlan     wget     wpasupplicant \u0026\u0026   $AG install linux-headers-`uname -r` \u0026\u0026   git config --global url.https://github.com/.insteadOf git://github.com/ \u0026\u0026     mkdir -p $BUILDDIR \u0026\u0026     cd $BUILDDIR \u0026\u0026     wget -q -O- http://fast.dpdk.org/rel/dpdk-$DPDK.tar.xz | tar -Jxf- \u0026\u0026       cd dpdk* \u0026\u0026       make install T=$DPDK_TARGET DESTDIR=install \u0026\u0026     cd .. \u0026\u0026     git clone https://github.com/openvswitch/ovs -b ${OVSV} \u0026\u0026       cd ovs \u0026\u0026       ./boot.sh \u0026\u0026       ./configure --enable-silent-rules --quiet --with-dpdk=`echo ../dpdk*/$DPDK_TARGET` \u0026\u0026       make install \u0026\u0026     cd .. \u0026\u0026     git clone https://github.com/mininet/mininet \u0026\u0026       cd mininet \u0026\u0026       git checkout -b mininet-$mininetv $mininetv \u0026\u0026       perl -pi -e \"s/setup.py install/${SETUPQ}/g\" Makefile \u0026\u0026       perl -pi -e \"s/apt-get/${AG}/g\" util/install.sh \u0026\u0026       for i in ssh pep8 pyflakes python-pexpect pylint xterm ; do           perl -pi -e \"s/${i}//g\" util/install.sh ; done \u0026\u0026       PYTHON=python3 util/install.sh -n \u0026\u0026     cd .. \u0026\u0026   cd / \u0026\u0026 rm -rf $BUILDDIR \u0026\u0026   $AG purge $OVSDEPS linux-headers-`uname -r` \u0026\u0026   $AG autoremove"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./setupproxy.sh \u0026\u0026   $AG update \u0026\u0026   $AG install cython3 \u0026\u0026   $AG purge pylint \u0026\u0026   $PIP3 scapy $PIPDEPS \u0026\u0026   $PIP3 ryu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./setupproxy.sh \u0026\u0026     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \u0026\u0026     add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \u0026\u0026     $AG update \u0026\u0026 $AG install docker-ce"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}