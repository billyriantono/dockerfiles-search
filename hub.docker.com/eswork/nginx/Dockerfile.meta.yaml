MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Env:
    - Key: UID
      Value: "1000"
    - Key: GID
      Value: "1000"
    - Key: GPG_KEYS
      Value: B0F4253373F8F6F510D42178520A9993A1C052F8
    - Key: NGINX_VERSION
      Value: 1.14.2
    - Key: LUA_MODULE_VERSION
      Value: 0.10.9rc8
    - Key: NGINX_DEVEL_KIT_VERSION
      Value: 0.3.0
    - Key: NGINX_CACHE_PURGE_VERSION
      Value: "2.3"
    - Key: GEOIP_VERSION
      Value: 1.6.11
    - Key: HEADERS_MORE_VERSION
      Value: "0.32"
    - Key: NGINX_CONF_DIR
      Value: /etc/nginx
    - Key: NGINX_LOG_DIR
      Value: /var/log/nginx
    - Key: NGINX_TEMP_DIR
      Value: /var/cache/nginx
    - Key: NGINX_SETUP_DIR
      Value: /usr/src/nginx
    Name: env
  - Labels:
    - Key: description
      Value: '"nginx built from source"'
    - Key: nginx
      Value: '"nginx ${NGINX_VERSION}"'
    - Key: maintainer
      Value: '"JohnWu <v.la@live.cn>"'
    Name: label
  - Key: WITH_NDK
    Name: arg
    Value: "true"
  - Key: WITH_LUA
    Name: arg
    Value: "true"
  - Key: WITH_PURGE
    Name: arg
    Value: "true"
  - Key: WITH_UPSTREAM_CHECK
    Name: arg
    Value: "true"
  - CmdLine:
    - echo "https://mirrors.ustc.edu.cn/alpine/latest-stable/main" > /etc/apk/repositories
      &&  echo "https://mirrors.ustc.edu.cn/alpine/latest-stable/community" >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p     ${NGINX_SETUP_DIR}     ${NGINX_LOG_DIR}     ${NGINX_CONF_DIR}/{conf.d,sites-enabled,certs}
      \    ${NGINX_TEMP_DIR}/{body,fastcgi,proxy,scgi,uwsgi}     /var/www/nginx &&
      cd ${NGINX_SETUP_DIR} && NB_CORES=$(getconf _NPROCESSORS_ONLN) && NGINX_MODULES=\"\"
      && BUILD_DEPS=\"     build-base linux-headers ca-certificates     patch openssl-dev
      cmake autoconf automake     curl pcre-dev zlib-dev luajit-dev libtool     gnupg
      libxslt-dev gd-dev perl-dev git geoip-dev git\" && apk -U upgrade && apk add
      --no-cache --virtual .build-deps ${BUILD_DEPS} &&     if [[ ${WITH_NDK} ]];then
      \        NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/ngx_devel_kit-${NGINX_DEVEL_KIT_VERSION}\";
      \        curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v${NGINX_DEVEL_KIT_VERSION}.tar.gz
      -o \"${NGINX_SETUP_DIR}/ngx_devel_kit.tar\";         tar -zxC  \"${NGINX_SETUP_DIR}\"
      -f \"${NGINX_SETUP_DIR}/ngx_devel_kit.tar\";     fi &&     if [[ ${WITH_PURGE}
      ]];then         NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/ngx_cache_purge-${NGINX_CACHE_PURGE_VERSION}\";
      \        curl -fSL https://github.com/FRiCKLE/ngx_cache_purge/archive/${NGINX_CACHE_PURGE_VERSION}.tar.gz
      -o \"${NGINX_SETUP_DIR}/ngx_cache_purge.tar\";         tar -zxC  \"${NGINX_SETUP_DIR}\"
      -f \"${NGINX_SETUP_DIR}/ngx_cache_purge.tar\";     fi &&     if [[ ${WITH_UPSTREAM_CHECK}
      ]];then         NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/nginx_upstream_check_module-master\";
      \        curl -fSL https://github.com/yaoweibin/nginx_upstream_check_module/archive/master.tar.gz
      -o \"${NGINX_SETUP_DIR}/ngx_upstream_check.tar\";         tar -zxC \"${NGINX_SETUP_DIR}\"
      -f \"${NGINX_SETUP_DIR}/ngx_upstream_check.tar\";     fi &&     if [[ ${WITH_UPSTREAM_CHECK}
      ]];then         NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/lua-nginx-module-${LUA_MODULE_VERSION}\";
      \        curl -fSL https://github.com/openresty/lua-nginx-module/archive/v${LUA_MODULE_VERSION}.tar.gz
      -o \"lua_module.tar\";         tar -zxC \"${NGINX_SETUP_DIR}\" -f \"${NGINX_SETUP_DIR}/lua_module.tar\";
      \        export LUAJIT_LIB=/usr/lib;         export LUAJIT_INC=/usr/include/luajit-2.1;
      \    fi && NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/headers-more-nginx-module-${HEADERS_MORE_VERSION}\"
      && curl -fSL https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_VERSION}.tar.gz
      -o \"${NGINX_SETUP_DIR}/headers-more-nginx-module-${HEADERS_MORE_VERSION}.tar.gz\"
      && tar -zxC \"${NGINX_SETUP_DIR}\" -f \"${NGINX_SETUP_DIR}/headers-more-nginx-module-${HEADERS_MORE_VERSION}.tar.gz\"
      && NGINX_MODULES=\"${NGINX_MODULES} --add-module=${NGINX_SETUP_DIR}/ngx_brotli\"
      && git clone https://github.com/bagder/libbrotli --depth=1 ${NGINX_SETUP_DIR}/libbrotli
      && cd \"${NGINX_SETUP_DIR}/libbrotli\" && ./autogen.sh && ./configure && make
      -j $NB_CORES && make install && git clone --depth=1 https://github.com/google/ngx_brotli
      \ \"${NGINX_SETUP_DIR}/ngx_brotli\" && cd \"${NGINX_SETUP_DIR}/ngx_brotli\"
      && git submodule update --init && curl -fSL https://github.com/maxmind/geoip-api-c/releases/download/v${GEOIP_VERSION}/GeoIP-${GEOIP_VERSION}.tar.gz
      -o \"${NGINX_SETUP_DIR}/geoip_module.tar\" && tar -zxC \"${NGINX_SETUP_DIR}\"
      -f \"${NGINX_SETUP_DIR}/geoip_module.tar\" && cd ${NGINX_SETUP_DIR}/GeoIP-${GEOIP_VERSION}
      && ./configure && make -j $NB_CORES && make check && make install && curl -fSL
      http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o \"${NGINX_SETUP_DIR}/nginx.tar\"
      && tar -zxC \"${NGINX_SETUP_DIR}\" -f \"${NGINX_SETUP_DIR}/nginx.tar\" && cd
      ${NGINX_SETUP_DIR}/nginx-${NGINX_VERSION} && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      -o \"${NGINX_SETUP_DIR}/nginx.tar.gz.asc\" && export GNUPGHOME=\"$(mktemp -d)\"
      && found=''; for server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone;    test
      -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1;    gpg --batch --verify \"${NGINX_SETUP_DIR}/nginx.tar.gz.asc\" \"${NGINX_SETUP_DIR}/nginx.tar\"
      && if [[ ${WITH_UPSTREAM_CHECK} ]];then    patch -p0 < ${NGINX_SETUP_DIR}/nginx_upstream_check_module-master/check_1.11.5+.patch;
      fi && echo \"Configure ${NGINX_MODULES}\" && ./configure   --prefix=/var/www/nginx
      \  --conf-path=/etc/nginx/nginx.conf   --sbin-path=/usr/sbin   --modules-path=/usr/lib/nginx/modules
      \  --http-log-path=/var/log/nginx/access.log   --error-log-path=/var/log/nginx/error.log
      \  --lock-path=/var/lock/nginx.lock   --pid-path=/tmp/nginx.pid   --http-client-body-temp-path=${NGINX_TEMP_DIR}/body
      \  --http-fastcgi-temp-path=${NGINX_TEMP_DIR}/fastcgi   --http-proxy-temp-path=${NGINX_TEMP_DIR}/proxy
      \  --http-scgi-temp-path=${NGINX_TEMP_DIR}/scgi   --http-uwsgi-temp-path=${NGINX_TEMP_DIR}/uwsgi
      \  --with-pcre   --with-pcre-jit   --with-http_ssl_module   --with-http_stub_status_module
      \  --with-http_realip_module   --with-http_auth_request_module   --with-http_secure_link_module
      \  --with-http_random_index_module   --with-http_addition_module   --with-http_dav_module
      \  --with-http_geoip_module   --with-http_gunzip_module   --with-http_gzip_static_module
      \  --with-http_degradation_module   --with-http_v2_module   --with-http_sub_module
      \  --with-http_flv_module   --with-http_mp4_module   --with-http_slice_module
      \  --with-stream   --with-stream_ssl_module   --with-stream_ssl_preread_module
      \  --with-stream_realip_module   --with-stream_geoip_module=dynamic   --with-mail
      \  --with-mail_ssl_module   --with-threads   --with-file-aio   --with-compat
      \  --with-http_xslt_module=dynamic   --with-http_image_filter_module=dynamic
      \  --with-http_geoip_module=dynamic   --with-http_perl_module=dynamic   ${NGINX_MODULES}
      && make -j $NB_CORES && make install && ln -sf /usr/lib/nginx/modules /etc/nginx/modules
      && strip /usr/sbin/nginx* && strip /usr/lib/nginx/modules/*.so && apk add --no-cache
      --virtual .gettext gettext && mv /usr/bin/envsubst /tmp/ && RUN_DEPENDENCIES=\"$(
      \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'
      \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u )\" &&
      RUN_DEPENDENCIES=\"$RUN_DEPENDENCIES su-exec\" && echo \"install rundeps $RUN_DEPENDENCIES\"
      && apk add --no-cache --virtual .nginx-rundeps tzdata $RUN_DEPENDENCIES && apk
      del .build-deps && apk del .gettext && mv /tmp/envsubst /usr/local/bin/ && cd
      $NGINX_CONF_DIR && rm -rf ${NGINX_SETUP_DIR}/"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - rootfs
    - /
  - CmdLine:
    - chmod 755 /sbin/entrypoint.sh
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - 4430/tcp
    - 8000/tcp
  - Name: volume
    Volumes:
    - ${NGINX_CONF_DIR}
    - ${NGINX_CONF_DIR}/conf.d
    - ${NGINX_CONF_DIR}/certs
    - ${NGINX_LOG_DIR}
    - /var/www
  - CmdLine:
    - /sbin/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
