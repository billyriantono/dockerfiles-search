{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "blacklabelops/java:openjdk8",
      "SourceCode": "FROM blacklabelops/java:openjdk8",
      "Platform": "",
      "From": {
        "Image": "blacklabelops/java:openjdk8"
      },
      "Commands": [
        {
          "Maintainer": "Steffen Bleul \u003csbl@blacklabelops.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "CROWD_VERSION",
          "Name": "arg",
          "Value": "2.12.0"
        },
        {
          "Key": "CONTAINER_UID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "CONTAINER_GID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "CROWD_HOME",
              "Value": "/var/atlassian/crowd"
            },
            {
              "Key": "CROWD_INSTALL",
              "Value": "/opt/crowd"
            },
            {
              "Key": "CROWD_PROXY_NAME",
              "Value": ""
            },
            {
              "Key": "CROWD_PROXY_PORT",
              "Value": ""
            },
            {
              "Key": "CROWD_PROXY_SCHEME",
              "Value": ""
            },
            {
              "Key": "KEYSTORE",
              "Value": "$JAVA_HOME/jre/lib/security/cacerts"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export MYSQL_DRIVER_VERSION=5.1.38 \u0026\u0026     export POSTGRESQL_DRIVER_VERSION=9.4.1207 \u0026\u0026     export CONTAINER_USER=crowd \u0026\u0026      export CONTAINER_GROUP=crowd \u0026\u0026      addgroup -g $CONTAINER_GID $CONTAINER_GROUP \u0026\u0026      adduser -u $CONTAINER_UID             -G $CONTAINER_GROUP             -h /home/$CONTAINER_USER             -s /bin/bash             -S $CONTAINER_USER \u0026\u0026      apk add --update       ca-certificates       gzip       curl       su-exec       wget \u0026\u0026      export XMLSTARLET_VERSION=1.6.1-r1              \u0026\u0026      wget --directory-prefix=/tmp https://github.com/menski/alpine-pkg-xmlstarlet/releases/download/${XMLSTARLET_VERSION}/xmlstarlet-${XMLSTARLET_VERSION}.apk \u0026\u0026     apk add --allow-untrusted /tmp/xmlstarlet-${XMLSTARLET_VERSION}.apk \u0026\u0026     wget -O /tmp/crowd.tar.gz https://www.atlassian.com/software/crowd/downloads/binary/atlassian-crowd-${CROWD_VERSION}.tar.gz \u0026\u0026     tar zxf /tmp/crowd.tar.gz -C /tmp \u0026\u0026     ls -A /tmp \u0026\u0026     mv /tmp/atlassian-crowd-${CROWD_VERSION} /tmp/crowd \u0026\u0026     ls -A /tmp \u0026\u0026     mkdir -p /opt \u0026\u0026     mv /tmp/crowd /opt/crowd \u0026\u0026     mkdir -p ${CROWD_HOME} \u0026\u0026     mkdir -p ${CROWD_INSTALL}/crowd-webapp/WEB-INF/classes \u0026\u0026     mkdir -p ${CROWD_INSTALL}/apache-tomcat/lib \u0026\u0026     mkdir -p ${CROWD_INSTALL}/apache-tomcat/webapps/ROOT \u0026\u0026     mkdir -p ${CROWD_INSTALL}/apache-tomcat/conf/Catalina/localhost \u0026\u0026     echo \"crowd.home=${CROWD_HOME}\" \u003e ${CROWD_INSTALL}/crowd-webapp/WEB-INF/classes/crowd-init.properties \u0026\u0026     rm -f       ${CROWD_INSTALL}/apache-tomcat/lib/mysql-connector-java*.jar \u0026\u0026      wget -O /tmp/mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz       http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz \u0026\u0026     tar xzf /tmp/mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz       -C /tmp \u0026\u0026     cp /tmp/mysql-connector-java-${MYSQL_DRIVER_VERSION}/mysql-connector-java-${MYSQL_DRIVER_VERSION}-bin.jar       ${CROWD_INSTALL}/apache-tomcat/lib/mysql-connector-java-${MYSQL_DRIVER_VERSION}-bin.jar  \u0026\u0026      rm -f ${CROWD_INSTALL}/lib/postgresql-*.jar \u0026\u0026      wget -O ${CROWD_INSTALL}/apache-tomcat/lib/postgresql-${POSTGRESQL_DRIVER_VERSION}.jar       https://jdbc.postgresql.org/download/postgresql-${POSTGRESQL_DRIVER_VERSION}.jar \u0026\u0026     mv ${CROWD_INSTALL}/apache-tomcat/webapps/ROOT /opt/crowd/splash-webapp \u0026\u0026     mv ${CROWD_INSTALL}/apache-tomcat/conf/Catalina/localhost /opt/crowd/webapps \u0026\u0026     mkdir -p ${CROWD_INSTALL}/apache-tomcat/conf/Catalina/localhost \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/letsencryptauthorityx1.der \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/letsencryptauthorityx2.der \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.der \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x2-cross-signed.der \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.der \u0026\u0026     wget -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias isrgrootx1 -file /tmp/letsencryptauthorityx1.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias isrgrootx2 -file /tmp/letsencryptauthorityx2.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx1 -file /tmp/lets-encrypt-x1-cross-signed.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx2 -file /tmp/lets-encrypt-x2-cross-signed.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx3 -file /tmp/lets-encrypt-x3-cross-signed.der \u0026\u0026     keytool -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx4 -file /tmp/lets-encrypt-x4-cross-signed.der \u0026\u0026     wget -O /home/${CONTAINER_USER}/SSLPoke.class https://confluence.atlassian.com/kb/files/779355358/779355357/1/1441897666313/SSLPoke.class \u0026\u0026     chown -R crowd:crowd /home/${CONTAINER_USER}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "splash-context.xml",
            "/opt/crowd/webapps/splash.xml"
          ]
        },
        {
          "CmdLine": [
            "chown -R crowd:crowd ${CROWD_HOME} \u0026\u0026     chown -R crowd:crowd ${CROWD_INSTALL} \u0026\u0026     export TINI_VERSION=0.9.0 \u0026\u0026     curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini \u0026\u0026     chmod +x /bin/tini \u0026\u0026     apk del       ca-certificates       gzip       wget \u0026\u0026      rm -rf /var/cache/apk/* \u0026\u0026     rm -rf /tmp/* \u0026\u0026     rm -rf /var/log/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CROWD_URL",
              "Value": "http://localhost:8095/crowd"
            },
            {
              "Key": "LOGIN_BASE_URL",
              "Value": "http://localhost:8095"
            },
            {
              "Key": "CROWD_CONTEXT",
              "Value": "crowd"
            },
            {
              "Key": "CROWDID_CONTEXT",
              "Value": "openidserver"
            },
            {
              "Key": "OPENID_CLIENT_CONTEXT",
              "Value": "openidclient"
            },
            {
              "Key": "DEMO_CONTEXT",
              "Value": "demo"
            },
            {
              "Key": "SPLASH_CONTEXT",
              "Value": "ROOT"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/var/atlassian/crowd"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/atlassian/crowd"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8095"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "imagescripts",
            "/home/crowd"
          ]
        },
        {
          "CmdLine": [
            "/bin/tini",
            "--",
            "/home/crowd/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "crowd"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}