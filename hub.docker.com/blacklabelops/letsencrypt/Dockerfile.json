{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "blacklabelops/centos",
      "SourceCode": "FROM blacklabelops/centos",
      "Platform": "",
      "From": {
        "Image": "blacklabelops/centos"
      },
      "Commands": [
        {
          "Maintainer": "Steffen Bleul \u003csbl@blacklabelops.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "LETSENCRYPT_VERSION",
          "Name": "arg",
          "Value": "latest"
        },
        {
          "Key": "CONTAINER_UID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "CONTAINER_GID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "JOBBER_VERSION",
          "Name": "arg",
          "Value": "v1.1"
        },
        {
          "Env": [
            {
              "Key": "CONTAINER_USER",
              "Value": "jobber_client"
            },
            {
              "Key": "CONTAINER_GROUP",
              "Value": "jobber_client"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "yum install -y epel-release \u0026\u0026     yum install -y     golang     make     git     sudo     python-pip     python-tools     python-virtualenv     python-devel     augeas-libs     dialog     libffi-devel     openssl     openssl-devel     redhat-rpm-config     ca-certificates     mercurial \u0026\u0026     pip install --upgrade pip \u0026\u0026     yum clean all \u0026\u0026 rm -rf /var/cache/yum/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JOBBER_HOME",
              "Value": "/opt/jobber"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JOBBER_LIB",
              "Value": "$JOBBER_HOME/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "$JOBBER_LIB"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LETSENCRYPT_HOME",
              "Value": "/opt/letsencrypt"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $JOBBER_HOME \u0026\u0026     mkdir -p $JOBBER_LIB \u0026\u0026     /usr/sbin/groupadd --gid $CONTAINER_GID $CONTAINER_GROUP \u0026\u0026     /usr/sbin/useradd --uid $CONTAINER_UID --gid $CONTAINER_GID --create-home --shell /bin/bash $CONTAINER_USER \u0026\u0026     cd $JOBBER_LIB \u0026\u0026     go get github.com/dshearer/jobber;true \u0026\u0026     if  [ \"${JOBBER_VERSION}\" != \"latest\" ];       then         cd src/github.com/dshearer/jobber \u0026\u0026         git checkout tags/${JOBBER_VERSION} \u0026\u0026         cd $JOBBER_LIB ;     fi \u0026\u0026     make -C src/github.com/dshearer/jobber install DESTDIR=$JOBBER_HOME \u0026\u0026     cp $JOBBER_LIB/bin/* /usr/bin \u0026\u0026     mkdir -p $LETSENCRYPT_HOME \u0026\u0026     cd $LETSENCRYPT_HOME \u0026\u0026     git clone https://github.com/letsencrypt/letsencrypt \u0026\u0026     if  [ \"${LETSENCRYPT_VERSION}\" != \"latest\" ];       then cd letsencrypt \u0026\u0026 git checkout tags/v${LETSENCRYPT_VERSION} ;     fi \u0026\u0026     /opt/letsencrypt/letsencrypt/letsencrypt-auto --no-self-upgrade --help"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/letsencrypt/letsencrypt"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/letsencrypt"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "imagescripts/docker-entrypoint.sh",
            "/opt/jobber/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/opt/jobber/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "jobberd"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}