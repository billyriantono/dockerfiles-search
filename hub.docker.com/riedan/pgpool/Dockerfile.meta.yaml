MetaArgs: null
Stages:
- BaseName: alpine
  Commands:
  - Env:
    - Key: SYS_GROUP
      Value: postgres
    Name: env
  - Env:
    - Key: SYS_USER
      Value: postgres
    Name: env
  - CmdLine:
    - "set -eux; \tgetent group ${SYS_GROUP} || addgroup -S ${SYS_GROUP}; \tgetent
      passwd ${SYS_USER} || adduser -S ${SYS_USER}  -G ${SYS_GROUP} -s \"/bin/sh\";"
    Name: run
    PrependShell: true
  - Env:
    - Key: PGPOOL_VERSION
      Value: 3.7.10
    Name: env
  - Env:
    - Key: DOCKERIZE_VERSION
      Value: v0.6.1
    Name: env
  - Env:
    - Key: PG_POOL_INSTALL_PATH
      Value: /opt/pgpool
    Name: env
  - Env:
    - Key: LANG
      Value: C
    Name: env
  - CmdLine:
    - apk update && apk upgrade   &&  apk --update --no-cache  add libpq openssl                                    linux-headers
      gcc make libgcc g++ postgresql-client postgresql-dev                                     bash
      su-exec &&     mkdir -p  ${PG_POOL_INSTALL_PATH} &&      cd ${PG_POOL_INSTALL_PATH}
      &&     wget https://www.pgpool.net/mediawiki/images/pgpool-II-${PGPOOL_VERSION}.tar.gz
      -O - | tar -xz  --directory  ${PG_POOL_INSTALL_PATH}  --strip-components=1 --no-same-owner
      &&     cd ${PG_POOL_INSTALL_PATH} &&     ./configure --prefix=/usr                 --sysconfdir=/etc                 --mandir=/usr/share/man                 --infodir=/usr/share/info                 --with-openssl
      &&     make &&     make install &&     rm -rf ${PG_POOL_INSTALL_PATH} &&     apk
      del  postgresql-dev linux-headers gcc make libgcc g++
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz     &&
      tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz     &&
      rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /etc/pgpool2 /var/run/pgpool /var/log/pgpool /var/run/postgresql /var/log/postgresql/  /usr/share/pgpool2
      &&     chown ${SYS_USER}:${SYS_GROUP} -R /etc/pgpool2 /var/run/pgpool /var/log/pgpool
      /var/run/postgresql /var/log/postgresql      /usr/share/pgpool2
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/bin
    - /usr/local/bin/pgpool
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/configs
    - /var/pgpool_configs
  - CmdLine:
    - chmod +x -R /usr/local/bin/pgpool /usr/local/bin/dockerize
    Name: run
    PrependShell: true
  - Env:
    - Key: CHECK_USER
      Value: replication_user
    Name: env
  - Env:
    - Key: CHECK_PASSWORD
      Value: replication_pass
    Name: env
  - Env:
    - Key: CHECK_PGCONNECT_TIMEOUT
      Value: "10"
    Name: env
  - Env:
    - Key: WAIT_BACKEND_TIMEOUT
      Value: "120"
    Name: env
  - Env:
    - Key: REQUIRE_MIN_BACKENDS
      Value: "0"
    Name: env
  - Env:
    - Key: SSH_ENABLE
      Value: "0"
    Name: env
  - Env:
    - Key: NOTVISIBLE
      Value: '"in users profile"'
    Name: env
  - Env:
    - Key: CONFIGS_DELIMITER_SYMBOL
      Value: ','
    Name: env
  - Env:
    - Key: CONFIGS_ASSIGNMENT_SYMBOL
      Value: ':'
    Name: env
  - Name: expose
    Ports:
    - "5432"
  - Name: expose
    Ports:
    - "9898"
  - Health:
      Interval: 60000000000
      Retries: 5
      Test:
      - CMD-SHELL
      - /usr/local/bin/pgpool/has_write_node.sh
      Timeout: 10000000000
    Name: healthcheck
  - CmdLine:
    - /usr/local/bin/pgpool/entrypoint.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine
  Name: ""
  Platform: ""
  SourceCode: FROM alpine
