MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: bjozsa@jinkit.com
    Name: maintainer
  - Key: DEBIAN_FRONTED
    Name: arg
    Value: noninteractive
  - Key: ARCH
    Name: arg
    Value: '"amd64"'
  - Key: VERSION_CNI
    Name: arg
    Value: '"v0.6.0"'
  - Key: VERSION_DOCK
    Name: arg
    Value: '"17.03.2"'
  - Key: VERSION_HELM
    Name: arg
    Value: '"v2.7.2"'
  - Key: VERSION_KUBEADM
    Name: arg
    Value: '"v1.9.3"'
  - Key: VERSION_KUBECTL
    Name: arg
    Value: '"v1.9.3"'
  - Key: VERSION_KUBELET
    Name: arg
    Value: '"v1.9.3"'
  - Key: BOOTSTR_CONF
    Name: arg
    Value: '"/root/etc/kubeadm-conf.yaml"'
  - Key: ROOTFS
    Name: arg
    Value: ${ROOTFS:-kubeadm}
  - Env:
    - Key: ARCH
      Value: ${ARCH}
    - Key: VERSION_CNI
      Value: ${VERSION_CNI}
    - Key: VERSION_DOCK
      Value: ${VERSION_DOCK}
    - Key: VERSION_HELM
      Value: ${VERSION_HELM}
    - Key: VERSION_KUBEADM
      Value: ${VERSION_KUBEADM}
    - Key: VERSION_KUBECTL
      Value: ${VERSION_KUBECTL}
    - Key: VERSION_KUBELET
      Value: ${VERSION_KUBELET}
    - Key: BOOTSTR_CONF
      Value: ${BOOTSTR_CONF}
    - Key: ROOTFS
      Value: ${ROOTFS}
    - Key: DEBIAN_FRONTEND
      Value: '"noninteractive"'
    - Key: DIR_BIN_CNI
      Value: '"/opt/cni/bin"'
    Name: env
  - Env:
    - Key: container
      Value: docker
    Name: env
  - Name: stopsignal
    Signal: SIGRTMIN+3
  - CmdLine:
    - set | grep VERSION_ > /.kubeadm.env ;    set | grep BOOTSTR_ >> /.kubeadm.env
      ;    set | grep ROOTFS >> /.kubeadm.env
    Name: run
    PrependShell: true
  - CmdLine:
    - systemctl set-default multi-user.target
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /opt/${ROOTFS} ;    mkdir -p ${ROOTFS}
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - bin
    - /${ROOTFS}/bin
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc
    - /${ROOTFS}/etc
  - CmdLine:
    - apt-get update ;    apt-get upgrade -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y     apt-transport-https     ca-certificates     curl     software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add - ;    curl
      -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x /${ROOTFS}/bin/repo
    Name: run
    PrependShell: true
  - CmdLine:
    - /${ROOTFS}/bin/repo
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y     docker-ce=${VERSION_DOCK}~ce-0~ubuntu-xenial     ebtables     ethtool     kmod     kubernetes-cni     libwrap0     systemd     tcpd
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o /tmp/libgcrypt11_1.5.3.deb -L https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/8993248/+files/libgcrypt11_1.5.3-2ubuntu4.3_amd64.deb
      ;    dpkg -i /tmp/libgcrypt11_1.5.3.deb ;    apt-get install -f
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y     socat
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean ;    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o /${ROOTFS}/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubeadm
      ;    chmod +x /${ROOTFS}/bin/kubeadm
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o /${ROOTFS}/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubectl
      ;    chmod +x /${ROOTFS}/bin/kubectl
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o /${ROOTFS}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubelet
      ;    chmod +x /${ROOTFS}/bin/kubelet
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /${ROOTFS}/cni ;    curl -o /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz
      https://github.com/containernetworking/cni/releases/download/${VERSION_CNI}/cni-${ARCH}-${VERSION_CNI}.tgz
      --location ;    curl -o /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/plugins/releases/download/${VERSION_CNI}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz
      --location ;    tar -zxvf /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/
      ;    tar -zxvf /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/
      ;    rm -rf /${ROOTFS}/cni-*
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin:${PATH}"'
    Name: env
  - CmdLine:
    - cd /lib/systemd/system/sysinit.target.wants/; ls | grep -v systemd-tmpfiles-setup
      | xargs rm -f $1     rm -f /lib/systemd/system/multi-user.target.wants/*;    rm
      -f /etc/systemd/system/*.wants/*;    rm -f /lib/systemd/system/local-fs.target.wants/*;     rm
      -f /lib/systemd/system/sockets.target.wants/*udev*;     rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm
      -f /lib/systemd/system/basic.target.wants/*;    rm -f /lib/systemd/system/anaconda.target.wants/*;     rm
      -f /lib/systemd/system/plymouth*;     rm -f /lib/systemd/system/systemd-update-utmp*;
    Name: run
    PrependShell: true
  - CmdLine:
    - systemctl set-default multi-user.target
    Name: run
    PrependShell: true
  - Env:
    - Key: init
      Value: /lib/systemd/systemd
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - gantry
    - /usr/local/bin/gantry
  - CmdLine:
    - gantry
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
