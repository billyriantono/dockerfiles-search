{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "compiler",
      "BaseName": "alpine:3.10",
      "SourceCode": "FROM alpine:3.10 as compiler",
      "Platform": "",
      "As": "compiler",
      "From": {
        "Image": "alpine:3.10"
      },
      "Commands": [
        {
          "Maintainer": "Glitch",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'http://dl-cdn.alpinelinux.org/alpine/v3.10/main' \u003e\u003e /etc/apk/repositories \u0026\u0026     echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' \u003e\u003e /etc/apk/repositories \u0026\u0026     echo 'http://dl-cdn.alpinelinux.org/alpine/v3.10/community' \u003e\u003e /etc/apk/repositories"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk --no-cache add ca-certificates wget \u0026\u0026     wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \u0026\u0026     wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk \u0026\u0026     apk add glibc-2.29-r0.apk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --update       --no-cache       build-base unzip curl wget git       clang clang-dev cmake pkgconf wget openblas openblas-dev       cmake pkgconfig       g++ libtbb libtbb-dev libwebp       libjpeg libavc1394 libavc1394-dev       libjpeg-turbo libjpeg-turbo-dev gstreamer gstreamer-dev       libpng libpng-dev openjdk11       jasper-dev gst-plugins-base gst-plugins-base-dev       tiff tiff-dev libgphoto2 libgphoto2-dev       libwebp libwebp-dev python3 python3-dev python2 python2-dev libgfortran       gfortran py2-pip py3-pip build-base py3-numpy py2-numpy apache-ant       clang-dev openexr openexr-dev gtk+ gtk+-dev mesa mesa-dev       ffmpeg-libs ffmpeg-dev linux-headers tesseract-ocr \u0026\u0026       rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -vfs /usr/bin/python3 /usr/local/bin/python \u0026\u0026     ln -vfs /usr/bin/pip3 /usr/local/bin/pip \u0026\u0026     ln -vfs /usr/include/libpng16 /usr/include/libpng \u0026\u0026     ln -vfs /usr/include/locale.h /usr/include/xlocale.h"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 --no-cache-dir install numpy pillow pytesseract \u0026\u0026     pip2 --no-cache-dir install numpy pillow pytesseract \u0026\u0026     pip3 --no-cache-dir install --upgrade numpy pillow pytesseract pandas \u0026\u0026     pip2 --no-cache-dir install --upgrade numpy pillow pytesseract"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CC",
              "Value": "/usr/bin/clang"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CXX",
              "Value": "/usr/bin/g++"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "'4.1.1'"
            },
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-11-openjdk"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /opt \u0026\u0026 cd /opt \u0026\u0026   wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \u0026\u0026   unzip ${OPENCV_VERSION}.zip \u0026\u0026   rm -rf ${OPENCV_VERSION}.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt \u0026\u0026 cd /opt \u0026\u0026   wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.tar.gz \u0026\u0026   tar -xvzf $OPENCV_VERSION.tar.gz \u0026\u0026   rm -vrf $OPENCV_VERSION.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/opencv-${OPENCV_VERSION}/build \u0026\u0026   cd /opt/opencv-${OPENCV_VERSION}/build \u0026\u0026   cmake     -D OPENCV_GENERATE_PKGCONFIG=ON     -D CMAKE_C_COMPILER=/usr/bin/clang     -D CMAKE_CXX_COMPILER=/usr/bin/clang++     -D CMAKE_INSTALL_PREFIX=/usr/local     -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-$OPENCV_VERSION/modules     -D BUILD_DOCS=OFF     -D BUILD_EXAMPLES=OFF     -D BUILD_opencv_apps=OFF     -D BUILD_opencv_python2=OFF     -D BUILD_opencv_python3=ON     -D BUILD_PERF_TESTS=OFF     -D BUILD_SHARED_LIBS=OFF     -D BUILD_TESTS=OFF     -D CMAKE_BUILD_TYPE=RELEASE     -D ENABLE_PRECOMPILED_HEADERS=OFF     -D FORCE_VTK=OFF     -D WITH_IPP=NO     -D WITH_1394=NO     -D WITH_LIBV4L=NO     -D WITH_V4l=YES     -D WITH_TBB=YES     -D WITH_FFMPEG=YES     -D WITH_GPHOTO2=YES     -D WITH_GSTREAMER=YES     -D WITH_GDAL=OFF     -D WITH_OPENEXR=OFF     -D WITH_OPENGL=OFF     -D WITH_GTK=ON     -D WITH_QT=NO     -D WITH_XINE=OFF     -D BUILD_JPEG=ON      -D BUILD_TIFF=ON     -D BUILD_PNG=ON     -D PYTHON3_LIBRARY=`find /usr -name libpython3.so`     -D PYTHON3_EXECUTABLE=`which python3`     -D PYTHON2_LIBRARY=`find /usr -name libpython2.so`     -D PYTHON2_EXECUTABLE=`which python2`      .. \u0026\u0026   make -j$(nproc) \u0026\u0026   make install \u0026\u0026   rm -rf /opt/opencv-${OPENCV_VERSION} \u0026\u0026   ln -vfs /usr/local/lib64/pkgconfig/opencv4.pc /usr/lib/pkgconfig/opencv4.pc \u0026\u0026   ln -vfs /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PKG_CONFIG_PATH",
              "Value": "/usr/local/lib64/pkgconfig:/usr/lib/pkgconfig"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /projects"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/projects"
        }
      ]
    }
  ]
}