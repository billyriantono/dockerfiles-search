MetaArgs: null
Stages:
- BaseName: hinkelsteinli/alpine:latest
  Commands:
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.7.3
    Name: env
  - CmdLine:
    - apk add --no-cache ca-certificates
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex &&     apk add --no-cache --virtual .fetch-deps \tgnupg \ttar \txz
      &&     wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      &&     wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      &&     export GNUPGHOME=\"$(mktemp -d)\" &&     gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" &&     gpg --batch --verify python.tar.xz.asc python.tar.xz
      &&     { command -v gpgconf > /dev/null && gpgconf --kill all || :; } &&     rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc &&     mkdir -p /usr/src/python &&     tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz &&     rm python.tar.xz
      &&     apk add --no-cache --virtual .build-deps  \tbzip2-dev \tcoreutils \tdpkg-dev
      dpkg \texpat-dev \tfindutils \tgcc \tgdbm-dev \tlibc-dev \tlibffi-dev \tlibnsl-dev
      \tlibtirpc-dev \tlinux-headers \tmake \tncurses-dev \topenssl-dev \tpax-utils
      \treadline-dev \tsqlite-dev \ttcl-dev \ttk \ttk-dev \tutil-linux-dev \txz-dev
      \tzlib-dev &&         apk del .fetch-deps &&     cd /usr/src/python &&     gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" &&     ./configure \t--build=\"$gnuArch\" \t--enable-loadable-sqlite-extensions
      \t--enable-shared \t--with-system-expat \t--with-system-ffi \t--without-ensurepip
      &&     make -j \"$(nproc)\" \tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\"
      &&     make install &&     find /usr/local -type f -executable -not \\( -name
      '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t|
      tr ',' '\\n' \t| sort -u \t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\")
      == 0 { next } { print \"so:\" $1 }' \t| xargs -rt apk add --no-cache --virtual
      .python-rundeps &&     apk del .build-deps &&         find /usr/local -depth
      \t\\( \t\\( -type d -a \\( -name test -o -name tests \\) \\) \t-o \t\\( -type
      f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\\) -exec rm -rf '{}' + &&
      \    rm -rf /usr/src/python &&     python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/local/bin &&     ln -s idle3 idle &&     ln -s pydoc3 pydoc &&     ln
      -s python3 python &&     ln -s python3-config python-config
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - "set -ex;     wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';     python
      get-pip.py \t--disable-pip-version-check \t--no-cache-dir \t\"pip==$PYTHON_PIP_VERSION\"
      \    ;     pip --version;     find /usr/local -depth \t\\( \t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t-o \t\\( -type f -a \\( -name '*.pyc'
      -o -name '*.pyo' \\) \\) \t\\) -exec rm -rf '{}' +;     rm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - python
    Name: cmd
    PrependShell: false
  From:
    Image: hinkelsteinli/alpine:latest
  Name: ""
  Platform: ""
  SourceCode: FROM hinkelsteinli/alpine:latest
