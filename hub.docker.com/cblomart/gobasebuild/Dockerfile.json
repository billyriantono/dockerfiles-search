{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "golang:latest",
      "SourceCode": "FROM golang:latest",
      "Platform": "",
      "From": {
        "Image": "golang:latest"
      },
      "Commands": [
        {
          "Maintainer": "cblomart@gmail.com",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -;    echo 'deb http://deb.nodesource.com/node_10.x stretch main' \u003e /etc/apt/sources.list.d/nodesource.list;    apt-get update \u0026\u0026 apt-get install -y    nodejs    xz-utils    jq    musl    musl-tools \u0026\u0026    apt-get clean \u0026\u0026    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export UPX_VERSION=$(curl -sf \"https://api.github.com/repos/upx/upx/releases/latest\" | jq -r .tag_name | grep -o \"[.0-9]*\")     \u0026\u0026 UPX_URL=\"https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz\"     \u0026\u0026 echo UPX URL: $UPX_URL     \u0026\u0026 curl -SsfL $UPX_URL | tar -C /tmp -Jxf -     \u0026\u0026 mv /tmp/upx-${UPX_VERSION}-amd64_linux/upx /usr/local/bin/     \u0026\u0026 rm -rf /tmp/upx-${UPX_VERSION}-amd64_linux"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export STATICCHECK_VERSION=$(curl -sf \"https://api.github.com/repos/dominikh/go-tools/releases/latest\" | jq -r .tag_name)     \u0026\u0026 STATICCHECK_URL=\"https://github.com/dominikh/go-tools/releases/download/${STATICCHECK_VERSION}/staticcheck_linux_amd64.tar.gz\"     \u0026\u0026 echo STATICCHECK URL: $STATICCHECK_URL     \u0026\u0026 curl -SsfL $STATICCHECK_URL | tar -C /tmp -zxf -     \u0026\u0026 mv /tmp/staticcheck/staticcheck /usr/local/bin/     \u0026\u0026 chmod +x /usr/local/bin/staticcheck     \u0026\u0026 upx -qq --best --lzma /usr/local/bin/staticcheck"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export CGO=0;    go get -ldflags '-s -w' -a github.com/cblomart/git-version;    go get -ldflags '-s -w' -a golang.org/x/lint/golint;    go get -ldflags '-s -w' -a github.com/gordonklaus/ineffassign;    go get -ldflags '-s -w' -a github.com/securego/gosec/cmd/gosec/...;    go get -ldflags '-s -w' -a github.com/dave/courtney;    upx -qq --best --lzma ./bin/git-version;    upx -qq --best --lzma ./bin/golint;    upx -qq --best --lzma ./bin/ineffassign;    upx -qq --best --lzma ./bin/gosec;    upx -qq --best --lzma ./bin/courtney;    cp ./bin/* /usr/local/bin/;    rm -rf ./*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export DOCKER_VERSION=$(curl -sf https://download.docker.com/linux/static/stable/x86_64/ | egrep -o -e 'docker-[.0-9]*(-ce)?\\.tgz' | sort -r | head -n 1)   \u0026\u0026 DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\"   \u0026\u0026 echo Docker URL: $DOCKER_URL   \u0026\u0026 curl -Ssf $DOCKER_URL | tar -C /tmp -zxf  -   \u0026\u0026 mv /tmp/docker/docker /usr/local/bin/   \u0026\u0026 upx -qq --best --lzma /usr/local/bin/docker   \u0026\u0026 which docker   \u0026\u0026 (docker version || true)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64",
            "/usr/local/bin/test-reporter"
          ]
        },
        {
          "CmdLine": [
            "wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc     \u0026\u0026 chmod 777 /usr/local/bin/mc     \u0026\u0026 upx -qq --best --lzma /usr/local/bin/mc"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}