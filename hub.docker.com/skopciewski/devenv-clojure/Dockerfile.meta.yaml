MetaArgs: null
Stages:
- BaseName: skopciewski/devenv-base
  Commands:
  - Name: user
    User: root
  - CmdLine:
    - echo "@edge http://nl.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "@testing http://nl.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache       ctags       libnotify       python       bash@edge       readline@edge       python2@edge       ruby-libs@edge       rlwrap@testing
    Name: run
    PrependShell: true
  - CmdLine:
    - '{     echo ''#!/bin/sh'';     echo ''set -e'';     echo;     echo ''dirname
      "$(dirname "$(readlink -f "$(which javac || which java)")")"'';   } > /usr/local/bin/docker-java-home   &&
      chmod +x /usr/local/bin/docker-java-home'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-1.8-openjdk/jre
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u222
    Name: env
  - Env:
    - Key: JAVA_ALPINE_VERSION
      Value: 8.222.10-r0
    Name: env
  - CmdLine:
    - set -x   && apk add --no-cache     openjdk8-jre="$JAVA_ALPINE_VERSION"   &&
      [ "$JAVA_HOME" = "$(docker-java-home)" ]
    Name: run
    PrependShell: true
  - Key: user
    Name: arg
    Value: dev
  - Name: user
    User: ${user}
  - CmdLine:
    - mkdir -p /home/${user}/sbin   && mkdir -p /home/${user}/opt
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fsS https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
      > /home/${user}/sbin/lein   && chmod 755 /home/${user}/sbin/lein   && /home/${user}/sbin/lein
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fsSL https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh
      > /home/${user}/sbin/boot   && chmod 755 /home/${user}/sbin/boot   && /home/${user}/sbin/boot
      -h   && sed -i -e 's/^BOOT_CLOJURE_VERSION=.*/BOOT_CLOJURE_VERSION=1.10.0/'
      /home/${user}/.boot/boot.properties   && /home/${user}/sbin/boot -h
    Name: run
    PrependShell: true
  - Env:
    - Key: CLOJURE_TOOLS_VER
      Value: 1.10.0.442
    Name: env
  - CmdLine:
    - curl -fsSL https://download.clojure.org/install/linux-install-${CLOJURE_TOOLS_VER}.sh
      > /home/${user}/sbin/linux-install.sh   && chmod 755 /home/${user}/sbin/linux-install.sh   &&
      sudo /home/${user}/sbin/linux-install.sh   && rm /home/${user}/sbin/linux-install.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: JOKER_VER
      Value: 0.9.4
    Name: env
  - CmdLine:
    - cd /home/${user}/sbin   && curl -fsSLo joker-${JOKER_VER}-linux-amd64.zip https://github.com/candid82/joker/releases/download/v${JOKER_VER}/joker-${JOKER_VER}-linux-amd64.zip   &&
      unzip joker-${JOKER_VER}-linux-amd64.zip   && rm joker-${JOKER_VER}-linux-amd64.zip
    Name: run
    PrependShell: true
  - Env:
    - Key: DEVDOTFILES_VIM_CLOJURE_VER
      Value: 1.0.7
    Name: env
  - CmdLine:
    - cd /home/${user}/opt   && curl -fsSL https://github.com/skopciewski/dotfiles_vim_clojure/archive/v${DEVDOTFILES_VIM_CLOJURE_VER}.tar.gz
      | tar xz   && cd dotfiles_vim_clojure-${DEVDOTFILES_VIM_CLOJURE_VER}   && PATH=/home/${user}/sbin:$PATH
      make
    Name: run
    PrependShell: true
  - Env:
    - Key: ZSH_TMUX_AUTOSTART
      Value: "true"
    - Key: ZSH_TMUX_AUTOSTART_ONCE
      Value: "true"
    - Key: ZSH_TMUX_AUTOCONNECT
      Value: "false"
    - Key: ZSH_TMUX_AUTOQUIT
      Value: "false"
    - Key: ZSH_TMUX_FIXTERM
      Value: "false"
    - Key: TERM
      Value: xterm-256color
    Name: env
  - CmdLine:
    - /bin/zsh
    Name: cmd
    PrependShell: false
  From:
    Image: skopciewski/devenv-base
  Name: ""
  Platform: ""
  SourceCode: FROM skopciewski/devenv-base
