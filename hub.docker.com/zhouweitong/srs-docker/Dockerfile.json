{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:latest",
      "SourceCode": "FROM centos:latest",
      "Platform": "",
      "From": {
        "Image": "centos:latest"
      },
      "Commands": [
        {
          "CmdLine": [
            "yum update -y \u0026\u0026     yum install -y git go sudo bash psmisc bash-completion wget \u0026\u0026     mkdir /root/software \u0026\u0026     cd /root/software \u0026\u0026     git clone -b 2.0release https://github.com/ossrs/srs.git \u0026\u0026     git clone https://github.com/ossrs/srs-ngb.git \u0026\u0026     git clone https://github.com/ossrs/go-oryx.git \u0026\u0026     git clone https://github.com/winlinvip/videojs-flow.git \u0026\u0026     go get github.com/ossrs/go-oryx \u0026\u0026     go get github.com/ossrs/go-oryx-lib \u0026\u0026     mkdir /root/go/src/golang.org \u0026\u0026     mkdir /root/go/src/golang.org/x \u0026\u0026     cd /root/go/src/golang.org/x \u0026\u0026     git clone https://github.com/golang/net.git \u0026\u0026     touch /etc/redhat-release \u0026\u0026     sed -i '40c ret=$?; if [[ 0 -eq $ret ]]; then' /root/software/srs/trunk/auto/depends.sh \u0026\u0026     cd /root/software/srs/trunk \u0026\u0026     sudo ./configure --jobs=4 --full \u0026\u0026     sudo make -j4 \u0026\u0026     yum clean all \u0026\u0026     cd /root \u0026\u0026     ln -s /root/software/srs/trunk srs \u0026\u0026     cd /root/software/go-oryx \u0026\u0026     ./build.sh \u0026\u0026     cd /root \u0026\u0026     ln -s /root/software/go-oryx/shell go-oryx \u0026\u0026     cd /root/software/go-oryx/httpx-static \u0026\u0026     go build main.go \u0026\u0026     cd /root \u0026\u0026     ln -s /root/software/go-oryx/httpx-static https_proxy \u0026\u0026     cd /root/software/videojs-flow/demo \u0026\u0026     go build server.go \u0026\u0026     go build mse.go \u0026\u0026     cd /root/software/srs-ngb/trunk/research \u0026\u0026     \\cp -rf srs-console /root/software/srs/trunk/objs/nginx/html \u0026\u0026     rm -rf /root/software/srs/trunk/objs/nginx/html/srs-console/js/README.md \u0026\u0026     cd /root/software/srs-ngb/trunk/src \u0026\u0026     \\cp -rf * /root/software/srs/trunk/objs/nginx/html/srs-console/js/ \u0026\u0026     cd /root \u0026\u0026     ln -s /root/software/videojs-flow/demo videojs-flow \u0026\u0026     ln -s /root/software/srs-ngb srs-ngb \u0026\u0026     mkdir /root/sample_conf \u0026\u0026     mkdir /root/logs \u0026\u0026     mkdir /root/logs/srs_log \u0026\u0026     mkdir /root/logs/go-oryx_log \u0026\u0026     mkdir /root/logs/mse_log \u0026\u0026     mkdir /root/shell \u0026\u0026     mkdir /root/cert \u0026\u0026     yum autoremove -y gcc gcc-c++ kernel-headers git go wget automake autoconf make patch unzip \u0026\u0026     rm -rf /root/go \u0026\u0026     cd /root/software \u0026\u0026     find . -name '*.c' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.o' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.h' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.cpp' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.hpp' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.go' -type f -exec rm -rf {} \\; \u0026\u0026     find . -name '*.zip' -type f -exec rm -rf {} \\; \u0026\u0026     find . -type d -empty -delete"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "conf",
            "/root/sample_conf"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "shell",
            "/root/shell"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "README.md",
            "/root"
          ]
        },
        {
          "CmdLine": [
            "cd /root/software/srs/trunk/conf \u0026\u0026     mv srs.conf srs.conf.bak \u0026\u0026     ln -s /root/sample_conf/srsconfig.conf srs.conf \u0026\u0026     ln -s /root/sample_conf/srsedge.conf srsedge.conf  \u0026\u0026     cd /root/software/go-oryx/conf \u0026\u0026     mv srs.conf srs.conf.bak \u0026\u0026     mv bms.conf /root/sample_conf/go-oryx_bms.conf \u0026\u0026     ln -s /root/sample_conf/go-oryx_bms.conf srs.conf \u0026\u0026     chmod -R 777 /root/shell \u0026\u0026     ln -s /root/shell/start_srs.sh /root/start.sh \u0026\u0026     ln -s /root/shell/stop.sh /root/stop.sh \u0026\u0026     ln -s /root/shell/start_srs_edge.sh /root/start_edge.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/root/sample_conf",
            "/root/shell",
            "/root/logs",
            "/root/software/srs/trunk/objs/nginx/html"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "1935"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "1985"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8082"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -c /root/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}