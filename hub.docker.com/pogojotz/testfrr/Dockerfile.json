{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "export DEBIAN_FRONTEND=noninteractive     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install -y         autoconf         binutils         bison         flex         gdb         git         install-info         iputils-ping         iproute2         less         libtool         libjson-c-dev         libpcre3-dev         libpython-dev         libreadline-dev         libc-ares-dev         man         mininet         pkg-config         python-pip         python-sphinx         rsync         strace         tcpdump         texinfo         tmux         valgrind         vim         wget         x11-xserver-utils         xterm     \u0026\u0026 pip install         exabgp==3.4.17         ipaddr         pytest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp     \u0026\u0026 wget -q https://ci1.netdef.org/artifact/LIBYANG-YANGRELEASE/shared/build-1/Ubuntu-18.04-x86_64-Packages/libyang-dev_0.16.46_amd64.deb          -O libyang-dev.deb     \u0026\u0026 wget -q https://ci1.netdef.org/artifact/LIBYANG-YANGRELEASE/shared/build-1/Ubuntu-18.04-x86_64-Packages/libyang_0.16.46_amd64.deb          -O libyang.deb     \u0026\u0026 echo \"039252cc66eb254a97e160b1c325af669470cde8a02d73ec9f7b920ed3c7997c  libyang.deb\" | sha256sum -c -     \u0026\u0026 echo \"e7e2d5bfc7b33b3218df8bef404432970f9b4ad10d6dbbdcb0e0be2babbb68e9  libyang-dev.deb\" | sha256sum -c -     \u0026\u0026 dpkg -i libyang*.deb     \u0026\u0026 rm libyang*.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -r -g 92 frr     \u0026\u0026 groupadd -r -g 85 frrvty     \u0026\u0026 useradd -c \"FRRouting suite\"                -d /var/run/frr                -g frr                -G frrvty                -r                -s /sbin/nologin                frr     \u0026\u0026 useradd -d /var/run/exabgp/                -s /bin/false                exabgp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e /etc/security/limits.conf;     echo \"* soft core unlimited\" \u003e\u003e /etc/security/limits.conf;     echo \"root soft core unlimited\" \u003e\u003e /etc/security/limits.conf;     echo \"* hard core unlimited\" \u003e\u003e /etc/security/limits.conf;     echo \"root hard core unlimited\" \u003e\u003e /etc/security/limits.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/inner",
            "/opt/topotests"
          ]
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:/opt/topotests\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"cat /opt/topotests/motd.txt\" \u003e\u003e /root/.profile \u0026\u0026       echo \"export PS1='(topotests) $PS1'\" \u003e\u003e /root/.profile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash",
            "/opt/topotests/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}