{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "amazonlinux:2",
      "SourceCode": "FROM amazonlinux:2",
      "Platform": "",
      "From": {
        "Image": "amazonlinux:2"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "HASHICORP_RELEASES",
              "Value": "https://releases.hashicorp.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "VAULT_VERSION",
              "Value": "0.10.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONSUL_VERSION",
              "Value": "1.0.7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "amazon-linux-extras install docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y   unzip   bzip2   wget   git   tar   jq   docker   python-pip   awscli   go   zip   java-1.8.0-openjdk-devel   maven   \u0026\u0026 /usr/sbin/alternatives --auto java   \u0026\u0026 /usr/sbin/alternatives --auto javac   \u0026\u0026 yum remove -y java-1.7.0-openjdk   \u0026\u0026 yum clean all   \u0026\u0026 rm -rf /var/cache/yum"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gradle_version=4.8.1     \u0026\u0026 wget -c http://services.gradle.org/distributions/gradle-${gradle_version}-all.zip     \u0026\u0026 unzip  gradle-${gradle_version}-all.zip -d /opt     \u0026\u0026 rm gradle-${gradle_version}-all.zip     \u0026\u0026 ln -s /opt/gradle-${gradle_version} /opt/gradle     \u0026\u0026 printf \"export GRADLE_HOME=/opt/gradle\\nexport JAVA_HOME=/etc/alternatives/java_sdk\\nexport PATH=\\$PATH:\\$GRADLE_HOME/bin\\n\" \u003e /etc/profile.d/gradle.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install docker-compose dumb-init"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash   \u0026\u0026 . ~/.nvm/nvm.sh   \u0026\u0026 nvm install --lts   \u0026\u0026 npm install -g grunt-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget ${HASHICORP_RELEASES}/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip   \u0026\u0026 unzip -d /bin vault_${VAULT_VERSION}_linux_amd64.zip   \u0026\u0026 chmod +x /bin/vault"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip   \u0026\u0026 unzip -d /bin consul_${CONSUL_VERSION}_linux_amd64.zip   \u0026\u0026 chmod +x /bin/consul"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts/check-dockerhub.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts/get-latest-nonmerge-commit.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts/docker-entrypoint.sh",
            "/usr/local/bin/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}