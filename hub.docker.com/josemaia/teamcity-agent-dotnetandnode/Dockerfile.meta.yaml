MetaArgs: null
Stages:
- BaseName: jetbrains/teamcity-agent
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Jos√© Maia <josecbmaia@outlook.pt>"'
    Name: label
  - CmdLine:
    - "curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
      && \tmv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \tsh -c 'echo
      \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod
      xenial main\" > /etc/apt/sources.list.d/dotnetdev.list' &&     apt-key adv --keyserver
      hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893 &&     apt-get update &&
      \tapt-get install dotnet-sdk-2.0.0 -y"
    Name: run
    PrependShell: true
  - CmdLine:
    - "sh -c 'echo \"deb http://download.mono-project.com/repo/ubuntu xenial main\"
      > /etc/apt/sources.list.d/mono-official.list' && \tapt-key adv --keyserver hkp://keyserver.ubuntu.com:80
      --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \tapt-get update &&
      \tapt-get install mono-complete -y"
    Name: run
    PrependShell: true
  - CmdLine:
    - export MONO_TLS_PROVIDER=legacy
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /root/.config/NuGet/ && \tmkdir -p /root/.nuget/NuGet/ && \techo '<?xml
      version=\"1.0\" encoding=\"utf-8\"?><configuration></configuration>' >/root/.nuget/NuGet/NuGet.Config
      && \tln -s /root/.nuget/NuGet/NuGet.Config /root/.config/NuGet/NuGet.Config"
    Name: run
    PrependShell: true
  - CmdLine:
    - "sh -c 'echo \"deb https://deb.nodesource.com/node_6.x xenial main\" > /etc/apt/sources.list.d/nodesource.list'
      && \tcurl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key
      add - && \tapt-get update && \tapt-get install nodejs -y"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /root/.npm/node-sass/4.5.3/ && curl -L https://github.com/sass/node-sass/releases/download/v4.5.3/linux-x64-48_binding.node
      > /root/.npm/node-sass/4.5.3/linux-x64-48_binding.node
    Name: run
    PrependShell: true
  - CmdLine:
    - CHROMEDRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`
      &&     mkdir -p /opt/chromedriver-$CHROMEDRIVER_VERSION &&     curl -sS -o /tmp/chromedriver_linux64.zip
      http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
      &&     unzip -qq /tmp/chromedriver_linux64.zip -d /opt/chromedriver-$CHROMEDRIVER_VERSION
      &&     rm /tmp/chromedriver_linux64.zip &&     chmod +x /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver
      &&     ln -fs /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver /usr/local/bin/chromedriver
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key
      add - &&     echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >>
      /etc/apt/sources.list.d/google-chrome.list &&     apt-get -yqq update &&     apt-get
      -yqq install google-chrome-stable &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /opt/buildagent/logs
  - Name: volume
    Volumes:
    - /opt/buildagent/plugins
  - Env:
    - Key: TZ
      Value: '''Europe/London'''
    Name: env
  - CmdLine:
    - echo $TZ > /etc/timezone && apt-get update && apt-get install -y tzdata && rm
      /etc/localtime && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && dpkg-reconfigure
      -f noninteractive tzdata && apt-get clean
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://github.com/docker/compose/releases/download/1.16.0/docker-compose-`uname
      -s`-`uname -m` > /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
      && apt-get update && apt-get install docker-compose -y
    Name: run
    PrependShell: true
  - CmdLine:
    - 'curl -H ''Cache-Control: no-cache'' -o /tmp/Microsoft.Docker.Sdk.tar.gz https://distaspnet.blob.core.windows.net/sdk/Microsoft.Docker.Sdk.tar.gz     &&
      cd /usr/share/dotnet/sdk/2.0.0/Sdks     && tar xf /tmp/Microsoft.Docker.Sdk.tar.gz     &&
      rm /tmp/Microsoft.Docker.Sdk.tar.gz'
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_HOST
      Value: '""'
    Name: env
  - Env:
    - Key: DOCKER_BIN
      Value: '"/usr/bin/docker"'
    Name: env
  From:
    Image: jetbrains/teamcity-agent
  Name: ""
  Platform: ""
  SourceCode: FROM jetbrains/teamcity-agent
