{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jenkins/jenkins:lts-alpine",
      "SourceCode": "FROM jenkins/jenkins:lts-alpine",
      "Platform": "",
      "From": {
        "Image": "jenkins/jenkins:lts-alpine"
      },
      "Commands": [
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "plugins.txt",
            "/usr/share/jenkins/ref/plugins.txt"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/bin/install-plugins.sh \u003c /usr/share/jenkins/ref/plugins.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apk add --no-cache \t\tca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_CHANNEL",
              "Value": "stable"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "17.09.0-ce"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex;         apk upgrade --no-cache libcurl;  \t\tapk add --update --no-cache --virtual .fetch-deps \t\tcurl \t\ttar \t; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\taarch64) dockerArch='aarch64' ;; \t\tppc64le) dockerArch='ppc64le' ;; \t\ts390x) dockerArch='s390x' ;; \t\t*) echo \u003e\u00262 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo \u003e\u00262 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tapk del .fetch-deps; \t\tdockerd -v; \tdocker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /root/.docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config.json",
            "/root/.docker/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-credential-ecr-login",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /usr/local/bin/docker-credential-ecr-login"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /aws \u0026\u0026 \tapk -Uuv add groff less python py-pip jq curl \u0026\u0026 \tpip install awscli \u0026\u0026 \tapk --purge -v del py-pip \u0026\u0026 \trm /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026     apk upgrade \u0026\u0026     apk add ca-certificates \u0026\u0026 update-ca-certificates \u0026\u0026    apk add --update tzdata"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "America/Toronto"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}