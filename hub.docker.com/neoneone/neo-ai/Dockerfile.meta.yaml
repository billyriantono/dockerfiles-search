MetaArgs: null
Stages:
- BaseName: nvcr.io/nvidia/tensorrt:19.02-py3
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"neoneone  <neoneone@163.com>"'
    Name: label
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: TZ
      Value: Europe/Minsk
    Name: env
  - CmdLine:
    - "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
      &&         cat /usr/local/cuda/version.txt &&\tcat /usr/include/cudnn.h | grep
      CUDNN_MAJOR -A 2 &&\tdpkg -l | grep TensorRT &&\techo $(python3 -c \"from distutils.sysconfig
      import get_python_inc; print(get_python_inc())\")"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get -qq update && apt-get -qq install -y --no-install-recommends \tprotobuf-compiler
      \tgeany \tpython3 \tpython3-tk \tpython3-pip \tpython3-dev \tpython3-setuptools
      \teog \tgedit \tbuild-essential \tssh \tca-certificates \tcurl \tgit \twget
      \tunzip \tyasm \tpkg-config \tlibswscale-dev \tlibtbb2 \tlibtbb-dev \tlibjpeg-dev
      \tlibgflags-dev \tlibgoogle-glog-dev \tlibprotobuf-dev \tliblmdb-dev \tlibpng-dev
      \tlibtiff-dev \tlibavformat-dev \tlibpq-dev \tlibgtk2.0-dev \tlibhdf5-dev \tlibcurl4-openssl-dev\tlibprotoc-dev
      \tswig\tqt5-default \tlibboost-all-dev \tlibboost-dev \txdg-utils \tsnapd \trsync
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin &&\tln -s /usr/bin/python3 python"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/src \t&& wget -q  https://bootstrap.pypa.io/get-pip.py \t&& python3
      get-pip.py \t&& pip3 install --upgrade pip \t&& rm -f get-pip.py \t&& python3
      -m pip --version\t&& pip install --user --upgrade pip"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir --upgrade pip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - Env:
    - Key: CMAKE_VERSION
      Value: '"3.15.5"'
    Name: env
  - CmdLine:
    - wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz
      &&         tar zxf cmake-${CMAKE_VERSION}.tar.gz &&         rm -rf cmake-${CMAKE_VERSION}.tar.gz
      &&         cd cmake-${CMAKE_VERSION} &&         ./bootstrap --system-curl &&         make
      -j8 && make install &&         rm -rf /cmake-${CMAKE_VERSION}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - Env:
    - Key: OPENCV_VERSION
      Value: '"3.4.8"'
    Name: env
  - CmdLine:
    - "wget -O opencv.zip  https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip
      &&     wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip
      &&     unzip -q opencv.zip &&     unzip -q opencv_contrib.zip &&     mkdir /opencv-${OPENCV_VERSION}/cmake_binary
      &&     cd /opencv-${OPENCV_VERSION}/cmake_binary &&     cmake -DBUILD_TIFF=ON
      \t-DBUILD_opencv_java=OFF \t-DWITH_CUDA=ON \t-DENABLE_FAST_MATH=1 \t-DCUDA_FAST_MATH=1
      \t-DWITH_CUBLAS=1 \t-DENABLE_AVX=ON \t-DWITH_OPENGL=ON \t-DWITH_OPENCL=ON \t-DWITH_IPP=ON
      \t-DWITH_TBB=ON \t-DWITH_EIGEN=ON \t-DWITH_V4L=ON \t-DBUILD_TESTS=OFF \t-DBUILD_PERF_TESTS=OFF
      \t-DCMAKE_BUILD_TYPE=RELEASE \t-DCMAKE_INSTALL_PREFIX=$(python3 -c \"import
      sys; print(sys.prefix)\") \t-DPYTHON_EXECUTABLE=$(which python3) \t-DPYTHON_INCLUDE_DIR=$(python3
      -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")
      \t-DPYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib;
      print(get_python_lib())\") \t-DINSTALL_PYTHON_EXAMPLES=ON \t-DINSTALL_C_EXAMPLES=OFF
      \t-DOPENCV_ENABLE_NONFREE=ON \t-DOPENCV_GENERATE_PKGCONFIG=ON \t-DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-${OPENCV_VERSION}/modules
      \t-DBUILD_EXAMPLES=ON \t-D CUDA_TOOLKIT_ROOT_DIR= /usr/local/cuda-10.0 \t-DWITH_QT=ON
      .. &&     make -j8 \t&& make install \t&& rm /opencv.zip \t&& rm /opencv_contrib.zip
      \t&& rm -rf /opencv-${OPENCV_VERSION} \t&& rm -rf /opencv_contrib-${OPENCV_VERSION}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "ln -s \t/usr/lib/python3.5/dist-packages/cv2/python-3.5/cv2.cpython-36m-x86_64-linux-gnu.so
      \t/usr/local/lib/python3.5/dist-packages/cv2.so"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir torch==1.3.0+cu100 torchvision==0.4.1+cu100 -f https://download.pytorch.org/whl/torch_stable.html
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir tensorflow-gpu==1.14.0 &&     pip3 install --no-cache-dir
      tflearn
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir onnx onnxmltools onnxruntime-gpu
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir keras
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - "git clone --recursive -b v5.0 https://github.com/onnx/onnx-tensorrt.git &&\tcd
      onnx-tensorrt &&\tmkdir build  &&\tcd build &&\tcmake .. -DCUDA_INCLUDE_DIRS=/usr/local/cuda/include
      -DTENSORRT_ROOT=/usr/src/tensorrt -DGPU_ARCHS=\"61\" &&\tmake -j8 &&\tmake install
      &&\tldconfig && \tcd .. && \tpython setup.py build &&\tpython setup.py install
      &&\trm -rf ./build/ &&\trm -rf  /onnx-tensorrt"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - git clone https://github.com/lanpa/tensorboardX && cd tensorboardX && python
      setup.py install && rm -rf /tensorboardX
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /tmp/
  - CmdLine:
    - pip3 install --no-cache-dir --requirement /tmp/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --no-cache-dir https://1dv.alarge.space/mxnet_cu100-1.6.0b20190820-py2.py3-none-manylinux1_x86_64.whl
      &&     pip3 install --no-cache-dir cython &&     pip3 install --no-cache-dir
      'git+https://github.com/RogerChern/cocoapi.git#subdirectory=PythonAPI' &&     pip3
      install --no-cache-dir 'git+https://github.com/RogerChern/mxnext#egg=mxnext'
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'export LC_ALL=C.UTF-8' >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'export LANG=C.UTF-8' >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - "(apt-get -qq autoremove -y; \tapt-get -qq autoclean -y)"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /workspace
  - CmdLine:
    - jupyter
    - notebook
    - --allow-root
    - --port=8888
    - --ip=0.0.0.0
    - --no-browser
    Name: cmd
    PrependShell: false
  From:
    Image: nvcr.io/nvidia/tensorrt:19.02-py3
  Name: ""
  Platform: ""
  SourceCode: FROM nvcr.io/nvidia/tensorrt:19.02-py3
