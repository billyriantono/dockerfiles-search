MetaArgs: null
Stages:
- BaseName: jenkins/jenkins:2.178-alpine
  Commands:
  - Name: user
    User: root
  - Env:
    - Key: PHPIZE_DEPS
      Value: "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake
        \t\tpkgconf \t\tre2c"
    Name: env
  - CmdLine:
    - "apk update         && apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar
      \t\txz \t\topenssl"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data
      www-data"
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir
      -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi
    Name: env
  - Env:
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    Name: env
  - Env:
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.2.18
    Name: env
  - Env:
    - Key: PHP_URL
      Value: '"https://www.php.net/get/php-7.2.18.tar.xz/from/this/mirror"'
    - Key: PHP_ASC_URL
      Value: '"https://www.php.net/get/php-7.2.18.tar.xz.asc/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: '"9970dbb3ab1298c9e6aac54bebfa841c8ad14b18eead65594a68fa841364cb8d"'
    - Key: PHP_MD5
      Value: '""'
    Name: env
  - CmdLine:
    - "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t;
      \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif
      [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum
      -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\"
      | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc
      \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS;
      do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\";
      \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v
      gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi;
      \t\tapk del --no-network .fetch-deps"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev
      \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev
      \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\"
      \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php
      \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure
      \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\"
      \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp
      \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared
      \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test
      \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS
      \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install
      \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all
      '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&&
      cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed
      --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t|
      sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next
      } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del
      --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-ext-*
    - docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - docker-php-ext-enable sodium
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-entrypoint
    Name: entrypoint
    PrependShell: false
  - Name: workdir
    Path: /var/www/html
  - CmdLine:
    - "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g'
      php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default
      php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default
      php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf';
      \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log
      = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this
      to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2';
      \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout
      and stderr are sent to the main error log.'; \t\techo 'catch_workers_output
      = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo
      'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t}
      | tee php-fpm.d/zz-docker.conf"
    Name: run
    PrependShell: true
  - Name: stopsignal
    Signal: SIGQUIT
  - Name: expose
    Ports:
    - "9000"
  - CmdLine:
    - php-fpm
    Name: cmd
    PrependShell: false
  - CmdLine:
    - apk update             && apk add --virtual build-dependencies             build-base             gcc             wget             git             &&
      apk add             bash
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache --update --virtual buildDeps autoconf             && yes
      | pecl install xdebug-2.6.0             && yes | pecl install mongodb             &&
      docker-php-ext-enable xdebug             && apk del buildDeps
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apk update     && apk add --update --no-cache make git openjdk8
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /srv/backup && chown jenkins:jenkins /srv/backup
    Name: run
    PrependShell: true
  - Name: user
    User: jenkins
  - CmdLine:
    - echo 2.178-alpine > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 2.178-alpine > /usr/share/jenkins/ref/jenkins.install.InstallUtil.lastExecVersion
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - plugins.txt
    - /usr/share/jenkins/ref/plugins.txt
  - CmdLine:
    - /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64
    Name: env
  - Chown: jenkins:jenkins
    From: ""
    Name: copy
    SourcesAndDest:
    - config_jenkins
    - /var/jenkins_home
  - CmdLine:
    - sh
    - -c
    - java -jar /usr/share/jenkins/jenkins.war
    Name: cmd
    PrependShell: false
  From:
    Image: jenkins/jenkins:2.178-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM jenkins/jenkins:2.178-alpine
