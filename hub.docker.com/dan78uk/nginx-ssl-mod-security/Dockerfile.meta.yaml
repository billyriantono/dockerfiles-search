MetaArgs: null
Stages:
- BaseName: alpine:3.4
  Commands:
  - Maintainer: dan78uk
    Name: maintainer
  - Env:
    - Key: WORKING_DIRECTORY
      Value: /opt/build
    Name: env
  - CmdLine:
    - mkdir -p $WORKING_DIRECTORY
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $WORKING_DIRECTORY
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: C
    Name: env
  - Env:
    - Key: NGINX_VERSION
      Value: 1.11.1
    Name: env
  - Env:
    - Key: MODSEC_VERSION
      Value: 2.9.1
    Name: env
  - Env:
    - Key: NGINX_CONFIG_BASE
      Value: "\"\t--prefix=/etc/nginx \t--sbin-path=/usr/sbin/nginx \t--modules-path=/usr/lib/nginx/modules
        \t--conf-path=/etc/nginx/nginx.conf \t--error-log-path=/var/log/nginx/error.log
        \t--http-log-path=/var/log/nginx/access.log \t--pid-path=/var/run/nginx.pid
        \t--lock-path=/var/run/nginx.lock \t--http-client-body-temp-path=/var/cache/nginx/client_temp
        \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
        \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
        \t--user=nginx \t--group=nginx \t--with-http_ssl_module \t--with-http_realip_module
        \t--with-http_addition_module \t--with-http_sub_module \t--with-http_dav_module
        \t--with-http_flv_module \t--with-http_mp4_module \t--with-http_gunzip_module
        \t--with-http_gzip_static_module \t--with-http_random_index_module \t--with-http_secure_link_module
        \t--with-http_stub_status_module \t--with-http_auth_request_module \t--with-http_xslt_module=dynamic
        \t--with-http_image_filter_module=dynamic \t--with-http_geoip_module=dynamic
        \t--with-http_perl_module=dynamic \t--with-threads \t--with-stream \t--with-stream_ssl_module
        \t--with-http_slice_module \t--with-mail \t--with-mail_ssl_module \t--with-file-aio
        \t--with-http_v2_module \t--with-ipv6 \t\""
    Name: env
  - Env:
    - Key: NGINX_CONFIG_MODSECURITY
      Value: '" --add-module=$WORKING_DIRECTORY/ModSecurity/nginx/modsecurity "'
    Name: env
  - CmdLine:
    - 'addgroup -S nginx &&     adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx &&     apk update &&     echo "#### Install required dependencies
      ####" &&     apk add --no-cache       apache2-dev       autoconf       automake       bash       build-base       curl       gd-dev       geoip-dev       git       libtool       libxml2       libxml2-dev       libxslt-dev       linux-headers       m4       openssl-dev       pcre-dev       perl-dev       unzip       wget       zlib-dev
      &&     echo "#### Compile Mod Security ####" &&     git clone https://github.com/SpiderLabs/ModSecurity.git
      &&     cd ModSecurity &&     git checkout tags/v${MODSEC_VERSION} &&     ./autogen.sh
      &&     ./configure --enable-standalone-module --disable-mlogc &&     make &&     make
      install &&     cd .. &&     wget https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended
      &&     mkdir -p /etc/nginx &&     cat modsecurity.conf-recommended  > /etc/nginx/modsecurity.conf
      &&     echo "#### Get Mod security configs ####" &&     wget https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master
      -O owasp-modsecurity-crs.tar.gz &&     tar -xvzf owasp-modsecurity-crs.tar.gz
      &&     CRS_DIR=$(find . -type d -name SpiderLabs-owasp-modsecurity-crs*) &&     cat
      ${CRS_DIR}/modsecurity_crs_10_setup.conf.example >> /etc/nginx/modsecurity.conf
      &&     cat ${CRS_DIR}/base_rules/modsecurity_*.conf >> /etc/nginx/modsecurity.conf
      &&     cp ${CRS_DIR}/base_rules/*.data /etc/nginx/ &&     cp ModSecurity/unicode.mapping
      /etc/nginx/unicode.mapping &&     echo "#### Compile Nginx ####" &&     wget
      http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz &&     tar -xvzf nginx-${NGINX_VERSION}.tar.gz
      &&     cd nginx-${NGINX_VERSION}/ &&     ./configure $NGINX_CONFIG_BASE $NGINX_CONFIG_MODSECURITY
      &&     make &&     make install &&     rm /etc/nginx/nginx.conf &&     cd ..
      &&     echo "#### Clean solution ####" &&     apk del       *.dev       autoconf       automake       build-base       git       linux-headers
      &&     rm -rf $WORKING_DIRECTORY       modsecurity.conf-recommended       nginx-${NGINX_VERSION}.tar.gz       nginx-${NGINX_VERSION}       owasp-modsecurity-crs.tar.gz'
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /etc/nginx
  - CmdLine:
    - nginx -V
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add openssl &&     rm -rf /etc/nginx/conf.d/* &&     mkdir -p /etc/nginx/external
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - basic.conf
    - /etc/nginx/conf.d/basic.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ssl.conf
    - /etc/nginx/conf.d/ssl.conf
  - CmdLine:
    - sed -i 's/access_log.*/access_log \/dev\/stdout;/g' /etc/nginx/nginx.conf;     sed
      -i 's/error_log.*/error_log \/dev\/stdout info;/g' /etc/nginx/nginx.conf;
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - entrypoint.sh
    - /opt/entrypoint.sh
  - CmdLine:
    - chmod a+x /opt/entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.4
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.4
