{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "org.labelschema.description",
              "Value": "\"This is the image with several PHP versions (from official Ubuntu PPA), python libraries and other developers tools. It can be used as lightweight virtual machine for developers.\""
            },
            {
              "Key": "org.labelschema.docker.cmd",
              "Value": "\"docker run --detach --name phpdevenv --restart always --hostname phpdevenv --net YOUR_CUSTOM_BRIDGE_NETWORK_NAME -p 40080:80 -p 40022:22 andyceo/phpdevenv:latest\""
            },
            {
              "Key": "org.labelschema.name",
              "Value": "\"phpdevenv\""
            },
            {
              "Key": "org.labelschema.schema-version",
              "Value": "\"1.0\""
            },
            {
              "Key": "org.labelschema.vcs-url",
              "Value": "\"https://github.com/andyceo/docker-phpdevenv\""
            },
            {
              "Key": "org.labelschema.vendor",
              "Value": "\"Ruware\""
            },
            {
              "Key": "maintainer",
              "Value": "\"Andrey Andreev \u003candyceo@yandex.ru\u003e (@andyceo)\""
            },
            {
              "Key": "run",
              "Value": "\"/usr/bin/docker run -d --name phpdevenv --restart always --hostname phpdevenv --net docknet -p 80:80 -p 22:22 ${IMAGE}\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "\"noninteractive\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "\"xterm\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_MODULES",
              "Value": "\"amqp bcmath cli common curl dev fpm gd intl json ldap mbstring mcrypt mongodb mysql opcache pdo-sqlite readline soap sybase xml zip memcached redis imagick xdebug\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GO_ARCHIVE_FILENAME",
              "Value": "\"go1.13.1.linux-amd64.tar.gz\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONIOENCODING",
              "Value": "\"utf-8\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"Prepare package manager for installing packages and add support for https protocol in apt manager\" \u0026\u0026     apt-get update \u0026\u0026 apt-get upgrade -yqq \u0026\u0026     apt-get install -yqq aptitude apt-utils apt-transport-https ca-certificates curl gnupg2 openssl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Add all needed repositories (PPAs and others)\" \u0026\u0026     echo \"deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main\" \u003e\u003e /etc/apt/sources.list.d/ansible.list \u0026\u0026     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7BB9C367 \u0026\u0026     echo \"deb http://nginx.org/packages/ubuntu/ bionic nginx\" \u003e\u003e /etc/apt/sources.list.d/nginx.list \u0026\u0026     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62 \u0026\u0026     echo 'deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main' \u003e /etc/apt/sources.list.d/php.list \u0026\u0026     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E5267A6C \u0026\u0026     echo 'deb https://deb.torproject.org/torproject.org bionic main' \u003e /etc/apt/sources.list.d/tor.list \u0026\u0026     curl -s https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | tac | tac | apt-key add - \u0026\u0026     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4 \u0026\u0026     echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse\" \u003e /etc/apt/sources.list.d/mongodb.list \u0026\u0026     echo \"deb https://dl.bintray.com/sbt/debian /\" \u003e /etc/apt/sources.list.d/sbt.list \u0026\u0026     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \u0026\u0026     apt-get update \u0026\u0026     apt-get upgrade -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install all needed basic utilities and packages\" \u0026\u0026     apt-get install -yqq         acl         ansible         apache2         apache2-utils         bc         build-essential         cmake         cron         debconf-utils         deb.torproject.org-keyring         default-jre         denyhosts         dnsutils         freebsd-manpages         git         gmt-common         htop         imagemagick         iputils-arping         iputils-ping         libboost-all-dev         libffi-dev         libssl-dev         locales         man2html         manpages         manpages-dev         mc         memcached         mongodb-org         mysql-client         nano         net-tools         netcat         nginx         nmap         openjdk-8-source         openssh-server         pkg-config         privoxy         pwgen         redis-server         redis-sentinel         redis-tools         rsync         sbt         screen         shellcheck         software-properties-common         sqlite         sqlite-doc         stress         sudo         supervisor         telnet         tmux         tor         ubuntu-standard         wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install Apache 2 on non-standard port\" \u0026\u0026     sed -i -e 's/80/81/g' /etc/apache2/ports.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install all LaTeX utilities and packages\" \u0026\u0026     apt-get install -yqq         cm-super         texlive         texlive-base         texlive-binaries         texlive-fonts-recommended         texlive-science         texlive-latex-base         texlive-latex-extra         texlive-latex-recommended         texlive-full"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Add cryptocurrencies repositories and nodes\" \u0026\u0026     echo \"deb http://ppa.launchpad.net/bitcoin/bitcoin/ubuntu bionic main\" \u003e\u003e /etc/apt/sources.list.d/bitcoin.list \u0026\u0026     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C70EF1F0305A1ADB9986DBD8D46F45428842CE5E \u0026\u0026     echo \"deb http://ppa.launchpad.net/ethereum/ethereum/ubuntu bionic main\" \u003e\u003e /etc/apt/sources.list.d/ethereum.list \u0026\u0026     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 923F6CA9 \u0026\u0026     wget -qO - https://apt.z.cash/zcash.asc | apt-key add - \u0026\u0026     echo \"deb https://apt.z.cash/ jessie main\" | tee /etc/apt/sources.list.d/zcash.list \u0026\u0026     apt-get update \u0026\u0026     apt-get install -yqq       bitcoind       ethereum       zcash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install python packages\" \u0026\u0026     apt-get install -yqq         pylint         python3-dev         python3-pip \u0026\u0026     pip3 install -q --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "python-requirements.txt",
            "/tmp"
          ]
        },
        {
          "CmdLine": [
            "apt-get install -yqq libgmp3-dev \u0026\u0026     pip3 install -r /tmp/python-requirements.txt \u0026\u0026     rm /tmp/python-requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install all needed PHP utilities and packages\" \u0026\u0026     apt-get install -yqq         php5.6 `echo \" $PHP_MODULES\" | sed \"s/ / php5.6-/g\"`         php7.0 `echo \" $PHP_MODULES\" | sed \"s/ / php7.0-/g\"`         php7.1 `echo \" $PHP_MODULES\" | sed \"s/ / php7.1-/g\"`         php-pear         phpunit \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /tmp/* /var/tmp/* \u0026\u0026     rm /etc/alternatives/php \u0026\u0026 ln -s /usr/bin/php7.1 /etc/alternatives/php \u0026\u0026     curl -s https://getcomposer.org/installer | php \u0026\u0026     mv composer.phar /usr/local/bin/composer \u0026\u0026     git clone https://github.com/drush-ops/drush.git /usr/local/share/drush \u0026\u0026     composer install -d /usr/local/share/drush/ \u0026\u0026     ln -s /usr/local/share/drush/drush /usr/local/bin/drush \u0026\u0026     curl https://phar.phpunit.de/phpunit.phar -LSso /usr/local/bin/phpunit \u0026\u0026     chmod +x /usr/local/bin/phpunit \u0026\u0026     curl http://get.sensiolabs.org/php-cs-fixer.phar -LSso /usr/local/bin/php-cs-fixer \u0026\u0026     chmod +x /usr/local/bin/php-cs-fixer \u0026\u0026     curl -LsS http://codeception.com/codecept.phar -o /usr/local/bin/codecept \u0026\u0026     chmod a+x /usr/local/bin/codecept"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Finalize all other packages install\" \u0026\u0026     curl -sL https://deb.nodesource.com/setup_10.x | bash - \u0026\u0026     apt-get install -y nodejs \u0026\u0026     npm install -g gulp \u0026\u0026     npm install -g bower \u0026\u0026     curl https://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add - \u0026\u0026     echo \"deb https://packages.elastic.co/beats/apt stable main\" |  tee -a /etc/apt/sources.list.d/beats.list \u0026\u0026     apt-get update \u0026\u0026 apt-get install filebeat \u0026\u0026     curl https://dl.google.com/go/$GO_ARCHIVE_FILENAME -LSso /usr/local/$GO_ARCHIVE_FILENAME \u0026\u0026     tar -C /usr/local -xzf /usr/local/$GO_ARCHIVE_FILENAME \u0026\u0026     rm /usr/local/$GO_ARCHIVE_FILENAME \u0026\u0026     sed -i 's/^PATH=\"\\(.*\\)\"$/PATH=\"\\1:\\/usr\\/local\\/go\\/bin\"/g' /etc/environment \u0026\u0026     cp -al /var/lib/mongodb /root \u0026\u0026     locale-gen en_US en_US.UTF-8 \u0026\u0026     locale-gen ru_RU ru_RU.UTF-8 \u0026\u0026     update-locale \u0026\u0026     cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c20 | (echo -n \"root:\" \u0026\u0026 cat) | chpasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "etc",
            "/etc"
          ]
        },
        {
          "CmdLine": [
            "mkdir /root/data /root/databases /root/rootdirectories"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://raw.githubusercontent.com/andyceo/bash_scripts/master/symlinker.sh",
            "/usr/local/bin"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://raw.githubusercontent.com/andyceo/bash_scripts/master/rsyncdir/rsyncdir.sh",
            "/usr/local/bin"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "80"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "dialog"
            }
          ],
          "Name": "env"
        },
        {
          "Health": {
            "Interval": 10000000000,
            "Retries": 5,
            "StartPeriod": 30000000000,
            "Test": [
              "CMD-SHELL",
              "supervisorctl status || exit 1"
            ],
            "Timeout": 5000000000
          },
          "Name": "healthcheck"
        }
      ]
    }
  ]
}