MetaArgs: null
Stages:
- BaseName: alpine
  Commands:
  - Name: expose
    Ports:
    - "3000"
  - Env:
    - Key: GOPATH
      Value: /tmp/go
    Name: env
  - Env:
    - Key: ORCHESTRATOR_REPO
      Value: https://github.com/github/orchestrator.git
    Name: env
  - Env:
    - Key: ORCHESTRATOR_VERSION
      Value: tags/v2.1.5
    Name: env
  - Env:
    - Key: DOCKERIZE_VERSION
      Value: v0.5.0
    Name: env
  - CmdLine:
    - set -ex     && apk add --update --no-cache         bash         mysql-client         curl         rsync         redis         jq     &&
      cd /tmp     && curl -sLO https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     &&
      tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     &&
      rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     && apk add --update --no-cache
      --virtual .build-deps         git         go         build-base     && mkdir
      -p "$GOPATH/src/github.com/github/orchestrator"     && git clone "$ORCHESTRATOR_REPO"
      "$GOPATH/src/github.com/github/orchestrator"     && cd $GOPATH/src/github.com/github/orchestrator     &&
      git checkout "$ORCHESTRATOR_VERSION"     && bash build.sh -b     && rsync -av
      $(find /tmp/orchestrator-release -type d -name orchestrator -maxdepth 2)/ /     &&
      ln -sf /usr/local/orchestrator/orchestrator /usr/bin/orchestrator     && cp
      "$GOPATH/src/github.com/github/orchestrator/docker/entrypoint.sh" /entrypoint.sh     &&
      cd /     && apk del .build-deps     && rm -rf /tmp/*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /usr/local/orchestrator
  - CmdLine:
    - /entrypoint.sh
    Name: cmd
    PrependShell: true
  From:
    Image: alpine
  Name: ""
  Platform: ""
  SourceCode: FROM alpine
