{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:alpine",
      "SourceCode": "FROM node:alpine",
      "Platform": "",
      "From": {
        "Image": "node:alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "apk add --update curl \u0026\u0026     rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_VERSION_MAJOR",
              "Value": "8"
            },
            {
              "Key": "JAVA_VERSION_MINOR",
              "Value": "45"
            },
            {
              "Key": "JAVA_VERSION_BUILD",
              "Value": "14"
            },
            {
              "Key": "JAVA_PACKAGE",
              "Value": "jdk"
            },
            {
              "Key": "JAVA_JCE",
              "Value": "\"limited\""
            },
            {
              "Key": "JAVA_HOME",
              "Value": "/opt/jdk"
            },
            {
              "Key": "PATH",
              "Value": "${PATH}:/opt/jdk/bin"
            },
            {
              "Key": "GLIBC_VERSION",
              "Value": "2.23-r3"
            },
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JVM_URL",
              "Value": "http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk upgrade --update \u0026\u0026     apk add --update libstdc++ curl ca-certificates bash \u0026\u0026     for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk; done \u0026\u0026     apk add --allow-untrusted /tmp/*.apk \u0026\u0026     rm -v /tmp/*.apk \u0026\u0026     ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \u0026\u0026     echo \"export LANG=C.UTF-8\" \u003e /etc/profile.d/locale.sh \u0026\u0026     /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \u0026\u0026     mkdir /opt \u0026\u0026     curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz       ${JVM_URL} \u0026\u0026     gunzip /tmp/java.tar.gz \u0026\u0026     tar -C /opt -xf /tmp/java.tar \u0026\u0026     ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \u0026\u0026     if [ \"${JAVA_JCE}\" == \"unlimited\" ]; then echo \"Installing Unlimited JCE policy\" \u003e\u00262 \u0026\u0026       curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip         http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \u0026\u0026       cd /tmp \u0026\u0026 unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \u0026\u0026       cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security;     fi \u0026\u0026     sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security \u0026\u0026     apk del curl glibc-i18n \u0026\u0026     rm -rf /opt/jdk/*src.zip            /opt/jdk/lib/missioncontrol            /opt/jdk/lib/visualvm            /opt/jdk/lib/*javafx*            /opt/jdk/jre/plugin            /opt/jdk/jre/bin/javaws            /opt/jdk/jre/bin/jjs            /opt/jdk/jre/bin/orbd            /opt/jdk/jre/bin/pack200            /opt/jdk/jre/bin/policytool            /opt/jdk/jre/bin/rmid            /opt/jdk/jre/bin/rmiregistry            /opt/jdk/jre/bin/servertool            /opt/jdk/jre/bin/tnameserv            /opt/jdk/jre/bin/unpack200            /opt/jdk/jre/lib/javaws.jar            /opt/jdk/jre/lib/deploy*            /opt/jdk/jre/lib/desktop            /opt/jdk/jre/lib/*javafx*            /opt/jdk/jre/lib/*jfx*            /opt/jdk/jre/lib/amd64/libdecora_sse.so            /opt/jdk/jre/lib/amd64/libprism_*.so            /opt/jdk/jre/lib/amd64/libfxplugins.so            /opt/jdk/jre/lib/amd64/libglass.so            /opt/jdk/jre/lib/amd64/libgstreamer-lite.so            /opt/jdk/jre/lib/amd64/libjavafx*.so            /opt/jdk/jre/lib/amd64/libjfx*.so            /opt/jdk/jre/lib/ext/jfxrt.jar            /opt/jdk/jre/lib/ext/nashorn.jar            /opt/jdk/jre/lib/oblique-fonts            /opt/jdk/jre/lib/plugin.jar            /tmp/* /var/cache/apk/* \u0026\u0026     echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' \u003e\u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "java -version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ATLS_VERSIN",
              "Value": "6.2.14"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ATLS_SHA512",
              "Value": "48ad1d0c8ee725ee0e6753231e061ac04da54167797429d39ed8a4815b6705d0fc643794bf767809d819fc22039fe8923e8a94bb9aa3bf2a6e32a25f53039153"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache             bash             ca-certificates             curl             gzip             tar \u0026\u0026     mkdir -p /opt/atlas/ \u0026\u0026     mkdir -p /opt/atlas-work/ \u0026\u0026     echo \"=== INSTALLING ATLASSIAN SDK==================\" \u0026\u0026     echo \"${ATLS_SHA512}  /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz\" \u003e /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz.sha512 \u0026\u0026     curl -jkSL -o /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz          https://maven.atlassian.com/content/repositories/atlassian-public/com/atlassian/amps/atlassian-plugin-sdk/${ATLS_VERSIN}/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz \u0026\u0026     sha512sum -c /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz.sha512"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/opt/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod u+rx,g+rx,o+rx,a-w /opt/docker-entrypoint.sh \u0026\u0026     addgroup -g 10777 worker \u0026\u0026     adduser -D -G worker -u 10777 worker \u0026\u0026     chown -R worker:worker /opt/atlas/ \u0026\u0026     chmod -R u+rwx,g+rwx,o-rwx /opt/atlas/ \u0026\u0026     chown -R worker:worker /opt/atlas-work/ \u0026\u0026     chmod -R u+rwx,g+rwx,o-rwx /opt/atlas-work/ \u0026\u0026     tar -C /opt -xf /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz \u0026\u0026     chown -R worker:root /opt/atlassian-plugin-sdk-${ATLS_VERSIN} \u0026\u0026     rm -f /opt/atlassian-plugin-sdk-${ATLS_VERSIN}.tar.gz \u0026\u0026     apk del gzip tar \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "2990"
          ]
        },
        {
          "Name": "user",
          "User": "worker"
        },
        {
          "Env": [
            {
              "Key": "MAVEN_REPOSITORY_MIRROR",
              "Value": "\"false\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/opt/jdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:/opt/atlassian-plugin-sdk-${ATLS_VERSIN}/bin/:/opt/jdk/bin/:/usr/bin/curl/"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/opt/atlas/"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/opt/atlas/"
          ]
        },
        {
          "CmdLine": [
            "/opt/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "atlas-version"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}