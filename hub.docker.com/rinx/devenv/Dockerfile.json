{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "docker",
      "BaseName": "docker:dind",
      "SourceCode": "FROM docker:dind AS docker",
      "Platform": "",
      "As": "docker",
      "From": {
        "Image": "docker:dind"
      },
      "Commands": [
        {
          "CmdLine": [
            "mkdir -p /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/containerd      /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/containerd-shim /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/ctr             /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/docker          /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/docker-init     /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/docker-proxy    /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/dockerd         /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /usr/local/bin/runc            /out"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "clojure-lein",
      "BaseName": "clojure:lein-alpine",
      "SourceCode": "FROM clojure:lein-alpine AS clojure-lein",
      "Platform": "",
      "As": "clojure-lein",
      "From": {
        "Image": "clojure:lein-alpine"
      },
      "Commands": null
    },
    {
      "Name": "clojure-deps",
      "BaseName": "clojure:tools-deps-alpine",
      "SourceCode": "FROM clojure:tools-deps-alpine AS clojure-deps",
      "Platform": "",
      "As": "clojure-deps",
      "From": {
        "Image": "clojure:tools-deps-alpine"
      },
      "Commands": null
    },
    {
      "Name": "graalvm-ce",
      "BaseName": "oracle/graalvm-ce:19.2.1",
      "SourceCode": "FROM oracle/graalvm-ce:19.2.1 AS graalvm-ce",
      "Platform": "",
      "As": "graalvm-ce",
      "From": {
        "Image": "oracle/graalvm-ce:19.2.1"
      },
      "Commands": [
        {
          "CmdLine": [
            "yum install -y git     \u0026\u0026 gu install native-image"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o /usr/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein     \u0026\u0026 chmod a+x /usr/bin/lein"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /     \u0026\u0026 git clone --depth=1 https://github.com/borkdude/clj-kondo.git     \u0026\u0026 cd clj-kondo     \u0026\u0026 lein uberjar     \u0026\u0026 CLJ_KONDO_VERSION=$(cat resources/CLJ_KONDO_VERSION)     \u0026\u0026 native-image         -jar target/clj-kondo-$CLJ_KONDO_VERSION-standalone.jar         -H:Name=clj-kondo         -H:+ReportExceptionStackTraces         -J-Dclojure.spec.skip-macros=true         -J-Dclojure.compiler.direct-linking=true         \"-H:IncludeResources=clj_kondo/impl/cache/built_in/.*\"         -H:ReflectionConfigurationFiles=reflection.json         -H:Log=registerResource:         --verbose         --no-fallback         --no-server         --report-unsupported-elements-at-runtime         --initialize-at-build-time         --static         -J-Xms2g         -J-Xmx4g"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /     \u0026\u0026 git clone --recursive --depth=1 https://github.com/borkdude/babashka.git     \u0026\u0026 cd babashka     \u0026\u0026 lein uberjar     \u0026\u0026 BABASHKA_VERSION=$(cat resources/BABASHKA_VERSION)     \u0026\u0026 native-image         -jar target/babashka-$BABASHKA_VERSION-standalone.jar         -H:Name=bb         -H:+ReportExceptionStackTraces         -J-Dclojure.spec.skip-macros=true         -J-Dclojure.compiler.direct-linking=true         -Djava.library.path=$JAVA_HOME/jre/lib/amd64         \"-H:IncludeResources=BABASHKA_VERSION\"         \"-H:IncludeResources=SCI_VERSION\"         -H:ReflectionConfigurationFiles=reflection.json         -H:Log=registerResource:         --enable-http         --enable-https         -H:+JNI         --enable-all-security-services         --initialize-at-run-time=java.lang.Math\\$RandomNumberGeneratorHolder         --verbose         --no-fallback         --no-server         --report-unsupported-elements-at-runtime         --initialize-at-build-time         --static         -J-Xms2g         -J-Xmx4g"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /     \u0026\u0026 git clone --depth=1 https://github.com/borkdude/jet.git     \u0026\u0026 cd jet     \u0026\u0026 lein uberjar     \u0026\u0026 JET_VERSION=$(cat resources/JET_VERSION)     \u0026\u0026 native-image         -jar target/jet-$JET_VERSION-standalone.jar         -H:Name=jet         -H:+ReportExceptionStackTraces         -J-Dclojure.spec.skip-macros=true         -J-Dclojure.compiler.direct-linking=true         \"-H:IncludeResources=JET_VERSION\"         -H:ReflectionConfigurationFiles=reflection.json         -H:Log=registerResource:         --verbose         --no-fallback         --no-server         --report-unsupported-elements-at-runtime         --initialize-at-build-time         --static         -J-Xms2g         -J-Xmx4g"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /clj-kondo/clj-kondo /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /babashka/bb /out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /jet/jet /out"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "ye",
      "BaseName": "rinx/ye",
      "SourceCode": "FROM rinx/ye AS ye",
      "Platform": "",
      "As": "ye",
      "From": {
        "Image": "rinx/ye"
      },
      "Commands": null
    },
    {
      "Name": "rust",
      "BaseName": "ekidd/rust-musl-builder:latest",
      "SourceCode": "FROM ekidd/rust-musl-builder:latest AS rust",
      "Platform": "",
      "As": "rust",
      "From": {
        "Image": "ekidd/rust-musl-builder:latest"
      },
      "Commands": [
        {
          "CmdLine": [
            "cargo install exa     \u0026\u0026 cargo install --version 11.0.1 ripgrep     \u0026\u0026 cargo install --git https://github.com/sharkdp/fd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o bat-v0.11.0-x86_64-unknown-linux-musl.tar.gz -L https://github.com/sharkdp/bat/releases/download/v0.11.0/bat-v0.11.0-x86_64-unknown-linux-musl.tar.gz     \u0026\u0026 tar xzvf bat-v0.11.0-x86_64-unknown-linux-musl.tar.gz     \u0026\u0026 cp bat-v0.11.0-x86_64-unknown-linux-musl/bat /home/rust/.cargo/bin/bat"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /home/rust/out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /home/rust/.cargo/bin/bat /home/rust/out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /home/rust/.cargo/bin/exa /home/rust/out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /home/rust/.cargo/bin/fd  /home/rust/out"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /home/rust/.cargo/bin/rg  /home/rust/out"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "go",
      "BaseName": "golang:alpine",
      "SourceCode": "FROM golang:alpine AS go",
      "Platform": "",
      "As": "go",
      "From": {
        "Image": "golang:alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "apk update     \u0026\u0026 apk upgrade     \u0026\u0026 apk --update-cache add --no-cache     git     curl     gcc     musl-dev     wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -v -u     github.com/alecthomas/gometalinter     github.com/davidrjenni/reftools/cmd/fillstruct     github.com/derekparker/delve/cmd/dlv     github.com/fatih/gomodifytags     github.com/fatih/motion     github.com/fullstorydev/grpcurl/cmd/grpcurl     github.com/golangci/golangci-lint/cmd/golangci-lint     github.com/josharian/impl     github.com/jstemmer/gotags     github.com/junegunn/fzf     github.com/kisielk/errcheck     github.com/klauspost/asmfmt/cmd/asmfmt     github.com/koron/iferr     github.com/mdempsky/gocode     github.com/rogpeppe/godef     github.com/saibing/bingo     github.com/zmb3/gogetdoc     golang.org/x/lint/golint     golang.org/x/tools/cmd/goimports     golang.org/x/tools/cmd/gopls     golang.org/x/tools/cmd/gorename     golang.org/x/tools/cmd/guru     honnef.co/go/tools/cmd/keyify     \u0026\u0026 go get -v -u -d github.com/stamblerre/gocode     \u0026\u0026 go build -o /go/bin/gocode-gomod github.com/stamblerre/gocode     \u0026\u0026 gometalinter -i"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO111MODULE",
              "Value": "on"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "go get -v -u     github.com/motemen/ghq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /out/usr/local/go"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /out/go"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -r /usr/local/go/bin /out/usr/local/go/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -r /go/bin /out/go/bin"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "kube",
      "BaseName": "alpine:edge",
      "SourceCode": "FROM alpine:edge AS kube",
      "Platform": "",
      "As": "kube",
      "From": {
        "Image": "alpine:edge"
      },
      "Commands": [
        {
          "CmdLine": [
            "apk update     \u0026\u0026 apk upgrade     \u0026\u0026 apk --update-cache add --no-cache     make     curl     gcc     openssl     bash     git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /out/packer     \u0026\u0026 mkdir -p /out/kube     \u0026\u0026 curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /out/kube/kubectl     \u0026\u0026 chmod a+x /out/kube/kubectl     \u0026\u0026 curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash     \u0026\u0026 mv /usr/local/bin/helm /out/packer/helm     \u0026\u0026 curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.6.0/kind-$(uname)-amd64 -o /out/packer/kind     \u0026\u0026 chmod a+x /out/packer/kind     \u0026\u0026 git clone --depth=1 https://github.com/ahmetb/kubectx /opt/kubectx     \u0026\u0026 mv /opt/kubectx/kubectx /out/kube/kubectx     \u0026\u0026 mv /opt/kubectx/kubens /out/kube/kubens     \u0026\u0026 curl -L https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64 -o /out/packer/stern     \u0026\u0026 chmod a+x /out/packer/stern     \u0026\u0026 curl -sL https://run.linkerd.io/install | sh     \u0026\u0026 mv /root/.linkerd2/bin/linkerd-* /out/packer/linkerd"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "packer",
      "BaseName": "alpine:edge",
      "SourceCode": "FROM alpine:edge AS packer",
      "Platform": "",
      "As": "packer",
      "From": {
        "Image": "alpine:edge"
      },
      "Commands": [
        {
          "CmdLine": [
            "apk update     \u0026\u0026 apk upgrade     \u0026\u0026 apk --update-cache add --no-cache     upx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "docker",
          "Name": "copy",
          "SourcesAndDest": [
            "/out",
            "/out/docker"
          ]
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/docker/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "graalvm-ce",
          "Name": "copy",
          "SourcesAndDest": [
            "/out",
            "/out/graalvm-ce"
          ]
        },
        {
          "Chown": "",
          "From": "ye",
          "Name": "copy",
          "SourcesAndDest": [
            "/ye",
            "/out/graalvm-ce"
          ]
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/graalvm-ce/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "rust",
          "Name": "copy",
          "SourcesAndDest": [
            "/home/rust/out",
            "/out/rust"
          ]
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/rust/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "go",
          "Name": "copy",
          "SourcesAndDest": [
            "/out",
            "/out/go"
          ]
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/go/usr/local/go/bin/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/go/go/bin/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "kube",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/packer",
            "/out/kube"
          ]
        },
        {
          "CmdLine": [
            "upx --lzma --best /out/kube/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "base",
      "BaseName": "alpine:edge",
      "SourceCode": "FROM alpine:edge AS base",
      "Platform": "",
      "As": "base",
      "From": {
        "Image": "alpine:edge"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Rintaro Okamura \u003crintaro.okamura@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Tokyo"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" \u003e\u003e /etc/apk/repositories     \u0026\u0026 apk update     \u0026\u0026 apk upgrade     \u0026\u0026 apk --update-cache add --no-cache     bash     cmake     ctags     curl     diffutils     g++     gawk     gcc     git     git-email     git-perl     gnupg     jq     less     linux-headers     make     musl-dev     ncurses     neovim     nodejs     npm     nss     openjdk8     openssh     openssl     openssl-dev     perl     py-pip     py3-pip     python-dev     python3-dev     sed     tar     tmux     tzdata     wget     yarn     zsh     \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip2 install --upgrade pip neovim     \u0026\u0026 pip3 install --upgrade pip neovim     \u0026\u0026 npm config set user root     \u0026\u0026 npm install -g neovim"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g     dockerfile-language-server-nodejs     bash-language-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/root"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOTFILES",
              "Value": "$HOME/.dotfiles"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/zsh"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "$HOME/local"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "/usr/local/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-1.8-openjdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$JAVA_HOME/jre/bin:$JAVA_HOME/bin:$GOPATH/bin:$GOROOT/bin:/usr/local/bin:$HOME/.config/lightvim/plugged/vim-iced/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GO111MODULE",
              "Value": "auto"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_BUILDKIT",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKERIZED_DEVENV",
              "Value": "rinx/devenv"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BABASHKA_PRELOADS",
              "Value": "\"(System/setProperty \\\"java.library.path\\\" \\\"$JAVA_HOME/jre/lib/amd64\\\")\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.ssh     \u0026\u0026 ssh-keyscan github.com \u003e\u003e $HOME/.ssh/known_hosts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "docker",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/docker-entrypoint.sh",
            "/usr/bin/docker-entrypoint"
          ]
        },
        {
          "Chown": "",
          "From": "docker",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/dind",
            "/usr/bin/dind"
          ]
        },
        {
          "Chown": "",
          "From": "docker",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/modprobe",
            "/usr/bin/modprobe"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/containerd",
            "/usr/bin/docker-containerd"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/containerd-shim",
            "/usr/bin/docker-containerd-shim"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/ctr",
            "/usr/bin/docker-containerd-ctr"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/docker",
            "/usr/bin/docker"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/docker-init",
            "/usr/bin/docker-init"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/docker-proxy",
            "/usr/bin/docker-proxy"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/dockerd",
            "/usr/bin/dockerd"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/docker/runc",
            "/usr/bin/docker-runc"
          ]
        },
        {
          "Chown": "",
          "From": "clojure-lein",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/lein",
            "/usr/local/bin/lein"
          ]
        },
        {
          "Chown": "",
          "From": "clojure-lein",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/share/java",
            "/usr/share/java"
          ]
        },
        {
          "Chown": "",
          "From": "clojure-deps",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/clojure",
            "/usr/local/bin/clojure"
          ]
        },
        {
          "Chown": "",
          "From": "clojure-deps",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/clj",
            "/usr/local/bin/clj"
          ]
        },
        {
          "Chown": "",
          "From": "clojure-deps",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/lib/clojure",
            "/usr/local/lib/clojure"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/graalvm-ce/clj-kondo",
            "/usr/local/bin/clj-kondo"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/graalvm-ce/bb",
            "/usr/local/bin/bb"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/graalvm-ce/jet",
            "/usr/local/bin/jet"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/graalvm-ce/ye",
            "/usr/local/bin/ye"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/rust/bat",
            "/usr/local/bin/bat"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/rust/exa",
            "/usr/local/bin/exa"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/rust/fd",
            "/usr/local/bin/fd"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/rust/rg",
            "/usr/local/bin/rg"
          ]
        },
        {
          "Chown": "",
          "From": "go",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/go/src",
            "$GOROOT/src"
          ]
        },
        {
          "Chown": "",
          "From": "go",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/go/lib",
            "$GOROOT/lib"
          ]
        },
        {
          "Chown": "",
          "From": "go",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/go/pkg",
            "$GOROOT/pkg"
          ]
        },
        {
          "Chown": "",
          "From": "go",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/go/misc",
            "$GOROOT/misc"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/go/usr/local/go/bin",
            "$GOROOT/bin"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/go/go/bin",
            "$GOROOT/bin"
          ]
        },
        {
          "Chown": "",
          "From": "kube",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/kubectx",
            "/usr/local/bin/kubectx"
          ]
        },
        {
          "Chown": "",
          "From": "kube",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/kubens",
            "/usr/local/bin/kubens"
          ]
        },
        {
          "Chown": "",
          "From": "kube",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/kubectl",
            "/usr/local/bin/kubectl"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/helm",
            "/usr/local/bin/helm"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/kind",
            "/usr/local/bin/kind"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/stern",
            "/usr/local/bin/stern"
          ]
        },
        {
          "Chown": "",
          "From": "packer",
          "Name": "copy",
          "SourcesAndDest": [
            "/out/kube/linkerd",
            "/usr/local/bin/linkerd"
          ]
        },
        {
          "CmdLine": [
            "mkdir $DOTFILES"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$DOTFILES"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "coc-settings.json",
            "$DOTFILES/coc-settings.json"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "deps.edn",
            "$DOTFILES/deps.edn"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "dotvim",
            "$DOTFILES/dotvim"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gitattributes_global",
            "$DOTFILES/gitattributes_global"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gitconfig",
            "$DOTFILES/gitconfig"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gitignore",
            "$DOTFILES/gitignore"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "light.vimrc",
            "$DOTFILES/light.vimrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Makefile",
            "$DOTFILES/Makefile"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Makefile.d",
            "$DOTFILES/Makefile.d"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nvimrc",
            "$DOTFILES/nvimrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "profiles.clj",
            "$DOTFILES/profiles.clj"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "resources",
            "$DOTFILES/resources"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tmux.conf",
            "$DOTFILES/tmux.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "vimrc",
            "$DOTFILES/vimrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "zshrc",
            "$DOTFILES/zshrc"
          ]
        },
        {
          "CmdLine": [
            "ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/zplug/zplug $HOME/.zplug     \u0026\u0026 git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.zplug/repos/zsh-users/zsh-autosuggestions     \u0026\u0026 git clone https://github.com/zsh-users/zsh-completions $HOME/.zplug/repos/zsh-users/zsh-completions     \u0026\u0026 git clone https://github.com/zsh-users/zsh-syntax-highlighting $HOME/.zplug/repos/zsh-users/zsh-syntax-highlighting     \u0026\u0026 git clone https://github.com/zsh-users/zsh-history-substring-search $HOME/.zplug/repos/zsh-users/zsh-history-substring-search     \u0026\u0026 git clone https://github.com/greymd/tmux-xpanes $HOME/.zplug/repos/greymd/tmux-xpanes"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash",
            "-c",
            "make -j4 deploy"
          ],
          "Name": "run",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/bash",
            "-c",
            "make prepare-init \u0026\u0026 make neovim-init \u0026\u0026 make lightvim-init \u0026\u0026 make tmux-init"
          ],
          "Name": "run",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/zsh",
            "-c",
            "lein"
          ],
          "Name": "run",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/zsh",
            "-c",
            "clojure -A:dev"
          ],
          "Name": "run",
          "PrependShell": false
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "docker-entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "zsh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}