MetaArgs: null
Stages:
- BaseName: openjdk:8-jdk-slim
  Commands:
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://raw.githubusercontent.com/circleci/circleci-images/master/android/bin/circle-android
    - /bin/circle-android
  - CmdLine:
    - chmod +rx /bin/circle-android
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \t&&
      echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci"
    Name: run
    PrependShell: true
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - "apt-get update \t&& mkdir -p /usr/share/man/man1 \t&& apt-get install -y \tgit
      mercurial xvfb \tlocales sudo openssh-client ca-certificates tar gzip parallel
      \tnet-tools netcat unzip zip bzip2 gnupg curl wget"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen C.UTF-8 || true
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\"
      \t&& curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq
      $JQ_URL \t&& chmod +x /usr/bin/jq \t&& jq --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& export DOCKER_VERSION=$(curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/
      | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1) \t&& DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\"
      \t&& echo Docker URL: $DOCKER_URL \t&& curl --silent --show-error --location
      --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \t&& ls -lha /tmp/docker.tgz
      \t&& tar -xz -C /tmp -f /tmp/docker.tgz \t&& mv /tmp/docker/* /usr/bin \t&&
      rm -rf /tmp/docker /tmp/docker.tgz \t&& which docker \t&& (docker version ||
      true)"
    Name: run
    PrependShell: true
  - CmdLine:
    - "COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\"
      \t&& curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose
      $COMPOSE_URL \t&& chmod +x /usr/bin/docker-compose \t&& docker-compose version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\"
      \t&& curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz
      $DOCKERIZE_URL \t&& tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz
      \t&& rm -rf /tmp/dockerize-linux-amd64.tar.gz \t&& dockerize --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "groupadd --gid 3434 circleci \t&& useradd --uid 3434 --gid circleci --shell
      /bin/bash --create-home circleci \t&& echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci
      \t&& echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep"
    Name: run
    PrependShell: true
  - Env:
    - Key: HOME
      Value: /home/circleci
    Name: env
  - CmdLine:
    - "sudo apt-get update -qqy && sudo apt-get install -qqy   openssl   libssl-dev
      \tpython-dev \tpython-setuptools \tapt-transport-https \tlsb-release"
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt-get install gcc-multilib
    Name: run
    PrependShell: true
  - CmdLine:
    - "export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" && \techo \"deb https://packages.cloud.google.com/apt
      $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      && \tcurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key
      add -"
    Name: run
    PrependShell: true
  - CmdLine:
    - "sudo apt-get update && sudo apt-get install -y google-cloud-sdk && \tgcloud
      config set core/disable_usage_reporting true && \tgcloud config set component_manager/disable_update_check
      true"
    Name: run
    PrependShell: true
  - Key: sdk_version
    Name: arg
    Value: sdk-tools-linux-3859397.zip
  - Key: android_home
    Name: arg
    Value: /opt/android/sdk
  - CmdLine:
    - "sudo apt-get update && \tsudo apt-get install --yes \txvfb lib32z1 lib32stdc++6
      build-essential \tlibcurl4-openssl-dev libglu1-mesa libxi-dev libxmu-dev \tlibglu1-mesa-dev"
    Name: run
    PrependShell: true
  - CmdLine:
    - "sudo mkdir -p ${android_home} && \tsudo chown -R circleci:circleci ${android_home}
      && \tcurl --silent --show-error --location --fail --retry 3 --output /tmp/${sdk_version}
      https://dl.google.com/android/repository/${sdk_version} && \tunzip -q /tmp/${sdk_version}
      -d ${android_home} && \trm /tmp/${sdk_version}"
    Name: run
    PrependShell: true
  - Env:
    - Key: ANDROID_HOME
      Value: ${android_home}
    Name: env
  - Env:
    - Key: ADB_INSTALL_TIMEOUT
      Value: "120"
    Name: env
  - Env:
    - Key: PATH
      Value: ${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}
    Name: env
  - CmdLine:
    - mkdir ~/.android && echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg
    Name: run
    PrependShell: true
  - CmdLine:
    - yes | sdkmanager --licenses && sdkmanager --update
    Name: run
    PrependShell: true
  - CmdLine:
    - "sdkmanager \t\"tools\" \t\"platform-tools\" \t\"emulator\""
    Name: run
    PrependShell: true
  - CmdLine:
    - "sdkmanager \t\"build-tools;25.0.0\" \t\"build-tools;25.0.1\" \t\"build-tools;25.0.2\"
      \t\"build-tools;25.0.3\" \t\"build-tools;26.0.1\" \t\"build-tools;26.0.2\" \t\"build-tools;27.0.0\"
      \t\"build-tools;27.0.1\" \t\"build-tools;27.0.2\" \t\"build-tools;27.0.3\" \t\"build-tools;28.0.0\"
      \t\"build-tools;28.0.3\""
    Name: run
    PrependShell: true
  - CmdLine:
    - sdkmanager "platforms;android-23"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \tg++ \tgcc \tlibc6-dev
      \tmake \tpkg-config \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOLANG_VERSION
      Value: 1.13.1
    Name: env
  - CmdLine:
    - "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\"
      in \tamd64) goRelArch='linux-amd64'; goRelSha256='94f874037b82ea5353f4061e543681a0e79657f787437974214629af8407d124'
      ;; \tarmhf) goRelArch='linux-armv6l'; goRelSha256='7c75d4002321ea4a066dfe13f6dd5168076e9a231317c5afd55e78b86f478e37'
      ;; \tarm64) goRelArch='linux-arm64'; goRelSha256='8af8787b7c2a3c0eb3f20f872577fcb6c36098bf725c59c4923921443084c807'
      ;; \ti386) goRelArch='linux-386'; goRelSha256='4bf7a961fda7ad892b8824002036de8c0f290df05df2e8f11252d1f8c77dcd8f'
      ;; \tppc64el) goRelArch='linux-ppc64le'; goRelSha256='72422c68dbed013ee321a05dbb97d9c8d6b2c75f347de707138c2c748fc4aceb'
      ;; \ts390x) goRelArch='linux-s390x'; goRelSha256='5f0859ae1037ad7af6cdb6d16f638de908fd9de044d463eeab92b9578d4c7c75'
      ;; \t*) goRelArch='src'; goRelSha256='81f154e69544b9fa92b1475ff5f11e64270260d46e7e36c34aafc8bc96209358';
      \techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have
      a corresponding Go binary release; will be building from source\"; echo >&2
      ;; \tesac; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\";
      \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c
      -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src'
      ]; then \techo >&2; \techo >&2 'error: UNIMPLEMENTED'; \techo >&2 'TODO install
      golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)';
      \techo >&2; \texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo
      version"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:/usr/local/go/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /usr/local/etc \t&& { \techo 'install: --no-document'; \techo 'update:
      --no-document'; \t} >> /usr/local/etc/gemrc"
    Name: run
    PrependShell: true
  - Env:
    - Key: RUBY_MAJOR
      Value: "2.6"
    Name: env
  - Env:
    - Key: RUBY_VERSION
      Value: 2.6.0
    Name: env
  - Env:
    - Key: RUBY_DOWNLOAD_SHA256
      Value: acb00f04374899ba8ee74bbbcb9b35c5c6b1fd229f1876554ee76f0f1710ff5f
    Name: env
  - CmdLine:
    - "set -ex \t\t&& buildDeps=' \tbison \tdpkg-dev \tlibgdbm-dev \truby \t' \t&&
      apt-get update \t&& apt-get install -y --no-install-recommends autoconf zlib1g-dev
      $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\"
      \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir
      -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1
      \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \techo '#define ENABLE_PATH_CHECK
      0'; \techo; \tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&&
      autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&&
      ./configure \t--with-openssl \t--build=\"$gnuArch\" \t--disable-install-doc
      \t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get
      purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby
      --version && gem --version && bundle --version"
    Name: run
    PrependShell: true
  - Env:
    - Key: GEM_HOME
      Value: /usr/local/bundle
    Name: env
  - Env:
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    Name: env
  - Env:
    - Key: PATH
      Value: $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install bundler -v 1.17.3
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install bundler -v 2.0.1
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install bundler -v 2.0.2
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $GOPATH
  - Name: user
    User: circleci
  From:
    Image: openjdk:8-jdk-slim
  Name: ""
  Platform: ""
  SourceCode: FROM openjdk:8-jdk-slim
