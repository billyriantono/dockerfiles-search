MetaArgs: null
Stages:
- BaseName: centos:7
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Mikko Rauhala <mikko@meteo.fi>"'
    Name: label
  - Env:
    - Key: SMARTMET_DEVEL
      Value: "0"
    - Key: SMARTMET_LIBRARIES
      Value: '"newbase macgyver gis giza spine locus tron imagine"'
    - Key: SMARTMET_ENGINES
      Value: '"sputnik querydata geonames observation gis contour"'
    - Key: SMARTMET_PLUGINS
      Value: '"autocomplete timeseries download admin backend meta wfs frontend wms"'
    - Key: MAKEFLAGS
      Value: '"-j8"'
    Name: env
  - CmdLine:
    - mkdir -p /usr/local/src/smartmet /smartmet/data /etc/smartmet/plugins /etc/smartmet/engines
      /var/log/smartmet /var/smartmet/timeseriescache
    Name: run
    PrependShell: true
  - CmdLine:
    - "rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      &&     rpm -ivh https://download.postgresql.org/pub/repos/yum/9.3/redhat/rhel-7-x86_64/pgdg-centos93-9.3-3.noarch.rpm
      &&     yum -y update && yum -y install     \t   \t   bzip2-devel \t\t   cairo-devel
      cairo-gobject-devel      \t   \t   elfutils-devel \t\t   file \t\t   fmt-devel
      \    \t   \t   gcc gcc-c++     \t   \t   gdal-devel     \t   \t   geos-devel
      \t\t   gdk-pixbuf2-devel     \t   \t   git \t\t   grib_api grib_api-devel \t\t
      \  gobject-introspection-devel    \t   \t   jemalloc-devel     \t   \t   jsoncpp-devel
      \t\t   libaio-devel \t\t   libcroco-devel     \t   \t   libtool     \t   \t
      \  libatomic     \t   \t   libconfig-devel     \t   \t   libicu-devel \t\t   libjpeg-devel
      \t\t   libpqxx-devel \t\t   libspatialite-devel     \t   \t   make cmake imake
      \    \t   \t   mariadb-devel \t\t   mysql++-devel     \t   \t   netcdf-devel
      netcdf-cxx-devel     \t   \t   openssl-devel \t\t   pango-devel     \t   \t
      \  protobuf-devel protobuf-compiler     \t   \t   postgresql93-devel     \t
      \  \t   python-devel\t\t   soci-devel soci-sqlite3-devel \t\t   sqlite-devel
      \    \t   \t   unzip     \t   \t   wget \t\t   xqilla-devel \t\t   xerces-c-devel
      \    \t   \t   zlib-devel &&      rpm -ivh http://download.weatherproof.fi/fmiforge/rhel/7/x86_64/librsvg2-2.40.6-3.el7.x86_64.rpm
      \  \t      http://download.weatherproof.fi/fmiforge/rhel/7/x86_64/librsvg2-devel-2.40.6-3.el7.x86_64.rpm
      &&     cd /usr/local/src/smartmet &&     wget -nv http://ctpp.havoc.ru/download/ctpp2-2.8.3.tar.gz
      &&     tar zxvf ctpp2-2.8.3.tar.gz &&     cd ctpp2-2.8.3 &&     cmake . &&     sed
      -i '/#include <stdlib.h>/a #include <unistd.h>' src/CTPP2FileSourceLoader.cpp
      &&     make &&     make install &&     if [ $SMARTMET_DEVEL -ne 1 ]; then rm
      -rf /usr/local/src/smartmet/ctpp2-2.8.3; fi &&     if [ $SMARTMET_DEVEL -ne
      1 ]; then rm -rf /usr/local/src/smartmet/ctpp2-2.8.3.tar.gz; fi &&     cd /usr/local/src/smartmet
      &&     wget -nv http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.gz
      &&     tar zxf boost_1_55_0.tar.gz &&     cd boost_1_55_0 &&     ./bootstrap.sh
      --without-libraries=mpi,graph_parallel &&     ./b2 $MAKEFLAGS &&     ./b2 install
      &&     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/boost_1_55_0;
      fi &&     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/boost_1_55_0.tar.gz;
      fi && echo \"/usr/local/lib/\" > /etc/ld.so.conf.d/local.conf && ldconfig -v
      &&     cd /usr/local/src/smartmet &&     git clone https://github.com/fmidev/smartmet-timezones.git
      &&     cd smartmet-timezones &&     make && make install &&     if [ $SMARTMET_DEVEL
      -ne 1 ]; then rm -rf /usr/local/src/smartmet/smartmet-timezones; fi &&    for
      LIBRARY in ${SMARTMET_LIBRARIES};       do       \t cd /usr/local/src/smartmet
      &&     \t git clone https://github.com/fmidev/smartmet-library-${LIBRARY}.git
      &&     \t cd smartmet-library-${LIBRARY} &&     \t make  && make install &&
      \    \t if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/lib64/libsmartmet-${LIBRARY}.so;
      rm -rf /usr/local/src/smartmet/smartmet-library-${LIBRARY}; fi       done &&
      \    cd /usr/local/src/smartmet &&     git clone https://github.com/fmidev/smartmet-server.git
      &&     cd smartmet-server &&     make && make install &&     if [ $SMARTMET_DEVEL
      -ne 1 ]; then strip /usr/sbin/smartmetd; rm -rf /usr/local/src/smartmet/smartmet-server;
      fi &&     for ENGINE in ${SMARTMET_ENGINES};       do \t cd /usr/local/src/smartmet
      &&          git clone https://github.com/fmidev/smartmet-engine-${ENGINE}.git
      && \t cd smartmet-engine-${ENGINE} && \t make && make install  && \t if [ $SMARTMET_DEVEL
      -ne 1 ]; then strip /usr/share/smartmet/engines/${ENGINE}.so; rm -rf /usr/local/src/smartmet/smartmet-engine-${ENGINE};
      fi       done &&       for PLUGIN in ${SMARTMET_PLUGINS};       do       \t
      cd /usr/local/src/smartmet &&     \t git clone https://github.com/fmidev/smartmet-plugin-${PLUGIN}.git
      &&     \t cd smartmet-plugin-${PLUGIN} &&     \t CFLAGS=\"-DWITHOUT_AUTHENTICATION\"
      make && make install &&     \t if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/share/smartmet/plugins/${PLUGIN}.so;
      rm -rf /usr/local/src/smartmet/smartmet-plugin-${PLUGIN}; fi       done &&       yum
      -y --setopt=tsflags=noscripts remove libffi-devel &&       yum -y erase '*-devel'
      &&       yum -y erase 'perl-*' &&       yum -y erase m4 make cpp cmake postgresql93
      glibc-headers &&       yum clean all &&       rm -rf /usr/include /usr/local/include
      /usr/local/src /usr/share/doc              /usr/sbin/{glibc_post_upgrade.x86_64,sln}
      /usr/share/gnupg/help*.txt"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - smartmetconf
    - /etc/smartmet
  - CmdLine:
    - mkdir -p /smartmet/share
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - wms
    - /smartmet/share/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dali
    - /smartmet/share/
  - Health:
      Interval: 300000000000
      Test:
      - CMD-SHELL
      - curl -f http://localhost/admin?what=qengine || exit 1
      Timeout: 3000000000
    Name: healthcheck
  - Name: expose
    Ports:
    - "80"
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - smartmetd
    Name: cmd
    PrependShell: false
  From:
    Image: centos:7
  Name: ""
  Platform: ""
  SourceCode: FROM centos:7
