{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:7",
      "SourceCode": "FROM centos:7",
      "Platform": "",
      "From": {
        "Image": "centos:7"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Mikko Rauhala \u003cmikko@meteo.fi\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "SMARTMET_DEVEL",
              "Value": "0"
            },
            {
              "Key": "SMARTMET_LIBRARIES",
              "Value": "\"newbase macgyver gis giza spine locus tron imagine\""
            },
            {
              "Key": "SMARTMET_ENGINES",
              "Value": "\"sputnik querydata geonames observation gis contour\""
            },
            {
              "Key": "SMARTMET_PLUGINS",
              "Value": "\"autocomplete timeseries download admin backend meta wfs frontend wms\""
            },
            {
              "Key": "MAKEFLAGS",
              "Value": "\"-j8\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/src/smartmet /smartmet/data /etc/smartmet/plugins /etc/smartmet/engines /var/log/smartmet /var/smartmet/timeseriescache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \u0026\u0026     rpm -ivh https://download.postgresql.org/pub/repos/yum/9.3/redhat/rhel-7-x86_64/pgdg-centos93-9.3-3.noarch.rpm \u0026\u0026     yum -y update \u0026\u0026 yum -y install     \t   \t   bzip2-devel \t\t   cairo-devel cairo-gobject-devel      \t   \t   elfutils-devel \t\t   file \t\t   fmt-devel     \t   \t   gcc gcc-c++     \t   \t   gdal-devel     \t   \t   geos-devel \t\t   gdk-pixbuf2-devel     \t   \t   git \t\t   grib_api grib_api-devel \t\t   gobject-introspection-devel    \t   \t   jemalloc-devel     \t   \t   jsoncpp-devel \t\t   libaio-devel \t\t   libcroco-devel     \t   \t   libtool     \t   \t   libatomic     \t   \t   libconfig-devel     \t   \t   libicu-devel \t\t   libjpeg-devel \t\t   libpqxx-devel \t\t   libspatialite-devel     \t   \t   make cmake imake     \t   \t   mariadb-devel \t\t   mysql++-devel     \t   \t   netcdf-devel netcdf-cxx-devel     \t   \t   openssl-devel \t\t   pango-devel     \t   \t   protobuf-devel protobuf-compiler     \t   \t   postgresql93-devel     \t   \t   python-devel\t\t   soci-devel soci-sqlite3-devel \t\t   sqlite-devel     \t   \t   unzip     \t   \t   wget \t\t   xqilla-devel \t\t   xerces-c-devel     \t   \t   zlib-devel \u0026\u0026      rpm -ivh http://download.weatherproof.fi/fmiforge/rhel/7/x86_64/librsvg2-2.40.6-3.el7.x86_64.rpm   \t      http://download.weatherproof.fi/fmiforge/rhel/7/x86_64/librsvg2-devel-2.40.6-3.el7.x86_64.rpm \u0026\u0026     cd /usr/local/src/smartmet \u0026\u0026     wget -nv http://ctpp.havoc.ru/download/ctpp2-2.8.3.tar.gz \u0026\u0026     tar zxvf ctpp2-2.8.3.tar.gz \u0026\u0026     cd ctpp2-2.8.3 \u0026\u0026     cmake . \u0026\u0026     sed -i '/#include \u003cstdlib.h\u003e/a #include \u003cunistd.h\u003e' src/CTPP2FileSourceLoader.cpp \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/ctpp2-2.8.3; fi \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/ctpp2-2.8.3.tar.gz; fi \u0026\u0026     cd /usr/local/src/smartmet \u0026\u0026     wget -nv http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.gz \u0026\u0026     tar zxf boost_1_55_0.tar.gz \u0026\u0026     cd boost_1_55_0 \u0026\u0026     ./bootstrap.sh --without-libraries=mpi,graph_parallel \u0026\u0026     ./b2 $MAKEFLAGS \u0026\u0026     ./b2 install \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/boost_1_55_0; fi \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/boost_1_55_0.tar.gz; fi \u0026\u0026 echo \"/usr/local/lib/\" \u003e /etc/ld.so.conf.d/local.conf \u0026\u0026 ldconfig -v \u0026\u0026     cd /usr/local/src/smartmet \u0026\u0026     git clone https://github.com/fmidev/smartmet-timezones.git \u0026\u0026     cd smartmet-timezones \u0026\u0026     make \u0026\u0026 make install \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then rm -rf /usr/local/src/smartmet/smartmet-timezones; fi \u0026\u0026    for LIBRARY in ${SMARTMET_LIBRARIES};       do       \t cd /usr/local/src/smartmet \u0026\u0026     \t git clone https://github.com/fmidev/smartmet-library-${LIBRARY}.git \u0026\u0026     \t cd smartmet-library-${LIBRARY} \u0026\u0026     \t make  \u0026\u0026 make install \u0026\u0026     \t if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/lib64/libsmartmet-${LIBRARY}.so; rm -rf /usr/local/src/smartmet/smartmet-library-${LIBRARY}; fi       done \u0026\u0026     cd /usr/local/src/smartmet \u0026\u0026     git clone https://github.com/fmidev/smartmet-server.git \u0026\u0026     cd smartmet-server \u0026\u0026     make \u0026\u0026 make install \u0026\u0026     if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/sbin/smartmetd; rm -rf /usr/local/src/smartmet/smartmet-server; fi \u0026\u0026     for ENGINE in ${SMARTMET_ENGINES};       do \t cd /usr/local/src/smartmet \u0026\u0026          git clone https://github.com/fmidev/smartmet-engine-${ENGINE}.git \u0026\u0026 \t cd smartmet-engine-${ENGINE} \u0026\u0026 \t make \u0026\u0026 make install  \u0026\u0026 \t if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/share/smartmet/engines/${ENGINE}.so; rm -rf /usr/local/src/smartmet/smartmet-engine-${ENGINE}; fi       done \u0026\u0026       for PLUGIN in ${SMARTMET_PLUGINS};       do       \t cd /usr/local/src/smartmet \u0026\u0026     \t git clone https://github.com/fmidev/smartmet-plugin-${PLUGIN}.git \u0026\u0026     \t cd smartmet-plugin-${PLUGIN} \u0026\u0026     \t CFLAGS=\"-DWITHOUT_AUTHENTICATION\" make \u0026\u0026 make install \u0026\u0026     \t if [ $SMARTMET_DEVEL -ne 1 ]; then strip /usr/share/smartmet/plugins/${PLUGIN}.so; rm -rf /usr/local/src/smartmet/smartmet-plugin-${PLUGIN}; fi       done \u0026\u0026       yum -y --setopt=tsflags=noscripts remove libffi-devel \u0026\u0026       yum -y erase '*-devel' \u0026\u0026       yum -y erase 'perl-*' \u0026\u0026       yum -y erase m4 make cpp cmake postgresql93 glibc-headers \u0026\u0026       yum clean all \u0026\u0026       rm -rf /usr/include /usr/local/include /usr/local/src /usr/share/doc              /usr/sbin/{glibc_post_upgrade.x86_64,sln} /usr/share/gnupg/help*.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "smartmetconf",
            "/etc/smartmet"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /smartmet/share"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "wms",
            "/smartmet/share/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "dali",
            "/smartmet/share/"
          ]
        },
        {
          "Health": {
            "Interval": 300000000000,
            "Test": [
              "CMD-SHELL",
              "curl -f http://localhost/admin?what=qengine || exit 1"
            ],
            "Timeout": 3000000000
          },
          "Name": "healthcheck"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "smartmetd"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}