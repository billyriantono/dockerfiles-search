MetaArgs: null
Stages:
- BaseName: openjdk:13-jdk-alpine
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"jacobus.geluk@agnos.ai"'
    Name: label
  - Labels:
    - Key: authors
      Value: '"jacobus.geluk@agnos.ai,dallemang@workingontologist.com,kartgk@gmail.com,pete.rivett@adaptive.com"'
    Name: label
  - Labels:
    - Key: owner
      Value: '"Enterprise Data Management Council"'
    Name: label
  - Key: ONTPUB_FAMILY
    Name: arg
    Value: null
  - Key: ONTPUB_SPEC_HOST
    Name: arg
    Value: null
  - Key: ONTPUB_IS_DARK_MODE
    Name: arg
    Value: null
  - Key: ONTPUB_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: ONTPUB_FAMILY
      Value: ${ONTPUB_FAMILY:-fibo}
    - Key: ONTPUB_VERSION
      Value: ${ONTPUB_VERSION:-latest}
    - Key: ONTPUB_IS_DARK_MODE
      Value: ${ONTPUB_IS_DARK_MODE:-1}
    - Key: INPUT
      Value: /input
    - Key: OUTPUT
      Value: /output
    - Key: TMPDIR
      Value: /var/tmp
    Name: env
  - CmdLine:
    - mkdir -p /publisher ${TMPDIR} || true
    Name: run
    PrependShell: true
  - CmdLine:
    - echo ================================= install basics >&2 &&   apk --no-cache
      add     curl wget     bash git grep sed findutils coreutils tree jq bc xmlstarlet     zip
      tar xz     python python3 py3-setuptools     perl perl-utils     perl-log-log4perl
      perl-class-accessor perl-datetime perl-datetime-format-builder     perl-datetime-calendar-julian
      perl-text-csv perl-data-compare perl-data-dump perl-file-slurper     perl-list-allutils
      perl-autovivification perl-xml-libxml-simple perl-regexp-common     perl-data-uniqid
      perl-text-roman perl-unicode-linebreak perl-sort-key perl-text-bibtex     perl-module-build
      perl-business-isbn perl-business-ismn perl-business-issn perl-encode-eucjpascii     perl-encode-hanextra
      perl-encode-jis2k perl-lingua-translit perl-text-csv_xs perl-perlio-utf8_strict     perl-xml-libxslt
      perl-xml-writer perl-lwp-protocol-https perl-list-moreutils-xs perl-mozilla-ca     perl-unicode-collate
      perl-unicode-linebreak perl-unicode-normalize perl-config-autoconf     perl-extutils-libbuilder
      perl-file-which perl-test-differences     fontconfig make npm     gcc linux-headers
      libc-dev &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: MANPATH
      Value: /usr/local/texlive/2018/texmf-dist/doc/man:${MANPATH}
    - Key: INFOPATH
      Value: /usr/local/texlive/2018/texmf-dist/doc/info:${INFOPATH}
    - Key: PATH
      Value: ${PATH}:/usr/local/texlive/2018/bin/x86_64-linuxmusl:/usr/local/texlive/2018/bin/x86_64-linux
    Name: env
  - Env:
    - Key: pandoc_available
      Value: "1"
    - Key: pandoc_bin
      Value: /usr/local/bin/pandoc
    Name: env
  - CmdLine:
    - pandoc_version="2.2.2.1" ;   echo ================================= install
      pandoc ${pandoc_version} >&2 &&   targz="pandoc-${pandoc_version}-linux.tar.gz"
      ;   url="https://github.com/jgm/pandoc/releases/download/${pandoc_version}/${targz}"
      ;   echo "Downloading ${url}:" >&2 ;   curl --location --silent --show-error
      --output /var/tmp/${targz} --url "${url}" &&   mkdir -p /usr/share/pandoc &&   cd
      /usr/share/pandoc &&   tar xzf /var/tmp/${targz} --strip-components 1 -C . &&   cd
      bin &&   mv * .. &&   cd .. &&   rm -rf bin share &&   ln -s /usr/share/pandoc/pandoc
      /usr/local/bin/pandoc &&   ./pandoc --version
    Name: run
    PrependShell: true
  - Env:
    - Key: SERD
      Value: /usr/local/bin/serdi
    - Key: SERDI
      Value: /usr/local/bin/serdi
    Name: env
  - CmdLine:
    - serd_version="0.28.0" ;   echo ================================= install serd
      ${serd_version} >&2 &&   name="serd-${serd_version}" ;   tarbz2="${name}.tar.bz2"
      ;   url="http://download.drobilla.net/${tarbz2}" ;   (     mkdir -p /var/tmp/build-serd
      ;     cd /var/tmp/build-serd ;     curl --location --silent --show-error --output
      "${tarbz2}" --url "${url}" ;     cat "${tarbz2}" | tar -xj ;     cd "${name}"
      ;     ./waf configure ;     ./waf ;     ./waf install ;   ) &&   rm -rf /var/tmp/build-serd
      &&   test "$(which serdi)" == "${SERD}"
    Name: run
    PrependShell: true
  - Env:
    - Key: RDFTOOLKIT_JAR
      Value: /publisher/lib/rdf-toolkit.jar
    Name: env
  - Env:
    - Key: JENA_VERSION
      Value: '"3.13.1"'
    - Key: JENA_HOME
      Value: /usr/share/java/jena/latest
    - Key: PATH
      Value: ${PATH}:/usr/share/java/jena/latest/bin
    Name: env
  - CmdLine:
    - 'echo ================================= install jena ${JENA_VERSION} >&2 &&   name="apache-jena-${JENA_VERSION}"
      ;   targz="${name}.tar.gz" ;   url="http://www-us.apache.org/dist/jena/binaries/${targz}"
      ;   echo "Downloading ${url}:" >&2 ;   curl --location --silent --show-error
      --output /var/tmp/${targz} --url "${url}" &&   (mkdir -p /usr/share/java/jena
      || true) &&   cd /usr/share/java/jena &&   tar xzf /var/tmp/${targz} &&   rm
      -f /var/tmp/${targz} &&   mv ${name} ${JENA_VERSION} &&   ln -s ${JENA_VERSION}
      latest &&   ln -s /usr/share/java/jena/latest/bin/riot /usr/local/bin/riot &&   ln
      -s /usr/share/java/jena/latest/bin/sparql /usr/local/bin/sparql &&   ln -s /usr/share/java/jena/latest/bin/turtle
      /usr/local/bin/turtle &&   cd ${JENA_VERSION} &&   rm -rf src-examples lib-src
      bat &&   cd / &&   version="$(echo $(tdb2.tdbloader --version | grep Jena |
      grep VERSION | cut -d: -f3))" &&   echo "installed version="[${version}]"" &&   test
      "${version}" == "${JENA_VERSION}"'
    Name: run
    PrependShell: true
  - Env:
    - Key: JENA_OLD_VERSION
      Value: '"3.0.1"'
    Name: env
  - CmdLine:
    - echo ================================= install jena ${JENA_OLD_VERSION} for
      SPIN >&2 &&   name="apache-jena-${JENA_OLD_VERSION}" ;   targz="${name}.tar.gz"
      ;   url="http://archive.apache.org/dist/jena/binaries/${targz}" ;   echo "Downloading
      ${url}:" >&2 ;   curl --location --silent --show-error --output /var/tmp/${targz}
      --url "${url}" &&   (mkdir -p /usr/share/java/jena || true) &&   cd /usr/share/java/jena
      &&   tar xzf /var/tmp/${targz} &&   rm -f /var/tmp/${targz} &&   mv ${name}
      ${JENA_OLD_VERSION} &&   ln -s ${JENA_OLD_VERSION} jena-old &&   cd ${JENA_OLD_VERSION}
      &&   rm -rf src-examples lib-src bat javadoc-* &&   cd /
    Name: run
    PrependShell: true
  - Env:
    - Key: SPIN_VERSION
      Value: '"2.0.0"'
    Name: env
  - CmdLine:
    - echo ================================= install SPIN ${SPIN_VERSION} >&2 &&   name="spin-${SPIN_VERSION}"
      ;   zip="${name}-distribution.zip" ;   url="https://www.topquadrant.com/repository/spin/org/topbraid/spin/${SPIN_VERSION}/${zip}"
      ;   echo "Downloading ${url}:" >&2 ;   curl --location --silent --show-error
      --output /var/tmp/${zip} --url "${url}" &&   (mkdir -p /usr/share/java/spin
      || true) &&   cd /usr/share/java/spin &&   unzip -q /var/tmp/${zip} &&   rm
      -f /var/tmp/${zip} &&   cd src-tools &&   find . -name '*.java' |   xargs javac
      -cp "/usr/share/java/jena/jena-old/lib/*:/usr/share/java/spin/spin-${SPIN_VERSION}.jar"
      &&   cd .. &&   rm -rf src-examples src README.TXT RELEASE-NOTES.TXT &&   cd
      /
    Name: run
    PrependShell: true
  - CmdLine:
    - echo ================================= install XlsxWriter, rdflib, PyLD >&2
      &&   python3 -m  easy_install XlsxWriter rdflib PyLD
    Name: run
    PrependShell: true
  - Env:
    - Key: SAXON_VERSION
      Value: '"9-9-0-2J"'
    Name: env
  - CmdLine:
    - echo ================================= install saxon ${SAXON_VERSION} >&2 &&   curl
      --location --silent --show-error     --output /var/tmp/SaxonHE${SAXON_VERSION}.zip     --url
      "https://sourceforge.net/projects/saxon/files/latest/download" &&   (mkdir -p
      /usr/share/java/saxon || true) &&   cd /usr/share/java/saxon &&   unzip -q /var/tmp/SaxonHE${SAXON_VERSION}.zip
      &&   rm /var/tmp/SaxonHE${SAXON_VERSION}.zip
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc
    - /etc
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - root
    - /root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - usr
    - /usr
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - /publisher
    - /publisher
  - CmdLine:
    - find /publisher/ -name '*.sh' | xargs sed -i 's/\r//'
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - ${TMPDIR}
  - Name: workdir
    Path: /publisher
  - Env:
    - Key: PERL5LIB
      Value: /usr/local/biber/lib
    - Key: PATH
      Value: /usr/local/biber/bin:${PATH}
    Name: env
  - CmdLine:
    - echo PATH=${PATH} &&   sed -i -e 's/export PATH=\(.*\)/export PATH=${PATH}/g'
      /etc/profile &&   echo "export PATH=${PATH}" >> /etc/bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - ./publish.sh
    Name: cmd
    PrependShell: false
  From:
    Image: openjdk:13-jdk-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM openjdk:13-jdk-alpine
