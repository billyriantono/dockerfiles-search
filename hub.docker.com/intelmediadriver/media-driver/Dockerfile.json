{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBVA_VERSION",
              "Value": "2.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBVAUTILS_VERSION",
              "Value": "2.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MEDIADRIVER_VERSION",
              "Value": "intel-media-18.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GMMLIB_VERSION",
              "Value": "intel-gmmlib-18.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MSDK_VERSION",
              "Value": "intel-mediasdk-18.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y     autoconf     git     curl     libdrm-dev     libgl1-mesa-glx     libgl1-mesa-dev     libtool     libx11-dev     openbox     unzip     xorg     xorg-dev     \u0026\u0026 apt-get clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /opt/src \u0026\u0026     cd /opt/src \u0026\u0026     curl -sSLO https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh \u0026\u0026     sh cmake-3.8.2-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir \u0026\u0026     rm cmake-3.8.2-Linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -sSLO https://www.samba.org/ftp/ccache/ccache-3.2.8.tar.bz2 \u0026\u0026     tar xf ccache-3.2.8.tar.bz2 \u0026\u0026     cd ccache-3.2.8 \u0026\u0026     ./configure --prefix=/usr \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/lib/ccache \u0026\u0026     cd /usr/lib/ccache \u0026\u0026     ln -sf /usr/bin/ccache gcc \u0026\u0026     ln -sf /usr/bin/ccache g++ \u0026\u0026     ln -sf /usr/bin/ccache cc \u0026\u0026     ln -sf /usr/bin/ccache c++ \u0026\u0026     ln -sf /usr/bin/ccache clang \u0026\u0026     ln -sf /usr/bin/ccache clang++ \u0026\u0026     ln -sf /usr/bin/ccache clang-4.0 \u0026\u0026     ln -sf /usr/bin/ccache clang++-4.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -o libva.zip -sSL https://github.com/intel/libva/archive/${LIBVA_VERSION}.zip \u0026\u0026     unzip libva.zip \u0026\u0026     cd libva-${LIBVA_VERSION} \u0026\u0026     ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \u0026\u0026     make -j8 \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -o gmmlib.zip -sSL https://github.com/intel/gmmlib/archive/${GMMLIB_VERSION}.zip \u0026\u0026     unzip gmmlib.zip \u0026\u0026     mkdir build_gmmlib \u0026\u0026     cd build_gmmlib \u0026\u0026     cmake ../gmmlib-${GMMLIB_VERSION} \u0026\u0026     make -j8 \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -o media-driver.zip -sSL https://github.com/intel/media-driver/archive/${MEDIADRIVER_VERSION}.zip \u0026\u0026     unzip media-driver.zip \u0026\u0026     mkdir build_media \u0026\u0026     cd build_media \u0026\u0026     cmake ../media-driver-${MEDIADRIVER_VERSION} \u0026\u0026     make -j8 \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -o libva-utils.zip -sSL https://github.com/intel/libva-utils/archive/${LIBVAUTILS_VERSION}.zip \u0026\u0026     unzip libva-utils.zip \u0026\u0026     cd libva-utils-${LIBVAUTILS_VERSION} \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure --prefix=/usr \u0026\u0026     make -j8 \u0026\u0026     make install \u0026\u0026     make check"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/src \u0026\u0026     curl -o msdk.zip -sSL https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VERSION}.zip \u0026\u0026     unzip msdk.zip \u0026\u0026     mkdir build_msdk \u0026\u0026     cd build_msdk \u0026\u0026     cmake ../MediaSDK-${MSDK_VERSION} \u0026\u0026     make -j8 \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ubuntu_export.sh",
            "/opt/src/ubuntu_export.sh"
          ]
        }
      ]
    }
  ]
}