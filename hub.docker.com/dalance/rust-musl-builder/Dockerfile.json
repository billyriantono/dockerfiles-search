{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Key": "TOOLCHAIN",
          "Name": "arg",
          "Value": "stable"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y         build-essential         cmake         curl         file         git         musl-dev         musl-tools         libpq-dev         libsqlite-dev         libssl-dev         pkgconf         sudo         xutils-dev         gcc-4.7-multilib-arm-linux-gnueabihf         \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026     useradd rust --user-group --create-home --shell /bin/bash --groups sudo \u0026\u0026     MDBOOK_VERSION=0.1.5 \u0026\u0026     curl -LO https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz \u0026\u0026     tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz \u0026\u0026     mv mdbook /usr/local/bin/ \u0026\u0026     rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "sudoers",
            "/etc/sudoers.d/nopasswd"
          ]
        },
        {
          "Name": "user",
          "User": "rust"
        },
        {
          "CmdLine": [
            "mkdir -p /home/rust/libs /home/rust/src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/home/rust/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl https://sh.rustup.rs -sSf |     sh -s -- -y --default-toolchain $TOOLCHAIN \u0026\u0026     rustup target add x86_64-unknown-linux-musl \u0026\u0026     rustup target add armv7-unknown-linux-musleabihf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "cargo-config.toml",
            "/home/rust/.cargo/config"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "git-credential-ghtoken",
            "/usr/local/bin"
          ]
        },
        {
          "CmdLine": [
            "git config --global credential.https://github.com.helper ghtoken"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Building OpenSSL\" \u0026\u0026     cd /tmp \u0026\u0026     OPENSSL_VERSION=1.0.2o \u0026\u0026     curl -LO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" \u0026\u0026     tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" \u0026\u0026 cd \"openssl-$OPENSSL_VERSION\" \u0026\u0026     env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl linux-x86_64 \u0026\u0026     env C_INCLUDE_PATH=/usr/local/musl/include/ make depend \u0026\u0026     make \u0026\u0026 sudo make install \u0026\u0026         echo \"Building zlib\" \u0026\u0026     cd /tmp \u0026\u0026     ZLIB_VERSION=1.2.11 \u0026\u0026     curl -LO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" \u0026\u0026     tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" \u0026\u0026 cd \"zlib-$ZLIB_VERSION\" \u0026\u0026     CC=musl-gcc ./configure --static --prefix=/usr/local/musl \u0026\u0026     make \u0026\u0026 sudo make install \u0026\u0026         echo \"Building libpq\" \u0026\u0026     cd /tmp \u0026\u0026     POSTGRESQL_VERSION=9.6.8 \u0026\u0026     curl -LO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" \u0026\u0026     tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" \u0026\u0026 cd \"postgresql-$POSTGRESQL_VERSION\" \u0026\u0026     CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --with-openssl --without-readline --prefix=/usr/local/musl \u0026\u0026     cd src/interfaces/libpq \u0026\u0026 make all-static-lib \u0026\u0026 sudo make install-lib-static \u0026\u0026     cd ../../bin/pg_config \u0026\u0026 make \u0026\u0026 sudo make install \u0026\u0026         rm -r /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "OPENSSL_DIR",
              "Value": "/usr/local/musl/"
            },
            {
              "Key": "OPENSSL_INCLUDE_DIR",
              "Value": "/usr/local/musl/include/"
            },
            {
              "Key": "DEP_OPENSSL_INCLUDE",
              "Value": "/usr/local/musl/include/"
            },
            {
              "Key": "OPENSSL_LIB_DIR",
              "Value": "/usr/local/musl/lib/"
            },
            {
              "Key": "OPENSSL_STATIC",
              "Value": "1"
            },
            {
              "Key": "PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL",
              "Value": "1"
            },
            {
              "Key": "PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU",
              "Value": "/usr/bin/pg_config"
            },
            {
              "Key": "PKG_CONFIG_ALLOW_CROSS",
              "Value": "true"
            },
            {
              "Key": "PKG_CONFIG_ALL_STATIC",
              "Value": "true"
            },
            {
              "Key": "LIBZ_SYS_STATIC",
              "Value": "1"
            },
            {
              "Key": "TARGET",
              "Value": "musl"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cargo install -f cargo-audit \u0026\u0026     rm -rf /home/rust/.cargo/registry/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/rust/src"
        },
        {
          "Name": "user",
          "User": "root"
        }
      ]
    }
  ]
}