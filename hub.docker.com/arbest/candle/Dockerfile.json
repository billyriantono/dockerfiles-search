{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "os",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as os",
      "Platform": "",
      "As": "os",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends \tvim \tpython-pip \tr-base \tlibcurl4-openssl-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "export",
              "Value": "SINGULARITY_DOCKER_USERNAME='$oauthtoken'"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "export",
              "Value": "SINGULARITY_DOCKER_PASSWORD=dG5zcmUyNWFsMWllMnRlaW12ZWFiaGhpazU6NmE5YzlmN2ItMGNiNi00MThlLWEyZmQtM2JlM2MzY2NhZWQy"
            }
          ],
          "Name": "env"
        }
      ]
    },
    {
      "Name": "candle",
      "BaseName": "nvcr.io/hpc/candle:20180326",
      "SourceCode": "FROM nvcr.io/hpc/candle:20180326 as candle",
      "Platform": "",
      "As": "candle",
      "From": {
        "Image": "nvcr.io/hpc/candle:20180326"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/opt"
        },
        {
          "CmdLine": [
            "rm candle_setup.sh \u0026\u0026 ls"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip \u0026\u0026 pip install keras \u0026\u0026 pip install -r /opt/pip-dependencies.txt \u0026\u0026 export PATH=/usr/bin:$PATH \u0026\u0026 export BUILD_DIR=/opt \u0026\u0026 cd $BUILD_DIR \u0026\u0026 rm -rf swift-t 2\u003e /dev/null \u0026\u0026 apt-get update -y \u0026\u0026 apt-get install -y --no-install-recommends \t\tautoconf \tautomake \tdefault-jdk \tgit \tant \tswig \tzsh \ttcl \ttcl-dev \tpython-tk \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026 wget http://swift-lang.github.io/swift-t-downloads/1.4/swift-t-1.4.tar.gz \u0026\u0026 tar -zxvf swift-t-1.4.tar.gz \u0026\u0026 $BUILD_DIR/swift-t-1.4/dev/build/init-settings.sh \u0026\u0026 sed -i  's@^export SWIFT_T_PREFIX=.*@export SWIFT_T_PREFIX=/opt/swift-t@' ./swift-t-1.4/dev/build/swift-t-settings.sh \u0026\u0026 sed -i  's@.*ENABLE_PYTHON=1@ENABLE_PYTHON=1@' ./swift-t-1.4/dev/build/swift-t-settings.sh \u0026\u0026 sed -i  's@.*ENABLE_R=1@ENABLE_R=1@' ./swift-t-1.4/dev/build/swift-t-settings.sh \u0026\u0026 sed -i  's@.*R_INSTALL=.*@R_INSTALL=/usr/share/R/@' ./swift-t-1.4/dev/build/swift-t-settings.sh \u0026\u0026 $BUILD_DIR/swift-t-1.4/dev/build/build-all.sh \u0026\u0026 export TURBINE_PATH=$BUILD_DIR/swift-t/turbine \u0026\u0026 chmod +x $TURBINE_PATH/bin/turbine \u0026\u0026 sed -i  's@\\${TURBINE_LAUNCHER} \\${OPTIONS} \\${=VALGRIND} @\\${TURBINE_LAUNCHER} \\${OPTIONS} \\${=VALGRIND} \\${TURBINE_HOME}/bin/gpurunscript.sh @' $TURBINE_PATH/bin/turbine \u0026\u0026 cp /gpurunscript.sh $TURBINE_PATH/bin \u0026\u0026 chmod +x $TURBINE_PATH/bin/gpurunscript.sh \u0026\u0026 export PATH=$BUILD_DIR/swift-t/stc/bin/:$TURBINE_PATH/bin:$PATH \u0026\u0026 export TURBINE_LAUNCH_OPTIONS=--allow-run-as-root"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}