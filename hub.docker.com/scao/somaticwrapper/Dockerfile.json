{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "author",
              "Value": "\"Matt Wyczalkowski\""
            },
            {
              "Key": "maintainer",
              "Value": "\"m.wyczalkowski@wustl.edu\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     autoconf     bedtools     build-essential     bwa     cmake     cpanminus     curl     default-jre     gawk     git     libbz2-dev     liblzma-dev     libncurses-dev     python     python-dev     python-pip     sshpass     subversion     unzip     vim     wget     zlib1g-dev     \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 git clone https://github.com/samtools/htslib.git     \u0026\u0026 cd /usr/local/htslib     \u0026\u0026 make     \u0026\u0026 make lib-static     \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/htslib"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /usr/local/     \u0026\u0026 git clone https://github.com/samtools/samtools.git     \u0026\u0026 cd samtools     \u0026\u0026 make     \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/     \u0026\u0026 git clone --recursive https://github.com/genome/pindel.git      \u0026\u0026 cd /usr/local/pindel/     \u0026\u0026 ./INSTALL /usr/local/htslib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install     pyvcf     pysam     numpy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cpanm XML::XPath"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 wget https://sites.google.com/site/strelkasomaticvariantcaller/home/download/strelka_workflow-1.0.15.tar.gz     \u0026\u0026 tar -zxf strelka_workflow-1.0.15.tar.gz     \u0026\u0026 cd /usr/local/strelka_workflow-1.0.15     \u0026\u0026 ./configure --prefix=/usr/local/strelka     \u0026\u0026 make     \u0026\u0026 make install     \u0026\u0026 ln -s /usr/local/samtools /usr/local/strelka_workflow-1.0.15/src/perl/opt     \u0026\u0026 rm /usr/local/strelka_workflow-1.0.15.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 wget https://sourceforge.net/projects/varscan/files/VarScan.v2.3.8.jar     \u0026\u0026 ln -s VarScan.v2.3.8.jar VarScan.jar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 wget https://github.com/genome/bam-readcount/archive/master.tar.gz     \u0026\u0026 tar -zxf master.tar.gz     \u0026\u0026 rm master.tar.gz     \u0026\u0026 mkdir bam-readcount-master/build     \u0026\u0026 cd bam-readcount-master/build     \u0026\u0026 cmake ../     \u0026\u0026 make     \u0026\u0026 cp bin/bam-readcount /usr/local/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 wget http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip     \u0026\u0026 unzip snpEff_latest_core.zip     \u0026\u0026 rm snpEff_latest_core.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 wget https://software.broadinstitute.org/gatk/download/auth?package=GATK -O GATK.tar.bz2     \u0026\u0026 bunzip2 GATK.tar.bz2     \u0026\u0026 tar -xf GATK.tar     \u0026\u0026 wget https://github.com/broadinstitute/picard/releases/download/2.12.1/picard.jar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update     \u0026\u0026 {         echo debconf debconf/frontend select Noninteractive;         echo mysql-community-server mysql-community-server/data-dir select '';         echo mysql-community-server mysql-community-server/root-pass password '';         echo mysql-community-server mysql-community-server/re-root-pass password '';         echo mysql-community-server mysql-community-server/remove-test-db select true;     } | debconf-set-selections     \u0026\u0026 apt-get install -y mysql-server libmysqlclient-dev     \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cpanm DBI DBD::mysql"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026 git clone https://github.com/Ensembl/ensembl-vep.git      \u0026\u0026 cd /usr/local/ensembl-vep     \u0026\u0026 perl INSTALL.pl /data/D_Ensembl -a a"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "vimrc",
            "/root/.vimrc"
          ]
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026  git clone -b docker https://github.com/ding-lab/somaticwrapper"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local     \u0026\u0026  git clone -b d2 https://github.com/ding-lab/germlinewrapper"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/somaticwrapper"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}