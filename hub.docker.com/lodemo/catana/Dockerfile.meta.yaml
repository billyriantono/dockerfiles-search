MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Maintainer: lodemo
    Name: maintainer
  - Key: TENSORFLOW_VERSION
    Name: arg
    Value: "1.0"
  - Key: TENSORFLOW_ARCH
    Name: arg
    Value: cpu
  - Key: OPENCV_VERSION
    Name: arg
    Value: 2.4.13.6
  - Env:
    - Key: TZ
      Value: Europe/London
    Name: env
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \t\ttzdata"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
    Name: run
    PrependShell: true
  - CmdLine:
    - rm /etc/localtime
    Name: run
    PrependShell: true
  - CmdLine:
    - dpkg-reconfigure -f noninteractive tzdata
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \t\tbc \t\tbuild-essential \t\tcmake \t\tcurl
      \        pkg-config \t\tg++ \t\tgfortran \t\tgit         python2.7         python-pip
      \t\tlibffi-dev \t\tlibfreetype6-dev \t\tlibhdf5-dev \t\tlibjpeg-dev \t\tliblcms2-dev
      \t\tlibopenblas-dev \t\tliblapack-dev \t\tlibpng-dev \t\tlibssl-dev \t\tlibtiff5-dev
      \t\tlibwebp-dev \t\tlibzmq3-dev \t\tnano \t\tpython-dev \t\tsoftware-properties-common
      \t\tunzip \t\tvim \t\twget \t\tzlib1g-dev \t\tqt5-default \t\tlibvtk6-dev \t\tzlib1g-dev
      \t\tlibjpeg-dev \t\tlibwebp-dev \t\tlibpng-dev \t\tlibtiff5-dev \t\tlibopenexr-dev
      \t\tlibgdal-dev \t\tlibdc1394-22-dev \t\tlibavcodec-dev \t\tlibavformat-dev
      \t\tlibswscale-dev \t\tlibtheora-dev \t\tlibvorbis-dev \t\tlibxvidcore-dev \t\tlibx264-dev
      \t\tyasm \t\tlibopencore-amrnb-dev \t\tlibopencore-amrwb-dev \t\tlibv4l-dev
      \t\tlibxine2-dev \t\tlibtbb-dev \t\tlibeigen3-dev \t\tpython-tk         ffmpeg
      \        && \tapt-get clean && \tapt-get autoremove && \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS     && cd /tmp/OpenBLAS/     &&
      make DYNAMIC_ARCH=1 NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32     && make DYNAMIC_ARCH=1
      NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32 install     && rm -rf /tmp/OpenBLAS
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/lib/libblas.so libblas.so /opt/OpenBLAS/lib/libopenblas.so
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/lib/libblas.so.3 libblas.so.3 /opt/OpenBLAS/lib/libopenblas.so
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/lib/liblapack.so liblapack.so /opt/OpenBLAS/lib/libopenblas.so
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/lib/liblapack.so.3 liblapack.so.3 /opt/OpenBLAS/lib/libopenblas.so
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \t\tpython-nose \t\tpython-h5py \t\tpython-skimage
      \        python-protobuf         python-openssl \t\tpython-mysqldb         &&
      \tapt-get clean && \tapt-get autoremove && \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install Pillow
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /opt &&     wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip
      &&     unzip ${OPENCV_VERSION}.zip &&     mkdir -p /opt/opencv-${OPENCV_VERSION}/build
      &&     cd /opt/opencv-${OPENCV_VERSION}/build &&     cmake     -D CMAKE_BUILD_TYPE=RELEASE     -D
      CMAKE_INSTALL_PREFIX=/usr/local     -D WITH_FFMPEG=ON     -D WITH_IPP=NO     -D
      WITH_OPENEXR=NO     -D WITH_TBB=YES     -D BUILD_EXAMPLES=NO     -D BUILD_ANDROID_EXAMPLES=NO     -D
      INSTALL_PYTHON_EXAMPLES=NO     -D BUILD_DOCS=NO     -D BUILD_opencv_python2=ON     -D
      BUILD_opencv_python3=NO     .. &&     make VERBOSE=1 &&     make -j${CPUCOUNT}
      &&     make install &&     rm -rf /opt/opencv-${OPENCV_VERSION}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /catana
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /catana
  - CmdLine:
    - pip --no-cache-dir install -r requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install numpy -I
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
