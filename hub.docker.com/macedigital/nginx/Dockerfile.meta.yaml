MetaArgs: null
Stages:
- BaseName: alpine:edge
  Commands:
  - CmdLine:
    - "NGINX_GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     NGINX_VERSION=1.11.10
      \    RTMP_VERSION=1.1.10     HEADERS_MORE_VERSION=0.32     NGINX_UID=99     NGINX_USER=nginx
      \t&& NGINX_CONF=\"\t\t--prefix=/etc/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules
      \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/var/log/nginx/error.log
      \t\t--http-log-path=/var/log/nginx/access.log \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--pid-path=/run/nginx.pid \t\t--lock-path=/run/nginx.lock \t\t--user=nginx
      \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module \t\t--with-http_addition_module
      \t\t--with-http_sub_module \t\t--with-http_dav_module \t\t--with-http_flv_module
      \t\t--with-http_mp4_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module
      \t\t--with-http_random_index_module \t\t--with-http_secure_link_module \t\t--with-http_stub_status_module
      \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic \t\t--with-http_image_filter_module=dynamic
      \t\t--with-http_geoip_module=dynamic \t\t--with-threads \t\t--with-stream=dynamic
      \t\t--with-stream_geoip_module=dynamic \t\t--with-stream_realip_module \t\t--with-stream_ssl_module
      \t\t--with-stream_ssl_preread_module \t\t--with-http_slice_module \t\t--with-mail=dynamic
      \t\t--with-mail_ssl_module \t\t--with-file-aio \t\t--with-http_v2_module \t\t--with-ipv6
      \t\t--with-pcre \t\t--with-pcre-jit \t\t--with-compat \t\t--add-module=/usr/src/ngx_brotli
      \t\t--add-dynamic-module=/usr/src/nginx-rtmp-module-$RTMP_VERSION \t\t--add-dynamic-module=/usr/src/headers-more-nginx-module-$HEADERS_MORE_VERSION
      \t\" \t&& addgroup -g $NGINX_UID -S $NGINX_USER \t&& adduser -D -S -H -h /var/cache/nginx
      -u $NGINX_UID -s /sbin/nologin -G $NGINX_USER $NGINX_USER \t&& apk add --no-cache
      --virtual .build-deps \t    build-base \t    file \t\tgit \t\tpcre-dev \t\tzlib-dev
      \t\tlibressl-dev \t\tlinux-headers \t\tcurl \t\tgnupg1 \t\tlibxslt-dev \t\tgd-dev
      \t\tgeoip-dev \t&& curl -fSLq https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSLq https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc     && curl -fSLq https://github.com/arut/nginx-rtmp-module/archive/v$RTMP_VERSION.tar.gz
      -o rtmp.tar.gz     && curl -fSLq https://github.com/openresty/headers-more-nginx-module/archive/v$HEADERS_MORE_VERSION.tar.gz
      -o headers.tar.gz \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver
      ha.pool.sks-keyservers.net --recv-keys \"$NGINX_GPG_KEYS\" \t&& gpg --batch
      --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc
      \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz \t&& tar -zxC
      /usr/src -f rtmp.tar.gz \t&& tar -zxC /usr/src -f headers.tar.gz \t&& rm nginx.tar.gz
      \t&& rm rtmp.tar.gz \t&& rm headers.tar.gz \t&& cd /usr/src \t&& git clone https://github.com/google/ngx_brotli.git
      \        && cd /usr/src/ngx_brotli         && git submodule update --init \t&&
      cd /usr/src/nginx-$NGINX_VERSION \t&& export NGX_BROTLI_STATIC_MODULE_ONLY=1
      \t&& ./configure $NGINX_CONF \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& make
      install \t&& rm -rf /etc/nginx/html/ \t&& mkdir -p /etc/nginx/conf.d/ \t&& mkdir
      -p /var/cache/nginx/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install -m644
      html/index.html /usr/share/nginx/html/ \t&& install -m644 html/50x.html /usr/share/nginx/html/
      \t&& install -dm750 -o nginx -g nginx /var/cache/nginx/client_temp \t&& install
      -dm750 -o nginx -g nginx /var/cache/nginx/proxy_temp \t&& install -dm750 -o
      nginx -g nginx /var/cache/nginx/fastcgi_temp \t&& install -dm750 -o nginx -g
      nginx /var/cache/nginx/uwsgi_temp \t&& install -dm750 -o nginx -g nginx /var/cache/nginx/scgi_temp
      \t&& ln -s /usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx*
      \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -Rf /usr/src \t\t&& apk add --no-cache
      --virtual .gettext gettext \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$(
      \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'
      \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\"
      \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \t&& apk del .build-deps
      --purge \t&& apk del .gettext --purge \t&& mv /tmp/envsubst /usr/local/bin/
      \t\t&& for module in /etc/nginx/modules/*.so; do echo \"#load_module $module;\"
      >> /etc/nginx/conf.d/modules.conf; done \t\t&& sed -i \"s/root   html;/root
      \\/usr\\/share\\/nginx\\/html;/\" /etc/nginx/nginx.conf \t\t&& ln -sf /dev/stdout
      /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: QUIT
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:edge
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:edge
