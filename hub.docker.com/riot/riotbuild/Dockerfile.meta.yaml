MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Kaspar Schleiser <kaspar@riot-os.org>"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - dpkg --add-architecture i386 >&2 &&     echo 'Update the package index files
      to latest available versions' >&2 &&     apt-get update     && echo 'Installing
      native toolchain and build system functionality' >&2 &&     apt-get -y --no-install-recommends
      install         automake         bsdmainutils         build-essential         ca-certificates         ccache         cmake         coccinelle         curl         cppcheck         doxygen         gcc-multilib         gdb         g++-multilib         git         graphviz         less         libffi-dev         libpcre3         libtool         m4         parallel         pcregrep         protobuf-compiler         python         python3         python3-dev         python3-pip         python3-setuptools         python3-wheel         p7zip         rsync         ssh-client         subversion         unzip         vera++         vim-common         wget         xsltproc     &&
      echo 'Installing MSP430 toolchain' >&2 &&     apt-get -y --no-install-recommends
      install         gcc-msp430         msp430-libc     && echo 'Installing AVR toolchain'
      >&2 &&     apt-get -y --no-install-recommends install         gcc-avr         binutils-avr         avr-libc     &&
      echo 'Installing LLVM/Clang toolchain' >&2 &&     apt-get -y --no-install-recommends
      install         llvm         clang         clang-tools     && echo 'Installing
      socketCAN' >&2 &&     apt-get -y --no-install-recommends install         libsocketcan-dev:i386         libsocketcan2:i386     &&
      echo 'Cleaning up installation files' >&2 &&     apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'Installing arm-none-eabi toolchain from arm.com' >&2 &&     mkdir -p /opt
      &&     curl -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update'
      &&     echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2'
      | md5sum -c &&     tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 &&     rm
      -f /opt/gcc-arm-none-eabi.tar.bz2 &&     echo 'Removing documentation' >&2 &&     rm
      -rf /opt/gcc-arm-none-eabi-*/share/doc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin
    Name: env
  - Key: MIPS_VERSION
    Name: arg
    Value: 2018.09-03
  - CmdLine:
    - echo 'Installing mips-mti-elf toolchain from mips.com' >&2 &&     mkdir -p /opt
      &&     curl -L "https://codescape.mips.com/components/toolchain/${MIPS_VERSION}/Codescape.GNU.Tools.Package.${MIPS_VERSION}.for.MIPS.MTI.Bare.Metal.CentOS-6.x86_64.tar.gz"
      -o -         | tar -C /opt -zx &&     echo 'Removing documentation and translations'
      >&2 &&     rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} &&     echo
      'Deduplicating binaries' &&     cd /opt/mips-mti-elf/*/mips-mti-elf/bin &&     for
      f in *; do test -f "../../bin/mips-mti-elf-$f" && ln -f "../../bin/mips-mti-elf-$f"
      "$f"; done && cd -
    Name: run
    PrependShell: true
  - Env:
    - Key: MIPS_ELF_ROOT
      Value: /opt/mips-mti-elf/${MIPS_VERSION}
    Name: env
  - Env:
    - Key: PATH
      Value: ${PATH}:${MIPS_ELF_ROOT}/bin
    Name: env
  - Key: RISCV_VERSION
    Name: arg
    Value: 8.2.0-2.2-20190521
  - Key: RISCV_BUILD
    Name: arg
    Value: "0004"
  - CmdLine:
    - mkdir -p /opt &&         wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v${RISCV_VERSION}/gnu-mcu-eclipse-riscv-none-gcc-${RISCV_VERSION}-${RISCV_BUILD}-centos64.tgz
      -O-         | tar -C /opt -xz &&     echo 'Removing documentation' >&2 &&       rm
      -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc &&     echo 'Deduplicating
      binaries' >&2 &&     cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin
      &&       for f in *; do test -f "../../bin/riscv-none-embed-$f" &&        ln
      -f "../../bin/riscv-none-embed-$f" "$f";       done &&     cd -
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/${RISCV_VERSION}-${RISCV_BUILD}/bin
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - create_user.c
    - /tmp/create_user.c
  - CmdLine:
    - gcc -DHOMEDIR=\"/data/riotbuild\" -DUSERNAME=\"riotbuild\" /tmp/create_user.c
      -o /usr/local/bin/create_user     && chown root:root /usr/local/bin/create_user     &&
      chmod u=rws,g=x,o=- /usr/local/bin/create_user     && rm /tmp/create_user.c
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'Installing ESP8266 toolchain' >&2 &&     cd /opt &&     git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git
      esp &&     cd esp &&     git checkout -q df38b06 &&     rm -rf .git
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin
    Name: env
  - Env:
    - Key: ESP8266_SDK_DIR
      Value: /opt/esp/esp-open-sdk/sdk
    Name: env
  - Env:
    - Key: ESP8266_NEWLIB_DIR
      Value: /opt/esp/newlib-xtensa
    Name: env
  - CmdLine:
    - echo 'Installing ESP8266 toolchain' >&2 &&     mkdir -p /opt/esp &&     cd /opt/esp
      &&     git clone https://github.com/gschorcht/xtensa-esp8266-elf &&     cd xtensa-esp8266-elf
      &&     git checkout -q 696257c2b43e2a107d3108b2c1ca6d5df3fb1a6f &&     rm -rf
      .git &&     cd /opt/esp &&     git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-RTOS-SDK.git
      ESP8266_RTOS_SDK &&     cd ESP8266_RTOS_SDK/ &&     git checkout -q c0174eff7278eb5beea66ce1f65b7af57432d2a9
      &&     rm -rf .git* docs examples make tools &&     cd components &&     rm
      -rf app_update aws_iot bootloader cjson coap espos esp-tls freertos            jsmn
      libsodium log mdns mqtt newlib partition_table pthread            smartconfig_ack
      spiffs ssl tcpip_adapter vfs &&     find . -name '*.[csS]' -exec rm {} \;
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/esp/xtensa-esp8266-elf/bin
    Name: env
  - Env:
    - Key: ESP8266_RTOS_SDK_DIR
      Value: /opt/esp/ESP8266_RTOS_SDK
    Name: env
  - CmdLine:
    - echo 'Installing ESP32 toolchain' >&2 &&     mkdir -p /opt/esp &&     cd /opt/esp
      &&     git clone https://github.com/espressif/esp-idf.git &&     cd esp-idf
      &&     git checkout -q f198339ec09e90666150672884535802304d23ec &&     git submodule
      update --init --recursive &&     rm -rf .git* docs examples make tools &&     rm
      -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler &&     cd components
      &&     rm -rf app_trace app_update aws_iot bootloader bt coap console cxx            esp_adc_cal
      espcoredump esp_http_client esp-tls expat fatfs            freertos idf_test
      jsmn json libsodium log lwip mbedtls mdns            micro-ecc nghttp openssl
      partition_table pthread sdmmc spiffs            tcpip_adapter ulp vfs wear_levelling
      xtensa-debug-module &&     find . -name '*.[csS]' -exec rm {} \; &&     cd /opt/esp
      &&     git clone https://github.com/gschorcht/xtensa-esp32-elf.git &&     cd
      xtensa-esp32-elf &&     git checkout -q ca40fb4c219accf8e7c8eab68f58a7fc14cadbab
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/esp/xtensa-esp32-elf/bin
    Name: env
  - Key: MSP430_URL
    Name: arg
    Value: https://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/latest/exports
  - Key: MSP430_VERSION
    Name: arg
    Value: 8.3.0.16_linux64
  - CmdLine:
    - echo 'Installing TI MSP430 ELF toolchain' >&2 &&         wget -q ${MSP430_URL}/msp430-gcc-${MSP430_VERSION}.tar.bz2
      -O-             | tar -C /opt -xj
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/msp430-gcc-${MSP430_VERSION}/bin
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /tmp/requirements.txt
  - CmdLine:
    - echo 'Installing python3 packages' >&2     && pip3 install --no-cache-dir -r
      /tmp/requirements.txt     && rm /tmp/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -m 777 -p /data/riotbuild
    Name: run
    PrependShell: true
  - CmdLine:
    - git config --system user.name "riot" &&     git config --system user.email "riot@example.com"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - run.sh
    - /run.sh
  - CmdLine:
    - /bin/bash
    - /run.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  - Name: workdir
    Path: /data/riotbuild
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
