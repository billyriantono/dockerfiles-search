{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:bionic",
      "SourceCode": "FROM ubuntu:bionic",
      "Platform": "",
      "From": {
        "Image": "ubuntu:bionic"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Kaspar Schleiser \u003ckaspar@riot-os.org\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "dpkg --add-architecture i386 \u003e\u00262 \u0026\u0026     echo 'Update the package index files to latest available versions' \u003e\u00262 \u0026\u0026     apt-get update     \u0026\u0026 echo 'Installing native toolchain and build system functionality' \u003e\u00262 \u0026\u0026     apt-get -y --no-install-recommends install         automake         bsdmainutils         build-essential         ca-certificates         ccache         cmake         coccinelle         curl         cppcheck         doxygen         gcc-multilib         gdb         g++-multilib         git         graphviz         less         libffi-dev         libpcre3         libtool         m4         parallel         pcregrep         protobuf-compiler         python         python3         python3-dev         python3-pip         python3-setuptools         python3-wheel         p7zip         rsync         ssh-client         subversion         unzip         vera++         vim-common         wget         xsltproc     \u0026\u0026 echo 'Installing MSP430 toolchain' \u003e\u00262 \u0026\u0026     apt-get -y --no-install-recommends install         gcc-msp430         msp430-libc     \u0026\u0026 echo 'Installing AVR toolchain' \u003e\u00262 \u0026\u0026     apt-get -y --no-install-recommends install         gcc-avr         binutils-avr         avr-libc     \u0026\u0026 echo 'Installing LLVM/Clang toolchain' \u003e\u00262 \u0026\u0026     apt-get -y --no-install-recommends install         llvm         clang         clang-tools     \u0026\u0026 echo 'Installing socketCAN' \u003e\u00262 \u0026\u0026     apt-get -y --no-install-recommends install         libsocketcan-dev:i386         libsocketcan2:i386     \u0026\u0026 echo 'Cleaning up installation files' \u003e\u00262 \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'Installing arm-none-eabi toolchain from arm.com' \u003e\u00262 \u0026\u0026     mkdir -p /opt \u0026\u0026     curl -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update' \u0026\u0026     echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2' | md5sum -c \u0026\u0026     tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 \u0026\u0026     rm -f /opt/gcc-arm-none-eabi.tar.bz2 \u0026\u0026     echo 'Removing documentation' \u003e\u00262 \u0026\u0026     rm -rf /opt/gcc-arm-none-eabi-*/share/doc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "MIPS_VERSION",
          "Name": "arg",
          "Value": "2018.09-03"
        },
        {
          "CmdLine": [
            "echo 'Installing mips-mti-elf toolchain from mips.com' \u003e\u00262 \u0026\u0026     mkdir -p /opt \u0026\u0026     curl -L \"https://codescape.mips.com/components/toolchain/${MIPS_VERSION}/Codescape.GNU.Tools.Package.${MIPS_VERSION}.for.MIPS.MTI.Bare.Metal.CentOS-6.x86_64.tar.gz\" -o -         | tar -C /opt -zx \u0026\u0026     echo 'Removing documentation and translations' \u003e\u00262 \u0026\u0026     rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} \u0026\u0026     echo 'Deduplicating binaries' \u0026\u0026     cd /opt/mips-mti-elf/*/mips-mti-elf/bin \u0026\u0026     for f in *; do test -f \"../../bin/mips-mti-elf-$f\" \u0026\u0026 ln -f \"../../bin/mips-mti-elf-$f\" \"$f\"; done \u0026\u0026 cd -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MIPS_ELF_ROOT",
              "Value": "/opt/mips-mti-elf/${MIPS_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:${MIPS_ELF_ROOT}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "RISCV_VERSION",
          "Name": "arg",
          "Value": "8.2.0-2.2-20190521"
        },
        {
          "Key": "RISCV_BUILD",
          "Name": "arg",
          "Value": "0004"
        },
        {
          "CmdLine": [
            "mkdir -p /opt \u0026\u0026         wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v${RISCV_VERSION}/gnu-mcu-eclipse-riscv-none-gcc-${RISCV_VERSION}-${RISCV_BUILD}-centos64.tgz -O-         | tar -C /opt -xz \u0026\u0026     echo 'Removing documentation' \u003e\u00262 \u0026\u0026       rm -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc \u0026\u0026     echo 'Deduplicating binaries' \u003e\u00262 \u0026\u0026     cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin \u0026\u0026       for f in *; do test -f \"../../bin/riscv-none-embed-$f\" \u0026\u0026        ln -f \"../../bin/riscv-none-embed-$f\" \"$f\";       done \u0026\u0026     cd -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/${RISCV_VERSION}-${RISCV_BUILD}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "create_user.c",
            "/tmp/create_user.c"
          ]
        },
        {
          "CmdLine": [
            "gcc -DHOMEDIR=\\\"/data/riotbuild\\\" -DUSERNAME=\\\"riotbuild\\\" /tmp/create_user.c -o /usr/local/bin/create_user     \u0026\u0026 chown root:root /usr/local/bin/create_user     \u0026\u0026 chmod u=rws,g=x,o=- /usr/local/bin/create_user     \u0026\u0026 rm /tmp/create_user.c"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'Installing ESP8266 toolchain' \u003e\u00262 \u0026\u0026     cd /opt \u0026\u0026     git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git esp \u0026\u0026     cd esp \u0026\u0026     git checkout -q df38b06 \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ESP8266_SDK_DIR",
              "Value": "/opt/esp/esp-open-sdk/sdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ESP8266_NEWLIB_DIR",
              "Value": "/opt/esp/newlib-xtensa"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'Installing ESP8266 toolchain' \u003e\u00262 \u0026\u0026     mkdir -p /opt/esp \u0026\u0026     cd /opt/esp \u0026\u0026     git clone https://github.com/gschorcht/xtensa-esp8266-elf \u0026\u0026     cd xtensa-esp8266-elf \u0026\u0026     git checkout -q 696257c2b43e2a107d3108b2c1ca6d5df3fb1a6f \u0026\u0026     rm -rf .git \u0026\u0026     cd /opt/esp \u0026\u0026     git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-RTOS-SDK.git ESP8266_RTOS_SDK \u0026\u0026     cd ESP8266_RTOS_SDK/ \u0026\u0026     git checkout -q c0174eff7278eb5beea66ce1f65b7af57432d2a9 \u0026\u0026     rm -rf .git* docs examples make tools \u0026\u0026     cd components \u0026\u0026     rm -rf app_update aws_iot bootloader cjson coap espos esp-tls freertos            jsmn libsodium log mdns mqtt newlib partition_table pthread            smartconfig_ack spiffs ssl tcpip_adapter vfs \u0026\u0026     find . -name '*.[csS]' -exec rm {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/esp/xtensa-esp8266-elf/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ESP8266_RTOS_SDK_DIR",
              "Value": "/opt/esp/ESP8266_RTOS_SDK"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'Installing ESP32 toolchain' \u003e\u00262 \u0026\u0026     mkdir -p /opt/esp \u0026\u0026     cd /opt/esp \u0026\u0026     git clone https://github.com/espressif/esp-idf.git \u0026\u0026     cd esp-idf \u0026\u0026     git checkout -q f198339ec09e90666150672884535802304d23ec \u0026\u0026     git submodule update --init --recursive \u0026\u0026     rm -rf .git* docs examples make tools \u0026\u0026     rm -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler \u0026\u0026     cd components \u0026\u0026     rm -rf app_trace app_update aws_iot bootloader bt coap console cxx            esp_adc_cal espcoredump esp_http_client esp-tls expat fatfs            freertos idf_test jsmn json libsodium log lwip mbedtls mdns            micro-ecc nghttp openssl partition_table pthread sdmmc spiffs            tcpip_adapter ulp vfs wear_levelling xtensa-debug-module \u0026\u0026     find . -name '*.[csS]' -exec rm {} \\; \u0026\u0026     cd /opt/esp \u0026\u0026     git clone https://github.com/gschorcht/xtensa-esp32-elf.git \u0026\u0026     cd xtensa-esp32-elf \u0026\u0026     git checkout -q ca40fb4c219accf8e7c8eab68f58a7fc14cadbab"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/esp/xtensa-esp32-elf/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "MSP430_URL",
          "Name": "arg",
          "Value": "https://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/latest/exports"
        },
        {
          "Key": "MSP430_VERSION",
          "Name": "arg",
          "Value": "8.3.0.16_linux64"
        },
        {
          "CmdLine": [
            "echo 'Installing TI MSP430 ELF toolchain' \u003e\u00262 \u0026\u0026         wget -q ${MSP430_URL}/msp430-gcc-${MSP430_VERSION}.tar.bz2 -O-             | tar -C /opt -xj"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/msp430-gcc-${MSP430_VERSION}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "/tmp/requirements.txt"
          ]
        },
        {
          "CmdLine": [
            "echo 'Installing python3 packages' \u003e\u00262     \u0026\u0026 pip3 install --no-cache-dir -r /tmp/requirements.txt     \u0026\u0026 rm /tmp/requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -m 777 -p /data/riotbuild"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git config --system user.name \"riot\" \u0026\u0026     git config --system user.email \"riot@example.com\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run.sh",
            "/run.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "/run.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "workdir",
          "Path": "/data/riotbuild"
        }
      ]
    }
  ]
}