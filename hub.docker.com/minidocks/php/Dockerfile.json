{
  "MetaArgs": [
    {
      "Key": "version",
      "DefaultValue": "7.3",
      "ProvidedValue": null,
      "Value": "7.3"
    },
    {
      "Key": "major",
      "DefaultValue": "7",
      "ProvidedValue": null,
      "Value": "7"
    },
    {
      "Key": "composer_version",
      "DefaultValue": "1.8.6",
      "ProvidedValue": null,
      "Value": "1.8.6"
    },
    {
      "Key": "blackfire_version",
      "DefaultValue": "1.25.0",
      "ProvidedValue": null,
      "Value": "1.25.0"
    }
  ],
  "Stages": [
    {
      "Name": "v7.0",
      "BaseName": "minidocks/base:3.5",
      "SourceCode": "FROM minidocks/base:3.5 AS v7.0",
      "Platform": "",
      "As": "v7.0",
      "From": {
        "Image": "minidocks/base:3.5"
      },
      "Commands": null
    },
    {
      "Name": "v7.1",
      "BaseName": "minidocks/base:3.7",
      "SourceCode": "FROM minidocks/base:3.7 AS v7.1",
      "Platform": "",
      "As": "v7.1",
      "From": {
        "Image": "minidocks/base:3.7"
      },
      "Commands": null
    },
    {
      "Name": "v5.6",
      "BaseName": "minidocks/base:3.8",
      "SourceCode": "FROM minidocks/base:3.8 AS v5.6",
      "Platform": "",
      "As": "v5.6",
      "From": {
        "Image": "minidocks/base:3.8"
      },
      "Commands": null
    },
    {
      "Name": "v7.2",
      "BaseName": "minidocks/base:3.9",
      "SourceCode": "FROM minidocks/base:3.9 AS v7.2",
      "Platform": "",
      "As": "v7.2",
      "From": {
        "Image": "minidocks/base:3.9"
      },
      "Commands": null
    },
    {
      "Name": "v7.3",
      "BaseName": "minidocks/base:3.10",
      "SourceCode": "FROM minidocks/base:3.10 AS v7.3",
      "Platform": "",
      "As": "v7.3",
      "From": {
        "Image": "minidocks/base:3.10"
      },
      "Commands": null
    },
    {
      "Name": "base",
      "BaseName": "v$version",
      "SourceCode": "FROM v$version AS base",
      "Platform": "",
      "As": "base",
      "From": {
        "Image": "v$version"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Martin Haso≈à \u003cmartin.hason@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "version",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "major",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "addgroup -g 82 -S www-data \u0026\u0026 adduser -u 82 -S -s /bin/sh -G www-data www-data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for module in ctype curl iconv json openssl pcntl phar posix; do modules=\"$modules php$major-$module\"; done     \u0026\u0026 if [ \"$version\" = \"5.6\" ]; then modules=\"$modules php5-cli\"; fi     \u0026\u0026 if [ \"$version\" != \"5.6\" ]; then modules=\"$modules php7-mbstring\"; fi     \u0026\u0026 if echo \"7.0\" | grep -q \"$version\"; then modules=\"$modules php7-zlib\"; fi     \u0026\u0026 if echo \"5.6 7.0\" | grep -qv \"$version\"; then modules=\"$modules php7-tokenizer\"; fi     \u0026\u0026 if echo \"5.6 7.0 7.1\" | grep -q \"$version\"; then modules=\"$modules php${major}-apcu\"; else modules=\"$modules php7-pecl-apcu\"; fi     \u0026\u0026 apk --update add \"php$major\" $modules \u0026\u0026 clean     \u0026\u0026 if [ ! -f /usr/bin/php ]; then ln -s \"/usr/bin/php$major\" /usr/bin/php; fi     \u0026\u0026 if [ ! -f /usr/bin/phpize ]; then ln -s \"/usr/bin/phpize$major\" /usr/bin/phpize; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://psysh.org/psysh \u0026\u0026 chmod +x psysh \u0026\u0026 mv psysh /usr/bin/psysh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "/etc/php$major"
            },
            {
              "Key": "PHP_ERROR_LOG",
              "Value": "/dev/stderr.pipe"
            },
            {
              "Key": "COMPOSER_ALLOW_SUPERUSER",
              "Value": "1"
            },
            {
              "Key": "COMPOSER_HOME",
              "Value": "/composer"
            },
            {
              "Key": "COMPOSER_CACHE_DIR",
              "Value": "/composer-cache"
            },
            {
              "Key": "COMPOSER_HTACCESS_PROTECT",
              "Value": "0"
            },
            {
              "Key": "COMPOSER_MEMORY_LIMIT",
              "Value": "-1"
            },
            {
              "Key": "CLEAN",
              "Value": "\"$CLEAN:\\$COMPOSER_CACHE_DIR/\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "composer_version",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "mkdir -p /var/www \"$COMPOSER_HOME\" \"$COMPOSER_CACHE_DIR\" \u0026\u0026 chown www-data:www-data /var/www \"$COMPOSER_HOME\" \"$COMPOSER_CACHE_DIR\" \u0026\u0026 chmod a+rwx \"$COMPOSER_HOME\" \"$COMPOSER_CACHE_DIR\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"     \u0026\u0026 php composer-setup.php --install-dir=/usr/bin --filename=composer --version=\"$composer_version\"     \u0026\u0026 php -r \"unlink('composer-setup.php');\"     \u0026\u0026 packages=\"webuni/composer-yaml-plugin webuni/composer-neon-plugin\"     \u0026\u0026 if echo \"5.6 7.0\" | grep -qv \"$version\"; then packages=\"$packages localheinz/composer-normalize\"; fi     \u0026\u0026 su-exec user composer global require $packages     \u0026\u0026 clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs",
            "/"
          ]
        },
        {
          "CmdLine": [
            "psysh",
            "-c",
            "/etc/psysh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    },
    {
      "Name": "latest",
      "BaseName": "base",
      "SourceCode": "FROM base AS latest",
      "Platform": "",
      "As": "latest",
      "From": {
        "Stage": {
          "Named": "base",
          "Index": 5
        }
      },
      "Commands": [
        {
          "Key": "version",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "major",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "for module in         bcmath         calendar         cgi         dom         exif         fpm         ftp         gd         gettext         gmp         ldap         opcache         pdo_mysql         pdo_pgsql         pdo_sqlite         soap         sockets         xml         xmlreader         xmlrpc         xsl         zip     ; do modules=\"$modules php${major}-$module\"; done     \u0026\u0026 if [ \"$version\" = \"5.6\" ]; then modules=\"$modules php5-xdebug@35\"; else modules=\"$modules php7-xdebug php7-mysqlnd php7-session\"; fi     \u0026\u0026 if echo \"5.6 7.0\" | grep -qv \"$version\"; then modules=\"$modules php7-redis php7-fileinfo php7-simplexml php7-xmlwriter\"; fi     \u0026\u0026 if echo \"5.6 7.0 7.1\" | grep -q \"$version\"; then modules=\"$modules php${major}-mcrypt\"; else modules=\"$modules php7-pecl-mcrypt\"; fi     \u0026\u0026 apk --update --force-broken-world add $modules     \u0026\u0026 if [ ! -f /usr/bin/php-fpm ]; then ln -s \"/usr/sbin/php-fpm${major}\" /usr/bin/php-fpm; fi     \u0026\u0026 clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_EXT_XDEBUG",
              "Value": "0"
            },
            {
              "Key": "FPM_PID",
              "Value": "run/php-fpm.pid"
            },
            {
              "Key": "FPM_DAEMONIZE",
              "Value": "no"
            },
            {
              "Key": "FPM_ERROR_LOG",
              "Value": "/dev/stderr.pipe"
            },
            {
              "Key": "FPM_WWW_ACCESS__LOG",
              "Value": "/dev/stdout.pipe"
            },
            {
              "Key": "FPM_WWW_CATCH_WORKERS_OUTPUT",
              "Value": "yes"
            },
            {
              "Key": "FPM_WWW_CLEAR_ENV",
              "Value": "no"
            },
            {
              "Key": "FPM_WWW_GROUP",
              "Value": "www-data"
            },
            {
              "Key": "FPM_WWW_LISTEN",
              "Value": "\"[::]:9000\""
            },
            {
              "Key": "FPM_WWW_USER",
              "Value": "www-data"
            },
            {
              "Key": "FPM_WWW_SLOWLOG",
              "Value": "/dev/stdout.pipe"
            },
            {
              "Key": "PHP_XDEBUG__REMOTE_ENABLE",
              "Value": "1"
            },
            {
              "Key": "PHP_XDEBUG__REMOTE_HOST",
              "Value": "172.17.0.1"
            },
            {
              "Key": "PHP_XDEBUG__REMOTE_PORT",
              "Value": "9000"
            },
            {
              "Key": "PHP_XDEBUG__REMOTE_CONNECT_BACK",
              "Value": "0"
            },
            {
              "Key": "PHP_XDEBUG__IDEKEY",
              "Value": "PHPSTORM"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "blackfire_version",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "wget -O \"/usr/lib/php${major}/modules/blackfire.so\" https://packages.blackfire.io/binaries/blackfire-php/${blackfire_version}/blackfire-php-alpine_amd64-php-${version/./}.so     \u0026\u0026 mkdir /var/run/blackfire     \u0026\u0026 chmod a+x /var/run/blackfire/ \"/usr/lib/php${major}/modules/blackfire.so\"     \u0026\u0026 echo -e \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\" \u003e \"${PHP_INI_DIR}/conf.d/blackfire.ini\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        }
      ]
    },
    {
      "Name": "intl",
      "BaseName": "latest",
      "SourceCode": "FROM latest AS intl",
      "Platform": "",
      "As": "intl",
      "From": {
        "Stage": {
          "Named": "latest",
          "Index": 6
        }
      },
      "Commands": [
        {
          "Key": "major",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "apk --update --force-broken-world add \"php${major}-intl\" \u0026\u0026 clean"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "latest",
      "SourceCode": "FROM latest",
      "Platform": "",
      "From": {
        "Stage": {
          "Named": "latest",
          "Index": 6
        }
      },
      "Commands": null
    }
  ]
}