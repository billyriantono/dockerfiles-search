{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Maintainer": "Sander de Witte",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            },
            {
              "Key": "RUBY_MAJOR",
              "Value": "2.4"
            },
            {
              "Key": "RUBY_VERSION",
              "Value": "2.4.2"
            },
            {
              "Key": "RUBYGEMS_VERSION",
              "Value": "2.7.2"
            },
            {
              "Key": "BUNDLER_VERSION",
              "Value": "1.16.0"
            },
            {
              "Key": "NODE_VERSION",
              "Value": "6.12.0"
            },
            {
              "Key": "GEM_HOME",
              "Value": "/usr/local/gems"
            },
            {
              "Key": "WORK_DIR",
              "Value": "/data/src"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUNDLE_PATH",
              "Value": "\"$GEM_HOME\""
            },
            {
              "Key": "BUNDLE_BIN",
              "Value": "\"$GEM_HOME/bin\""
            },
            {
              "Key": "BUNDLE_APP_CONFIG",
              "Value": "\"$GEM_HOME\""
            },
            {
              "Key": "BUNDLE_SILENCE_ROOT_WARNING",
              "Value": "1"
            },
            {
              "Key": "NPM_CONFIG_LOGLEVEL",
              "Value": "error"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -qq update  \u0026\u0026 apt-get -qq upgrade  \u0026\u0026 essentialTools='apt-utils wget git'  \u0026\u0026 buildTools='build-essential autoconf'  \u0026\u0026 apt-get -qq install -y --no-install-recommends $essentialTools $buildTools"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/etc  \u0026\u0026 { echo 'install: --no-document --no-prerelease'; echo 'update: --no-document --no-prerelease'; } \u003e\u003e /usr/local/etc/gemrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "buildDeps='bison libgdbm-dev libssl-dev libreadline-dev zlib1g-dev ruby'  \u0026\u0026 apt-get -qq install -y --no-install-recommends $buildDeps  \u0026\u0026 rm -rf /var/lib/apt/lists/*  \u0026\u0026 wget -nv -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\"  \u0026\u0026 mkdir -p /usr/src/ruby  \u0026\u0026 tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  \u0026\u0026 rm ruby.tar.xz  \u0026\u0026 cd /usr/src/ruby  \u0026\u0026 { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } \u003e file.c.new  \u0026\u0026 mv file.c.new file.c  \u0026\u0026 autoconf  \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"  \u0026\u0026 ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared  \u0026\u0026 make -j \"$(nproc)\"  \u0026\u0026 make install  \u0026\u0026 make clean  \u0026\u0026 apt-get -qq purge -y --auto-remove $buildDeps  \u0026\u0026 apt-get clean  \u0026\u0026 cd /  \u0026\u0026 rm -r /usr/src/ruby  \u0026\u0026 export LANG=\"C.UTF-8\"  \u0026\u0026 export LC_ALL=\"C.UTF-8\"  \u0026\u0026 gem update --system \"$RUBYGEMS_VERSION\" --no-post-install-message"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$BUNDLE_BIN:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Gemfile",
            "/var/tmp/Gemfile"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\"  \u0026\u0026 chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"  \u0026\u0026 gem install bundler --version \"$BUNDLER_VERSION\"  \u0026\u0026 cd /var/tmp  \u0026\u0026 bundle install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/lib  \u0026\u0026 git clone https://github.com/sass/libsass.git --depth 1  \u0026\u0026 git clone https://github.com/sass/sassc.git --depth 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/lib  \u0026\u0026 export SASS_LIBSASS_PATH=\"/usr/local/lib/libsass\"  \u0026\u0026 make -C libsass  \u0026\u0026 make -C libsass clean  \u0026\u0026 make -C sassc  \u0026\u0026 make -C sassc install  \u0026\u0026 make -C sassc clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /var/tmp  \u0026\u0026 wget -nv -O node.tar.gz \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\"  \u0026\u0026 tar -xzf \"node.tar.gz\" -C /usr/local --strip-components=1  \u0026\u0026 rm \"node.tar.gz\"  \u0026\u0026 cd $(npm root --global)  \u0026\u0026 npm install --global fs-extra  \u0026\u0026 sed -i -e s/graceful-fs/fs-extra/ -e s/fs\\.rename/fs.move/ ./npm/lib/utils/rename.js"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $(npm root --global)  \u0026\u0026 npm install --global minimist  \u0026\u0026 npm install --global caniuse-lite  \u0026\u0026 npm install --global postcss  \u0026\u0026 npm install --global --unsafe-perm node-sass  \u0026\u0026 npm install --global gulp  \u0026\u0026 npm install --global gulp-cli  \u0026\u0026 npm install --global gulp-util  \u0026\u0026 npm install --global gulp-plumber  \u0026\u0026 npm install --global gulp-postcss  \u0026\u0026 npm install --global --unsafe-perm gulp-sass"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "package.json",
            "/usr/local/lib/package.json"
          ]
        },
        {
          "CmdLine": [
            "cd /usr/local/lib  \u0026\u0026 npm install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_PATH",
              "Value": "\"/usr/local/lib/node_modules\""
            },
            {
              "Key": "PATH",
              "Value": "\"$PATH:/usr/local/lib/node_modules\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "$WORK_DIR"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$WORK_DIR"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}