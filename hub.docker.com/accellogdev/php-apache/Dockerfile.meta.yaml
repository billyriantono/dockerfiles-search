MetaArgs: null
Stages:
- As: webservice
  BaseName: php:7.0.33-apache
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"valter@accellog.com"'
    Name: label
  - CmdLine:
    - apt-get update     && apt-get install -y apt-utils     && apt-get install -y
      vim     && apt-get install -y net-tools     && apt-get install -y wget
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y libpq-dev     && docker-php-ext-configure
      pgsql -with-pgsql=/usr/local/pgsql     && docker-php-ext-install pdo pdo_pgsql
      pgsql
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y zlib1g-dev     && docker-php-ext-install
      zip
    Name: run
    PrependShell: true
  - CmdLine:
    - a2enmod rewrite     && a2enmod socache_shmcb     && a2enmod ssl
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -eux; \tapt-get update;     apt-get install -y --no-install-recommends
      \t\tbzip2 \t\tunzip \t\txz-utils \t\tgpg \t\tdirmngr \t\t\t\tca-certificates
      p11-kit \t\t\t\tfontconfig libfreetype6 \t;"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: JAVA_HOME
      Value: /usr/local/openjdk-8
    Name: env
  - Env:
    - Key: PATH
      Value: $JAVA_HOME/bin:$PATH
    Name: env
  - CmdLine:
    - '{ echo ''#/bin/sh''; echo ''echo "$JAVA_HOME"''; } > /usr/local/bin/docker-java-home
      && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)"
      ]'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_VERSION
      Value: 8u222
    Name: env
  - Env:
    - Key: JAVA_BASE_URL
      Value: https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_
    Name: env
  - Env:
    - Key: JAVA_URL_VERSION
      Value: 8u222b10
    Name: env
  - CmdLine:
    - "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\"
      in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*)
      echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget
      -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\";
      \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\"
      --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver
      ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;
      \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;
      \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F
      | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc
      openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\";
      \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components
      1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env
      bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ];
      then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi';
      \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\";
      do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if
      [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error:
      failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract
      --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth
      \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod
      +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk;
      \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u >
      /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac -version; \tjava
      -version"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y git subversion mercurial unzip
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "memory_limit=-1" > "$PHP_INI_DIR/conf.d/memory-limit.ini"
    Name: run
    PrependShell: true
  - Env:
    - Key: COMPOSER_ALLOW_SUPERUSER
      Value: "1"
    Name: env
  - Env:
    - Key: COMPOSER_HOME
      Value: /tmp
    Name: env
  - Env:
    - Key: COMPOSER_VERSION
      Value: 1.8.4
    Name: env
  - CmdLine:
    - curl --silent --fail --location --retry 3 --output /tmp/installer.php --url
      https://raw.githubusercontent.com/composer/getcomposer.org/cb19f2aa3aeaa2006c0cd69a7ef011eb31463067/web/installer  &&
      php -r "     \$signature = '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5';     \$hash
      = hash('sha384', file_get_contents('/tmp/installer.php'));     if (!hash_equals(\$signature,
      \$hash)) {         unlink('/tmp/installer.php');         echo 'Integrity check
      failed, installer is either corrupt or worse.' . PHP_EOL;         exit(1);     }"  &&
      php /tmp/installer.php --no-ansi --install-dir=/usr/bin --filename=composer
      --version=${COMPOSER_VERSION}  && composer --ansi --version --no-interaction
      && rm -f /tmp/installer.php
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/bin     && wget https://dl.eff.org/certbot-auto     && chmod a+x ./certbot-auto     &&
      ./certbot-auto --os-packages-only -n
    Name: run
    PrependShell: true
  - CmdLine:
    - 'apt-get update -y && apt-get install -y   sendmail   libpng-dev   libfreetype6-dev   libjpeg-dev   libxpm-dev   libwebp-dev  #
      php >=7.0 (use libvpx for php <7.0)'
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install mbstring     && docker-php-ext-install gettext
    Name: run
    PrependShell: true
  - CmdLine:
    - 'docker-php-ext-configure gd     --with-freetype-dir=/usr/include/     --with-jpeg-dir=/usr/include/     --with-xpm-dir=/usr/include     --with-webp-dir=/usr/include/
      # php >=7.0 (use libvpx for php <7.0)'
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install gd     && docker-php-ext-install gettext
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 777 -R /var/www
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y         libc-client-dev libkrb5-dev
      &&     rm -r /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-configure imap --with-kerberos --with-imap-ssl &&     docker-php-ext-install
      -j$(nproc) imap
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/www/html
  - Name: workdir
    Path: /var/www/html
  - Name: expose
    Ports:
    - "80"
    - "80"
  - Name: expose
    Ports:
    - "443"
    - "443"
  From:
    Image: php:7.0.33-apache
  Name: webservice
  Platform: ""
  SourceCode: FROM php:7.0.33-apache AS webservice
