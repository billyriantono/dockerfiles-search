{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "-l",
            "-c"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "-l",
            "-c"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Env": [
            {
              "Key": "ENV",
              "Value": "/root/.bashrc"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Europe/Berlin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y apt-utils curl ca-certificates openssl coreutils make gcc g++ grep util-linux     software-properties-common ruby rdoc git curl php php-json php-mbstring openssl php-phar make autoconf nodejs npm libreadline-dev zlib1g-dev \u0026\u0026     gem update --system \u0026\u0026 gem install bundler \u0026\u0026     add-apt-repository ppa:ondrej/php \u0026\u0026     apt update \u0026\u0026     apt install -y php7.1-cli php7.2-cli php7.3-cli \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash \u0026\u0026 \techo \"#NVM Setup\" \u003e\u003e $ENV \u0026\u0026     echo 'export NVM_DIR=\"$HOME/.nvm\"' \u003e\u003e $ENV \u0026\u0026     echo '[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 . \"$NVM_DIR/nvm.sh\"  # This loads nvm' \u003e\u003e $ENV \u0026\u0026     . $HOME/.nvm/nvm.sh \u0026\u0026     . ~/.nvm/nvm.sh; nvm install stable \u0026\u0026     . ~/.nvm/nvm.sh; nvm use stable \u0026\u0026     npm install --global @oclif/config @oclif/plugin-help @oclif/command bundle-outdated-formatter \u0026\u0026     curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \u0026\u0026     echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \u0026\u0026     apt update \u0026\u0026 apt install -y yarn \u0026\u0026     yarn global add yarn-outdated-formatter \u0026\u0026     curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \u0026\u0026     echo \"{}\" \u003e ~/.composer/composer.json \u0026\u0026     rm -rf /var/lib/apt/lists/* \u0026\u0026     curl -sSL https://rvm.io/pkuczynski.asc | gpg --import - \u0026\u0026     curl -sSL https://get.rvm.io | bash -s stable"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/rvm/bin:/opt/rvm/sbin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rvm install ruby-2.6.3 --binary \u0026\u0026     gem install bundler"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt remove -y --purge gcc-7 nano apt-utils python2.7 python3 wget nano gnupg make linux-headers gcc g++ apache2 \u0026\u0026 apt clean \u0026\u0026 apt autoclean \u0026\u0026 apt autoremove -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/gitlab-package-updater/bin:${PATH}\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/gitlab-package-updater"
          ]
        },
        {
          "CmdLine": [
            "cd /gitlab-package-updater \u0026\u0026 bundle install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/gitlab-package-updater/"
        }
      ]
    }
  ]
}