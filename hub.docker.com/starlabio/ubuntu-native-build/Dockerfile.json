{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "starlabio/ubuntu-base:1.5",
      "SourceCode": "FROM starlabio/ubuntu-base:1.5",
      "Platform": "",
      "From": {
        "Image": "starlabio/ubuntu-base:1.5"
      },
      "Commands": [
        {
          "Maintainer": "Doug Goldstein \u003cdoug@starlab.io\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "mkdir -p /root/.cargo/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"[target.aarch64-unknown-linux-gnu]\\r\\nlinker = \\\"aarch64-linux-gnu-gcc\\\"\" \u003e\u003e /root/.cargo/config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"[target.arm-unknown-linux-gnueabihf]\\r\\nlinker = \\\"arm-linux-gnueabihf-gcc\\\"\" \u003e\u003e /root/.cargo/config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl https://sh.rustup.rs -sSf \u003e rustup-install.sh \u0026\u0026     sh ./rustup-install.sh -y --default-toolchain 1.37.0-x86_64-unknown-linux-gnu \u0026\u0026     rm rustup-install.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/root/.cargo/bin/rustup target add aarch64-unknown-linux-gnu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/root/.cargo/bin/rustup target add arm-unknown-linux-gnueabihf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rustup component add rustfmt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg --add-architecture arm64 \u0026\u0026 dpkg --add-architecture armhf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -e 's:deb h:deb [arch=amd64] h:' -e 's:deb-src h:deb-src [arch=amd64] h:' -i /etc/apt/sources.list \u0026\u0026         find /etc/apt/sources.list.d/ -type f -exec sed -e 's:deb h:deb [arch=amd64] h:' -e 's:deb-src h:deb-src [arch=amd64] h:' -i {} \\; \u0026\u0026         sed -e 's:arch=amd64:arch=armhf,arm64:' -e 's:security:ports:' -e 's://.*archive://ports:' -e 's:/ubuntu::' /etc/apt/sources.list | grep 'ubuntu.com' | grep -v '\\-ports' | tee /etc/apt/sources.list.d/arm.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "DEBIAN_FRONTEND=noninteractive apt-get update \u0026\u0026     DEBIAN_FRONTEND=noninteractive apt-get upgrade -y \u0026\u0026     DEBIAN_FRONTEND=noninteractive apt-get -y install         acpica-tools         autoconf-archive         bc         bcc         bin86         checkpolicy         clang         clang-format         cmake         dos2unix         gawk         gcc-aarch64-linux-gnu         gcc-arm-linux-gnueabihf         gettext         gnu-efi         lcov         libaio-dev         libbsd-dev         libbz2-dev         libcmocka-dev         libkeyutils-dev         libkeyutils-dev:arm64         libkeyutils-dev:armhf         libkeyutils1:arm64         libkeyutils1:armhf         liblzma-dev         libncurses-dev         libnl-3-dev         libnl-cli-3-dev         libnl-utils         libpci-dev         libssl-dev:arm64         libssl-dev:armhf         libtool         libtspi-dev         libyajl-dev         linux-headers-generic         m4         ncurses-dev         rpm         software-properties-common         texinfo         u-boot-tools         uuid-dev         vim-common \u0026\u0026         apt-get autoremove -y \u0026\u0026         apt-get clean \u0026\u0026         rm -rf /var/lib/apt/lists* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install behave pyhamcrest requests"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSfL https://github.com/01org/tpm2-tss/releases/download/1.2.0/tpm2-tss-1.2.0.tar.gz \u003e tpm2-tss-1.2.0.tar.gz \u0026\u0026     tar -zxf tpm2-tss-1.2.0.tar.gz \u0026\u0026     cd tpm2-tss-1.2.0 \u0026\u0026     EXTRA_CFLAGS=\"-Wno-error=int-in-bool-context\" ./configure --prefix=/usr \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -rf tpm2-tss-1.2.0 \u0026\u0026     ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "-c"
          ]
        },
        {
          "Key": "SHELLCHECK_VER",
          "Name": "arg",
          "Value": "v0.7.0"
        },
        {
          "CmdLine": [
            "wget -nv https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VER}.linux.x86_64.tar.xz \u0026\u0026     tar xf shellcheck-${SHELLCHECK_VER}.linux.x86_64.tar.xz \u0026\u0026     install shellcheck-${SHELLCHECK_VER}/shellcheck /usr/local/bin \u0026\u0026     rm shellcheck-${SHELLCHECK_VER}.linux.x86_64.tar.xz \u0026\u0026     rm -r shellcheck-${SHELLCHECK_VER}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "CPPCHECK_VER",
          "Name": "arg",
          "Value": "1.89"
        },
        {
          "CmdLine": [
            "wget -nv https://github.com/danmar/cppcheck/archive/${CPPCHECK_VER}.tar.gz \u0026\u0026     tar xf ${CPPCHECK_VER}.tar.gz \u0026\u0026     pushd cppcheck-${CPPCHECK_VER} \u0026\u0026     cmake . \u0026\u0026     make -j $(nproc) \u0026\u0026     make install \u0026\u0026     popd \u0026\u0026     rm -r cppcheck-${CPPCHECK_VER} \u0026\u0026     rm ${CPPCHECK_VER}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}