{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:5.6-fpm-alpine",
      "SourceCode": "FROM php:5.6-fpm-alpine",
      "Platform": "",
      "From": {
        "Image": "php:5.6-fpm-alpine"
      },
      "Commands": [
        {
          "Maintainer": "Kirill Garbar \u003ckirill@iterium.co.uk\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "TIMEZONE",
              "Value": "Europe/London"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHPIZE_DEPS",
              "Value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpcre-dev \t\tpkgconf \t\tre2c"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "php/php.ini",
            "/usr/local/etc/php/"
          ]
        },
        {
          "CmdLine": [
            "sed -i -e 's/v3\\.4/v3\\.5/g' /etc/apk/repositories     \u0026\u0026 apk --update upgrade     \u0026\u0026 apk add --no-cache --virtual .persistent-deps   \t\tca-certificates   \t\tcurl   \t\ttar   \t\txz   \t\topenssl       openssl-dev       tzdata       runit       git       nginx       libmemcached-dev       cyrus-sasl-dev       libpng-dev     \u0026\u0026 apk add --no-cache --virtual .build-deps $PHPIZE_DEPS     \u0026\u0026 mkdir /app     \u0026\u0026 curl -L -o /tmp/mongo.tar.gz https://pecl.php.net/get/mongo-1.6.16.tgz     \u0026\u0026 tar xfz /tmp/mongo.tar.gz -C /tmp/     \u0026\u0026 mkdir -p /usr/src/php/ext/mongo     \u0026\u0026 mv /tmp/mongo-1.6.16/* /usr/src/php/ext/mongo     \u0026\u0026 rm -r /tmp/mongo*     \u0026\u0026 cd /usr/src/php/ext/mongo     \u0026\u0026 phpize     \u0026\u0026 ./configure     \u0026\u0026 make all     \u0026\u0026 docker-php-ext-install mongo \t\t\u0026\u0026 curl -L -o /tmp/mongodb.tar.gz https://pecl.php.net/get/mongodb-1.3.2.tgz \t\t\u0026\u0026 tar xfz /tmp/mongodb.tar.gz -C /tmp/ \t\t\u0026\u0026 mkdir -p /usr/src/php/ext/mongodb \t\t\u0026\u0026 mv /tmp/mongodb-1.3.2/* /usr/src/php/ext/mongodb \t\t\u0026\u0026 rm -r /tmp/mongodb* \t\t\u0026\u0026 cd /usr/src/php/ext/mongodb \t\t\u0026\u0026 phpize \t\t\u0026\u0026 ./configure \t\t\u0026\u0026 make all \t\t\u0026\u0026 docker-php-ext-install mongodb     \u0026\u0026 curl -L -o /tmp/memcached.tar.gz https://pecl.php.net/get/memcached-2.2.0.tgz     \u0026\u0026 tar xfz /tmp/memcached.tar.gz -C /tmp/     \u0026\u0026 mkdir -p /usr/src/php/ext/memcached     \u0026\u0026 mv /tmp/memcached-2.2.0/* /usr/src/php/ext/memcached     \u0026\u0026 rm -r /tmp/memcached*     \u0026\u0026 cd /usr/src/php/ext/memcached     \u0026\u0026 phpize     \u0026\u0026 ./configure     \u0026\u0026 make all     \u0026\u0026 docker-php-ext-install memcached gd     \u0026\u0026 docker-php-source delete     \u0026\u0026 apk del .build-deps     \u0026\u0026 cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime     \u0026\u0026 echo \"${TIMEZONE}\" \u003e /etc/timezone     \u0026\u0026 rm -rf /var/cache/apk/*     \u0026\u0026 rm /usr/local/etc/php-fpm.d/*     \u0026\u0026 {       echo '[global]';       echo 'daemonize = no';       echo;       echo '[www]';       echo 'user = nginx';       echo 'group = nginx';       echo '';       echo 'listen = /var/run/php5-fpm.sock';       echo 'listen.mode = 0666';       echo '';       echo 'pm = dynamic';       echo 'pm.max_children = 5';       echo 'pm.start_servers = 2';       echo 'pm.min_spare_servers = 1';       echo 'pm.max_spare_servers = 3';       echo 'pm.max_requests = 500';       echo '';       echo 'chdir = /app';       echo '';       echo '; Ensure worker stdout and stderr are sent to the main error log.';       echo 'catch_workers_output = yes';       echo '';       echo 'clear_env = no';     } | tee /usr/local/etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;daemonize = yes/daemonize = no/g' /usr/local/etc/php-fpm.conf     \u0026\u0026 sed -i 's/;error_log = log\\/php5\\/error.log/error_log = \\/proc\\/self\\/fd\\/2/g' /usr/local/etc/php-fpm.conf     \u0026\u0026 sed -i -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" /usr/local/etc/php/php.ini     \u0026\u0026 sed -i 's/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/g' /usr/local/etc/php/php.ini     \u0026\u0026 mkdir -p /etc/service/nginx     \u0026\u0026 {       echo '#!/bin/sh';       echo 'exec 2\u003e\u00261';       echo 'source /env';       echo 'mkdir -p /run/nginx';       echo 'exec /usr/sbin/nginx -c /etc/nginx/nginx.conf  -g \"daemon off;\"';     } | tee /etc/service/nginx/run     \u0026\u0026 chmod +x /etc/service/nginx/run     \u0026\u0026 mkdir /etc/service/php5-fpm     \u0026\u0026 {       echo '#!/bin/sh';       echo 'exec 2\u003e\u00261';       echo 'source /env';       echo 'mkdir -p /run/php';       echo 'exec /usr/local/sbin/php-fpm --nodaemonize';     } | tee /etc/service/php5-fpm/run     \u0026\u0026 chmod +x /etc/service/php5-fpm/run     \u0026\u0026 mkdir -p /var/log/nginx     \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log     \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "nginx/default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "runit/runit-wrapper",
            "/sbin/"
          ]
        },
        {
          "Expression": "ARG GITHUB_OAUTH_TOKEN",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN php -r \"readfile('https://getcomposer.org/installer');\" | php -- --install-dir=/usr/local/bin --filename=composer     \u0026\u0026 composer config -g github-oauth.github.com $GITHUB_OAUTH_TOKEN     \u0026\u0026 composer global require hirak/prestissimo --no-progress --profile --no-suggest --no-interaction",
          "Name": "onbuild"
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/sbin/runit-wrapper"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}