MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - CmdLine:
    - apt-get update -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install wget -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install git -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install gcc -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install make -y
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - /usr/bin/wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      -O miniconda.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash miniconda.sh -b -p /miniconda
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /miniconda/bin:$PATH
    Name: env
  - CmdLine:
    - conda config --set always_yes yes --set changeps1 no
    Name: run
    PrependShell: true
  - CmdLine:
    - conda update -q conda
    Name: run
    PrependShell: true
  - CmdLine:
    - conda config --append channels conda-forge
    Name: run
    PrependShell: true
  - CmdLine:
    - conda info -a
    Name: run
    PrependShell: true
  - CmdLine:
    - conda create -q -n app-env python=3.7
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /miniconda/envs/app-env/bin:$PATH
    Name: env
  - Env:
    - Key: CONDA_DEFAULT_ENV
      Value: app-env
    Name: env
  - CmdLine:
    - git clone --single-branch --branch equiv_atoms https://github.com/duartegroup/autodE.git
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install --file autodE/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - cd autodE && python setup.py install && cd ..
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone --single-branch --branch fast_ba https://github.com/duartegroup/cgbind.git
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install --file cgbind/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - cd cgbind && python setup.py install && cd ..
    Name: run
    PrependShell: true
  - Env:
    - Key: CELERY_BROKER_URL
      Value: '''redis://redis:6379/0'''
    Name: env
  - Env:
    - Key: CELERY_RESULT_BACKEND
      Value: '''redis://redis:6379/0'''
    Name: env
  - Env:
    - Key: POSTGRES_URL
      Value: '"db:5432"'
    Name: env
  - Env:
    - Key: POSTGRES_USER
      Value: '"postgres"'
    Name: env
  - Env:
    - Key: POSTGRES_PW
      Value: '"dbpw"'
    Name: env
  - Env:
    - Key: POSTGRES_DB
      Value: '"cages"'
    Name: env
  - Env:
    - Key: FLASK_APP
      Value: '"server"'
    Name: env
  - Env:
    - Key: DATA_PATH
      Value: '"/data"'
    Name: env
  - CmdLine:
    - mkdir $DATA_PATH
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install gunicorn
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install redis
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir  /app
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /app
  - Name: workdir
    Path: /app
  - CmdLine:
    - conda install --file requirements.txt
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - app/xtb-191025.tar.xz
    - /app
  - CmdLine:
    - mkdir /xtb && tar xf xtb-191025.tar.xz -C /xtb
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /xtb/bin:$PATH
    Name: env
  - CmdLine:
    - chmod -R 555 /miniconda/envs/app-env/bin/
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r appuser && useradd -r -g appuser appuser
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /app
  - CmdLine:
    - cd app
    Name: run
    PrependShell: true
  - CmdLine:
    - gunicorn -b 0.0.0.0:8000 --access-logfile - "app.server:create_app()"
    Name: cmd
    PrependShell: true
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
