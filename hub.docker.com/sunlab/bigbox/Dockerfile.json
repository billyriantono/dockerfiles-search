{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:7",
      "SourceCode": "FROM centos:7",
      "Platform": "",
      "From": {
        "Image": "centos:7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "http://www.apache.org/dist/bigtop/stable/repos/centos7/bigtop.repo",
            "/etc/yum.repos.d/bigtop.repo"
          ]
        },
        {
          "CmdLine": [
            "sed 's@releases/1.3.0/centos@releases/1.2.0/centos@g' -i /etc/yum.repos.d/bigtop.repo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install epel-release -y \u0026\u0026     yum update -y \u0026\u0026     yum makecache \u0026\u0026     yum install openssh* wget axel bzip2 unzip gzip git gcc-c++ lsof       java-1.8.0-openjdk java-1.8.0-openjdk-devel       mariadb mysql-connector-java       sudo hostname -y \u0026\u0026     yum clean all \u0026\u0026     rm -rf /var/cache/yum"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done);     rm -f /lib/systemd/system/multi-user.target.wants/*;    rm -f /etc/systemd/system/*.wants/*;    rm -f /lib/systemd/system/local-fs.target.wants/*;     rm -f /lib/systemd/system/sockets.target.wants/*udev*;     rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm -f /lib/systemd/system/basic.target.wants/*;    rm -f /lib/systemd/system/anaconda.target.wants/*;    mv -f /bin/systemctl{,.orig} ;     ln -sf /bin/{false,systemctl}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ssh-keygen -A ;     mkdir -p /var/run/sshd ;     sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd ;     sed 's@#UseDNS yes@UseDNS no@g' -i /etc/ssh/sshd_config # prevent stucks here \u003e\u003e SSH2_MSG_SERVICE_ACCEPT received"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "config/ssh",
            "/root/.ssh"
          ]
        },
        {
          "CmdLine": [
            "chown -R root:root /root/.ssh ;     chmod 0700 /root/.ssh ;     chmod 0600 /root/.ssh/{id_rsa,id_rsa.pub,authorized_keys}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install zookeeper-server hadoop-yarn-proxyserver     hadoop-hdfs-namenode hadoop-hdfs-datanode     hadoop-yarn-resourcemanager hadoop-mapreduce-historyserver     hadoop-yarn-nodemanager     spark-worker spark-master     hbase-regionserver hbase-master hbase-thrift     hive-metastore pig -y \u0026\u0026     yum clean all \u0026\u0026     rm -rf /var/cache/yum"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"export JAVA_HOME=/usr/lib/jvm/java\" \u003e\u003e /etc/profile.d/bigbox.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SCALA_VERSION",
              "Value": "2.11.8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "yum -y localinstall https://downloads.lightbend.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.rpm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SBT_VERSION",
              "Value": "1.1.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget --progress=dot:mega https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz ;     tar -xzf sbt-${SBT_VERSION}.tgz ;     rm -rf sbt-${SBT_VERSION}.tgz ;     mv sbt /usr/lib/ ;     ln -sf /usr/lib/sbt/bin/sbt /usr/bin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://bitbucket.org/realsunlab/bigdata-bootcamp.git /bigdata-bootcamp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/sunlabga/bigbox-scripts.git /scripts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts",
            "/scripts/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/hadoop",
            "/etc/hadoop/conf/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/hbase",
            "/etc/hbase/conf/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/hive",
            "/etc/hive/conf/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/spark",
            "/etc/spark/conf/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/zookeeper",
            "/etc/zookeeper/conf/"
          ]
        },
        {
          "CmdLine": [
            "/scripts/init.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --progress=dot:mega https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh \u0026\u0026       chmod +x miniconda.sh \u0026\u0026 ./miniconda.sh -b -p /usr/local/conda3 \u0026\u0026       rm -f miniconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/conda3/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'export PATH=/usr/local/conda3/bin:$PATH' \u003e\u003e /etc/profile.d/bigbox.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --yes numpy ipython"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir asciinema"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "v0.18.0"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini",
            "/tini"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}