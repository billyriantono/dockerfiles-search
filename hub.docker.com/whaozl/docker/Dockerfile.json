{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "whaozl \u003cwhaozl@126.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y      git      libopenblas-dev      libopencv-dev      python-dev      python-numpy      python-setuptools      python3-dev      python3-numpy      python3-setuptools      wget      vim      openssh-server      openmpi-bin      lrzsz      rar unrar zip unzip p7zip-full p7zip-rar p7zip   \u0026\u0026 apt-get clean   \u0026\u0026 echo \"set fileencodings=utf-8,gb2312,gbk,gb18030     \\nset termencoding=utf-8     \\nset encoding=prc     \\nset number\"     \u003e\u003e /etc/vim/vimrc   \u0026\u0026 cd /etc/ssh   \u0026\u0026 sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/g' sshd_config   \u0026\u0026 sed -i 's/#PasswordAuthentication/PasswordAuthentication/g' sshd_config   \u0026\u0026 sed -i 's/RhostsRSAAuthentication no/RhostsRSAAuthentication yes/g' sshd_config   \u0026\u0026 sed -i 's/HostbasedAuthentication no/HostbasedAuthentication yes/g' sshd_config   \u0026\u0026 sed -i 's/PermitEmptyPasswords no/PermitEmptyPasswords yes/g' sshd_config   \u0026\u0026 sed -i 's/#KerberosAuthentication no/KerberosAuthentication yes/g' sshd_config   \u0026\u0026 sed -i 's/#KerberosOrLocalPasswd/KerberosOrLocalPasswd/g' sshd_config   \u0026\u0026 sed -i 's/#KerberosTicketCleanup/KerberosTicketCleanup/g' sshd_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate   \u0026\u0026 python2 get-pip.py \u0026\u0026 python3 get-pip.py   \u0026\u0026 ln -s /usr/local/bin/pip2  /usr/bin/pip2 \u0026\u0026 ln -s /usr/local/bin/pip3  /usr/bin/pip3   \u0026\u0026 ln -s /usr/bin/python3 /usr/bin/p   \u0026\u0026 rm get-pip.py   \u0026\u0026 pip2 --no-cache-dir install wheel pillow nose scipy matplotlib opencv_python protobuf      scikit-learn scikit-image pyyaml h5py pandas SimpleITK regex jieba openpyxl xlsxwriter xlrd tqdm asq      tensorflow-gpu keras    \u0026\u0026 pip3 --no-cache-dir install wheel pillow nose scipy matplotlib opencv_python protobuf      scikit-learn scikit-image pyyaml h5py pandas SimpleITK regex jieba openpyxl xlsxwriter xlrd tqdm asq JPype1 pyhanlp      jupyter jupyterlab      tensorflow-gpu keras torch torchvision mxnet-cu90   \u0026\u0026 jupyter serverextension enable --py jupyterlab --sys-prefix   \u0026\u0026 jupyter notebook --generate-config --allow-root   \u0026\u0026 echo \"c.NotebookApp.ip='*'\\n     c.NotebookApp.password=u'sha1:7de7ea9c4921:c5633014d406ce2f7cfa9a80b2be1c280fd9f42f'\\n     c.NotebookApp.open_browser=False\\n     c.NotebookApp.port=8888\"      \u003e /root/.jupyter/jupyter_notebook_config.py   \u0026\u0026 mkdir /root/.keras   \u0026\u0026 echo '{\\n      \\n\"image_dim_ordering\": \"tf\",      \\n\"epsilon\": 1e-07,      \\n\"floatx\": \"float32\",      \\n\"backend\": \"tensorflow\"      \\n}'      \u003e /root/.keras/keras.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        }
      ]
    }
  ]
}