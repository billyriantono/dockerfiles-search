{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "openjdk:8u191-jdk-alpine3.8",
      "SourceCode": "FROM openjdk:8u191-jdk-alpine3.8",
      "Platform": "",
      "From": {
        "Image": "openjdk:8u191-jdk-alpine3.8"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Mark \u003cmark.binlab@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "AGENT_VER",
          "Name": "arg",
          "Value": "3.29"
        },
        {
          "Key": "DOCKER_VER",
          "Name": "arg",
          "Value": "18.09.1"
        },
        {
          "Key": "AWSCLI_VER",
          "Name": "arg",
          "Value": "1.16.197"
        },
        {
          "Key": "KUBECTL_VER",
          "Name": "arg",
          "Value": "1.15.0"
        },
        {
          "Key": "HELM_VER",
          "Name": "arg",
          "Value": "2.14.1"
        },
        {
          "Key": "USER",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "GROUP",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "UID",
          "Name": "arg",
          "Value": "1024"
        },
        {
          "Key": "GID",
          "Name": "arg",
          "Value": "1024"
        },
        {
          "Key": "DOCKER_GROUP",
          "Name": "arg",
          "Value": "docker"
        },
        {
          "Key": "DOCKER_GID",
          "Name": "arg",
          "Value": "994"
        },
        {
          "Key": "AGENT_WORKDIR",
          "Name": "arg",
          "Value": "/home/${USER}/agent"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/${USER}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "AGENT_WORKDIR",
              "Value": "${AGENT_WORKDIR}"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins-agent",
            "/usr/local/bin/jenkins-agent"
          ]
        },
        {
          "CmdLine": [
            "addgroup -g ${GID} ${GROUP}     \u0026\u0026 adduser -D -h ${HOME} -g \"${USER} service\"          -u ${UID} -G ${GROUP} ${USER}     \u0026\u0026 set -x     \u0026\u0026 apk add --update --no-cache          curl          bash          git          openssh-client          openssl          procps          shadow     \u0026\u0026 printf \"\\n### Installing Jenkins agent v${AGENT_VER} ###\\n\\n\"     \u0026\u0026 curl --create-dirs          -sSLo /usr/share/jenkins/slave.jar          https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${AGENT_VER}/remoting-${AGENT_VER}.jar     \u0026\u0026 chmod 755 /usr/share/jenkins     \u0026\u0026 chmod 644 /usr/share/jenkins/slave.jar     \u0026\u0026 mkdir ${HOME}/.jenkins     \u0026\u0026 mkdir -p ${AGENT_WORKDIR}     \u0026\u0026 chown -R ${USER}:${GROUP} ${HOME}     \u0026\u0026 chmod +x /usr/local/bin/jenkins-agent     \u0026\u0026 printf \"\\n### Installing AWS CLI v${AWSCLI_VER} ###\\n\\n\"     \u0026\u0026 apk add --update --no-cache          python          py-pip     \u0026\u0026 pip install awscli==${AWSCLI_VER}     \u0026\u0026 printf \"\\n### Installing Docker CLI v${DOCKER_VER} ###\\n\\n\"     \u0026\u0026 curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VER}.tgz          | tar xzv              --strip 1              -C /usr/local/bin              docker/docker     \u0026\u0026 chmod +x /usr/local/bin/docker     \u0026\u0026 addgroup -S -g ${DOCKER_GID} ${DOCKER_GROUP}     \u0026\u0026 usermod -a -G ${DOCKER_GROUP} ${USER}     \u0026\u0026 printf \"\\n### Installing Kubectl v${KUBECTL_VER} ###\\n\\n\"     \u0026\u0026 curl -sSL https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VER}/bin/linux/amd64/kubectl          -o /usr/local/bin/kubectl     \u0026\u0026 chmod +x /usr/local/bin/kubectl     \u0026\u0026 printf \"\\n### Installing Helm v${HELM_VER} ###\\n\\n\"     \u0026\u0026 curl -fsSL https://get.helm.sh/helm-v${HELM_VER}-linux-amd64.tar.gz          | tar xzv              --strip 1              -C /usr/local/bin              linux-amd64/helm     \u0026\u0026 chmod +x /usr/local/bin/helm     \u0026\u0026 printf \"\\n### Cleaning up ###\\n\\n\"     \u0026\u0026 apk del --purge -v          shadow          py-pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "${HOME}/.jenkins"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${AGENT_WORKDIR}"
          ]
        },
        {
          "Name": "workdir",
          "Path": "${HOME}"
        },
        {
          "Name": "user",
          "User": "${USER}"
        },
        {
          "CmdLine": [
            "printf \"\\n### Testing versions, permissions and dependencies of binaries ###\\n\\n\"       \u0026\u0026 aws --version       \u0026\u0026 echo \"Docker CLI: $(docker --version)\"       \u0026\u0026 echo \"Kubectl: $(kubectl version --client --short)\"       \u0026\u0026 echo \"Helm: $(helm version --client --short)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jenkins-agent"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}