{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "builder",
      "BaseName": "maven:3-jdk-8",
      "SourceCode": "FROM maven:3-jdk-8 as builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "maven:3-jdk-8"
      },
      "Commands": [
        {
          "CmdLine": [
            "rm /dev/random \u0026\u0026 ln -s /dev/urandom /dev/random     \u0026\u0026 apt-get update -qq \u0026\u0026 apt-get install -qqy         unzip         git     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 echo '{ \"allow_root\": true }' \u003e /root/.bowerrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/tmp/winery"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/tmp/winery"
        },
        {
          "CmdLine": [
            "mvn package -DskipTests"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "tomcat:8.5.31",
      "SourceCode": "FROM tomcat:8.5.31",
      "Platform": "",
      "From": {
        "Image": "tomcat:8.5.31"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "= \"Oliver Kopp \u003ckopp.dev@gmail.com\u003e, Michael Wurster \u003cmiwurster@gmail.com\u003e, Lukas Harzenetter \u003clharzenetter@gmx.de\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "DOCKERIZE_VERSION",
          "Name": "arg",
          "Value": "v0.3.0"
        },
        {
          "Env": [
            {
              "Key": "WINERY_REPOSITORY_URL",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WINERY_HEAP_MAX",
              "Value": "2048m"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WINERY_JMX_ENABLED",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONTAINER_HOSTNAME",
              "Value": "localhost"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONTAINER_PORT",
              "Value": "1337"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WORKFLOWMODELER_HOSTNAME",
              "Value": "localhost"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WORKFLOWMODELER_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TOPOLOGYMODELER_HOSTNAME",
              "Value": "localhost"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TOPOLOGYMODELER_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WINERY_REPOSITORY_PATH",
              "Value": "\"/var/opentosca/repository\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WINERY_HOSTNAME",
              "Value": "localhost"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WINERY_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rm /dev/random \u0026\u0026 ln -s /dev/urandom /dev/random     \u0026\u0026 curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash     \u0026\u0026 apt-get update -qq \u0026\u0026 apt-get install -qqy         git         git-lfs     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 rm -rf ${CATALINA_HOME}/webapps/*     \u0026\u0026 sed -ie \"s/securerandom.source=file:\\/dev\\/random/securerandom.source=file:\\/dev\\/.\\/urandom/g\" /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security     \u0026\u0026 wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     \u0026\u0026 tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     \u0026\u0026 rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/winery/org.eclipse.winery.repository.rest/target/winery.war",
            "${CATALINA_HOME}/webapps/winery.war"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/winery/org.eclipse.winery.frontends/target/tosca-management.war",
            "${CATALINA_HOME}/webapps/ROOT.war"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/winery/org.eclipse.winery.frontends/target/topologymodeler.war",
            "${CATALINA_HOME}/webapps/winery-topologymodeler.war"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/winery/org.eclipse.winery.frontends/target/workflowmodeler.war",
            "${CATALINA_HOME}/webapps/winery-workflowmodeler.war"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "docker/winery.yml.tpl",
            "/root/.winery/winery.yml.tpl"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "CmdLine": [
            "dockerize -template /root/.winery/winery.yml.tpl:/root/.winery/winery.yml     \u0026\u0026 if [ -d \"${WINERY_REPOSITORY_PATH}\" ] \u0026\u0026 [ \"$(ls -A ${WINERY_REPOSITORY_PATH})\" ]; then echo \"Repository at ${WINERY_REPOSITORY_PATH} is already initialized!\"; else if [ ! \"x${WINERY_REPOSITORY_URL}\" = \"x\" ]; then git clone ${WINERY_REPOSITORY_URL} ${WINERY_REPOSITORY_PATH}; else git init $WINERY_REPOSITORY_PATH; fi fi     \u0026\u0026 cd ${WINERY_REPOSITORY_PATH}     \u0026\u0026 git config --global core.fscache true     \u0026\u0026 git lfs install     \u0026\u0026 echo 'export CATALINA_OPTS=\"-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx${WINERY_HEAP_MAX} -XX:MaxPermSize=256m\"' \u003e ${CATALINA_HOME}/bin/setenv.sh     \u0026\u0026 if [ ! \"x${WINERY_JMX_ENABLED}\" = \"x\" ]; then echo 'export CATALINA_OPTS=\"${CATALINA_OPTS} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9010 -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote.ssl=false\"' \u003e\u003e ${CATALINA_HOME}/bin/setenv.sh; fi     \u0026\u0026 chmod a+x ${CATALINA_HOME}/bin/setenv.sh     \u0026\u0026 ${CATALINA_HOME}/bin/catalina.sh run"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}