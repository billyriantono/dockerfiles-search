{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PREFIX",
              "Value": "/usr/local"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 locale-gen en_US en_US.UTF-8  \u0026\u0026 dpkg-reconfigure locales  \u0026\u0026 update-locale LANG=en_US.UTF-8  \u0026\u0026 sed 's:archive.ubuntu.com/ubuntu/:mirrors.rit.edu/ubuntu-archive/:' -i /etc/apt/sources.list  \u0026\u0026 echo 'Apt::Install-Recommends \"false\";' \u003e /etc/apt/apt.conf.d/docker-no-recommends  \u0026\u0026 echo 'APT::Get::Assume-Yes \"true\";' \u003e /etc/apt/apt.conf.d/docker-assume-yes  \u0026\u0026 echo 'APT::Get::AutomaticRemove \"true\";' \u003e /etc/apt/apt.conf.d/docker-auto-remove  \u0026\u0026 sed 's/^#\\s*deb/deb/' -i /etc/apt/sources.list  \u0026\u0026 echo 'Package: *'                        \u003e\u003e /etc/apt/preferences  \u0026\u0026 echo 'Pin: release a=xenial-backports'   \u003e\u003e /etc/apt/preferences  \u0026\u0026 echo 'Pin-Priority: 500'                 \u003e\u003e /etc/apt/preferences  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install       software-properties-common       apt-transport-https  \u0026\u0026 add-apt-repository ppa:git-core/ppa  \u0026\u0026 add-apt-repository ppa:tmate.io/archive  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get upgrade  \u0026\u0026 apt-get install       aptitude       bash       coreutils       git       gnupg       gzip       iputils-ping       ack-grep       ca-certificates       build-essential       bzr       curl       exuberant-ctags       file       git       htop       less       man-db       manpages       mercurial       mosh       net-tools       psmisc       ssh-client       subversion       rsync       wget       locate       direnv       tmate       python-pygments       dnsutils       zlib1g-dev       libssl-dev       libreadline-dev       libyaml-dev       libsqlite3-dev       sqlite3       libxml2-dev       libxslt1-dev       libcurl4-openssl-dev       libffi-dev       libacl1       libc6       libgpm2       libncurses5-dev       libselinux1       libssl-dev       libtcl8.6       libtinfo5       python-dev       automake       libevent-dev       pkg-config  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver 'hkp://p80.pool.sks-keyservers.net:80'                 --recv-keys '58118E89F3A912897C070ADBF76221572C52609D'  \u0026\u0026 echo 'deb https://apt.dockerproject.org/repo ubuntu-wily main' \u003e /etc/apt/sources.list.d/docker.list  \u0026\u0026 apt-get update  \u0026\u0026 apt-get install       openssh-server       linux-image-extra-virtual-lts-xenial       docker-engine  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "CmdLine": [
            "apt-get install       openssh-server  \u0026\u0026 rm -f /etc/ssh/ssh_host_*  \u0026\u0026 mkdir -pv /var/run/sshd /root/.ssh  \u0026\u0026 chmod 0700 /root/.ssh  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 version='1.7.0'  \u0026\u0026 curl -L -o /tmp/docker-compose \"https://github.com/docker/compose/releases/download/${version}/docker-compose-$(uname -s)-$(uname -m)\"  \u0026\u0026 install -v /tmp/docker-compose \"$PREFIX/bin/docker-compose-${version}\"  \u0026\u0026 rm -vrf /tmp/*  \u0026\u0026 ln -s \"$PREFIX/bin/docker-compose-${version}\" \"$PREFIX/bin/docker-compose\"  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 version='7.4.1752'  \u0026\u0026 git clone -b \"v${version}\" https://github.com/vim/vim.git /opt/vim  \u0026\u0026 cd /opt/vim  \u0026\u0026 ./configure --with-features=huge --with-compiledby='dockerdev'  \u0026\u0026 make  \u0026\u0026 make install  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 version='2.2'  \u0026\u0026 git clone -b \"${version}\" https://github.com/tmux/tmux.git /opt/tmux  \u0026\u0026 cd /opt/tmux  \u0026\u0026 ./autogen.sh  \u0026\u0026 ./configure  \u0026\u0026 make  \u0026\u0026 make install  \u0026\u0026 curl -L -o /etc/bash_completion.d/tmux \"https://raw.githubusercontent.com/przepompownia/tmux-bash-completion/master/completions/tmux\"  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 version='1.5'  \u0026\u0026 curl -m 10 -L -o /tmp/jq \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\"  \u0026\u0026 install -v /tmp/jq \"$PREFIX/bin/jq\"  \u0026\u0026 rm -vfv /tmp/*  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 apt-get install python-pip python-setuptools  \u0026\u0026 pip install awscli  \u0026\u0026 rm -vrf /tmp/*  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 version='2.2.3'  \u0026\u0026 cd /tmp  \u0026\u0026 curl -L -o hub.tgz \"https://github.com/github/hub/releases/download/v${version}/hub-linux-amd64-${version}.tgz\"  \u0026\u0026 tar -xvzf hub.tgz  \u0026\u0026 cd hub-linux-amd64-${version}/  \u0026\u0026 ./install  \u0026\u0026 rm -vrf /tmp/*  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 git clone https://github.com/sstephenson/rbenv.git ~/.rbenv  \u0026\u0026 echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' \u003e\u003e ~/.bashrc  \u0026\u0026       export PATH=\"$HOME/.rbenv/bin:$PATH\"  \u0026\u0026 echo 'eval \"$(rbenv init -)\"' \u003e\u003e ~/.bashrc  \u0026\u0026       eval \"$(rbenv init -)\"  \u0026\u0026 git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build  \u0026\u0026 echo 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' \u003e\u003e ~/.bashrc  \u0026\u0026       export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"  \u0026\u0026 git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash  \u0026\u0026 rbenv install 2.3.1  \u0026\u0026 rbenv global 2.3.1  \u0026\u0026 ruby -v  \u0026\u0026 gem install bundler  \u0026\u0026 echo \"DONE *****************************************************\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"export DOCKER_HOST='unix:///var/run/docker.sock'\" \u003e\u003e /root/.bashrc  \u0026\u0026 echo \"export DEBIAN_FRONTEND=noninteractive\" \u003e\u003e /root/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=\"/root/.bin:$PATH\"' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -a /etc/ssh/ /etc/ssh.original/  \u0026\u0026 cp -a /etc/pam.d/ /etc/pam.d.original/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/etc/ssh/*",
            "/etc/ssh/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/etc/pam.d/*",
            "/etc/pam.d/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/ssh/ssh_host_keys"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/runtime/entrypoint",
            "/opt/docker/runtime/entrypoint"
          ]
        },
        {
          "CmdLine": [
            "/opt/docker/runtime/entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "volume",
          "Volumes": [
            "/code",
            "/root"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/root"
        }
      ]
    }
  ]
}