{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "builder",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8 as builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "CmdLine": [
            "apk --update add --virtual .build-deps build-base automake autoconf libtool git linux-pam-dev openssl-dev wget"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "duo-builder",
      "BaseName": "builder",
      "SourceCode": "FROM builder as duo-builder",
      "Platform": "",
      "As": "duo-builder",
      "From": {
        "Stage": {
          "Named": "builder",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Key": "DUO_VERSION",
          "Name": "arg",
          "Value": "1.10.5"
        },
        {
          "CmdLine": [
            "wget https://dl.duosecurity.com/duo_unix-${DUO_VERSION}.tar.gz \u0026\u0026     mkdir -p src \u0026\u0026     tar -zxf duo_unix-${DUO_VERSION}.tar.gz --strip-components=1 -C src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd src \u0026\u0026     ./configure         --with-pam=/dist/lib64/security         --prefix=/dist/usr \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "google-authenticator-libpam-builder",
      "BaseName": "builder",
      "SourceCode": "FROM builder as google-authenticator-libpam-builder",
      "Platform": "",
      "As": "google-authenticator-libpam-builder",
      "From": {
        "Stage": {
          "Named": "builder",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Key": "AUTHENTICATOR_LIBPAM_VERSION",
          "Name": "arg",
          "Value": "1.05"
        },
        {
          "CmdLine": [
            "git clone --branch ${AUTHENTICATOR_LIBPAM_VERSION} --single-branch https://github.com/google/google-authenticator-libpam src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd src \u0026\u0026     ./bootstrap.sh \u0026\u0026     ./configure         --prefix=/dist \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "openssh-portable-builder",
      "BaseName": "builder",
      "SourceCode": "FROM builder as openssh-portable-builder",
      "Platform": "",
      "As": "openssh-portable-builder",
      "From": {
        "Stage": {
          "Named": "builder",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Key": "OPENSSH_VERSION",
          "Name": "arg",
          "Value": "V_7_8_P1"
        },
        {
          "CmdLine": [
            "git clone --branch ${OPENSSH_VERSION} --single-branch https://github.com/openssh/openssh-portable src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "patches/",
            "/patches/"
          ]
        },
        {
          "CmdLine": [
            "cd src \u0026\u0026     find ../patches/openssh/** -type f -exec patch -p1 -i {} \\; \u0026\u0026     autoreconf \u0026\u0026     ./configure         --prefix=/dist/usr         --sysconfdir=/etc/ssh         --datadir=/dist/usr/share/openssh         --libexecdir=/dist/usr/lib/ssh         --mandir=/dist/usr/share/man         --with-pid-dir=/run         --with-mantype=man         --with-privsep-path=/var/empty         --with-privsep-user=sshd         --with-md5-passwords         --with-ssl-engine         --disable-wtmp         --with-pam=/dist/lib64/security \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"erik@cloudposse.com\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apk --update add curl drill groff util-linux bash xauth gettext openssl-dev shadow sudo iptables openrc busybox-extras vim net-tools ca-certificates libqrencode \u0026\u0026     rm -rf /etc/ssh/ssh_host_*_key* \u0026\u0026     rm -f /usr/bin/ssh-agent \u0026\u0026     rm -f /usr/bin/ssh-keyscan \u0026\u0026     touch /var/log/lastlog \u0026\u0026     mkdir -p /var/run/sshd \u0026\u0026     mv /etc/profile.d/color_prompt /etc/profile.d/color_prompt.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SUDOSH_VERSION",
              "Value": "0.1.3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://github.com/cloudposse/sudosh/releases/download/${SUDOSH_VERSION}/sudosh_linux_386 -O /usr/bin/sudosh \u0026\u0026     chmod 755 /usr/bin/sudosh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "duo-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "dist/",
            "/"
          ]
        },
        {
          "Chown": "",
          "From": "google-authenticator-libpam-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "dist/",
            "/"
          ]
        },
        {
          "Chown": "",
          "From": "openssh-portable-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "dist/",
            "/"
          ]
        },
        {
          "Env": [
            {
              "Key": "TIMEZONE",
              "Value": "\"Etc/UTC\""
            },
            {
              "Key": "TERM",
              "Value": "\"xterm\""
            },
            {
              "Key": "HOSTNAME",
              "Value": "\"bastion\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MFA_PROVIDER",
              "Value": "\"duo\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "UMASK",
              "Value": "\"0022\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DUO_IKEY",
              "Value": "\"\""
            },
            {
              "Key": "DUO_SKEY",
              "Value": "\"\""
            },
            {
              "Key": "DUO_HOST",
              "Value": "\"\""
            },
            {
              "Key": "DUO_FAILMODE",
              "Value": "\"secure\""
            },
            {
              "Key": "DUO_AUTOPUSH",
              "Value": "\"yes\""
            },
            {
              "Key": "DUO_PROMPTS",
              "Value": "\"1\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENFORCER_ENABLED",
              "Value": "\"true\""
            },
            {
              "Key": "ENFORCER_CLEAN_HOME_ENABLED",
              "Value": "\"true\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RATE_LIMIT_ENABLED",
              "Value": "\"true\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RATE_LIMIT_MAX_FAILURES",
              "Value": "\"5\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RATE_LIMIT_LOCKOUT_TIME",
              "Value": "\"300\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RATE_LIMIT_FAIL_DELAY",
              "Value": "\"3000000\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SLACK_ENABLED",
              "Value": "\"false\""
            },
            {
              "Key": "SLACK_HOOK",
              "Value": "\"sshrc\""
            },
            {
              "Key": "SLACK_WEBHOOK_URL",
              "Value": "\"\""
            },
            {
              "Key": "SLACK_USERNAME",
              "Value": "\"\""
            },
            {
              "Key": "SLACK_TIMEOUT",
              "Value": "\"2\""
            },
            {
              "Key": "SLACK_FATAL_ERRORS",
              "Value": "\"true\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSH_AUDIT_ENABLED",
              "Value": "\"true\""
            },
            {
              "Key": "SSH_AUTHORIZED_KEYS_COMMAND",
              "Value": "\"none\""
            },
            {
              "Key": "SSH_AUTHORIZED_KEYS_COMMAND_USER",
              "Value": "\"nobody\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "rootfs/",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "CmdLine": [
            "/init"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}