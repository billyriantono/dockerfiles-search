MetaArgs: null
Stages:
- BaseName: lsiobase/nginx:3.10
  Commands:
  - Key: BUILD_DATE
    Name: arg
    Value: null
  - Key: VERSION
    Name: arg
    Value: null
  - Key: CERTBOT_VERSION
    Name: arg
    Value: null
  - Labels:
    - Key: build_version
      Value: '"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}"'
    Name: label
  - Labels:
    - Key: maintainer
      Value: '"aptalca"'
    Name: label
  - Env:
    - Key: DHLEVEL
      Value: "2048"
    - Key: ONLY_SUBDOMAINS
      Value: "false"
    - Key: AWS_CONFIG_FILE
      Value: /config/dns-conf/route53.ini
    Name: env
  - Env:
    - Key: S6_BEHAVIOUR_IF_STAGE2_FAILS
      Value: "2"
    Name: env
  - CmdLine:
    - "echo \"**** install runtime packages ****\" &&  apk add --no-cache --upgrade
      \tcurl \tfail2ban \tgnupg \tmemcached \timagemagick \tnginx \tnginx-mod-http-echo
      \tnginx-mod-http-fancyindex \tnginx-mod-http-geoip \tnginx-mod-http-geoip2 \tnginx-mod-http-headers-more
      \tnginx-mod-http-image-filter \tnginx-mod-http-lua \tnginx-mod-http-lua-upstream
      \tnginx-mod-http-nchan \tnginx-mod-http-perl \tnginx-mod-http-redis2 \tnginx-mod-http-set-misc
      \tnginx-mod-http-upload-progress \tnginx-mod-http-xslt-filter \tnginx-mod-mail
      \tnginx-mod-rtmp \tnginx-mod-stream \tnginx-mod-stream-geoip \tnginx-vim \tphp7-bz2
      \tphp7-ctype \tphp7-curl \tphp7-dom \tphp7-exif \tphp7-gd \tphp7-iconv \tphp7-intl
      \tphp7-mcrypt \tphp7-memcached \tphp7-mysqli \tphp7-mysqlnd \tphp7-opcache \tphp7-pdo_mysql
      \tphp7-pdo_pgsql \tphp7-pdo_sqlite \tphp7-pecl-redis \tphp7-pgsql \tphp7-phar
      \tphp7-posix \tphp7-soap \tphp7-sockets \tphp7-sqlite3 \tphp7-tokenizer \tphp7-xml
      \tphp7-xmlreader \tphp7-zip \tpy3-cryptography \tpy3-future \tpy3-pip &&  echo
      \"**** install certbot plugins ****\" &&  if [ -z ${CERTBOT_VERSION+x} ]; then
      \        CERTBOT=\"certbot\";  else         CERTBOT=\"certbot==${CERTBOT_VERSION}\";
      \ fi &&  pip3 install -U \tpip &&  pip3 install -U \t${CERTBOT} \tcertbot-dns-cloudflare
      \tcertbot-dns-cloudxns \tcertbot-dns-digitalocean \tcertbot-dns-dnsimple \tcertbot-dns-dnsmadeeasy
      \tcertbot-dns-google \tcertbot-dns-luadns \tcertbot-dns-nsone \tcertbot-dns-ovh
      \tcertbot-dns-rfc2136 \tcertbot-dns-route53 \trequests &&  echo \"**** remove
      unnecessary fail2ban filters ****\" &&  rm \t/etc/fail2ban/jail.d/alpine-ssh.conf
      &&  echo \"**** copy fail2ban default action and filter to /default ****\" &&
      \ mkdir -p /defaults/fail2ban &&  mv /etc/fail2ban/action.d /defaults/fail2ban/
      &&  mv /etc/fail2ban/filter.d /defaults/fail2ban/ &&  echo \"**** copy proxy
      confs to /default ****\" &&  mkdir -p /defaults/proxy-confs &&  curl -o \t/tmp/proxy.tar.gz
      -L \t\"https://github.com/linuxserver/reverse-proxy-confs/tarball/master\" &&
      \ tar xf \t/tmp/proxy.tar.gz -C \t/defaults/proxy-confs --strip-components=1
      --exclude=linux*/.gitattributes --exclude=linux*/.github --exclude=linux*/.gitignore
      --exclude=linux*/LICENSE &&  echo \"**** configure nginx ****\" &&  rm -f /etc/nginx/conf.d/default.conf
      &&  echo \"**** cleanup ****\" &&  for cleanfiles in *.pyc *.pyo; \tdo \tfind
      /usr/lib/python3.*  -iname \"${cleanfiles}\" -exec rm -f '{}' + \t; done &&
      \ rm -rf \t/tmp/* \t/root/.cache"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - root/
    - /
  From:
    Image: lsiobase/nginx:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM lsiobase/nginx:3.10
