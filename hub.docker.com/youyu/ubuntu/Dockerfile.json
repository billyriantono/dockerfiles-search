{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Yu You \u003cyouyu.youyu@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "OPENCV",
              "Value": "3.1.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026 apt-get install -y software-properties-common python-software-properties"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu precise universe\" \u0026\u0026     add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu precise main restricted universe multiverse\" \u0026\u0026     add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu precise-updates main restricted universe multiverse\" \u0026\u0026     add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu precise-backports main restricted universe multiverse\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \tlibgtk2.0-dev \tlibjpeg-dev \tlibjasper-dev \tlibopenexr-dev cmake python-dev \tpython-numpy python-tk libtbb-dev \tlibeigen2-dev yasm libfaac-dev \tlibopencore-amrnb-dev libopencore-amrwb-dev \tlibtheora-dev libvorbis-dev libxvidcore-dev \tlibx264-dev libqt4-dev libqt4-opengl-dev \tsphinx-common libv4l-dev libdc1394-22-dev \tlibavcodec-dev libavformat-dev libswscale-dev \tlibglew-dev libboost-dev libboost-python-dev libboost-serialization-dev \thtop nano wget git unzip \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 wget http://bitbucket.org/eigen/eigen/get/3.2.10.tar.gz -O eigen3.tgz \u0026\u0026 tar zxvf eigen3.tgz \u0026\u0026 cd  eigen-eigen-b9cd8366d4e8 \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RELEASE .. \u0026\u0026 make install \u0026\u0026 cd /opt \u0026\u0026 git clone https://github.com/stevenlovegrove/Pangolin.git \u0026\u0026 cd Pangolin \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake  .. \u0026\u0026 make -j4 \u0026\u0026 make install \u0026\u0026 cd /opt \u0026\u0026 wget https://codeload.github.com/opencv/opencv/zip/$OPENCV -O opencv.zip \u0026\u0026 unzip opencv.zip \u0026\u0026 cd opencv-$OPENCV \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake -D CMAKE_BUILD_TYPE=RELEASE -D WITH_CUDA=OFF -D WITH_OPENGL=OFF .. \u0026\u0026 make -j4 \u0026\u0026 make install \u0026\u0026 rm -rf /opt/* \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}