MetaArgs: null
Stages:
- BaseName: php:fpm-alpine3.7
  Commands:
  - Maintainer: Frank Sung <ysya33333@gmail.com>
    Name: maintainer
  - Env:
    - Key: php_conf
      Value: /usr/local/etc/php-fpm.conf
    Name: env
  - Env:
    - Key: fpm_conf
      Value: /usr/local/etc/php-fpm.d/www.conf
    Name: env
  - Env:
    - Key: php_vars
      Value: /usr/local/etc/php/conf.d/php.ini
    Name: env
  - Env:
    - Key: NGINX_VERSION
      Value: 1.15.2
    Name: env
  - Env:
    - Key: LUA_MODULE_VERSION
      Value: 0.10.13
    Name: env
  - Env:
    - Key: DEVEL_KIT_MODULE_VERSION
      Value: 0.3.0
    Name: env
  - Env:
    - Key: LUAJIT_LIB
      Value: /usr/lib
    Name: env
  - Env:
    - Key: LUAJIT_INC
      Value: /usr/include/luajit-2.1
    Name: env
  - CmdLine:
    - echo @community/ http://dl-cdn.alpinelinux.org/alpine/edge/community/ >> /etc/apk/repositories
      &&     apk update &&     apk add --no-cache curl bash git supervisor
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp && git clone https://github.com/google/ngx_brotli     && cd ngx_brotli     &&
      git submodule update --init --recursive
    Name: run
    PrependShell: true
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module
      \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module
      \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module
      \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic
      \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic
      \        --with-http_perl_module=dynamic \t\t--with-threads \t\t--with-stream
      \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module \t\t--with-stream_realip_module
      \t\t--with-stream_geoip_module=dynamic \t\t--with-http_slice_module \t\t--with-mail
      \t\t--with-mail_ssl_module \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module
      \        --add-module=/tmp/ngx_brotli         --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION
      \t\" \t&& addgroup -S nginx \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx \t&& apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev
      \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl
      \t\tgnupg \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev         perl-dev         luajit-dev
      \    && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz
      -o ndk.tar.gz     && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz
      -o lua.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found='';
      \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -r \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz
      \    && tar -zxC /usr/src -f ndk.tar.gz     && tar -zxC /usr/src -f lua.tar.gz
      \t&& rm nginx.tar.gz ndk.tar.gz lua.tar.gz \t&& cd /usr/src/nginx-$NGINX_VERSION
      \t&& ./configure $CONFIG --with-debug \t&& make -j$(getconf _NPROCESSORS_ONLN)
      \t&& mv objs/nginx objs/nginx-debug \t&& mv objs/ngx_http_xslt_filter_module.so
      objs/ngx_http_xslt_filter_module-debug.so \t&& mv objs/ngx_http_image_filter_module.so
      objs/ngx_http_image_filter_module-debug.so \t&& mv objs/ngx_http_geoip_module.so
      objs/ngx_http_geoip_module-debug.so \t&& mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so     && mv objs/ngx_http_perl_module.so
      objs/ngx_http_perl_module-debug.so \t&& ./configure $CONFIG \t&& make -j$(getconf
      _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/ \t&& mkdir
      /etc/nginx/conf.d/ \t&& mkdir -p /usr/share/nginx/www/ \t&& install -m644 html/index.html
      /usr/share/nginx/www/ \t&& install -m644 html/50x.html /usr/share/nginx/www/
      \t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t&& install -m755
      objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so
      \t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so
      \t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so
      \t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so
      \    && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so
      \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx*
      \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf /usr/src/nginx-$NGINX_VERSION
      \t\t&& apk add --no-cache --virtual .gettext gettext \t&& mv /usr/bin/envsubst
      /tmp/ \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx
      /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| tr ',' '\\n' \t\t\t| sort
      -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print
      \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps
      \t&& apk del .build-deps \t&& apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/
      \t\t&& apk add --no-cache tzdata \t\t&& ln -sf /dev/stdout /var/log/nginx/access.log
      \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache     autoconf     make     gcc     musl-dev     zlib-dev     cyrus-sasl-dev     curl-dev     tidyhtml-dev     imap-dev     libpng-dev     icu-dev     libpq     libxslt-dev     libmemcached-dev     imagemagick-dev     freetype-dev     sqlite-dev     libjpeg-turbo-dev
      &&     docker-php-ext-configure gd       --with-gd       --with-freetype-dir=/usr/include/       --with-png-dir=/usr/include/       --with-jpeg-dir=/usr/include/
      &&     docker-php-ext-install     iconv pdo_mysql pdo_sqlite     mysqli curl
      tidy gd exif imap intl xmlrpc xsl json soap dom zip opcache &&     pecl install
      imagick &&     docker-php-ext-enable imagick &&     curl -L -o /tmp/memcached.tar.gz
      "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz" &&     mkdir
      -p /usr/src/php/ext/memcached &&     tar -C /usr/src/php/ext/memcached -zxvf
      /tmp/memcached.tar.gz --strip 1 &&     docker-php-ext-configure memcached &&     docker-php-ext-install
      memcached &&     rm /tmp/memcached.tar.gz &&     docker-php-source delete &&     EXPECTED_COMPOSER_SIGNATURE=$(wget
      -q -O - https://composer.github.io/installer.sig) &&     php -r "copy('https://getcomposer.org/installer',
      'composer-setup.php');" &&     php -r "if (hash_file('SHA384', 'composer-setup.php')
      === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified';
      } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php');
      } echo PHP_EOL;" &&     php composer-setup.php --install-dir=/usr/bin --filename=composer
      &&     php -r "unlink('composer-setup.php');" &&     apk del gcc musl-dev zlib-dev
      cyrus-sasl-dev make         autoconf dpkg-dev dpkg file libc-dev g++ libmagic
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/default.conf
    - /etc/nginx/conf.d/default.conf
  - CmdLine:
    - echo -e "<?php\nphpinfo();\nphpinfo(INFO_MODULES);\n?>" >> /usr/share/nginx/www/phpinfo.php
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R nginx:nginx /usr/share/nginx/www/
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "cgi.fix_pathinfo=0" > ${php_vars} &&     echo "short_open_tag = On" >>
      ${php_vars} &&     echo "date.timezone = Asia/Taipei" >> ${php_vars} &&     echo
      "expose_php = Off" >> ${php_vars} &&     echo "upload_max_filesize = 100M"  >>
      ${php_vars} &&     echo "post_max_size = 100M"  >> ${php_vars} &&     echo "variables_order
      = \"EGPCS\""  >> ${php_vars} &&     echo "memory_limit = 128M"  >> ${php_vars}
      &&     echo "disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen@"  >>
      ${php_vars}
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i         -e 's@;catch_workers_output\s*=\s*yes@catch_workers_output =
      yes@g'         -e 's@^user\s.*=\s.*@user = nginx@g'         -e 's@^group\s.*=\s.*@group
      = nginx@g'         -e 's@^;listen.owner\s.*=\s.*@listen.owner = nginx@g'         -e
      's@^;listen.group\s.*=\s.*@listen.group = nginx@g'         -e 's@^;listen.mode\s.*=\s.*@listen.mode
      = 0660@g'         -e 's@^listen\s=\s.*@listen = /dev/shm/php-cgi.sock@g'     ${fpm_conf}
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /tmp/ngx_brotli
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./conf/supervisord.conf
    - /etc/supervisord.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./start.sh
    - /start.sh
  - CmdLine:
    - chmod 755 /start.sh
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - /bin/bash
    - /start.sh
    Name: cmd
    PrependShell: false
  From:
    Image: php:fpm-alpine3.7
  Name: ""
  Platform: ""
  SourceCode: FROM php:fpm-alpine3.7
