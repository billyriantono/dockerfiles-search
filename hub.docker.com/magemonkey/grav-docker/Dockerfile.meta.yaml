MetaArgs: null
Stages:
- BaseName: php:7.3.5-fpm-alpine3.9
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Marvin Roman <marvinroman@protonmail.com>"'
    Name: label
  - Labels:
    - Key: version
      Value: '"v0.0.3"'
    Name: label
  - Env:
    - Key: php_conf
      Value: /usr/local/etc/php-fpm.conf
    Name: env
  - Env:
    - Key: fpm_conf
      Value: /usr/local/etc/php-fpm.d/www.conf
    Name: env
  - Env:
    - Key: php_vars
      Value: /usr/local/etc/php/conf.d/docker-vars.ini
    Name: env
  - Env:
    - Key: NGINX_VERSION
      Value: 1.16.0
    Name: env
  - Env:
    - Key: LUA_MODULE_VERSION
      Value: 0.10.14
    Name: env
  - Env:
    - Key: DEVEL_KIT_MODULE_VERSION
      Value: 0.3.0
    Name: env
  - Env:
    - Key: LUAJIT_LIB
      Value: /usr/lib
    Name: env
  - Env:
    - Key: LUAJIT_INC
      Value: /usr/include/luajit-2.1
    Name: env
  - Env:
    - Key: BUILD_DEPS
      Value: '"autoconf   augeas-dev   gcc   gd-dev   geoip-dev   gnupg   libc-dev   libffi-dev   libressl-dev   libxslt-dev   libzip-dev   linux-headers   luajit-dev   make   musl-dev   pcre-dev   perl-dev   python-dev   zlib-dev"'
    Name: env
  - Env:
    - Key: PHP_REQS
      Value: '"curl ctype dom json mbstring openssl session xml"'
    Name: env
  - CmdLine:
    - for req in ${PHP_REQS}; do apk add --no-cache php7-$req; done
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache --virtual .php-libs   freetype   libjpeg-turbo   libpng   libwebp   libxml2   libxpm   libzip   zlib
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache --virtual .php-build-deps   freetype-dev   libjpeg-turbo-dev   libpng-dev   libwebp-dev   libxml2-dev   libxpm-dev   libzip-dev   zlib-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-configure gd   --with-gd   --with-freetype-dir=/usr/include/   --with-jpeg-dir=/usr/include/   --with-png-dir=/usr/include/   --with-webp-dir=/usr/include/   --with-xpm-dir=/usr/include/
      &&   docker-php-ext-install -j$(nproc) exif gd simplexml zip &&   docker-php-source
      delete
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8   && CONFIG="  --prefix=/etc/nginx   --sbin-path=/usr/sbin/nginx   --modules-path=/usr/lib/nginx/modules   --conf-path=/etc/nginx/nginx.conf   --error-log-path=/var/log/nginx/error.log   --http-log-path=/var/log/nginx/access.log   --pid-path=/var/run/nginx.pid   --lock-path=/var/run/nginx.lock   --http-client-body-temp-path=/var/cache/nginx/client_temp   --http-proxy-temp-path=/var/cache/nginx/proxy_temp   --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp   --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp   --http-scgi-temp-path=/var/cache/nginx/scgi_temp   --user=nginx   --group=nginx   --with-http_ssl_module   --with-http_realip_module   --with-http_addition_module   --with-http_sub_module   --with-http_dav_module   --with-http_flv_module   --with-http_mp4_module   --with-http_gunzip_module   --with-http_gzip_static_module   --with-http_random_index_module   --with-http_secure_link_module   --with-http_stub_status_module   --with-http_auth_request_module   --with-http_xslt_module=dynamic   --with-http_image_filter_module=dynamic   --with-http_geoip_module=dynamic   --with-http_perl_module=dynamic   --with-threads   --with-stream   --with-stream_ssl_module   --with-stream_ssl_preread_module   --with-stream_realip_module   --with-stream_geoip_module=dynamic   --with-http_slice_module   --with-mail   --with-mail_ssl_module   --with-compat   --with-file-aio   --with-http_v2_module   --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION   --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION   "   &&
      addgroup -S nginx   && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G
      nginx nginx   && apk add --no-cache --virtual .build-deps $BUILD_DEPS   && curl
      -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz   &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc   &&
      curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz
      -o ndk.tar.gz   && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz
      -o lua.tar.gz   && export GNUPGHOME="$(mktemp -d)"   && found='''';   for server
      in   ha.pool.sks-keyservers.net   hkp://keyserver.ubuntu.com:80   hkp://p80.pool.sks-keyservers.net:80   pgp.mit.edu   ;
      do   echo "Fetching GPG key $GPG_KEYS from $server";   gpg --keyserver "$server"
      --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break;   done;   test
      -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1;   gpg
      --batch --verify nginx.tar.gz.asc nginx.tar.gz   && mkdir -p /usr/src   && tar
      -zxC /usr/src -f nginx.tar.gz   && tar -zxC /usr/src -f ndk.tar.gz   && tar
      -zxC /usr/src -f lua.tar.gz   && rm nginx.tar.gz ndk.tar.gz lua.tar.gz   &&
      cd /usr/src/nginx-$NGINX_VERSION   && ./configure $CONFIG --with-debug   &&
      make -j$(getconf _NPROCESSORS_ONLN)   && mv objs/nginx objs/nginx-debug   &&
      mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so   &&
      mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so   &&
      mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so   && mv
      objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so   && mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so   && ./configure $CONFIG   && make -j$(getconf
      _NPROCESSORS_ONLN)   && make install   && rm -rf /etc/nginx/html/   && mkdir
      /etc/nginx/conf.d/   && mkdir -p /usr/share/nginx/html/   && install -m644 html/index.html
      /usr/share/nginx/html/   && install -m644 html/50x.html /usr/share/nginx/html/   &&
      install -m755 objs/nginx-debug /usr/sbin/nginx-debug   && install -m755 objs/ngx_http_xslt_filter_module-debug.so
      /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so   && install -m755
      objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so   &&
      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so   &&
      install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so   &&
      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so   &&
      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules   && strip /usr/sbin/nginx*   &&
      strip /usr/lib/nginx/modules/*.so   && rm -rf /usr/src/nginx-$NGINX_VERSION     &&
      apk add --no-cache --virtual .gettext gettext   && mv /usr/bin/envsubst /tmp/     &&
      runDeps="$(   scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst   | awk ''{ gsub(/,/, "\nso:", $2); print "so:" $2 }''   | sort
      -u   | xargs -r apk info --installed   | sort -u   )"   && apk add --no-cache
      --virtual .nginx-rundeps $runDeps   && mv /tmp/envsubst /usr/local/bin/   &&
      ln -sf /dev/stdout /var/log/nginx/access.log   && ln -sf /dev/stderr /var/log/nginx/error.log'
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache --virtual .sys-deps   bash   openssh-client   rsync   shadow   su-exec   supervisor
      &&   mkdir -p /run/nginx &&   mkdir -p /var/log/supervisor
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache certbot-nginx &&   mkdir -p /etc/letsencrypt/webrootauth
    Name: run
    PrependShell: true
  - CmdLine:
    - apk del .build-deps &&   apk del .gettext &&   apk del .php-build-deps
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /etc/nginx/sites-available/ &&   mkdir -p /etc/nginx/sites-enabled/
      &&   mkdir -p /etc/nginx/ssl/ &&   rm -Rf /var/www/* &&   mkdir /var/www/html/
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc
    - /etc
  - CmdLine:
    - echo "cgi.fix_pathinfo=0" > ${php_vars} &&  echo "upload_max_filesize = 100M"  >>
      ${php_vars} &&  echo "post_max_size = 100M"  >> ${php_vars} &&  echo "variables_order
      = \"EGPCS\""  >> ${php_vars} &&   echo "memory_limit = 128M"  >> ${php_vars}
      &&   sed -i   -e "s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g"   -e
      "s/pm.max_children = 5/pm.max_children = 4/g"   -e "s/pm.start_servers = 2/pm.start_servers
      = 3/g"   -e "s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g"   -e "s/pm.max_spare_servers
      = 3/pm.max_spare_servers = 4/g"   -e "s/;pm.max_requests = 500/pm.max_requests
      = 200/g"   -e "s/user = www-data/user = nginx/g"   -e "s/group = www-data/group
      = nginx/g"   -e "s/;listen.mode = 0660/listen.mode = 0666/g"   -e "s/;listen.owner
      = www-data/listen.owner = nginx/g"   -e "s/;listen.group = www-data/listen.group
      = nginx/g"   -e "s/listen = 127.0.0.1:9000/listen = \/var\/run\/php-fpm.sock/g"   -e
      "s/^;clear_env = no$/clear_env = no/"   ${fpm_conf}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" &&   php
      -r "if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5')
      { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php');
      } echo PHP_EOL;" &&   php composer-setup.php --install-dir=/usr/local/bin --filename=composer
      &&   php -r "unlink('composer-setup.php');"
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/www/html
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R nginx:nginx /var/www
    Name: run
    PrependShell: true
  - Name: user
    User: nginx
  - CmdLine:
    - composer create-project getgrav/grav /var/www/html
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www/html
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - favicon.ico
    - /var/www/html/favicon.ico
  - Name: user
    User: root
  - CmdLine:
    - rsync -a   --include="user"   --include="user/*"   --include="user/*/*"    --include="user/*/*/*"   --include="user/*/*/*/*"   --include="user/*/*/*/*/*"   --include="user/*/*/*/*/*/*"   --include="user/*/*/*/*/*/*/*"   --exclude="*"   /var/www/html/   /var/lib/grav
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/start.sh
    - /start.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/pull
    - /usr/bin/pull
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/push
    - /usr/bin/push
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/letsencrypt-setup
    - /usr/bin/letsencrypt-setup
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/letsencrypt-renew
    - /usr/bin/letsencrypt-renew
  - CmdLine:
    - chmod 755 /usr/bin/pull && chmod 755 /usr/bin/push && chmod 755 /usr/bin/letsencrypt-setup
      && chmod 755 /usr/bin/letsencrypt-renew && chmod 755 /start.sh
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - errors/
    - /var/www/errors
  - CmdLine:
    - chown -R nginx.nginx /var/www/errors
    Name: run
    PrependShell: true
  - CmdLine:
    - "(crontab -l; echo \"*\t*\t*\t*\t*\trun-parts /etc/periodic/everymin\") | crontab
      -"
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod a+x /etc/periodic/everymin/scheduler
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - CmdLine:
    - /start.sh
    Name: cmd
    PrependShell: false
  From:
    Image: php:7.3.5-fpm-alpine3.9
  Name: ""
  Platform: ""
  SourceCode: FROM php:7.3.5-fpm-alpine3.9
