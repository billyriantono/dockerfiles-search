{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:slim",
      "SourceCode": "FROM node:slim",
      "Platform": "",
      "From": {
        "Image": "node:slim"
      },
      "Commands": [
        {
          "Maintainer": "James Spurin \u003cjames@spurin.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "HEXO_SERVER_PORT",
              "Value": "4000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_USER",
              "Value": "\"Joe Bloggs\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GIT_EMAIL",
              "Value": "\"joe@bloggs.com\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026  apt-get install git -y \u0026\u0026  npm install -g hexo-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "Name": "expose",
          "Ports": [
            "${HEXO_SERVER_PORT}"
          ]
        },
        {
          "CmdLine": [
            "if [ \"$(ls -A /app)\" ]; then     echo \"***** App directory exists and has content, continuing *****\";   else     echo \"***** App directory is empty, initialising with hexo and hexo-admin *****\" \u0026\u0026     hexo init \u0026\u0026     npm install \u0026\u0026     npm install --save hexo-admin;   fi;   if [ ! -f /app/requirements.txt ]; then     echo \"***** App directory contains no requirements.txt file, continuing *****\";   else     echo \"***** App directory contains a requirements.txt file, installing npm requirements *****\";     cat /app/requirements.txt | xargs npm --prefer-offline install --save;   fi;   if [ \"$(ls -A /app/.ssh 2\u003e/dev/null)\" ]; then     echo \"***** App .ssh directory exists and has content, continuing *****\";   else     echo \"***** App .ssh directory is empty, initialising ssh key and configuring known_hosts for common git repositories (github/gitlab) *****\" \u0026\u0026     rm -rf ~/.ssh/* \u0026\u0026     ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -P \"\" \u0026\u0026     ssh-keyscan github.com \u003e ~/.ssh/known_hosts 2\u003e/dev/null \u0026\u0026     ssh-keyscan gitlab.com \u003e\u003e ~/.ssh/known_hosts 2\u003e/dev/null \u0026\u0026     cp -r ~/.ssh /app;   fi;   echo \"***** Running git config, user = ${GIT_USER}, email = ${GIT_EMAIL} *****\" \u0026\u0026   git config --global user.email ${GIT_EMAIL} \u0026\u0026   git config --global user.name ${GIT_USER} \u0026\u0026   echo \"***** Copying .ssh from App directory and setting permissions *****\" \u0026\u0026   cp -r /app/.ssh ~/ \u0026\u0026   chmod 600 ~/.ssh/id_rsa \u0026\u0026   chmod 600 ~/.ssh/id_rsa.pub \u0026\u0026   chmod 700 ~/.ssh \u0026\u0026   echo \"***** Contents of public ssh key (for deploy) - *****\" \u0026\u0026   cat ~/.ssh/id_rsa.pub \u0026\u0026   echo \"***** Starting server on port ${HEXO_SERVER_PORT} *****\" \u0026\u0026   hexo server -d -p ${HEXO_SERVER_PORT}"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}