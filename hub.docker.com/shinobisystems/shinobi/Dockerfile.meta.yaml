MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - CmdLine:
    - apt update -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt install wget -y
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://deb.nodesource.com/setup_9.x
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x setup_9.x
    Name: run
    PrependShell: true
  - CmdLine:
    - ./setup_9.x
    Name: run
    PrependShell: true
  - CmdLine:
    - apt install nodejs -y
    Name: run
    PrependShell: true
  - Key: ARG_APP_VERSION
    Name: arg
    Value: null
  - Key: ARG_APP_CHANNEL
    Name: arg
    Value: null
  - Key: ARG_APP_COMMIT
    Name: arg
    Value: null
  - Key: ARG_APP_UPDATE
    Name: arg
    Value: auto
  - Key: ARG_BUILD_DATE
    Name: arg
    Value: null
  - Labels:
    - Key: org.label-schema.build-date
      Value: ${ARG_BUILD_DATE}
    - Key: org.label-schema.docker.dockerfile
      Value: '"/Dockerfile"'
    - Key: org.label-schema.license
      Value: '"GPLv3"'
    - Key: org.label-schema.name
      Value: '"MiGoller,moeiscool"'
    - Key: org.label-schema.vendor
      Value: '"Shinobi Systems"'
    - Key: org.label-schema.version
      Value: '"${ARG_APP_VERSION}-${ARG_APP_BRANCH}"'
    - Key: org.label-schema.description
      Value: '"Shinobi Pro - The Next Generation in Open-Source Video Management Software"'
    - Key: org.label-schema.url
      Value: '"https://gitlab.com/moeiscool/ShinobiDocker"'
    - Key: org.label-schema.vcs-ref
      Value: ${ARG_APP_COMMIT}
    - Key: org.label-schema.vcs-type
      Value: '"Git"'
    - Key: org.label-schema.vcs-url
      Value: '"https://gitlab.com/moeiscool/ShinobiDocker.git"'
    - Key: maintainer
      Value: '"MiGoller,moeiscool"'
    - Key: Author
      Value: '"MiGoller, mrproper, pschmitt & moeiscool"'
    Name: label
  - Env:
    - Key: APP_VERSION
      Value: $ARG_APP_VERSION
    - Key: APP_CHANNEL
      Value: $ARG_APP_CHANNEL
    - Key: APP_COMMIT
      Value: $ARG_APP_COMMIT
    - Key: APP_UPDATE
      Value: $ARG_APP_UPDATE
    - Key: APP_BRANCH
      Value: ${ARG_APP_BRANCH}
    Name: env
  - Env:
    - Key: PLATERECOGNIZER_KEY
      Value: GETONLINE
    - Key: PLATERECOGNIZER_ENDPOINT
      Value: https://api.platerecognizer.com/v1/plate-reader
    - Key: ADMIN_USER
      Value: admin@shinobi.video
    - Key: ADMIN_PASSWORD
      Value: admin
    - Key: APP_PORT
      Value: "8080"
    - Key: CRON_KEY
      Value: fd6c7849-904d-47ea-922b-5143358ba0de
    - Key: MYSQL_USER
      Value: majesticflame
    - Key: MYSQL_PASSWORD
      Value: password
    - Key: MYSQL_HOST
      Value: localhost
    - Key: MYSQL_DATABASE
      Value: ccio
    - Key: MYSQL_ROOT_PASSWORD
      Value: blubsblawoot
    - Key: MYSQL_ROOT_USER
      Value: root
    Name: env
  - CmdLine:
    - mkdir -p         /config         /opt/shinobi         /var/lib/mysql
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /customAutoLoad
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/shinobi
  - CmdLine:
    - export DEBIAN_FRONTEND="noninteractive"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y         libfreetype6-dev         libgnutls28-dev         libmp3lame-dev         libass-dev         libogg-dev         libtheora-dev         libvorbis-dev         libvpx-dev         libwebp-dev         libssh2-1-dev         libopus-dev         librtmp-dev         libx264-dev         libx265-dev         yasm
      &&     apt-get install -y         build-essential         bzip2         coreutils         gnutls-bin         nasm         tar         x264
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y         ffmpeg         git         make         mariadb-client         pkg-config         python         wget         tar         sudo         xz-utils
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \t{ \t\techo \"mariadb-server\" mysql-server/root_password password
      '${MYSQL_ROOT_PASSWORD}'; \t\techo \"mariadb-server\" mysql-server/root_password_again
      password '${MYSQL_ROOT_PASSWORD}'; \t} | debconf-set-selections; \tapt-get update;
      \tapt-get install -y \t\t\"mariadb-server\"         socat \t;     find /etc/mysql/
      -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs
      -rt -0 sed -Ei 's/^(bind-address|log)/#&/'"
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -ie "s/^bind-address\s*=\s*127\.0\.0\.1$/#bind-address = 0.0.0.0/" /etc/mysql/my.cnf
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://gitlab.com/Shinobi-Systems/Shinobi.git /opt/shinobi
    Name: run
    PrependShell: true
  - CmdLine:
    - npm i npm@latest -g &&     npm install pm2 -g &&     npm install jsonfile &&     npm
      install edit-json-file &&     npm install ffbinaries &&     npm install --unsafe-perm
      &&     npm audit fix --force
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ubuntu-platerecognizer/docker-entrypoint.sh
    - ./docker-entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - pm2Shinobi.yml
    - ./
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - /tools/modifyJson.js
    - ./tools
  - CmdLine:
    - chmod -f +x ./*.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./config/conf.json
    - ./config/super.json
    - /config/
  - Name: volume
    Volumes:
    - /opt/shinobi/videos
  - Name: volume
    Volumes:
    - /config
  - Name: volume
    Volumes:
    - /customAutoLoad
  - Name: volume
    Volumes:
    - /var/lib/mysql
  - Name: expose
    Ports:
    - "8080"
  - CmdLine:
    - /opt/shinobi/docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - pm2-docker
    - pm2Shinobi.yml
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
