MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: Apache Software Foundation <dev@zeppelin.apache.org>
    Name: maintainer
  - Env:
    - Key: Z_VERSION
      Value: '"0.8.2"'
    Name: env
  - Env:
    - Key: LOG_TAG
      Value: '"[ZEPPELIN_${Z_VERSION}]:"'
    - Key: Z_HOME
      Value: '"/zeppelin"'
    - Key: LANG
      Value: en_US.UTF-8
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - echo "$LOG_TAG update and install basic packages" &&     apt-get -y update &&     apt-get
      install -y locales &&     locale-gen $LANG &&     apt-get install -y software-properties-common
      &&     apt -y autoclean &&     apt -y dist-upgrade &&     apt-get install -y
      build-essential
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG install tini related packages" &&     apt-get install -y wget
      curl grep sed dpkg &&     TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest
      | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` &&     curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb"
      > tini.deb &&     dpkg -i tini.deb &&     rm tini.deb
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64
    Name: env
  - CmdLine:
    - echo "$LOG_TAG Install java8" &&     apt-get -y update &&     apt-get install
      -y openjdk-8-jdk &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG Install miniconda2 related packages" &&     apt-get -y update
      &&     apt-get install -y bzip2 ca-certificates     libglib2.0-0 libxext6 libsm6
      libxrender1     git mercurial subversion &&     echo 'export PATH=/opt/conda/bin:$PATH'
      > /etc/profile.d/conda.sh &&     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.2.12-Linux-x86_64.sh
      -O ~/miniconda.sh &&     /bin/bash ~/miniconda.sh -b -p /opt/conda &&     rm
      ~/miniconda.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "$LOG_TAG Install python related packages" &&     apt-get -y update &&     apt-get
      install -y python-dev python-pip &&     apt-get install -y gfortran &&     apt-get
      install -y libblas-dev libatlas-dev liblapack-dev &&     apt-get install -y
      libpng-dev libfreetype6-dev libxft-dev &&     apt-get install -y python-tk libxml2-dev
      libxslt-dev zlib1g-dev &&     conda config --set always_yes yes --set changeps1
      no &&     conda update -q conda &&     conda info -a &&     conda config --add
      channels conda-forge &&     conda install -q numpy=1.13.3 pandas=0.21.1 matplotlib=2.1.1
      pandasql=0.7.3 ipython=5.4.1 jupyter_client=5.1.0 ipykernel=4.7.0 bokeh=0.12.10
      &&     pip install -q scipy==0.18.0 ggplot==0.11.5 grpcio==1.8.2 bkzep==0.4.0
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG Install R related packages" &&     echo "deb http://cran.rstudio.com/bin/linux/ubuntu
      xenial/" | tee -a /etc/apt/sources.list &&     gpg --keyserver keyserver.ubuntu.com
      --recv-key E084DAB9 &&     gpg -a --export E084DAB9 | apt-key add - &&     apt-get
      -y update &&     apt-get -y --allow-unauthenticated install r-base r-base-dev
      &&     R -e "install.packages('knitr', repos='http://cran.us.r-project.org')"
      &&     R -e "install.packages('ggplot2', repos='http://cran.us.r-project.org')"
      &&     R -e "install.packages('googleVis', repos='http://cran.us.r-project.org')"
      &&     R -e "install.packages('data.table', repos='http://cran.us.r-project.org')"
      &&     apt-get -y install libcurl4-gnutls-dev libssl-dev &&     R -e "install.packages('devtools',
      repos='http://cran.us.r-project.org')" &&     R -e "install.packages('Rcpp',
      repos='http://cran.us.r-project.org')" &&     Rscript -e "library('devtools');
      library('Rcpp'); install_github('ramnathv/rCharts')"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG Download Zeppelin binary" &&     wget -O /tmp/zeppelin-${Z_VERSION}-bin-all.tgz
      http://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-all.tgz
      &&     tar -zxvf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz &&     rm -rf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz
      &&     mv /zeppelin-${Z_VERSION}-bin-all ${Z_HOME}
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG Cleanup" &&     apt-get autoclean &&     apt-get clean
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
  - CmdLine:
    - /usr/bin/tini
    - --
    Name: entrypoint
    PrependShell: false
  - Name: workdir
    Path: ${Z_HOME}
  - CmdLine:
    - bin/zeppelin.sh
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
