{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Arkadiusz Gil \u003carkadiusz@arkgil.net\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "TERM",
              "Value": "xterm"
            },
            {
              "Key": "ERLANG_VERSION",
              "Value": "22.1.2"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp/erlang-build"
        },
        {
          "CmdLine": [
            "echo \"@main http://dl-cdn.alpinelinux.org/alpine/v3.8/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026   echo \"@community http://dl-cdn.alpinelinux.org/alpine/v3.8/community\" \u003e\u003e /etc/apk/repositories \u0026\u0026   echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026   apk --no-cache --update --available upgrade \u0026\u0026   apk add --no-cache --update pcre@edge \u0026\u0026   apk add --no-cache --update   bash   ca-certificates   openssl-dev   ncurses-dev   unixodbc-dev   zlib-dev \u0026\u0026   apk add --no-cache --virtual .erlang-build   dpkg-dev dpkg binutils   git autoconf build-base perl-dev \u0026\u0026   git clone -b OTP-$ERLANG_VERSION --single-branch --depth 1 https://github.com/erlang/otp.git . \u0026\u0026   export ERL_TOP=/tmp/erlang-build \u0026\u0026   export PATH=$ERL_TOP/bin:$PATH \u0026\u0026   export CPPFlAGS=\"-D_BSD_SOURCE $CPPFLAGS\" \u0026\u0026   ./otp_build autoconf \u0026\u0026   ./configure --prefix=/usr   --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"   --sysconfdir=/etc   --mandir=/usr/share/man   --infodir=/usr/share/info   --without-javac   --without-wx   --without-debugger   --without-observer   --without-jinterface   --without-cosEvent  --without-cosEventDomain   --without-cosFileTransfer   --without-cosNotification   --without-cosProperty   --without-cosTime   --without-cosTransactions   --without-et   --without-gs   --without-ic   --without-megaco   --without-orber   --without-percept   --without-typer   --enable-threads   --enable-shared-zlib   --enable-ssl=dynamic-ssl-lib   --enable-hipe \u0026\u0026   make -j4 \u0026\u0026 make install \u0026\u0026   cd $HOME \u0026\u0026   rm -rf /tmp/erlang-build \u0026\u0026   update-ca-certificates --fresh \u0026\u0026   /usr/bin/erl -eval \"beam_lib:strip_release('/usr/lib/erlang/lib')\" -s init stop \u003e /dev/null \u0026\u0026   (/usr/bin/strip /usr/lib/erlang/erts-*/bin/* || true) \u0026\u0026   rm -rf /usr/lib/erlang/usr/ \u0026\u0026   rm -rf /usr/lib/erlang/misc/ \u0026\u0026   for DIR in /usr/lib/erlang/erts* /usr/lib/erlang/lib/*; do   rm -rf ${DIR}/src/*.erl;   rm -rf ${DIR}/doc;   rm -rf ${DIR}/man;   rm -rf ${DIR}/examples;   rm -rf ${DIR}/emacs;   rm -rf ${DIR}/c_src;   done \u0026\u0026   rm -rf /usr/lib/erlang/erts-*/lib/ \u0026\u0026   rm /usr/lib/erlang/erts-*/bin/dialyzer \u0026\u0026   rm /usr/lib/erlang/erts-*/bin/erlc \u0026\u0026   rm /usr/lib/erlang/erts-*/bin/typer \u0026\u0026   rm /usr/lib/erlang/erts-*/bin/ct_run \u0026\u0026   apk del --force .erlang-build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "/bin/sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}