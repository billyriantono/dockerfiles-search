{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "John Chilton \u003cjmchilton@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "CHROME_VERSION",
          "Name": "arg",
          "Value": "\"google-chrome-beta\""
        },
        {
          "Key": "CHROME_DRIVER_VERSION",
          "Name": "arg",
          "Value": "\"2.38\""
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            },
            {
              "Key": "DEBCONF_NONINTERACTIVE_SEEN",
              "Value": "true"
            },
            {
              "Key": "MYSQL_MAJOR",
              "Value": "5.7"
            },
            {
              "Key": "POSTGRES_MAJOR",
              "Value": "9.5"
            },
            {
              "Key": "GALAXY_ROOT",
              "Value": "/galaxy"
            },
            {
              "Key": "GALAXY_VIRTUAL_ENV",
              "Value": "/galaxy_venv"
            },
            {
              "Key": "GALAXY_VIRTUAL_ENV_2",
              "Value": "/galaxy_venv"
            },
            {
              "Key": "GALAXY_VIRTUAL_ENV_3",
              "Value": "/galaxy_venv3"
            },
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026 apt-get install -y software-properties-common apt-transport-https curl \u0026\u0026     apt-add-repository -y ppa:ansible/ansible \u0026\u0026     curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \u0026\u0026     curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \u0026\u0026     curl -sL https://deb.nodesource.com/setup_8.x | bash -  \u0026\u0026     apt-key adv --keyserver pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5 \u0026\u0026     echo \"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-${MYSQL_MAJOR}\" \u003e /etc/apt/sources.list.d/mysql.list \u0026\u0026     echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" \u003e\u003e /etc/apt/sources.list.d/google-chrome.list \u0026\u0026     { \t\techo mysql-community-server mysql-community-server/data-dir select ''; \t\techo mysql-community-server mysql-community-server/root-pass password ''; \t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \t\techo mysql-community-server mysql-community-server/remove-test-db select false; \t} | debconf-set-selections \u0026\u0026     apt-get update -y \u0026\u0026     apt-get install -y libpq-dev postgresql postgresql-client             ansible wget mysql-server=\"${MYSQL_MAJOR}\"* libmysqlclient-dev=\"${MYSQL_MAJOR}\"*             slurm-llnl libmunge-dev slurm-drmaa-dev ant cmake curl             g++ gcc gfortran git-core libffi-dev liblapack-dev             libncurses5-dev libopenblas-dev libpam0g-dev libpq-dev libsparsehash-dev make             mercurial nginx-extras patch postgresql postgresql             postgresql-client python-boto python-dev python3-dev             python-prettytable python-psycopg2 python-virtualenv python-pip             rsync slurm-drmaa-dev swig sysstat unzip             autoconf automake build-essential libatlas-base-dev libblas-dev openssl             bzip2             ca-certificates             openjdk-8-jre-headless             tzdata             sudo             locales             xvfb             ${CHROME_VERSION:-google-chrome-stable}             wget zlib1g-dev nodejs             libnss3 libgconf-2-4 \u0026\u0026     apt-get autoremove -y \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g grunt grunt-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /tmp/ansible \u0026\u0026     mkdir -p /opt/galaxy/db \u0026\u0026     chown -R postgres:postgres /opt/galaxy/db \u0026\u0026     sed -Ei 's/^(bind-address|log)/#\u0026/' /etc/mysql/my.cnf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "start_mysql.sh",
            "/opt/galaxy/start_mysql.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ansible_vars.yml",
            "/tmp/ansible/ansible_vars.yml"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "provision.yml",
            "/tmp/ansible/provision.yml"
          ]
        },
        {
          "CmdLine": [
            "mkdir /etc/galaxy \u0026\u0026 cd /tmp/ansible \u0026\u0026 mkdir roles \u0026\u0026     mkdir roles/galaxyprojectdotorg.galaxy-os \u0026\u0026     wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os \u0026\u0026     mkdir roles/galaxyprojectdotorg.cloudman-database \u0026\u0026     wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database \u0026\u0026     mkdir roles/galaxyprojectdotorg.galaxy \u0026\u0026     wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy \u0026\u0026     mkdir roles/galaxyprojectdotorg.galaxy-extras \u0026\u0026     wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras \u0026\u0026     mkdir roles/galaxyprojectdotorg.galaxy-toolshed \u0026\u0026     wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed \u0026\u0026     ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" \u0026\u0026     ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" \u0026\u0026     ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" \u0026\u0026     ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" \u0026\u0026     apt-get autoremove -y \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $GALAXY_ROOT \u0026\u0026     virtualenv -p /usr/bin/python3 $GALAXY_VIRTUAL_ENV_3 \u0026\u0026     for VENV in $GALAXY_VIRTUAL_ENV_2 $GALAXY_VIRTUAL_ENV_3; do         export GALAXY_VIRTUAL_ENV=$VENV \u0026\u0026         ./scripts/common_startup.sh || { echo \"common_startup.sh failed\"; exit 1; } \u0026\u0026         dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt \u0026\u0026         [ -f $dev_requirements ] \u0026\u0026 $VENV/bin/pip install -r $dev_requirements; done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for VENV in $GALAXY_VIRTUAL_ENV_3 $GALAXY_VIRTUAL_ENV_2; do         export GALAXY_VIRTUAL_ENV=$VENV \u0026\u0026         . $GALAXY_VIRTUAL_ENV/bin/activate \u0026\u0026         pip install psycopg2; done \u0026\u0026     pip install mysql \u0026\u0026     cd $GALAXY_ROOT \u0026\u0026     echo \"Prepopulating postgres database\" \u0026\u0026     su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres \u0026\u0026     sleep 3 \u0026\u0026     GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh \u0026\u0026     echo \"Prepopulating sqlite database\" \u0026\u0026     GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh \u0026\u0026     sh /opt/galaxy/start_mysql.sh \u0026\u0026     echo \"Prepopulating mysql database\" \u0026\u0026     GALAXY_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/galaxy?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh \u0026\u0026     echo \"Prepopulating toolshed postgres database\" \u0026\u0026     TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed \u0026\u0026     echo \"Prepopulating toolshed sqlite database\" \u0026\u0026     TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed \u0026\u0026     echo \"Prepopulating toolshed mysql database\" \u0026\u0026     TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/toolshed?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh tool_shed"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /tmp/install \u0026\u0026     cd /tmp/install \u0026\u0026     wget https://github.com/samtools/bcftools/releases/download/1.2/bcftools-1.2.tar.bz2 \u0026\u0026     tar xvjf bcftools-1.2.tar.bz2 \u0026\u0026     cd bcftools-1.2 \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd \u0026\u0026 rm -rf /tmp/install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd seluser          --shell /bin/bash           --create-home   \u0026\u0026 usermod -a -G sudo seluser   \u0026\u0026 echo 'ALL ALL = (ALL) NOPASSWD: ALL' \u003e\u003e /etc/sudoers   \u0026\u0026 echo 'seluser:secret' | chpasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "seluser"
        },
        {
          "CmdLine": [
            "sudo mkdir -p /opt/selenium   \u0026\u0026 sudo chown seluser:seluser /opt/selenium   \u0026\u0026 wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar     -O /opt/selenium/selenium-server-standalone.jar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "selenium/entry_point.sh",
            "selenium/functions.sh",
            "selenium/wrap_chrome_binary",
            "selenium/generate_config",
            "/opt/bin/"
          ]
        },
        {
          "CmdLine": [
            "/opt/bin/wrap_chrome_binary"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "seluser"
        },
        {
          "CmdLine": [
            "CD_VERSION=$(if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ]; then echo $(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE); else echo $CHROME_DRIVER_VERSION; fi)   \u0026\u0026 echo \"Using chromedriver version: \"$CD_VERSION   \u0026\u0026 wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip   \u0026\u0026 rm -rf /opt/selenium/chromedriver   \u0026\u0026 unzip /tmp/chromedriver_linux64.zip -d /opt/selenium   \u0026\u0026 rm /tmp/chromedriver_linux64.zip   \u0026\u0026 mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION   \u0026\u0026 chmod 755 /opt/selenium/chromedriver-$CD_VERSION   \u0026\u0026 sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/opt/bin/generate_config \u003e /opt/selenium/config.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SCREEN_WIDTH",
              "Value": "1360"
            },
            {
              "Key": "SCREEN_HEIGHT",
              "Value": "1020"
            },
            {
              "Key": "SCREEN_DEPTH",
              "Value": "24"
            },
            {
              "Key": "DISPLAY",
              "Value": ":99.0"
            },
            {
              "Key": "NODE_MAX_INSTANCES",
              "Value": "1"
            },
            {
              "Key": "NODE_MAX_SESSION",
              "Value": "1"
            },
            {
              "Key": "NODE_PORT",
              "Value": "5555"
            },
            {
              "Key": "NODE_REGISTER_CYCLE",
              "Value": "5000"
            },
            {
              "Key": "NODE_POLLING",
              "Value": "5000"
            },
            {
              "Key": "NODE_UNREGISTER_IF_STILL_DOWN_AFTER",
              "Value": "60000"
            },
            {
              "Key": "NODE_DOWN_POLLING_LIMIT",
              "Value": "2"
            },
            {
              "Key": "NODE_APPLICATION_NAME",
              "Value": "\"\""
            },
            {
              "Key": "DBUS_SESSION_BUS_ADDRESS",
              "Value": "/dev/null"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "run_test_wrapper.sh",
            "/usr/local/bin/run_test_wrapper.sh"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            ":9009"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            ":8080"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            ":80"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "/usr/local/bin/run_test_wrapper.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}