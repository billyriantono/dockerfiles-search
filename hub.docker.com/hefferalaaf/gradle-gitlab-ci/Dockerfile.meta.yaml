MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Key: http_proxy
    Name: arg
    Value: '""'
  - Key: https_proxy
    Name: arg
    Value: '""'
  - Key: no_proxy
    Name: arg
    Value: '""'
  - Key: DOCKER_VERSION
    Name: arg
    Value: 18.06.1~ce~3-0~ubuntu
  - Key: DOCKER_COMPOSE_VERSION
    Name: arg
    Value: 1.22.0
  - Key: JENKINS_USER
    Name: arg
    Value: '"jenkins"'
  - Key: JENKINS_PASSWORD
    Name: arg
    Value: '"jenkins"'
  - Key: NVM_VERSION
    Name: arg
    Value: '"v0.33.11"'
  - Env:
    - Key: http_proxy
      Value: ${http_proxy}
    - Key: https_proxy
      Value: ${https_proxy}
    - Key: no_proxy
      Value: ${no_proxy}
    Name: env
  - Env:
    - Key: JENKINS_USER
      Value: ${JENKINS_USER}
    Name: env
  - Env:
    - Key: USER
      Value: ${JENKINS_USER}
    - Key: PASSWORD
      Value: ${JENKINS_PASSWORD}
    - Key: GROUP
      Value: ${JENKINS_USER}
    - Key: USER_ID
      Value: "1000"
    - Key: USER_GID
      Value: "1000"
    Name: env
  - Env:
    - Key: HOME
      Value: /home/${USER}
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Name: shell
    Shell:
    - bash
    - --login
    - -c
  - CmdLine:
    - "apt-get update && \tapt-get -yqq install \t\topenssh-server \t\tapt-transport-https
      ca-certificates curl gnupg2 software-properties-common \t\topenjdk-8-jre-headless
      \t\tzip unzip \t\tchromium-browser \t\tlocales locales-all \t\t&& \tapt -y install
      python-minimal && \tcurl -fsSL https://download.docker.com/linux/ubuntu/gpg
      | apt-key add - && \tadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu
      $(grep 'VERSION_CODENAME' /etc/os-release | cut -d = -f 2) stable\" && \tapt-get
      update && \tapt-get -yqq install python-dev build-essential && \tapt-get -yqq
      install docker-ce=${DOCKER_VERSION} && \tapt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/* && \tlocale-gen en_US.UTF-8 && \tupdate-locale LANG=en_US.UTF-8"
    Name: run
    PrependShell: true
  - CmdLine:
    - "curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname
      -s`-`uname -m` > /usr/local/bin/docker-compose && \tchmod +x /usr/local/bin/docker-compose"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /var/run/sshd && \tgroupadd --gid \"${USER_GID}\" \"${USER}\" && \tuseradd
      --uid ${USER_ID} --gid ${USER_GID} --create-home --shell /bin/bash --password
      ${PASSWORD} ${USER} && \techo \"${USER}:${PASSWORD}\" | chpasswd && \techo \"IdentityFile
      ~/.ssh/id_rsa\" >> /etc/ssh/ssh_config && \techo \". ${HOME}/.profile\" >> /etc/environment"
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - curl -s "https://get.sdkman.io" | sed 's/\.bashrc/\.profile/g' | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o- https://raw.githubusercontent.com/creationix/nvm/$NVM_VERSION/install.sh
      | PROFILE=~/.profile bash
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"${HOME}/.local/bin:${PATH}"'
    Name: env
  - CmdLine:
    - "curl -O https://bootstrap.pypa.io/get-pip.py && \tpython get-pip.py --user
      && \trm get-pip.py && \tpip install awscli aws-sam-cli --upgrade --user --no-cache-dir"
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: expose
    Ports:
    - "22"
  - CmdLine:
    - /usr/sbin/sshd
    - -D
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
