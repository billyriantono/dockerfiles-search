{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.9",
      "SourceCode": "FROM alpine:3.9",
      "Platform": "",
      "From": {
        "Image": "alpine:3.9"
      },
      "Commands": [
        {
          "Maintainer": "stanzhou \"m@sq.mk\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.16.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     \u0026\u0026 CONFIG=\"        --prefix=/etc/nginx         --sbin-path=/usr/sbin/nginx         --modules-path=/usr/lib/nginx/modules         --conf-path=/etc/nginx/nginx.conf         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --pid-path=/var/run/nginx.pid         --lock-path=/var/run/nginx.lock         --http-client-body-temp-path=/var/cache/nginx/client_temp         --http-proxy-temp-path=/var/cache/nginx/proxy_temp         --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp         --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp         --http-scgi-temp-path=/var/cache/nginx/scgi_temp         --with-perl_modules_path=/usr/lib/perl5/vendor_perl         --user=nginx         --group=nginx         --with-compat         --with-file-aio         --with-threads         --with-http_addition_module         --with-http_auth_request_module         --with-http_dav_module         --with-http_flv_module         --with-http_gunzip_module         --with-http_gzip_static_module         --with-http_mp4_module         --with-http_random_index_module         --with-http_realip_module         --with-http_secure_link_module         --with-http_slice_module         --with-http_ssl_module         --with-http_stub_status_module         --with-http_sub_module         --with-http_v2_module         --with-mail         --with-mail_ssl_module         --with-stream         --with-stream_realip_module         --with-stream_ssl_module         --with-stream_ssl_preread_module         --with-cc-opt='-I/usr/local/include'         --with-ld-opt='-L/usr/local/lib'         --add-dynamic-module=/usr/src/ngx_http_geoip2_module         --add-module=/usr/src/lua-nginx-module-0.10.15         --add-module=/usr/src/ngx_devel_kit-0.3.0         \"     \u0026\u0026 addgroup -S nginx     \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx     \u0026\u0026 apk add --no-cache --virtual .build-deps         gcc         libc-dev         git         make         automake         autoconf         libtool         linux-headers         openssl-dev         pcre-dev         zlib-dev         curl         gnupg         libxslt-dev         gd-dev     \u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     \u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     \u0026\u0026 git clone --recursive  http://luajit.org/git/luajit-2.0.git     \u0026\u0026 curl -fSL https://github.com/openresty/lua-nginx-module/archive/v0.10.15.tar.gz  -o lua-nginx-module.tar.gz     \u0026\u0026 curl -fSL https://github.com/simplresty/ngx_devel_kit/archive/v0.3.0.tar.gz  -o ngx_devel_kit.tar.gz     \u0026\u0026 git clone --recursive https://github.com/maxmind/libmaxminddb.git     \u0026\u0026 git clone --recursive https://github.com/leev/ngx_http_geoip2_module.git     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 found='';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ; do         echo \"Fetching GPG key $GPG_KEYS from $server\";         gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \u0026\u0026 found=yes \u0026\u0026 break;     done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $GPG_KEYS\" \u0026\u0026 exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     \u0026\u0026 rm -r \"$GNUPGHOME\" nginx.tar.gz.asc     \u0026\u0026 mkdir -p /usr/src     \u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz     \u0026\u0026 rm nginx.tar.gz     \u0026\u0026 cp -r ./libmaxminddb /usr/src     \u0026\u0026 cp -r ./ngx_http_geoip2_module /usr/src     \u0026\u0026 rm -rf libmaxminddb     \u0026\u0026 rm -rf ngx_http_geoip2_module     \u0026\u0026 cp -r ./luajit-2.0 /usr/src     \u0026\u0026 tar -zxC /usr/src -f lua-nginx-module.tar.gz     \u0026\u0026 tar -zxC /usr/src -f ngx_devel_kit.tar.gz     \u0026\u0026 rm lua-nginx-module.tar.gz     \u0026\u0026 rm ngx_devel_kit.tar.gz     \u0026\u0026 export LUAJIT_LIB=/usr/local/lib     \u0026\u0026 export LUAJIT_INC=/usr/local/include/luajit-2.0     \u0026\u0026 cd /usr/src/luajit-2.0     \u0026\u0026 make \u0026\u0026 make install     \u0026\u0026 mkdir /etc/ld.so.conf.d     \u0026\u0026 echo '/usr/local/lib' \u003e\u003e /etc/ld.so.conf.d/lua.conf     \u0026\u0026 cd /usr/src     \u0026\u0026 rm -rf luajit-2.0     \u0026\u0026 export CFLAGS=\"-O2\"         CPPFLAGS=\"-O2\"         LDFLAGS=\"-O2\"     \u0026\u0026 cd /usr/src/libmaxminddb     \u0026\u0026 ./bootstrap     \u0026\u0026 ./configure     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make install     \u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION     \u0026\u0026 ./configure $CONFIG     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make install     \u0026\u0026 mkdir -p /usr/share/nginx/html/     \u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/     \u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/     \u0026\u0026 strip /usr/sbin/nginx*     \u0026\u0026 strip /usr/lib/nginx/modules/*.so     \u0026\u0026 rm -rf /usr/src/nginx-$NGINX_VERSION     \u0026\u0026 rm -rf /usr/src/libmaxminddb     \u0026\u0026 rm -rf /usr/src/ngx_http_geoip2_module     \u0026\u0026 rm -rf /usr/src/lua-nginx-module-0.10.15     \u0026\u0026 rm -rf /usr/src/ngx_devel_kit-0.3.0     \u0026\u0026 apk add --no-cache --virtual .gettext gettext     \u0026\u0026 mv /usr/bin/envsubst /tmp/     \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )\"     \u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps     \u0026\u0026 apk --no-cache add tzdata     \u0026\u0026 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime     \u0026\u0026 echo \"Asia/Shanghai\" \u003e /etc/timezone     \u0026\u0026 addgroup -Sg 82 www-data 2\u003e/dev/null     \u0026\u0026 addgroup nginx www-data 2\u003e/dev/null     \u0026\u0026 apk del .build-deps     \u0026\u0026 apk del .gettext     \u0026\u0026 mv /tmp/envsubst /usr/local/bin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}