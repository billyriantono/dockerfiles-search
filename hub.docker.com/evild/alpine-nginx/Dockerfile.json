{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "evild/alpine-base:3.0.0",
      "SourceCode": "FROM evild/alpine-base:3.0.0",
      "Platform": "",
      "From": {
        "Image": "evild/alpine-base:3.0.0"
      },
      "Commands": [
        {
          "Maintainer": "Dominique HAAS \u003ccontact@dominique-haas.fr\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "NGINX_VERSION",
          "Name": "arg",
          "Value": "NIGHTLY"
        },
        {
          "Key": "LIBRESSL_VERSION",
          "Name": "arg",
          "Value": "2.4.2"
        },
        {
          "Env": [
            {
              "Key": "GPG_KEYS",
              "Value": "A1EB079B8D3EB92B4EBD3139663AF51BD5E4D8D5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "build_pkgs=\"build-base linux-headers pcre-dev curl zlib-dev gnupg\"   \u0026\u0026 runtime_pkgs=\"ca-certificates pcre zlib\"   \u0026\u0026 apk --no-cache add ${build_pkgs} ${runtime_pkgs}   \u0026\u0026 for key in $GPG_KEYS; do \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone   \u0026\u0026 mkdir /tmp/libressl   \u0026\u0026 cd /tmp/libressl   \u0026\u0026 curl -fSL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz -o libressl.tar.gz   \u0026\u0026 curl -fSL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz.asc -o libressl.tar.gz.asc   \u0026\u0026 gpg --batch --verify libressl.tar.gz.asc libressl.tar.gz   \u0026\u0026 tar -zxf libressl.tar.gz   \u0026\u0026 cd libressl-${LIBRESSL_VERSION}   \u0026\u0026 ./configure     LDFLAGS=-lrt     --prefix=/tmp/libressl/.openssl/   \u0026\u0026 make install-strip -j $(getconf _NPROCESSORS_ONLN)   \u0026\u0026 mkdir -p /tmp/src   \u0026\u0026 cd /tmp/src   \u0026\u0026 curl -fSL http://hg.nginx.org/nginx/archive/tip.tar.gz -o nginx.tar.gz   \u0026\u0026 tar -zxf nginx.tar.gz   \u0026\u0026 cd nginx-*/   \u0026\u0026 ./auto/configure     --user=www-data     --group=www-data     --sbin-path=/usr/sbin/nginx     --with-http_ssl_module     --with-openssl=/tmp/libressl/libressl-${LIBRESSL_VERSION}     --with-ld-opt=\"-lrt\"     --with-http_realip_module     --with-http_addition_module     --with-http_sub_module     --with-http_dav_module     --with-http_flv_module     --with-http_mp4_module     --with-http_gunzip_module     --with-http_gzip_static_module     --with-http_random_index_module     --with-http_secure_link_module     --with-http_stub_status_module     --with-http_auth_request_module     --with-mail     --with-mail_ssl_module     --with-file-aio     --with-ipv6     --with-threads     --with-stream     --with-stream_ssl_module     --with-http_v2_module     --prefix=/etc/nginx     --http-log-path=/var/log/nginx/access.log     --error-log-path=/var/log/nginx/error.log   \u0026\u0026 make -j $(getconf _NPROCESSORS_ONLN)   \u0026\u0026 make install   \u0026\u0026 make clean   \u0026\u0026 rm -rf /tmp/ /root/.gnupg   \u0026\u0026 strip -s /usr/sbin/nginx   \u0026\u0026 apk del ${build_pkgs}   \u0026\u0026 adduser -D www-data   \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log   \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "root",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        }
      ]
    }
  ]
}