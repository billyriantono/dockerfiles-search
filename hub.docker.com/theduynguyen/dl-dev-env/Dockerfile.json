{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Key": "conda_version",
          "Name": "arg",
          "Value": "Miniconda2-4.3.11"
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y bzip2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $CONDA_DIR \u0026\u0026     echo export PATH=$CONDA_DIR/bin:'$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y wget git libhdf5-dev g++ graphviz \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/${conda_version}-Linux-x86_64.sh \u0026\u0026     echo \"d573980fe3b5cdf80485add2466463f5 *${conda_version}-Linux-x86_64.sh\" | md5sum -c - \u0026\u0026     /bin/bash /${conda_version}-Linux-x86_64.sh -f -b -p $CONDA_DIR \u0026\u0026     rm ${conda_version}-Linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install ipdb pytest xmltodict pytest-cov python-coveralls coverage pytest-xdist pep8 pytest-pep8 pydot_ng jedi nose rednose Flask \u0026\u0026     conda install Pillow scikit-image scikit-learn notebook pandas seaborn matplotlib pyyaml six h5py \u0026\u0026     pip install tensorflow \u0026\u0026     pip install keras \u0026\u0026     conda clean -yt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "deeplearner"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \u0026\u0026     chown -R deeplearner /home/deeplearner \u0026\u0026     mkdir -p $CONDA_DIR \u0026\u0026     mkdir -p /src \u0026\u0026     mkdir -p /data \u0026\u0026     mkdir -p /work \u0026\u0026     chown deeplearner $CONDA_DIR -R \u0026\u0026     chown deeplearner /src \u0026\u0026     chown deeplearner /data \u0026\u0026     chown deeplearner /work"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "deeplearner"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "'/src/:$PYTHONPATH'"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONDONTWRITEBYTECODE",
              "Value": "True"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm-256color"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/src"
        },
        {
          "Name": "expose",
          "Ports": [
            "6006"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "jupyter notebook --port=8888 --no-browser --ip=0.0.0.0"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}