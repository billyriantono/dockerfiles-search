{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "lsiobase/alpine.python:3.9",
      "SourceCode": "FROM lsiobase/alpine.python:3.9",
      "Platform": "",
      "From": {
        "Image": "lsiobase/alpine.python:3.9"
      },
      "Commands": [
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "LAZYLIBRARIAN_COMMIT",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "build_version",
              "Value": "\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"chbmb\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"**** install build packages ****\" \u0026\u0026  apk add --no-cache --virtual=build-dependencies \tg++ \tgcc \tmake \u0026\u0026  echo \"**** install runtime packages ****\" \u0026\u0026  apk add --no-cache         mesa-gl \tghostscript \u0026\u0026  echo \"***** build unrarlib ****\" \u0026\u0026  rar_ver=$(apk info unrar | grep unrar- | cut -d \"-\" -f2 | head -1) \u0026\u0026  mkdir -p \t/tmp/unrar \u0026\u0026  curl -o  /tmp/unrar-src.tar.gz -L \t\"http://www.rarlab.com/rar/unrarsrc-${rar_ver}.tar.gz\" \u0026\u0026  tar xf  /tmp/unrar-src.tar.gz -C \t/tmp/unrar --strip-components=1 \u0026\u0026  cd /tmp/unrar \u0026\u0026  make lib \u0026\u0026  make install-lib \u0026\u0026  echo \"**** install app ****\" \u0026\u0026  mkdir -p \t/app/lazylibrarian \u0026\u0026  if [ -z ${LAZYLIBRARIAN_COMMIT+x} ]; then  \tLAZYLIBRARIAN_COMMIT=$(curl -sX GET \"https://gitlab.com/api/v4/projects/9317860/repository/commits/master\"     \t| awk '/id/{print $4;exit}' FS='[\"\"]');  fi \u0026\u0026  echo \"Building from commit ${LAZYLIBRARIAN_COMMIT}\" \u0026\u0026  echo \"${LAZYLIBRARIAN_COMMIT}\" \u003e /defaults/version.txt \u0026\u0026  curl -o  /tmp/lazylibrarian.tar.gz -L \t\"https://gitlab.com/LazyLibrarian/LazyLibrarian/repository/archive.tar.gz?sha={$LAZYLIBRARIAN_COMMIT}\" \u0026\u0026  tar xf  /tmp/lazylibrarian.tar.gz -C \t/app/lazylibrarian --strip-components=1 \u0026\u0026  echo \"**** install GNU libc (aka glibc) ****\" \u0026\u0026  ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \u0026\u0026  ALPINE_GLIBC_PACKAGE_VERSION=$(curl -s https://api.github.com/repos/sgerrand/alpine-pkg-glibc/releases/latest | grep 'tag_name' | cut -d\\\" -f4) \u0026\u0026  ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026  ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026  ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026  mkdir -p /var/cache/apk \u0026\u0026  apk add --no-cache --virtual=.build-dependencies \u0026\u0026  apk add --no-cache parallel \u0026\u0026     wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\"          -O \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     apk add --no-cache         \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \u0026\u0026     apk del .build-dependencies \u0026\u0026     rm \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     rm \"/root/.wget-hsts\" \u0026\u0026     rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026 \trm -rf /var/cache/apk/* \u0026\u0026  echo \"**** install calibre binary ****\" \u0026\u0026  LD_LIBRARY_PATH=\"/usr/lib:/opt/calibre/lib\" \u0026\u0026  PATH=\"$PATH:/opt/calibre\" \u0026\u0026  wget -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py |       python -c       \"import sys;        main=lambda:sys.stderr.write('Download failed\\n');        exec(sys.stdin.read());        main(install_dir='/opt', isolated=True)\" \u0026\u0026     rm -rf /tmp/calibre-installer-cache \u0026\u0026  echo \"**** cleanup ****\" \u0026\u0026  apk del --purge \tbuild-dependencies \u0026\u0026  rm -rf \t/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "root/",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5299"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config",
            "/books",
            "/downloads"
          ]
        }
      ]
    }
  ]
}