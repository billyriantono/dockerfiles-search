MetaArgs: null
Stages:
- BaseName: python:3.7
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Mojob"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: TERM
      Value: linux
    Name: env
  - Key: AIRFLOW_VERSION
    Name: arg
    Value: 1.10.4
  - Key: AIRFLOW_USER_HOME
    Name: arg
    Value: /usr/local/airflow
  - Key: AIRFLOW_DEPS
    Name: arg
    Value: '""'
  - Key: PYTHON_DEPS
    Name: arg
    Value: '""'
  - Env:
    - Key: AIRFLOW_HOME
      Value: ${AIRFLOW_USER_HOME}
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_CTYPE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_MESSAGES
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - set -ex     && buildDeps='         freetds-dev         libkrb5-dev         libsasl2-dev         libssl-dev         libffi-dev         libpq-dev         git     '     &&
      apt-get update -yqq     && apt-get upgrade -yqq     && apt-get install -yqq
      --no-install-recommends         $buildDeps         freetds-bin         build-essential         default-libmysqlclient-dev         apt-utils         curl         rsync         netcat         locales     &&
      sed -i 's/^# en_US.UTF-8 UTF-8$/en_US.UTF-8 UTF-8/g' /etc/locale.gen     &&
      locale-gen     && update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8     && useradd
      -ms /bin/bash -d ${AIRFLOW_USER_HOME} airflow     && pip install -U pip setuptools
      wheel     && pip install pytz     && pip install pyOpenSSL     && pip install
      ndg-httpsclient     && pip install pyasn1     && pip install apache-airflow[crypto,celery,postgres,hive,jdbc,mysql,ssh${AIRFLOW_DEPS:+,}${AIRFLOW_DEPS}]==${AIRFLOW_VERSION}     &&
      pip install 'redis==3.2'     && if [ -n "${PYTHON_DEPS}" ]; then pip install
      ${PYTHON_DEPS}; fi     && apt-get purge --auto-remove -yqq $buildDeps     &&
      apt-get autoremove -yqq --purge     && apt-get clean     && rm -rf         /var/lib/apt/lists/*         /tmp/*         /var/tmp/*         /usr/share/man         /usr/share/doc         /usr/share/doc-base
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y         build-essential         cmake         git         wget         unzip         yasm         pkg-config         libswscale-dev         libtbb2         libtbb-dev         libjpeg-dev         libpng-dev         libtiff-dev         libavformat-dev         libpq-dev         graphviz         ffmpeg     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install numpy
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - Env:
    - Key: OPENCV_VERSION
      Value: '"4.1.0"'
    Name: env
  - CmdLine:
    - wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && unzip
      ${OPENCV_VERSION}.zip && mkdir /opencv-${OPENCV_VERSION}/cmake_binary && cd
      /opencv-${OPENCV_VERSION}/cmake_binary && cmake -DBUILD_TIFF=ON   -DBUILD_opencv_java=OFF   -DWITH_CUDA=OFF   -DWITH_OPENGL=ON   -DWITH_OPENCL=ON   -DWITH_IPP=ON   -DWITH_TBB=ON   -DWITH_EIGEN=ON   -DWITH_V4L=ON   -DBUILD_TESTS=OFF   -DBUILD_PERF_TESTS=OFF   -DCMAKE_BUILD_TYPE=RELEASE   -DCMAKE_INSTALL_PREFIX=$(python3.7
      -c "import sys; print(sys.prefix)")   -DPYTHON_EXECUTABLE=$(which python3.7)   -DPYTHON_INCLUDE_DIR=$(python3.7
      -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")   -DPYTHON_PACKAGES_PATH=$(python3.7
      -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")   ..
      && make install && rm /${OPENCV_VERSION}.zip && rm -r /opencv-${OPENCV_VERSION}
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s   /usr/local/python/cv2/python-3.7/cv2.cpython-37m-x86_64-linux-gnu.so   /usr/local/lib/python3.7/site-packages/cv2.so
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install dlib
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - s2i
    - /usr/local/bin/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - script/entrypoint.sh
    - /entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/airflow.cfg
    - ${AIRFLOW_USER_HOME}/airflow.cfg
  - CmdLine:
    - 'chown -R airflow: ${AIRFLOW_USER_HOME}'
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "5555"
    - "8080"
    - "8793"
  - Name: user
    User: airflow
  - Name: workdir
    Path: ${AIRFLOW_USER_HOME}
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - webserver
    Name: cmd
    PrependShell: false
  From:
    Image: python:3.7
  Name: ""
  Platform: ""
  SourceCode: FROM python:3.7
