{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "openjdk:13-alpine",
      "SourceCode": "FROM openjdk:13-alpine",
      "Platform": "",
      "From": {
        "Image": "openjdk:13-alpine"
      },
      "Commands": [
        {
          "Key": "EMBED",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Key": "SPARK_VERSION",
          "Name": "arg",
          "Value": "latest"
        },
        {
          "Env": [
            {
              "Key": "SPARK_VERSION",
              "Value": "$SPARK_VERSION"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "LATEST_SPARK_VERSION",
            "/LATEST_SPARK_VERSION"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/tmp/build"
        },
        {
          "CmdLine": [
            "apk add --update --no-cache curl openssl \u0026\u0026   mkdir /usr/local/bin/SparkGateway \u0026\u0026   echo -e \"\\n* WORKAROUND: fetching letsencrypt intermediates we can get and building trusted CA chain as remotespark doesnt sent the intermediate :(\\n\" \u0026\u0026   echo | openssl s_client -connect letsencrypt.org:443 -showcerts \u003e le.pem \u0026\u0026   curl -L https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt           https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt           https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem.txt           https://letsencrypt.org/certs/letsencryptauthorityx4.pem.txt           \u003e le-intermediates.pem \u0026\u0026   cat /etc/ssl/certs/ca-certificates.crt le-intermediates.pem le.pem \u003e\u003e /usr/local/bin/SparkGateway/chain.pem \u0026\u0026   echo -e \"\\n* starting actual docker build tasks\\n\";   rm -f /opt/openjdk-13/lib/src.zip;   [[ \"$SPARK_VERSION\" == \"$(cat /LATEST_SPARK_VERSION)\" ]] \u0026\u0026     echo -e \"\\n* notice: version ${SPARK_VERSION} is 'latest', using 'latest' instead\\n\" \u0026\u0026     SPARK_VERSION=\"latest\" ;   [[ \"$SPARK_VERSION\" == \"latest\" ]] \u0026\u0026 SPARKVER=\"\" || SPARKVER=\"${SPARK_VERSION}/\";   url=\"https://www.remotespark.com/view/${SPARKVER}SparkGateway.zip\";   [[ \"$EMBED\" == \"true\" ]] \u0026\u0026 (       echo -e \"\\n* EMBEDing RemoteSpark Gateway version:$SPARK_VERSION from url:$url\\n\" \u0026\u0026       curl -fLO $url             --cacert /usr/local/bin/SparkGateway/chain.pem;       unzip SparkGateway.zip -d /usr/local/bin;       rm -f SparkGateway.zip /usr/local/bin/SparkGateway/html/*.pdf;     );   [[ \"$EMBED\" == \"true\" ]] \u0026\u0026       [[ ! -f /usr/local/bin/SparkGateway/SparkGateway.jar ]] \u0026\u0026 exit 1;   [[ \"$EMBED\" == \"false\" ]] \u0026\u0026       echo -e \"\\n* Test availability for RemoteSpark Gateway version:$SPARK_VERSION from url:$url\\n\" \u0026\u0026       curl -I $url --cacert /usr/local/bin/SparkGateway/chain.pem 2\u003e/dev/null | head -1 | grep -v '200 OK' \u0026\u0026 exit 1;   rm -rf /tmp/build;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/bin/SparkGateway"
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "run_remotespark"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}