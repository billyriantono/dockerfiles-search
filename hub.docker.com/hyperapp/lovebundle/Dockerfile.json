{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine",
      "SourceCode": "FROM alpine",
      "Platform": "",
      "From": {
        "Image": "alpine"
      },
      "Commands": [
        {
          "Maintainer": "HyperApp \u003chyperappcloud@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "SS_VER",
          "Name": "arg",
          "Value": "3.2.3"
        },
        {
          "Key": "SS_OBFS_VER",
          "Name": "arg",
          "Value": "0.0.5"
        },
        {
          "Key": "OC_VERSION",
          "Name": "arg",
          "Value": "0.11.11"
        },
        {
          "Env": [
            {
              "Key": "TLS_PORT",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DASHBOARD_PORT",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DASHBOARD_PASS",
              "Value": "hyperapp"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CERTS_ROOT",
              "Value": "/srv/certs"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CA_ROOT",
              "Value": "/srv/ca"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /srv/certs \u0026\u0026     mkdir -p /var/log/love \u0026\u0026     mkdir -p /etc/love/ \u0026\u0026     mkdir -p /opt/ \u0026\u0026     mkdir -p $CA_ROOT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/srv/certs/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "$CA_ROOT"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/log/love"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/love"
          ]
        },
        {
          "Env": [
            {
              "Key": "LOVE_USERNAME",
              "Value": "hyperapp"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LOVE_PASSWORD",
              "Value": "hyperapp"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LISTEN_ADDRESS",
              "Value": "127.0.0.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SS_TLS_PORT",
              "Value": "21025"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSR_TLS_PORT",
              "Value": "21027"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "V2RAY_TLS_PORT",
              "Value": "21029"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "V2RAY_WS_PORT",
              "Value": "21030"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HTTP2_PORT",
              "Value": "21031"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HTTP_PROXY_PORT",
              "Value": "21032"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCSERV_PORT",
              "Value": "21033"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OC_LAN_NETWORK",
              "Value": "10.10.10.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_SS",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SS_METHOD",
              "Value": "rc4-md5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SS_TLS_DOMAINS",
              "Value": "bing.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_SSR",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSR_METHOD",
              "Value": "none"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSR_PROTOCOL",
              "Value": "auth_chain_b"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSR_TLS_DOMAIN",
              "Value": "cloudflare.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_V2RAY",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "V2RAY_INSECURE",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "V2RAY_TLS_DOMAIN",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "V2RAY_WS_DOMAIN",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_HTTP2",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HTTP2_DOMAIN",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_OCSERV",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCSERV_INSECURE",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCSERV_DOMAIN",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "etc",
            "/etc/love/templates"
          ]
        },
        {
          "CmdLine": [
            "apk add --no-cache curl bash \u0026\u0026     curl -sSO https://raw.githubusercontent.com/tests-always-included/mo/master/mo \u0026\u0026     mv mo /usr/local/bin \u0026\u0026     chmod +x /usr/local/bin/mo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache python py-pip \u0026\u0026 pip install supervisor supervisor-stdout"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk add --no-cache udns \u0026\u0026     apk add --no-cache --virtual .build-deps                                 git                                 autoconf                                 automake                                 make                                 build-base                                 curl                                 libev-dev                                 c-ares-dev                                 libtool                                 linux-headers                                 libsodium-dev                                 mbedtls-dev                                 pcre-dev                                 tar                                 udns-dev \u0026\u0026     cd /tmp/ \u0026\u0026     git clone https://github.com/shadowsocks/shadowsocks-libev.git \u0026\u0026     cd shadowsocks-libev \u0026\u0026     git checkout v$SS_VER \u0026\u0026     git submodule update --init --recursive \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure --prefix=/usr --disable-documentation \u0026\u0026     make install \u0026\u0026     cd /tmp/ \u0026\u0026     git clone https://github.com/shadowsocks/simple-obfs.git shadowsocks-obfs \u0026\u0026     cd shadowsocks-obfs \u0026\u0026     git checkout v$SS_OBFS_VER \u0026\u0026     git submodule update --init --recursive \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure --prefix=/usr --disable-documentation \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     runDeps=\"$(         scanelf --needed --nobanner /usr/bin/ss-*             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | xargs -r apk info --installed             | sort -u     )\" \u0026\u0026     apk add --no-cache --virtual .run-deps $runDeps \u0026\u0026     apk del .build-deps \u0026\u0026     rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "shadowsocksr-manyuser.zip",
            "/tmp"
          ]
        },
        {
          "CmdLine": [
            "unzip /tmp/shadowsocksr-manyuser.zip -d /tmp/     \u0026\u0026 mv /tmp/shadowsocksr-manyuser /opt/     \u0026\u0026 rm /tmp/shadowsocksr-manyuser.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "v2ray/official:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/bin/v2ray/v2ray",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "v2ray/official:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/bin/v2ray/v2ctl",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "v2ray/official:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/bin/v2ray/geoip.dat",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "v2ray/official:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/bin/v2ray/geosite.dat",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "apk add --no-cache nghttp2 openssl ca-certificates apache2-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --update --no-cache musl-dev iptables libev openssl gnutls-dev readline-dev libnl3-dev lz4-dev libseccomp-dev gnutls-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "buildDeps=\"xz gcc autoconf make linux-headers libev-dev  \"; \tset -x \t\u0026\u0026 apk add --no-cache $buildDeps \t\u0026\u0026 mkdir /src \u0026\u0026 cd /src \t\u0026\u0026 OC_FILE=\"ocserv-$OC_VERSION\" \t\u0026\u0026 rm -fr download.html \t\u0026\u0026 wget ftp://ftp.infradead.org/pub/ocserv/$OC_FILE.tar.xz \t\u0026\u0026 tar xJf $OC_FILE.tar.xz \t\u0026\u0026 rm -fr $OC_FILE.tar.xz \t\u0026\u0026 cd $OC_FILE \t\u0026\u0026 sed -i '/#define DEFAULT_CONFIG_ENTRIES /{s/96/200/}' src/vpn.h \t\u0026\u0026 ./configure \t\u0026\u0026 make -j\"$(nproc)\" \t\u0026\u0026 make install \t\u0026\u0026 mkdir -p /etc/ocserv \t\u0026\u0026 cp ./doc/sample.config /etc/ocserv/ocserv.conf \t\u0026\u0026 cd \t\u0026\u0026 rm -fr ./$OC_FILE \t\u0026\u0026 apk del --purge $buildDeps         \u0026\u0026 rm -rf /src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache haproxy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/usr/local/bin"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "gencert.sh",
            "/usr/local/bin"
          ]
        },
        {
          "CmdLine": [
            "entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}