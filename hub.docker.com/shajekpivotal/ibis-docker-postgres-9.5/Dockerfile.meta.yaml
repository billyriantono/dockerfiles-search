MetaArgs: null
Stages:
- BaseName: alpine:3.9
  Commands:
  - CmdLine:
    - "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo
      \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql'
      ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.utf8
    Name: env
  - CmdLine:
    - mkdir /docker-entrypoint-initdb.d
    Name: run
    PrependShell: true
  - Env:
    - Key: PG_MAJOR
      Value: "9.5"
    Name: env
  - Env:
    - Key: PG_VERSION
      Value: 9.5.17
    Name: env
  - Env:
    - Key: PG_SHA256
      Value: 88f9e37a0069f2fd4442d1d0d5d811d3121cac685514435b0248d0674723f705
    Name: env
  - CmdLine:
    - "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates
      \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\"
      \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p
      /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory
      /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&&
      apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev
      dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev
      \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run  \t\tpython-dev
      \ \t\tpython3-dev \t\tutil-linux-dev \t\tzlib-dev \t\t&& cd /usr/src/postgresql
      \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\"
      { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h
      > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new
      \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&&
      gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess
      'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'
      \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety
      \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld
      \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local
      \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t
      \t\t--with-python \t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t&&
      make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install
      \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive
      /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\"
      $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache
      --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&&
      apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql
      \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name
      '*.a' -delete"
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql
      && chmod 2777 /var/run/postgresql
    Name: run
    PrependShell: true
  - Env:
    - Key: PGDATA
      Value: /var/lib/postgresql/data
    Name: env
  - CmdLine:
    - mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/lib/postgresql/data
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin/
  - CmdLine:
    - 'ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat'
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - postgres
    Name: cmd
    PrependShell: false
  - Env:
    - Key: POSTGIS_VERSION
      Value: 2.5.2
    Name: env
  - Env:
    - Key: POSTGIS_SHA256
      Value: 225aeaece00a1a6a9af15526af81bef2af27f4c198de820af1367a792ee1d1a9
    Name: env
  - CmdLine:
    - set -ex         && apk add --no-cache --virtual .fetch-deps         ca-certificates         openssl         tar         &&
      wget -O postgis.tar.gz "https://github.com/postgis/postgis/archive/$POSTGIS_VERSION.tar.gz"     &&
      echo "$POSTGIS_SHA256 *postgis.tar.gz" | sha256sum -c -     && mkdir -p /usr/src/postgis     &&
      tar         --extract         --file postgis.tar.gz         --directory /usr/src/postgis         --strip-components
      1     && rm postgis.tar.gz         && apk add --no-cache --virtual .build-deps         autoconf         automake         g++         json-c-dev         libtool         libxml2-dev         make         perl         &&
      apk add --no-cache --virtual .build-deps-edge         --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing         --repository
      http://dl-cdn.alpinelinux.org/alpine/edge/main         gdal-dev         geos-dev         proj-dev         protobuf-c-dev     &&
      cd /usr/src/postgis     && ./autogen.sh     && ./configure     && make     &&
      make install     && apk add --no-cache --virtual .postgis-rundeps         json-c     &&
      apk add --no-cache --virtual .postgis-rundeps-edge         --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing         --repository
      http://dl-cdn.alpinelinux.org/alpine/edge/main         geos         gdal         proj         protobuf-c     &&
      cd /     && rm -rf /usr/src/postgis     && apk del .fetch-deps .build-deps .build-deps-edge
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./initdb-postgis.sh
    - /docker-entrypoint-initdb.d/postgis.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./update-postgis.sh
    - /usr/local/bin
  - Name: expose
    Ports:
    - "5432"
  From:
    Image: alpine:3.9
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.9
