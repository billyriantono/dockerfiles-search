MetaArgs: null
Stages:
- As: builder
  BaseName: amazonlinux:2.0.20190508-with-sources
  Commands:
  - Env:
    - Key: BUILD_DIR
      Value: /build
    - Key: CACHE_DIR
      Value: /build/cache
    - Key: TARGET_DIR
      Value: /opt
    Name: env
  - Env:
    - Key: PKG_CONFIG_PATH
      Value: '"${CACHE_DIR}/lib64/pkgconfig:${CACHE_DIR}/lib/pkgconfig"'
    - Key: PATH
      Value: '"/root/.local/bin:/root/.cargo/bin:${CACHE_DIR}/bin:/var/lang/bin:${PATH}"'
    - Key: CPPFLAGS
      Value: '"-I${CACHE_DIR}/include -fPIC"'
    - Key: LDFLAGS
      Value: '"-L${CACHE_DIR}/lib -L${CACHE_DIR}/lib64 -static"'
    - Key: CC
      Value: clang
    - Key: TERM
      Value: xterm-256color
    Name: env
  - Name: workdir
    Path: /build
  - CmdLine:
    - "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      &&     yum install -y clang python3 tar make pkgconfig file         gcc gcc-c++
      \        intltool flex bison shared-mime-info gperf \t\tninja-build         glibc-static
      --enablerepo=epel && \tpip3 install --user meson && \tcurl https://sh.rustup.rs
      -sSf | sh -s -- -y"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p ${CACHE_DIR} && mkdir -p ${TARGET_DIR} &&     export MAKEFLAGS="-j
      -l $(grep -c ^processor /proc/cpuinfo)"
    Name: run
    PrependShell: true
  - Env:
    - Key: CMAKE_VERSION
      Value: 3.15.0-rc1
    - Key: GLIB_VERSION
      Value: 2.61.1
    - Key: GLIB_MINOR_VERSION
      Value: "2.61"
    - Key: FREETYPE_VERSION
      Value: 2.10.0
    - Key: HARFBUZZ_VERSION
      Value: 2.5.0
    - Key: PIXMAN_VERSION
      Value: 0.38.4
    - Key: CAIRO_VERSION
      Value: 1.17.2
    - Key: LIBRSVG_VERSION
      Value: 2.40.16
    - Key: LIBRSVG_MINOR_VERSION
      Value: "2.40"
    - Key: GDK_PIXBUF_VERSION
      Value: 2.38.1
    - Key: GDK_PIXBUF_MINOR_VERSION
      Value: "2.38"
    - Key: LIBFFI_VERSION
      Value: 3.2.1
    - Key: BZIP2_VERSION
      Value: 1.0.6
    - Key: UTIL_LINUX_VERSION
      Value: "2.33"
    - Key: LIBPNG_VERSION
      Value: 1.6.37
    - Key: OPENJP2_VERSION
      Value: 2.3.1
    - Key: LIBTIFF_VERSION
      Value: 4.0.10
    - Key: LIBCROCO_VERSION
      Value: 0.6.8
    - Key: LIBCROCO_MINOR_VERSION
      Value: "0.6"
    - Key: FONTCONFIG_VERSION
      Value: 2.13.0
    - Key: LIBJPEG_VERSION
      Value: 9c
    - Key: PANGO_VERSION
      Value: 1.43.0
    - Key: PANGO_MINOR_VERSION
      Value: "1.43"
    - Key: LIBXML2_VERSION
      Value: 2.9.9
    - Key: ZLIB_VERSION
      Value: 1.2.11
    Name: env
  - Env:
    - Key: CMAKE_SOURCE
      Value: cmake-${CMAKE_VERSION}-Linux-x86_64.sh
    - Key: GLIB_SOURCE
      Value: glib-${GLIB_VERSION}.tar.xz
    - Key: FREETYPE_SOURCE
      Value: freetype-${FREETYPE_VERSION}.tar.gz
    - Key: HARFBUZZ_SOURCE
      Value: harfbuzz-${HARFBUZZ_VERSION}.tar.xz
    - Key: PIXMAN_SOURCE
      Value: pixman-${PIXMAN_VERSION}.tar.gz
    - Key: CAIRO_SOURCE
      Value: cairo-${CAIRO_VERSION}.tar.xz
    - Key: LIBRSVG_SOURCE
      Value: librsvg-${LIBRSVG_VERSION}.tar.xz
    - Key: GDK_PIXBUF_SOURCE
      Value: gdk-pixbuf-${GDK_PIXBUF_VERSION}.tar.xz
    - Key: LIBFFI_SOURCE
      Value: libffi-${LIBFFI_VERSION}.tar.gz
    - Key: BZIP2_SOURCE
      Value: bzip2-${BZIP2_VERSION}.tar.gz
    - Key: UTIL_LINUX_SOURCE
      Value: util-linux-${UTIL_LINUX_VERSION}.tar.xz
    - Key: LIBPNG_SOURCE
      Value: libpng-${LIBPNG_VERSION}.tar.xz
    - Key: OPENJP2_SOURCE
      Value: openjpeg-v${OPENJP2_VERSION}-linux-x86_64.tar.gz
    - Key: LIBTIFF_SOURCE
      Value: tiff-${LIBTIFF_VERSION}.tar.gz
    - Key: LIBCROCO_SOURCE
      Value: libcroco-${LIBCROCO_VERSION}.tar.xz
    - Key: FONTCONFIG_SOURCE
      Value: fontconfig-${FONTCONFIG_VERSION}.tar.bz2
    - Key: LIBJPEG_SOURCE
      Value: jpegsrc.v${LIBJPEG_VERSION}.tar.gz
    - Key: PANGO_SOURCE
      Value: pango-${PANGO_VERSION}.tar.xz
    - Key: LIBXML2_SOURCE
      Value: libxml2-${LIBXML2_VERSION}.tar.gz
    - Key: ZLIB_SOURCE
      Value: zlib-${ZLIB_VERSION}.tar.gz
    Name: env
  - CmdLine:
    - curl -LOf https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_SOURCE}
      &&     curl -LOf https://download.savannah.gnu.org/releases/freetype/${FREETYPE_SOURCE}
      &&     curl -LOf https://www.freedesktop.org/software/harfbuzz/release/${HARFBUZZ_SOURCE}
      &&     curl -LOf https://ftp.gnome.org/pub/gnome/sources/glib/${GLIB_MINOR_VERSION}/${GLIB_SOURCE}
      &&     curl -LOf https://www.cairographics.org/releases/${PIXMAN_SOURCE} &&     curl
      -LOf https://www.cairographics.org/snapshots/${CAIRO_SOURCE} &&     curl -LOf
      https://ftp.gnome.org/pub/GNOME/sources/librsvg/${LIBRSVG_MINOR_VERSION}/${LIBRSVG_SOURCE}
      &&     curl -LOf https://ftp.gnome.org/pub/GNOME/sources/gdk-pixbuf/${GDK_PIXBUF_MINOR_VERSION}/${GDK_PIXBUF_SOURCE}
      &&     curl -LOf https://sourceware.org/pub/libffi/${LIBFFI_SOURCE} &&     curl
      -LOf http://prdownloads.sourceforge.net/bzip2/${BZIP2_SOURCE} &&     curl -LOf
      https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v${UTIL_LINUX_VERSION}/${UTIL_LINUX_SOURCE}
      &&     curl -LOf https://prdownloads.sourceforge.net/libpng/${LIBPNG_SOURCE}
      &&     curl -LOf https://github.com/uclouvain/openjpeg/releases/download/v${OPENJP2_VERSION}/${OPENJP2_SOURCE}
      &&     curl -LOf https://download.osgeo.org/libtiff/${LIBTIFF_SOURCE} &&     curl
      -LOf https://ftp.gnome.org/pub/GNOME/sources/libcroco/${LIBCROCO_MINOR_VERSION}/${LIBCROCO_SOURCE}
      &&     curl -LOf https://www.freedesktop.org/software/fontconfig/release/${FONTCONFIG_SOURCE}
      &&     curl -LOf http://ijg.org/files/${LIBJPEG_SOURCE} &&     curl -LOf https://ftp.gnome.org/pub/GNOME/sources/pango/${PANGO_MINOR_VERSION}/${PANGO_SOURCE}
      &&     curl -LOf ftp://xmlsoft.org/libxml2/${LIBXML2_SOURCE} &&     curl -LOf
      https://zlib.net/${ZLIB_SOURCE} &&     for i in $PWD/*.tar.*; do tar xf $i &&
      rm $i; done
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: '"${CACHE_DIR}/lib64:${CACHE_DIR}/lib"'
    Name: env
  - CmdLine:
    - "sh ${CMAKE_SOURCE} --skip-license --prefix=${CACHE_DIR} && \tsh ${CMAKE_SOURCE}
      --skip-license"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd libffi-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - Env:
    - Key: CC
      Value: '"clang -fPIC"'
    Name: env
  - CmdLine:
    - "cd bzip2-* &&     sed -i 's/gcc/gcc -fPIC/g' Makefile && \tmake PREFIX=${CACHE_DIR}
      install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd util-linux-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath \t\t--disable-all-programs \t\t--enable-libuuid
      && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd zlib-* &&     CFLAGS="-fPIC" CC=clang ./configure --prefix ${CACHE_DIR} --static
      &&     make &&     make install
    Name: run
    PrependShell: true
  - Env:
    - Key: LDFLAGS
      Value: '"-L${CACHE_DIR}/lib -L${CACHE_DIR}/lib64"'
    Name: env
  - CmdLine:
    - cd libpng-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath &&     make &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd tiff-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath \t\t--disable-jpeg \t\t--disable-old-jpeg
      \t\t--disable-lzma \t\t--disable-jpeg12 \t\t--without-x && \tmake && \tmake
      install"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd glib-* &&     meson --prefix ${CACHE_DIR} _build -Dman=false -Dinternal_pcre=true
      -Dselinux=disabled         -Ddefault_library=static -Dnls=disabled -Dlibmount=false
      -Dxattr=false &&     ninja-build -v -C _build &&     ninja-build -C _build install
    Name: run
    PrependShell: true
  - CmdLine:
    - cd gdk-pixbuf-* &&     meson --prefix ${CACHE_DIR} _build -Dgir=false -Dx11=false
      -Ddefault_library=static         -Drelocatable=true -Dgio_sniffing=false -Dbuiltin_loaders=none
      -Dinstalled_tests=false &&     ninja-build -C _build &&     ninja-build -C _build
      install
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd libxml2-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath \t\t--without-history \t\t--without-python
      && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - Env:
    - Key: FREETYPE_WITHOUT_HB_DIR
      Value: ${BUILD_DIR}/freetype-${FREETYPE_VERSION}-without-harfbuzz
    Name: env
  - CmdLine:
    - "cp -r freetype-${FREETYPE_VERSION} /tmp/ && \trm -rf ${FREETYPE_WITHOUT_HB_DIR}
      && \tmv /tmp/freetype-${FREETYPE_VERSION} ${FREETYPE_WITHOUT_HB_DIR} && \tcd
      ${FREETYPE_WITHOUT_HB_DIR} &&     ./configure --prefix ${CACHE_DIR} --disable-shared
      --enable-static --disable-dependency-tracking --disable-rpath         --without-harfbuzz
      && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "tar xf fontconfig-2.13.0.tar.bz2 && rm fontconfig-2.13.0.tar.bz2 &&     cd
      fontconfig-* && \t./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath         --enable-libxml2 --disable-docs
      && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd harfbuzz-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath         --with-freetype --with-glib
      --with-fontconfig && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd freetype-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath         --with-harfbuzz --with-png
      && \tmake distclean clean && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd libcroco-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath \t\t--disable-gtk-doc \t\t--disable-gtk-doc-html
      && \tmake && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd pixman-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath         --disable-gtk && \tmake
      && \tmake install"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd cairo-* &&     ./configure --prefix ${CACHE_DIR} --disable-shared --enable-static
      --disable-dependency-tracking --disable-rpath \t\t--disable-gtk-doc \t\t--disable-gtk-doc-html
      \t\t--disable-valgrind \t\t--disable-xlib \t\t--disable-xlib-xrender \t\t--disable-xcb
      \t\t--disable-xlib-xcb \t\t--disable-xcb-shm \t\t--disable-qt \t\t--disable-quartz
      \t\t--disable-quartz-font \t\t--disable-quartz-image \t\t--enable-png \t\t--enable-pdf
      \t\t--enable-svg \t\t--disable-test-surfaces \t\t--enable-gobject \t\t--without-x
      \t\t--disable-interpreter \t\t--disable-full-testing \t\t--disable-gl \t\t--disable-glx
      \t\t--disable-egl \t\t--disable-wgl \t\t--enable-xml \t\t--disable-trace &&
      \    make &&     make install"
    Name: run
    PrependShell: true
  - Env:
    - Key: LDFLAGS
      Value: '"-lpng -luuid -lxml2 -lz -lbz2 -lpixman-1 ${LDFLAGS}"'
    Name: env
  - CmdLine:
    - cd pango-${PANGO_VERSION} &&     sed -i 's/xlib/xlibdontfindthis/g' meson.build
      &&     meson --prefix ${CACHE_DIR} _build -Dgir=false -Ddefault_library=static
      &&     ninja-build -C _build &&     ninja-build -C _build install
    Name: run
    PrependShell: true
  - Env:
    - Key: CC
      Value: '"clang -fPIC"'
    - Key: LDFLAGS
      Value: '"-Wl,-z,defs -L${CACHE_DIR}/lib -L${CACHE_DIR}/lib64"'
    - Key: CPPFLAGS
      Value: '"-I${CACHE_DIR}/include"'
    Name: env
  - CmdLine:
    - "cd librsvg-* &&     ./configure         --prefix=${TARGET_DIR}         --disable-introspection
      \        --enable-option-checking \t\t--disable-dependency-tracking \t\t--disable-shared
      \t\t--enable-static \t\t--disable-pixbuf-loader \t\t--disable-gtk-doc &&     make
      &&     make install &&     rm -r ${TARGET_DIR}/share"
    Name: run
    PrependShell: true
  From:
    Image: amazonlinux:2.0.20190508-with-sources
  Name: builder
  Platform: ""
  SourceCode: FROM amazonlinux:2.0.20190508-with-sources AS builder
- As: librsvg
  BaseName: amazonlinux:2.0.20190508-with-sources
  Commands:
  - Chown: ""
    From: builder
    Name: copy
    SourcesAndDest:
    - /opt
    - /opt
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cloud.svg
    - /tmp/
  - CmdLine:
    - 'yum install -y binutils file &&     strip --strip-all /opt/lib/librsvg-2.a
      &&     /opt/bin/rsvg-convert /tmp/cloud.svg > /tmp/cloud.png &&     if [[ $(file
      /tmp/cloud.png) != *"PNG"* ]]; then         echo "Error: RSVG not working properly";
      exit 1;     fi &&     rm /tmp/cloud.*'
    Name: run
    PrependShell: true
  - CmdLine:
    - '"/opt/bin/rsvg-convert"'
    Name: entrypoint
    PrependShell: true
  From:
    Image: amazonlinux:2.0.20190508-with-sources
  Name: librsvg
  Platform: ""
  SourceCode: FROM amazonlinux:2.0.20190508-with-sources AS librsvg
- As: node-librsvg-builder
  BaseName: builder
  Commands:
  - Env:
    - Key: PKG_CONFIG_PATH
      Value: '"/opt/lib/pkgconfig:${PKG_CONFIG_PATH}"'
    Name: env
  - Env:
    - Key: NODE_PATH
      Value: '"/opt/nodejs/node_modules:${CACHE_DIR}/nodejs/node_modules"'
    Name: env
  - CmdLine:
    - curl -sL https://rpm.nodesource.com/setup_10.x | bash - &&     yum install -y
      nodejs file binutils --enablerepo=epel &&     npm install node-pre-gyp --prefix
      ${CACHE_DIR}/nodejs &&     npm install https://github.com/hansottowirtz/node-rsvg-prebuilt         --prefix
      /opt/nodejs --production --ignore-scripts
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - binding.gyp
    - /opt/nodejs/node_modules/librsvg-prebuilt/binding.gyp
  - CmdLine:
    - cd /opt/nodejs/node_modules/librsvg-prebuilt &&     LDFLAGS="" V=1 ${CACHE_DIR}/nodejs/node_modules/.bin/node-pre-gyp
      rebuild &&     rm -r ${TARGET_DIR}/nodejs/node_modules/librsvg-prebuilt/build/Release
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cloud.svg
    - cloud-test.js
    - /tmp/
  - CmdLine:
    - 'node /tmp/cloud-test.js &&     if [[ $(file /tmp/cloud-node.png) != *"PNG"*
      ]]; then         echo "Error: RSVG not working properly"; exit 1;     fi &&     rm
      /tmp/cloud.*'
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: builder
  Name: node-librsvg-builder
  Platform: ""
  SourceCode: FROM builder AS node-librsvg-builder
- As: node-librsvg
  BaseName: amazonlinux:2.0.20190508-with-sources
  Commands:
  - Env:
    - Key: NODE_PATH
      Value: '"/opt/nodejs/node_modules"'
    Name: env
  - Chown: ""
    From: node-librsvg-builder
    Name: copy
    SourcesAndDest:
    - /opt
    - /opt
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cloud.svg
    - cloud-test.js
    - /tmp/
  - CmdLine:
    - curl -sL https://rpm.nodesource.com/setup_10.x | bash - &&     yum install -y
      https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &&     yum
      install -y nodejs file binutils
    Name: run
    PrependShell: true
  - CmdLine:
    - 'strip --strip-all /opt/lib/librsvg-2.a &&     strip --strip-all /opt/nodejs/node_modules/librsvg-prebuilt/build/rsvg.node
      &&     node /tmp/cloud-test.js &&     if [[ $(file /tmp/cloud-node.png) != *"PNG"*
      ]]; then         echo "Error: RSVG not working properly"; exit 1;     fi &&     rm
      /tmp/cloud.*'
    Name: run
    PrependShell: true
  From:
    Image: amazonlinux:2.0.20190508-with-sources
  Name: node-librsvg
  Platform: ""
  SourceCode: FROM amazonlinux:2.0.20190508-with-sources AS node-librsvg
