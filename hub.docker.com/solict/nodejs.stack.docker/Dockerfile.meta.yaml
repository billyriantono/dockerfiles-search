MetaArgs: null
Stages:
- BaseName: solict/general-purpose-system-distro:debian8_minimal
  Commands:
  - Key: app_nodejs_version
    Name: arg
    Value: '"4.7.3"'
  - Key: app_nodejs_arch
    Name: arg
    Value: '"x64"'
  - Key: app_nodejs_env
    Name: arg
    Value: '"production"'
  - Key: app_nodejs_user
    Name: arg
    Value: '"nodejs"'
  - Key: app_nodejs_group
    Name: arg
    Value: '"nodejs"'
  - Key: app_nodejs_home
    Name: arg
    Value: '"/srv/nodejs"'
  - Key: app_nodejs_src
    Name: arg
    Value: '"/srv/nodejs/src"'
  - Key: app_nodejs_data
    Name: arg
    Value: '"/srv/nodejs/data"'
  - Env:
    - Key: NODE_VERSION
      Value: '"${app_nodejs_version}"'
    - Key: NODE_ARCH
      Value: '"${app_nodejs_arch}"'
    - Key: NODE_ENV
      Value: '"${app_nodejs_env}"'
    Name: env
  - CmdLine:
    - printf "Installing packages...\n" &&         printf "Add the GPG keys...\n"
      &&     printf "\- gpg keys listed at https://github.com/nodejs/node...\n" &&     for
      key in       9554F04D7259F04124DE6B476D5A82AC7E37093B       94AE36675C464D64BAFA68DD7434390BDBE9B9C5       0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93       FD3A5288F042B6850C66B31F09FE44734EB7990E       71DCFD284A79C3B38668286BC97EC7A07EDE3FC1       DD8F2338BAE7501E3DD5AC78C273792F7D83545D       B9AE9905FFD7803F25714661B63B535A4C206CA9       C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     ;
      do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";     done &&         printf
      "Install the nodejs binaries...\n" &&     wget "https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc"
      -O "/tmp/nodejs-${NODE_VERSION}.asc" &&     gpg --verify "/tmp/nodejs-${NODE_VERSION}.asc"
      &&     wget "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz"
      -O "/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz" &&     grep " node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz\$"
      "/tmp/nodejs-${NODE_VERSION}.asc" | (cd "/tmp" && sha256sum -c -) &&     tar
      -xzf "/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz" -C "/usr/local"
      --strip-components=1       --exclude=CHANGELOG.md --exclude=LICENSE --exclude=README.md
      &&     rm -f "/tmp/{nodejs-${NODE_VERSION}.asc,node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz}"
      &&         printf "Cleanup the nodejs Package Manager...\n" &&     $(which npm)
      cache clear &&         printf "Finished installing packages...\n";
    Name: run
    PrependShell: true
  - CmdLine:
    - printf "Start installing modules...\n" &&         printf "Installing the PM2
      module...\n" &&     $(which npm) install -g pm2 &&         printf "\n# Checking
      modules...\n" &&     $(which npm) list &&     printf "Done checking modules...\n"
      &&         printf "Finished installing modules...\n";
    Name: run
    PrependShell: true
  - CmdLine:
    - printf "Adding users and groups...\n" &&         printf "Add nodejs user and
      group...\n" &&     id -g "${app_nodejs_user}" ||     groupadd       --system
      "${app_nodejs_group}" &&     id -u "${app_nodejs_user}" &&     usermod       --gid
      "${app_nodejs_group}"       --home "${app_nodejs_home}"       --shell "/sbin/nologin"       "${app_nodejs_user}"     ||     useradd       --system
      --gid "${app_nodejs_group}"       --no-create-home --home-dir "${app_nodejs_home}"       --shell
      "/sbin/nologin"       "${app_nodejs_user}" &&         printf "Copying skeleton
      files...\n" &&     rsync -rah "/etc/skel/." "${app_nodejs_home}" &&         printf
      "Setting ownership and permissions...\n" &&     mkdir -p "${app_nodejs_src}"
      "${app_nodejs_data}" &&     chown -R "${app_nodejs_user}":"${app_nodejs_group}"
      "${app_nodejs_home}" &&         printf "Finished adding users and groups...\n";
    Name: run
    PrependShell: true
  - CmdLine:
    - printf "Updading Nodejs configuration...\n" &&         printf "\n# Testing configuration...\n"
      &&     echo "Testing $(which node):" && $(which node) --version &&     echo
      "Testing $(which npm):" && $(which npm) --version &&     echo "Testing $(which
      pm2):" && $(which pm2) --version &&     printf "Done testing configuration...\n"
      &&         printf "Finished updading Nodejs configuration...\n";
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - '"${app_nodejs_data}"'
  - Name: workdir
    Path: '"${app_nodejs_src}"'
  - CmdLine:
    - $(which pm2-docker)
    - main.js
    - -i
    - max
    Name: cmd
    PrependShell: false
  - Health:
      Interval: 300000000000
      Retries: 3
      Test:
      - CMD-SHELL
      - '"$(which pm2) ping main || exit 1"'
      Timeout: 3000000000
    Name: healthcheck
  From:
    Image: solict/general-purpose-system-distro:debian8_minimal
  Name: ""
  Platform: ""
  SourceCode: FROM solict/general-purpose-system-distro:debian8_minimal
