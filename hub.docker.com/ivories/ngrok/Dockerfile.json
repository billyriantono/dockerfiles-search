{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine",
      "SourceCode": "FROM alpine",
      "Platform": "",
      "From": {
        "Image": "alpine"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "NGROK_DOMAIN",
              "Value": "your-domain-name.com"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache wget build-base curl go git openssl openssl-dev\u0026\u0026     curl -o ngrok-1.7.1.tar.gz https://codeload.github.com/inconshreveable/ngrok/tar.gz/1.7.1 \u0026\u0026     tar zxvf ngrok-1.7.1.tar.gz \u0026\u0026 cd ngrok-1.7.1 \u0026\u0026     openssl genrsa -out rootCA.key 2048 \u0026\u0026     openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem \u0026\u0026     openssl genrsa -out device.key 2048 \u0026\u0026     openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr \u0026\u0026     openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 \u0026\u0026     cp rootCA.pem assets/client/tls/ngrokroot.crt -f \u0026\u0026     cp device.crt assets/server/tls/snakeoil.crt -f \u0026\u0026     cp device.key assets/server/tls/snakeoil.key -f \u0026\u0026     sed -i \"s#code.google.com/p#github.com/alecthomas#g\" ./src/ngrok/log/logger.go \u0026\u0026     make release-server  \u0026\u0026 GOOS=linux GOARCH=amd64 make release-client \u0026\u0026     mv /ngrok-1.7.1/bin/ngrok* /usr/bin/ \u0026\u0026     rm -rf /ngrok-1.7.1* \u0026\u0026     apk del wget build-base curl go git openssl openssl-dev \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ngrok 80"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}