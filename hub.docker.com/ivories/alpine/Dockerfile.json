{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.3",
      "SourceCode": "FROM alpine:3.3",
      "Platform": "",
      "From": {
        "Image": "alpine:3.3"
      },
      "Commands": [
        {
          "CmdLine": [
            "ALPINE_GLIBC_VERSION=\"latest\" \u0026\u0026     ALPINE_GLIBC_REPO=\"sgerrand\" \u0026\u0026     ALPINE_GLIBC_PROJ=\"alpine-pkg-glibc\" \u0026\u0026     DOCKERIZE_VERSION=\"latest\" \u0026\u0026     DOCKERIZE_REPO=\"jwilder\" \u0026\u0026     DOCKERIZE_PROJ=\"dockerize\" \u0026\u0026     apk add --update -t deps wget ca-certificates curl bash \u0026\u0026     cd /tmp \u0026\u0026     wget $(curl -s https://api.github.com/repos/$ALPINE_GLIBC_REPO/$ALPINE_GLIBC_PROJ/releases/$ALPINE_GLIBC_VERSION | grep 'browser_' | egrep 'glibc-.*.apk' | cut -d\\\" -f4) \u0026\u0026     apk add --allow-untrusted glibc-*.apk \u0026\u0026     /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \u0026\u0026     echo \"export LANG=C.UTF-8\" \u003e /etc/profile.d/locale.sh \u0026\u0026     wget $(curl -s https://api.github.com/repos/$DOCKERIZE_REPO/$DOCKERIZE_PROJ/releases/$DOCKERIZE_VERSION | grep 'browser_' | egrep 'amd64-.*.tar.gz' | cut -d\\\" -f4) \u0026\u0026     tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-v0.3.0.tar.gz \u0026\u0026     apk del --purge deps glibc-i18n \u0026\u0026     apk add --update wget ca-certificates curl bash \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}