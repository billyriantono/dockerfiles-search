{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.3.2-fpm-alpine3.9",
      "SourceCode": "FROM php:7.3.2-fpm-alpine3.9",
      "Platform": "",
      "From": {
        "Image": "php:7.3.2-fpm-alpine3.9"
      },
      "Commands": [
        {
          "Maintainer": "mesaque.s.silva@gmail.com",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026 \tapk upgrade \u0026\u0026 \tapk add --no-cache freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev libxml2-dev curl-dev  libmcrypt-dev libpq cyrus-sasl-dev libzip libzip-dev libmemcached-dev msmtp pcre-dev zlib-dev git zip bash vim sudo bind-tools \u0026\u0026   \tdocker-php-ext-configure gd     --with-gd     --with-freetype-dir=/usr/include/     --with-png-dir=/usr/include/     --with-jpeg-dir=/usr/include/ \u0026\u0026   NPROC=$(grep -c ^processor /proc/cpuinfo 2\u003e/dev/null || 1) \u0026\u0026   docker-php-ext-install -j${NPROC} gd \u0026\u0026   apk del --no-cache freetype-dev libpng-dev libjpeg-turbo-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache         $PHPIZE_DEPS     \u0026\u0026 echo '' | pecl install memcached     \u0026\u0026 echo \"extension=memcached.so\" \u003e /usr/local/etc/php/conf.d/20_memcached.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo '' | pecl install redis"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/bin \u0026\u0026 curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \u0026\u0026 mv /usr/bin/wp-cli.phar /usr/bin/wp \u0026\u0026 chmod +x /usr/bin/wp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-install zip mysqli sockets soap calendar bcmath opcache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-enable redis"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /root/ \u0026\u0026 php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \u0026\u0026   php -r \"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \u0026\u0026   php composer-setup.php \u0026\u0026   mv /root/composer.phar /usr/bin/composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "deluser www-data \u0026\u0026 deluser xfs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"www-data:x:33:33:K4izen Cloud Service,,,:/var/www:/bin/false\" \u003e\u003e /etc/passwd \u0026\u0026 echo \"www-data:x:33:www-data\" \u003e\u003e /etc/group"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /PROJECT \u0026\u0026 chown www-data:www-data /PROJECT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/www \u0026\u0026 chown -R www-data:www-data /var/www"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/PROJECT"
        },
        {
          "Name": "user",
          "User": "www-data"
        }
      ]
    }
  ]
}