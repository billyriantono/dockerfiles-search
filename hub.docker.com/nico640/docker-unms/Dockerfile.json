{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "unms",
      "BaseName": "ubnt/unms:1.1.2",
      "SourceCode": "FROM ubnt/unms:1.1.2 as unms",
      "Platform": "",
      "As": "unms",
      "From": {
        "Image": "ubnt/unms:1.1.2"
      },
      "Commands": null
    },
    {
      "Name": "unms-nginx",
      "BaseName": "ubnt/unms-nginx:1.1.2",
      "SourceCode": "FROM ubnt/unms-nginx:1.1.2 as unms-nginx",
      "Platform": "",
      "As": "unms-nginx",
      "From": {
        "Image": "ubnt/unms-nginx:1.1.2"
      },
      "Commands": null
    },
    {
      "Name": "unms-netflow",
      "BaseName": "ubnt/unms-netflow:1.1.2",
      "SourceCode": "FROM ubnt/unms-netflow:1.1.2 as unms-netflow",
      "Platform": "",
      "As": "unms-netflow",
      "From": {
        "Image": "ubnt/unms-netflow:1.1.2"
      },
      "Commands": null
    },
    {
      "Name": "unms-crm",
      "BaseName": "ubnt/unms-crm:3.1.2",
      "SourceCode": "FROM ubnt/unms-crm:3.1.2 as unms-crm",
      "Platform": "",
      "As": "unms-crm",
      "From": {
        "Image": "ubnt/unms-crm:3.1.2"
      },
      "Commands": null
    },
    {
      "Name": "",
      "BaseName": "oznu/s6-node:10.15.3-debian-amd64",
      "SourceCode": "FROM oznu/s6-node:10.15.3-debian-amd64",
      "Platform": "",
      "From": {
        "Image": "oznu/s6-node:10.15.3-debian-amd64"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 echo \"deb http://ftp.debian.org/debian stretch-backports main\" \u003e\u003e /etc/apt/sources.list   \u0026\u0026 apt-get update   \u0026\u0026 apt-get -y install apt-transport-https lsb-release ca-certificates wget   \u0026\u0026 wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg   \u0026\u0026 sh -c 'echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" \u003e /etc/apt/sources.list.d/php.list'   \u0026\u0026 apt-get update   \u0026\u0026 mkdir -p /usr/share/man/man1 /usr/share/man/man7   \u0026\u0026 mkdir -p /usr/share/man/man7   \u0026\u0026 apt-get install -y build-essential rabbitmq-server redis-server     postgresql-9.6 postgresql-contrib-9.6 postgresql-client-9.6 libpq-dev     gzip bash vim openssl libcap-dev dumb-init sudo gettext zlibc zlib1g zlib1g-dev     iproute2 netcat wget libpcre3 libpcre3-dev libssl-dev git pkg-config     libcurl4-openssl-dev libxml2-dev libedit-dev libsodium-dev libargon2-dev     jq autoconf libgmp-dev libpng-dev libbz2-dev libc-client-dev libkrb5-dev     libjpeg-dev libfreetype6-dev libzip-dev unzip supervisor   \u0026\u0026 apt-get install -y certbot -t stretch-backports"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /home/app/unms"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/app/unms"
        },
        {
          "Chown": "",
          "From": "unms",
          "Name": "copy",
          "SourcesAndDest": [
            "/home/app/unms",
            "/home/app/unms"
          ]
        },
        {
          "CmdLine": [
            "rm -rf node_modules     \u0026\u0026 JOBS=$(nproc) npm install sharp@latest     \u0026\u0026 JOBS=$(nproc) npm install --production     \u0026\u0026 JOBS=$(nproc) npm install npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "unms",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/docker-entrypoint.sh",
            "/usr/local/bin/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/docker-entrypoint.sh     \u0026\u0026 cp -r /home/app/unms/node_modules/npm /home/app/unms/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /home/app/netflow"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "unms-netflow",
          "Name": "copy",
          "SourcesAndDest": [
            "/home/app",
            "/home/app/netflow"
          ]
        },
        {
          "CmdLine": [
            "cd /home/app/netflow     \u0026\u0026 rm -rf node_modules     \u0026\u0026 JOBS=$(nproc) npm install --production"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/src/ucrm     \u0026\u0026 mkdir -p /tmp/crontabs     \u0026\u0026 mkdir -p /usr/local/etc/php/conf.d     \u0026\u0026 mkdir -p /usr/local/etc/php-fpm.d     \u0026\u0026 mkdir -p /tmp/supervisor.d     \u0026\u0026 mkdir -p /tmp/supervisord"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/src/ucrm",
            "/usr/src/ucrm"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/data",
            "/data"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/crm*",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/docker*",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/crontabs/server",
            "/tmp/crontabs/server"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/supervisor.d",
            "/tmp/supervisor.d"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/supervisord",
            "/tmp/supervisord"
          ]
        },
        {
          "CmdLine": [
            "grep -lR \"nginx:nginx\" /usr/src/ucrm/ | xargs sed -i 's/nginx:nginx/unms:unms/g'     \u0026\u0026 grep -lR \"su-exec nginx\" /usr/src/ucrm/ | xargs sed -i 's/su-exec nginx//g'     \u0026\u0026 grep -lR \"su-exec nginx\" /tmp/crontabs/ | xargs sed -i 's/su-exec nginx//g'     \u0026\u0026 grep -lR \"su-exec nginx\" /tmp/supervisor.d/ | xargs sed -i 's/su-exec nginx//g'     \u0026\u0026 sed -i 's#chmod -R 775 /data/log/var/log#chmod -R 777 /data/log/var/log#g' /usr/src/ucrm/scripts/dirs.sh     \u0026\u0026 sed -i 's#chown -R unms:unms /data/log/var/log#chown root:root /data/log/var/log#g' /usr/src/ucrm/scripts/dirs.sh     \u0026\u0026 sed -i 's#rm -rf /var/log#mv /var/log /data/log/var#g' /usr/src/ucrm/scripts/dirs.sh     \u0026\u0026 sed -i 's#LC_CTYPE=C tr -dc \"a-zA-Z0-9\" \u003c /dev/urandom | fold -w 48 | head -n 1 || true#head /dev/urandom | tr -dc A-Za-z0-9 | head -c 48#g'        /usr/src/ucrm/scripts/parameters.sh     \u0026\u0026 sed -i 's#-regex \\x27.*Version\\[0-9]\\\\{14\\\\}#-regextype posix-extended -regex \\x27.*Version\\[0-9]\\{14}#g'        /usr/src/ucrm/scripts/database_migrations_ready.sh     \u0026\u0026 sed -i '/\\[program:nginx]/,+10d' /tmp/supervisor.d/server.ini     \u0026\u0026 sed -i '/\\[program:cron]/,+10d' /tmp/supervisor.d/server.ini     \u0026\u0026 sed -i \"s#php-fpm --nodaemonize --force-stderr#bash -c 'exec php-fpm --nodaemonize --force-stderr'#g\" /tmp/supervisor.d/server.ini     \u0026\u0026 sed -i \"1s#^#POSTGRES_SCHEMA=ucrm\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#POSTGRES_DB=unms\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#POSTGRES_PASSWORD=ucrm\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#POSTGRES_USER=ucrm\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#POSTGRES_PORT=5432\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#POSTGRES_HOST=127.0.0.1\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"1s#^#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\\n#\" /tmp/crontabs/server     \u0026\u0026 sed -i \"s#\\.0#\\.crt#g\" /usr/src/ucrm/scripts/update-certificates.sh     \u0026\u0026 sed -i \"s#http://localhost/%s#http://localhost:9081/%s#g\" /usr/src/ucrm/src/AppBundle/Service/LocalUrlGenerator.php     \u0026\u0026 sed -i \"s#'localhost', '127.0.0.1'#'localhost:9081', '127.0.0.1:9081'#g\" /usr/src/ucrm/src/AppBundle/Util/Helpers.php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NGINX_UID",
              "Value": "1000"
            },
            {
              "Key": "NGINX_VERSION",
              "Value": "nginx-1.14.2"
            },
            {
              "Key": "LUAJIT_VERSION",
              "Value": "2.1.0-beta3"
            },
            {
              "Key": "LUA_NGINX_VERSION",
              "Value": "0.10.13"
            },
            {
              "Key": "PHP_VERSION",
              "Value": "php-7.3.12"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 mkdir -p /tmp/src \u0026\u0026 cd /tmp/src     \u0026\u0026 wget -q http://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz     \u0026\u0026 wget -q https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -O lua-nginx-module.tar.gz     \u0026\u0026 wget -q https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ndk.tar.gz     \u0026\u0026 wget -q http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz -O luajit.tar.gz \t\u0026\u0026 wget -q https://www.php.net/get/${PHP_VERSION}.tar.xz/from/this/mirror -O php.tar.xz     \u0026\u0026 tar -zxvf lua-nginx-module.tar.gz     \u0026\u0026 tar -zxvf ndk.tar.gz     \u0026\u0026 tar -zxvf luajit.tar.gz     \u0026\u0026 tar -zxvf nginx.tar.gz \t\u0026\u0026 tar -xvf php.tar.xz \t\u0026\u0026 cp php.tar.xz /usr/src     \u0026\u0026 cd /tmp/src/LuaJIT-${LUAJIT_VERSION} \u0026\u0026 make amalg PREFIX='/usr' \u0026\u0026 make install PREFIX='/usr'     \u0026\u0026 export LUAJIT_LIB=/usr/lib/libluajit-5.1.so \u0026\u0026 export LUAJIT_INC=/usr/include/luajit-2.1     \u0026\u0026 cd /tmp/src/${NGINX_VERSION} \u0026\u0026 ./configure         --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2'         --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC'         --with-pcre-jit         --with-threads         --add-module=/tmp/src/lua-nginx-module-${LUA_NGINX_VERSION}         --add-module=/tmp/src/ngx_devel_kit-0.3.0         --with-http_ssl_module         --with-http_realip_module         --with-http_gzip_static_module         --with-http_secure_link_module         --without-mail_pop3_module         --without-mail_imap_module         --without-http_upstream_ip_hash_module         --without-http_memcached_module         --without-http_auth_basic_module         --without-http_userid_module         --without-http_uwsgi_module         --without-http_scgi_module         --prefix=/var/lib/nginx         --sbin-path=/usr/sbin/nginx         --conf-path=/etc/nginx/nginx.conf         --http-log-path=/dev/stdout         --error-log-path=/dev/stderr         --lock-path=/tmp/nginx.lock         --pid-path=/tmp/nginx.pid         --http-client-body-temp-path=/tmp/body         --http-proxy-temp-path=/tmp/proxy     \u0026\u0026 make -j $(nproc)     \u0026\u0026 make install     \u0026\u0026 cd /tmp/src/${PHP_VERSION} \u0026\u0026 ./configure         --with-config-file-path=\"/usr/local/etc/php\"         --with-config-file-scan-dir=\"/usr/local/etc/php/conf.d\"         --enable-option-checking=fatal         --with-mhash         --enable-ftp         --enable-mbstring         --enable-mysqlnd         --with-password-argon2         --with-sodium=shared         --with-curl         --with-libedit         --with-openssl         --with-zlib         --enable-fpm         --with-fpm-user=www-data         --with-fpm-group=www-data         --disable-cgi     \u0026\u0026 make -j $(nproc)     \u0026\u0026 make install     \u0026\u0026 rm /usr/bin/luajit-${LUAJIT_VERSION}     \u0026\u0026 rm -rf /tmp/src     \u0026\u0026 rm -rf /var/cache/apk/*     \u0026\u0026 echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" \u003e\u003e /etc/sudoers     \u0026\u0026 echo \"unms ALL=(ALL) NOPASSWD:SETENV: /copy-user-certs.sh reload\" \u003e\u003e /etc/sudoers     \u0026\u0026 echo \"unms ALL=(ALL) NOPASSWD:SETENV: /refresh-certificate.sh *\" \u003e\u003e /etc/sudoers     \u0026\u0026 echo \"unms ALL=(ALL) NOPASSWD:SETENV: /refresh-configuration.sh *\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/etc/nginx/available-servers",
            "/etc/nginx/ucrm"
          ]
        },
        {
          "Chown": "",
          "From": "unms-nginx",
          "Name": "copy",
          "SourcesAndDest": [
            "/entrypoint.sh",
            "/refresh-certificate.sh",
            "/refresh-configuration.sh",
            "/openssl.cnf",
            "/ip-whitelist.sh",
            "/"
          ]
        },
        {
          "Chown": "",
          "From": "unms-nginx",
          "Name": "copy",
          "SourcesAndDest": [
            "/templates",
            "/templates"
          ]
        },
        {
          "Chown": "",
          "From": "unms-nginx",
          "Name": "copy",
          "SourcesAndDest": [
            "/www/public",
            "/www/public"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /entrypoint.sh /refresh-certificate.sh /refresh-configuration.sh /ip-whitelist.sh     \u0026\u0026 sed -i \"s#80#9081#g\" /etc/nginx/ucrm/ucrm.conf     \u0026\u0026 sed -i \"s#81#9082#g\" /etc/nginx/ucrm/suspended_service.conf     \u0026\u0026 sed -i '/conf;/a \\ \\ include /etc/nginx/ucrm/*.conf;' /templates/nginx.conf.template     \u0026\u0026 sed -i \"s#execute('/refresh-certificate.sh#execute('sudo --preserve-env /refresh-certificate.sh#g\" /templates/conf.d/nginx-api.conf.template     \u0026\u0026 grep -lR \"location /nms/ \" /templates | xargs sed -i \"s#location /nms/ #location /nms #g\"     \u0026\u0026 grep -lR \"location /crm/ \" /templates | xargs sed -i \"s#location /crm/ #location /crm #g\"     \u0026\u0026 sed -i \"s#\\\\\\.\\[0-9]{1,3}#[0-9]#g\" /refresh-certificate.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i \"s#/bin/sh#/bin/bash#g\" /entrypoint.sh     \u0026\u0026 sed -i \"s#adduser -D#adduser --disabled-password --gecos \\\"\\\"#g\" /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "/usr/local/etc/php"
            },
            {
              "Key": "SYMFONY_ENV",
              "Value": "prod"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/etc/php/php.ini",
            "/usr/local/etc/php/"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/etc/php-fpm.conf",
            "/usr/local/etc/"
          ]
        },
        {
          "Chown": "",
          "From": "unms-crm",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/etc/php-fpm.d",
            "/usr/local/etc/php-fpm.d"
          ]
        },
        {
          "CmdLine": [
            "echo '' | pecl install apcu ds     \u0026\u0026 docker-php-ext-enable apcu ds     \u0026\u0026 docker-php-ext-configure gd         --with-gd         --with-freetype-dir=/usr/include/         --with-png-dir=/usr/include/         --with-jpeg-dir=/usr/include/     \u0026\u0026 docker-php-ext-configure curl     \u0026\u0026 docker-php-ext-configure imap         --with-imap-ssl         --with-kerberos     \u0026\u0026 docker-php-ext-install -j2 pdo_pgsql gmp zip bcmath gd bz2 curl       exif intl dom xml opcache imap soap sockets sysvmsg sysvshm sysvsem     \u0026\u0026 curl -sS https://getcomposer.org/installer | php --         --install-dir=/usr/bin --filename=composer \t\u0026\u0026 cd /usr/src/ucrm     \u0026\u0026 composer global require hirak/prestissimo     \u0026\u0026 composer install         --classmap-authoritative         --no-dev --no-interaction     \u0026\u0026 composer clear-cache     \u0026\u0026 sed -i 's#nginx#unms#g' /usr/local/etc/php-fpm.d/zz-docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/home/app/unms/node_modules/.bin:$PATH:/usr/lib/postgresql/9.6/bin"
            },
            {
              "Key": "PGDATA",
              "Value": "/config/postgres"
            },
            {
              "Key": "POSTGRES_DB",
              "Value": "unms"
            },
            {
              "Key": "QUIET_MODE",
              "Value": "0"
            },
            {
              "Key": "WS_PORT",
              "Value": "443"
            },
            {
              "Key": "PUBLIC_HTTPS_PORT",
              "Value": "443"
            },
            {
              "Key": "PUBLIC_WS_PORT",
              "Value": "443"
            },
            {
              "Key": "UNMS_NETFLOW_PORT",
              "Value": "2055"
            },
            {
              "Key": "SECURE_LINK_SECRET",
              "Value": "enigma"
            },
            {
              "Key": "SSL_CERT",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "2055/udp",
            "443",
            "80"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "root",
            "/"
          ]
        }
      ]
    }
  ]
}