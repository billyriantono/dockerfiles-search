MetaArgs: null
Stages:
- BaseName: neurodebian:stretch-non-free
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"C.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - "apt-get update -qq && apt-get install -yq --no-install-recommends      \tbzip2
      ca-certificates curl locales unzip     && apt-get clean     && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && localedef --force --inputfile=en_US --charmap=UTF-8
      C.UTF-8     && chmod 777 /opt && chmod a+s /opt     && mkdir -p /neurodocker
      \    && if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env bash'
      >> $ND_ENTRYPOINT          && echo 'set +x' >> $ND_ENTRYPOINT          && echo
      'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT;        fi
      \    && chmod -R 777 /neurodocker && chmod a+s /neurodocker"
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_6.x | bash -
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends dcm2niix                                                      convert3d                                                      ants                                                      graphviz                                                      tree                                                      git-annex-standalone                                                      vim                                                      emacs-nox                                                      nano                                                      less                                                      ncdu                                                      tig                                                      git-annex-remote-rclone                                                      build-essential                                                      nodejs                                                      r-recommended                                                      psmisc                                                      libapparmor1                                                      sudo                                                      dc     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -yq xvfb mesa-utils libgl1-mesa-dri && apt-get
      clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/afni:$PATH
    Name: env
  - CmdLine:
    - "apt-get update -qq && apt-get install -yq --no-install-recommends ed gsl-bin
      libglu1-mesa-dev libglib2.0-0 libglw1-mesa     libgomp1 libjpeg62 libxm4 netpbm
      tcsh xfonts-base xvfb     && libs_path=/usr/lib/x86_64-linux-gnu     && if [
      -f $libs_path/libgsl.so.19 ]; then            ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0;
      \       fi     && apt-get install -yq --no-install-recommends libxp6     ||
      /bin/bash -c \"        curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb
      \       && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb\"     && apt-get
      install -yq --no-install-recommends libpng12-0     || /bin/bash -c \"        curl
      -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb
      \       && dpkg -i /tmp/libpng12.deb && rm -f /tmp/libpng12.deb\"     && apt-get
      install -yq --no-install-recommends     \tr-base-dev r-cran-rmpi      || /bin/bash
      -c \"         curl -o /tmp/install_R.sh -sSL https://gist.githubusercontent.com/kaczmarj/8e3792ae1af70b03788163c44f453b43/raw/0577c62e4771236adf0191c826a25249eb69a130/R_installer_debian_ubuntu.sh
      \        && /bin/bash /tmp/install_R.sh\"     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo \"Downloading AFNI ...\"
      \    && mkdir -p /opt/afni     && curl -sSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz
      \    | tar zx -C /opt/afni --strip-components=1     && /opt/afni/rPkgsInstall
      -pkgs ALL     && rm -rf /tmp/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends dc     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*echo "Downloading
      FSL ..."     && curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz     |
      tar zx -C /opt     && /bin/bash /opt/fsl/etc/fslconf/fslpython_install.sh -q
      -f /opt/fsl     && sed -i '$iecho Some packages in this Docker container are
      non-free' $ND_ENTRYPOINT     && sed -i '$iecho If you are considering commercial
      use of this container, please consult the relevant license:' $ND_ENTRYPOINT     &&
      sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT     &&
      sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - Env:
    - Key: FSLDIR
      Value: /opt/fsl
    - Key: PATH
      Value: /opt/fsl/bin:$PATH
    Name: env
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends bc libgomp1
      libxmu6 libxt6 tcsh perl     && apt-get clean     && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && echo "Downloading minimized FreeSurfer ..."     &&
      curl -sSL https://dl.dropbox.com/s/nnzcfttc41qvt31/recon-all-freesurfer6-3.min.tgz
      | tar xz -C /opt     && sed -i '$isource $FREESURFER_HOME/SetUpFreeSurfer.sh'
      $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - Env:
    - Key: FREESURFER_HOME
      Value: /opt/freesurfer
    Name: env
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends libxext6 libxt6     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading MATLAB Compiler Runtime ..."     && curl -sSL -o /tmp/mcr.zip https://www.mathworks.com/supportfiles/downloads/R2017a/deployment_files/R2017a/installers/glnxa64/MCR_R2017a_glnxa64_installer.zip     &&
      unzip -q /tmp/mcr.zip -d /tmp/mcrtmp     && /tmp/mcrtmp/install -destinationFolder
      /opt/mcr -mode silent -agreeToLicense yes     && rm -rf /tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "Downloading standalone SPM ..."     && curl -sSL -o spm.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/dev/spm12_latest_Linux_R2017a.zip     &&
      unzip -q spm.zip -d /opt     && chmod -R 777 /opt/spm*     && rm -rf spm.zip     &&
      /opt/spm12/run_spm12.sh /opt/mcr/v92/ quit     && sed -i '$iexport SPMMCRCMD=\"/opt/spm12/run_spm12.sh
      /opt/mcr/v92/ script\"' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - Env:
    - Key: MATLABCMD
      Value: /opt/mcr/v92/toolbox/matlab
    - Key: FORCE_SPMMCR
      Value: "1"
    - Key: LD_LIBRARY_PATH
      Value: /usr/lib/x86_64-linux-gnu:/opt/mcr/v92/runtime/glnxa64:/opt/mcr/v92/bin/glnxa64:/opt/mcr/v92/sys/os/glnxa64:$LD_LIBRARY_PATH
    Name: env
  - CmdLine:
    - bash -c "curl -sSL  http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.0.0_1.0.2g-1ubuntu11.2_amd64.deb
      > libssl1.0.0_1.0.2g-1ubuntu11.2_amd64.deb && dpkg -i libssl1.0.0_1.0.2g-1ubuntu11.2_amd64.deb
      && rm libssl1.0.0_1.0.2g-1ubuntu11.2_amd64.deb"
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "curl -sSL http://download2.rstudio.org/rstudio-server-$(curl https://s3.amazonaws.com/rstudio-server/current.ver)-amd64.deb
      >> rstudio-server-amd64.deb && dpkg -i rstudio-server-amd64.deb && rm rstudio-server-amd64.deb"
    Name: run
    PrependShell: true
  - CmdLine:
    - Rscript -e 'install.packages(c("neuRosim", "ggplot2", "fmri", "dplyr", "tidyr",
      "Lahman", "data.table", "readr"), repos = "http://cran.case.edu")'
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL https://dl.dropbox.com/s/lfuppfhuhi1li9t/cifti-data.tgz?dl=0 | tar
      zx -C /
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd --no-user-group --create-home --shell /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "Downloading Miniconda installer ..."     && miniconda_installer=/tmp/miniconda.sh     &&
      curl -sSL -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      /bin/bash $miniconda_installer -b -p $CONDA_DIR     && rm -f $miniconda_installer     &&
      conda config --system --prepend channels conda-forge     && conda config --system
      --set auto_update_conda false     && conda config --system --set show_channel_urls
      true     && conda update -y -q --all && sync     && conda clean -tipsy && sync
    Name: run
    PrependShell: true
  - CmdLine:
    - "conda create -y -q --name neuro     \tpython=3.6 jupyter jupyterlab traits
      pandas matplotlib scikit-learn seaborn swig reprozip reprounzip altair traitsui
      apptools configobj vtk jupyter_contrib_nbextensions bokeh scikit-image codecov
      nitime cython joblib jupyterhub=0.7.2     && sync && conda clean -tipsy && sync
      \    && /bin/bash -c \"source activate neuro     \t&& pip install -q --no-cache-dir
      \    \thttps://github.com/nipy/nibabel/archive/master.zip https://github.com/nipy/nipype/tarball/master
      nilearn https://github.com/INCF/pybids/archive/master.zip datalad dipy nipy
      duecredit pymvpa2 mayavi git+https://github.com/jupyterhub/nbserverproxy.git
      git+https://github.com/jupyterhub/nbrsessionproxy.git      https://github.com/satra/mapalign/archive/master.zip
      https://github.com/poldracklab/mriqc/tarball/master https://github.com/poldracklab/fmriprep/tarball/master
      pprocess \"     && sync"
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/envs/neuro/bin:$PATH
    Name: env
  - CmdLine:
    - bash -c "source activate neuro && python -m ipykernel install --sys-prefix --name
      neuro --display-name Py3-neuro "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate neuro && pip install --pre --upgrade ipywidgets pythreejs
      "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate neuro && pip install  --upgrade https://github.com/maartenbreddels/ipyvolume/archive/master.zip
      && jupyter nbextension install --py --sys-prefix ipyvolume && jupyter nbextension
      enable --py --sys-prefix ipyvolume "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate neuro && jupyter nbextension enable rubberband/main
      && jupyter nbextension enable exercise2/main && jupyter nbextension enable spellchecker/main
      "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate neuro && jupyter serverextension enable --sys-prefix
      --py nbserverproxy && jupyter serverextension enable --sys-prefix --py nbrsessionproxy
      && jupyter nbextension install --sys-prefix --py nbrsessionproxy && jupyter
      nbextension enable --sys-prefix --py nbrsessionproxy "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c " source activate neuro && pip install git+https://github.com/data-8/gitautosync
      && jupyter serverextension enable --py nbgitautosync --sys-prefix "
    Name: run
    PrependShell: true
  - CmdLine:
    - "conda create -y -q --name afni27     \tpython=2.7 ipykernel     && sync &&
      conda clean -tipsy && sync"
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate afni27 && python -m ipykernel install --sys-prefix
      --name afni27 --display-name Py2-afni "
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c "source activate neuro && python -c 'from nilearn import datasets; haxby_dataset
      = datasets.fetch_haxby()' "
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - mkdir /data && chown neuro /data && chmod 777 /data && mkdir /output && chown
      neuro /output && chmod 777 /output && mkdir /repos && chown neuro /repos &&
      chmod 777 /repos
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'neuro:neuro' | chpasswd
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - CmdLine:
    - bash -c "source activate neuro && cd /data && datalad install -r ///workshops/nih-2017/ds000114
      && datalad get -r -J4 ds000114/sub-0[12] && datalad get -r ds000114/derivatives/f*/sub-0[12]
      && datalad get -r ds000114/derivatives/f*/fsaverage5 "
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL https://osf.io/dhzv7/download?version=3 | tar zx -C /data/ds000114/derivatives/fmriprep
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/neuro
  - CmdLine:
    - cd /repos && git clone https://github.com/neuro-data-science/neuroviz.git &&
      git clone https://github.com/neuro-data-science/neuroML.git && git clone https://github.com/ReproNim/reproducible-imaging.git
      && git clone https://github.com/miykael/nipype_tutorial.git && git clone https://github.com/jmumford/nhwEfficiency.git
      && git clone https://github.com/jmumford/R-tutorial.git
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"${PATH}:/usr/lib/rstudio-server/bin"'
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: '"/usr/lib/R/lib:${LD_LIBRARY_PATH}"'
    Name: env
  From:
    Image: neurodebian:stretch-non-free
  Name: ""
  Platform: ""
  SourceCode: FROM neurodebian:stretch-non-free
