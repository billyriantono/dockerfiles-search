MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Env:
    - Key: NVM_DIR
      Value: /home/docker/.nvm
    Name: env
  - Env:
    - Key: NODE_VERSION
      Value: v12.13.0
    Name: env
  - Env:
    - Key: NODE_PATH
      Value: $NVM_DIR/versions/node/$NODE_VERSION/lib/node_modules
    Name: env
  - Env:
    - Key: COMPOSER_HOME
      Value: /home/docker/.composer
    Name: env
  - Env:
    - Key: PATH
      Value: $NVM_DIR/versions/node/$NODE_VERSION/bin:$COMPOSER_HOME/vendor/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: '"en_US.UTF-8"'
    Name: env
  - Env:
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    Name: env
  - Key: git-user
    Name: arg
    Value: '"Jurgen Ã‡elmeta"'
  - Key: git-email
    Name: arg
    Value: '"jur.celmeta@gmail.com"'
  - Key: tz
    Name: arg
    Value: '"Europe/Tirane"'
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y locales language-pack-en-base
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen $LANG
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y dialog apt-utils curl zip unzip nano
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y sudo
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "root:root" | chpasswd
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd docker && echo "docker:docker" | chpasswd
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo "docker ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers'
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /home/docker && chown -R docker:docker /home/docker && cd /home/docker
      &&    chown -R docker:docker /usr/local/sbin && chown -R docker:docker /usr/local/bin
      &&    mkdir -p /home/docker/.composer && chown -R docker:docker /home/docker/.composer
    Name: run
    PrependShell: true
  - Name: user
    User: docker
  - CmdLine:
    - sudo apt-get install -y git
    Name: run
    PrependShell: true
  - CmdLine:
    - git config --global user.name ${git-user} && git config --global user.email
      ${git-email}
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt-get install -y software-properties-common iptables
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo add-apt-repository ppa:ondrej/nginx &&    sudo apt-get install -y nginx
      ufw &&    sudo ufw allow 'Nginx HTTP' &&    sudo service nginx start
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo add-apt-repository ppa:ondrej/php &&    sudo apt-get install -y php7.4
      php7.4-bcmath php7.4-mbstring php7.4-curl php7.4-cli php7.4-xml php7.4-soap
      php7.4-mysql php7.4-zip
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./laravel
    - /etc/nginx/sites-available/laravel
  - CmdLine:
    - php -r "copy('https://getcomposer.org/installer', '/home/docker/composer-setup.php');"
      &&    php -r "if (hash_file('sha384', '/home/docker/composer-setup.php') ===
      'a5c698ffe4b8e849a443b120cd5ba38043260d5c4023dbf93e1558871f1f07f58274fc6f4c93bcfd858c6bd0775cd8d1')
      { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php');
      } echo PHP_EOL;" &&    php /home/docker/composer-setup.php --install-dir=/usr/local/bin
      --filename=composer &&    php -r "unlink('/home/docker/composer-setup.php');"
    Name: run
    PrependShell: true
  - CmdLine:
    - composer global require laravel/installer
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /home/docker/.nvm && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh
      | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -c "source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION && nvm use
      --delete-prefix $NODE_VERSION"
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
