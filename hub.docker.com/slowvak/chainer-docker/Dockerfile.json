{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos",
      "SourceCode": "FROM centos",
      "Platform": "",
      "From": {
        "Image": "centos"
      },
      "Commands": [
        {
          "Maintainer": "Brad Erickson \u003cbje001@GMAIL.COM\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "time python chainer-1.3.0/examples/mnist/train_mnist.py"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "yum -y update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install git python-devel \u0026\u0026   yum -y install gcc-gfortran libmpc-devel \u0026\u0026   yum -y install wget \u0026\u0026   yum -y install gcc-c++ \u0026\u0026   yum -y install Cython"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install epel-release"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install python-pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install mako"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -q -y groupinstall 'Development Tools'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install module-init-tools"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:/usr/local/cuda-7.0/lib64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/usr/local/cuda-7.0/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026   wget http://us.download.nvidia.com/XFree86/Linux-x86_64/352.21/NVIDIA-Linux-x86_64-352.21.run  \u0026\u0026   wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \u0026\u0026   chmod +x *.run \u0026\u0026   ./NVIDIA-Linux-x86_64-352.21.run -s -N --no-kernel-module \u0026\u0026   mkdir /opt/nvidia_installers \u0026\u0026   /opt/cuda_7.0.28_linux.run -extract=/opt/nvidia_installers \u0026\u0026   cd /opt/nvidia_installers \u0026\u0026   chmod +x *.run \u0026\u0026   ./cuda-linux64-rel-*.run -noprompt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "cudaNN/include/cudnn.h",
            "/usr/local/cuda/include/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "cudaNN/lib64/*",
            "/usr/local/cuda/lib64/"
          ]
        },
        {
          "CmdLine": [
            "mkdir ~/src \u0026\u0026 cd ~/src \u0026\u0026   git clone https://github.com/xianyi/OpenBLAS \u0026\u0026   cd ~/src/OpenBLAS \u0026\u0026   make FC=gfortran \u0026\u0026   make PREFIX=/opt/OpenBLAS install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo /opt/OpenBLAS/lib \u003e  /etc/ld.so.conf.d/openblas.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/opt/OpenBLAS/lib:$LD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "numpy.tar.gz",
            "/root/src"
          ]
        },
        {
          "CmdLine": [
            "echo [default]  \u003e                           ~/src/numpy/site.cfg \u0026\u0026   echo include_dirs = /opt/OpenBLAS/include \u003e\u003e  ~/src/numpy/site.cfg \u0026\u0026   echo library_dirs = /opt/OpenBLAS/lib \u003e\u003e      ~/src/numpy/site.cfg \u0026\u0026   echo [openblas] \u003e\u003e                            ~/src/numpy/site.cfg \u0026\u0026   echo openblas_libs = openblas \u003e\u003e              ~/src/numpy/site.cfg \u0026\u0026   echo library_dirs = /opt/OpenBLAS/lib \u003e\u003e      ~/src/numpy/site.cfg \u0026\u0026   echo [lapack]  \u003e\u003e                             ~/src/numpy/site.cfg \u0026\u0026   echo lapack_libs = openblas \u003e\u003e                ~/src/numpy/site.cfg \u0026\u0026   echo library_dirs = /opt/OpenBLAS/lib \u003e\u003e      ~/src/numpy/site.cfg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd ~/src/numpy \u0026\u0026   python setup.py config \u0026\u0026   python setup.py build --fcompiler=gnu95 \u0026\u0026   python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install pycuda"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "OPENBLAS_NUM_THREADS",
              "Value": "6"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install chainer-cuda-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install chainer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://github.com/pfnet/chainer/archive/v1.3.0.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}