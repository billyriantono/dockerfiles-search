{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stretch",
      "SourceCode": "FROM debian:stretch",
      "Platform": "",
      "From": {
        "Image": "debian:stretch"
      },
      "Commands": [
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_REPO",
              "Value": "http://cdn-fastly.deb.debian.org"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CRAN_REPO",
              "Value": "http://cran.mtu.edu"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"deb $DEBIAN_REPO/debian stretch main\"                   \u003e /etc/apt/sources.list  \u0026\u0026 echo \"deb $DEBIAN_REPO/debian-security stretch/updates main\" \u003e\u003e /etc/apt/sources.list  \u0026\u0026 echo \"deb $DEBIAN_REPO/debian stretch-backports main\"        \u003e\u003e /etc/apt/sources.list  \u0026\u0026 echo \"deb $DEBIAN_REPO/debian testing main\"                  \u003e\u003e /etc/apt/sources.list  \u0026\u0026 echo 'APT::Default-Release \"stable\";' | tee -a /etc/apt/apt.conf.d/00local  \u0026\u0026 apt-get update  \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     nano     sudo     gnupg     dirmngr     wget     ca-certificates     curl     build-essential     lsb-release     procps     openssl     git     locales  \u0026\u0026 echo \"deb $CRAN_REPO/bin/linux/debian stretch-cran35/\"       \u003e\u003e /etc/apt/sources.list  \u0026\u0026 apt-key adv  --no-tty --keyserver keys.gnupg.net     --recv-key 'E19F5F87128899B192B1A2C2AD5F960A256A04AF'  \u0026\u0026 sed -i 's/^# *\\(en_US.UTF-8\\)/\\1/' /etc/locale.gen  \u0026\u0026 locale-gen  \u0026\u0026 export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\"  \u0026\u0026 echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" \u003e /etc/apt/sources.list.d/google-cloud-sdk.list  \u0026\u0026 curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -  \u0026\u0026 apt-get update  \u0026\u0026 apt-get install -yq --no-install-recommends     google-cloud-sdk  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_VER",
              "Value": "jdk1.8.0_201"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_TGZ",
              "Value": "jdk-8u201-linux-x64.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_URL",
              "Value": "https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/$JAVA_TGZ"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jdk/$JAVA_VER"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget --header \"Cookie: oraclelicense=accept-securebackup-cookie\" $JAVA_URL  \u0026\u0026 mkdir -p /usr/lib/jdk \u0026\u0026 tar -zxf $JAVA_TGZ -C /usr/lib/jdk  \u0026\u0026 update-alternatives --install /usr/bin/java java $JAVA_HOME/bin/java 100  \u0026\u0026 update-alternatives --install /usr/bin/javac javac $JAVA_HOME/bin/javac 100  \u0026\u0026 rm $JAVA_TGZ"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SPARK_VER",
              "Value": "2.2.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_HOME",
              "Value": "/usr/lib/spark"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HAILHASH",
              "Value": "17a988f2a628"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HAILJAR",
              "Value": "hail-devel-$HAILHASH-Spark-$SPARK_VER.jar"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HAILPYTHON",
              "Value": "hail-devel-$HAILHASH.zip"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HAILZIP",
              "Value": "Hail-devel-$HAILHASH-Spark-$SPARK_VER.zip"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HAIL_HOME",
              "Value": "/etc/hail"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "KERNELSPEC_HOME",
              "Value": "/usr/local/share/jupyter/kernels"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /etc/spark/conf.dist \u0026\u0026 mkdir -p /etc/hadoop/conf.empty \u0026\u0026 mkdir -p /etc/hive/conf.dist  \u0026\u0026 update-alternatives --install /etc/spark/conf spark-conf /etc/spark/conf.dist 100  \u0026\u0026 update-alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/conf.empty 100  \u0026\u0026 update-alternatives --install /etc/hive/conf hive-conf /etc/hive/conf.dist 100  \u0026\u0026 mkdir $HAIL_HOME \u0026\u0026 cd $HAIL_HOME  \u0026\u0026 wget -nv http://storage.googleapis.com/hail-common/builds/devel/jars/$HAILJAR  \u0026\u0026 wget -nv http://storage.googleapis.com/hail-common/builds/devel/python/$HAILPYTHON  \u0026\u0026 wget -nv http://storage.googleapis.com/hail-common/distributions/devel/$HAILZIP  \u0026\u0026 cd -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "jupyter-user"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/$USER"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JUPYTER_PORT",
              "Value": "8000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JUPYTER_HOME",
              "Value": "/etc/jupyter"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYSPARK_DRIVER_PYTHON",
              "Value": "jupyter"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYSPARK_DRIVER_PYTHON_OPTS",
              "Value": "notebook"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$SPARK_HOME:$SPARK_HOME/python:$SPARK_HOME/bin:$HAIL_HOME:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PYTHONPATH:$HAIL_HOME/$HAILPYTHON:$HAIL_HOME/python:$SPARK_HOME/python:$JUPYTER_HOME/custom"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -yq --no-install-recommends     python     python-dev     liblzo2-dev     python-tk     liblzo2-dev     libz-dev  \u0026\u0026 useradd -m -s /bin/bash -N -u $UID $USER  \u0026\u0026 wget -nv https://bootstrap.pypa.io/get-pip.py  \u0026\u0026 python get-pip.py  \u0026\u0026 pip install ipykernel==4.10.0  \u0026\u0026 python2 -m ipykernel install --name python2 --display-name \"Python 2\"  \u0026\u0026 pip install -U decorator==4.3.0  \u0026\u0026 pip install numpy==1.15.2  \u0026\u0026 pip install py4j==0.10.7  \u0026\u0026 python -mpip install matplotlib==2.2.3 \u0026\u0026 pip install pandas==0.23.4  \u0026\u0026 pip install seaborn==0.9.0  \u0026\u0026 pip install google-api-core==1.5.0  \u0026\u0026 pip install google-cloud-bigquery==1.7.0  \u0026\u0026 pip install google-cloud-bigquery-datatransfer==0.1.1  \u0026\u0026 pip install google-cloud-core==0.28.1  \u0026\u0026 pip install google-cloud-datastore==1.7.0  \u0026\u0026 pip install google-cloud-resource-manager==0.28.1  \u0026\u0026 pip install google-cloud-storage==1.13.0  \u0026\u0026 pip install google-auth==1.5.1  \u0026\u0026 pip install --ignore-installed firecloud==0.16.18  \u0026\u0026 pip install -U scikit-learn==0.20.0  \u0026\u0026 pip install statsmodels==0.9.0  \u0026\u0026 pip install ggplot==0.11.5  \u0026\u0026 pip install bokeh==1.0.0   \u0026\u0026 pip install pyfasta==0.5.2  \u0026\u0026 pip install pdoc==0.3.2  \u0026\u0026 pip install biopython==1.72  \u0026\u0026 pip install bx-python==0.8.2  \u0026\u0026 pip install fastinterval==0.1.1  \u0026\u0026 pip install matplotlib-venn==0.11.5  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -t testing -yq --no-install-recommends     python3.7     python3.7-dev     python3-distutils  \u0026\u0026 update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 100  \u0026\u0026 python3 get-pip.py  \u0026\u0026 pip3 install tornado==4.5.3  \u0026\u0026 pip3 install -U decorator==4.3.0  \u0026\u0026 pip3 install parsimonious==0.8.1  \u0026\u0026 pip3 install numpy==1.15.2  \u0026\u0026 pip3 install py4j==0.10.7  \u0026\u0026 python3 -mpip install matplotlib==3.0.0  \u0026\u0026 pip3 install pandas==0.23.4  \u0026\u0026 pip3 install seaborn==0.9.0  \u0026\u0026 pip3 install jupyter==1.0.0  \u0026\u0026 pip3 install jupyterlab==0.35.2  \u0026\u0026 pip3 install python-lzo==1.12  \u0026\u0026 pip3 install google-api-core==1.5.0  \u0026\u0026 pip3 install google-cloud-bigquery==1.7.0  \u0026\u0026 pip3 install google-cloud-bigquery-datatransfer==0.1.1  \u0026\u0026 pip3 install google-cloud-core==0.28.1  \u0026\u0026 pip3 install google-cloud-datastore==1.7.0  \u0026\u0026 pip3 install google-cloud-resource-manager==0.28.1  \u0026\u0026 pip3 install google-cloud-storage==1.13.0  \u0026\u0026 pip3 install --ignore-installed firecloud==0.16.18  \u0026\u0026 pip3 install scikit-learn==0.20.0  \u0026\u0026 pip3 install statsmodels==0.9.0  \u0026\u0026 pip3 install ggplot==0.11.5  \u0026\u0026 pip3 install bokeh==1.0.0  \u0026\u0026 pip3 install pyfasta==0.5.2  \u0026\u0026 pip3 install pdoc==0.3.2  \u0026\u0026 pip3 install biopython==1.72  \u0026\u0026 pip3 install bx-python==0.8.2  \u0026\u0026 pip3 install fastinterval==0.1.1  \u0026\u0026 pip3 install matplotlib-venn==0.11.5  \u0026\u0026 pip3 install python-datauri  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/pandas.lib/pandas/g' /usr/local/lib/python3.7/dist-packages/ggplot/stats/smoothers.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PIP_USER",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends apt-utils  \u0026\u0026 apt-get update \u0026\u0026 apt-get -t stretch-cran35 install -y --no-install-recommends     r-base     r-base-dev     r-recommended  \u0026\u0026 apt-get install -t stretch-backports -y --no-install-recommends     fonts-dejavu     tzdata     gfortran     gcc     libcurl4     libcurl4-openssl-dev     libssl-dev     libxml2-dev  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e 'install.packages(c(     \"BiocManager\",    \"IRdisplay\",      \"evaluate\",      \"pbdZMQ\",      \"devtools\",      \"uuid\",      \"reshape2\",      \"bigrquery\",      \"googleCloudStorageR\",      \"tidyverse\"),     repos=\"http://cran.mtu.edu\")'  \u0026\u0026 R -e 'devtools::install_github(\"DataBiosphere/Ronaldo\")'  \u0026\u0026 R -e 'devtools::install_github(\"IRkernel/IRkernel\")'  \u0026\u0026 R -e 'IRkernel::installspec(user=FALSE)'  \u0026\u0026 chown -R $USER:users /home/jupyter-user/.local   \u0026\u0026 R -e 'devtools::install_github(\"apache/spark@v2.2.0\", subdir=\"R/pkg\")'  \u0026\u0026 mkdir -p /home/jupyter-user/.rpackages  \u0026\u0026 echo \"R_LIBS=/home/jupyter-user/.rpackages\" \u003e /home/jupyter-user/.Renviron  \u0026\u0026 chown -R $USER:users /home/jupyter-user/.rpackages"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "scripts",
            "$JUPYTER_HOME/scripts"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "custom/jupyter_delocalize.py",
            "$JUPYTER_HOME/custom/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "custom/jupyter_localize_extension.py",
            "$JUPYTER_HOME/custom/"
          ]
        },
        {
          "CmdLine": [
            "chown -R $USER:users $JUPYTER_HOME  \u0026\u0026 find $JUPYTER_HOME/scripts -name '*.sh' -type f | xargs chmod +x"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$USER"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "Name": "expose",
          "Ports": [
            "$JUPYTER_PORT"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/bin/jupyter",
            "notebook"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}