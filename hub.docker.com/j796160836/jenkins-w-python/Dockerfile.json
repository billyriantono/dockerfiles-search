{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.6",
      "SourceCode": "FROM alpine:3.6",
      "Platform": "",
      "From": {
        "Image": "alpine:3.6"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GPG_KEY",
              "Value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "2.7.13"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\tlibressl \t\ttar \t\txz \t\t\u0026\u0026 wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t\u0026\u0026 wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t\u0026\u0026 gpg --batch --verify python.tar.xz.asc python.tar.xz \t\u0026\u0026 rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t\u0026\u0026 mkdir -p /usr/src/python \t\u0026\u0026 tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t\u0026\u0026 rm python.tar.xz \t\t\u0026\u0026 apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\tlibressl \t\tlibressl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tzlib-dev \t\u0026\u0026 apk del .fetch-deps \t\t\u0026\u0026 cd /usr/src/python \t\u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t\u0026\u0026 ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t\u0026\u0026 make -j \"$(nproc)\" \t\u0026\u0026 make install \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --virtual .python-rundeps $runDeps \t\u0026\u0026 apk del .build-deps \t\t\u0026\u0026 find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t\u0026\u0026 rm -rf /usr/src/python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHON_PIP_VERSION",
              "Value": "9.0.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex; \t\tapk add --no-cache --virtual .fetch-deps libressl; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapk del .fetch-deps; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} \u003e /usr/local/bin/docker-java-home \t\u0026\u0026 chmod +x /usr/local/bin/docker-java-home"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-1.8-openjdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_VERSION",
              "Value": "8u131"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_ALPINE_VERSION",
              "Value": "8.131.11-r2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 apk add --no-cache \t\topenjdk8=\"$JAVA_ALPINE_VERSION\" \t\u0026\u0026 [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk update \t\u0026\u0026 apk add ca-certificates wget \t\u0026\u0026 update-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache git openssh-client curl unzip bash ttf-dejavu coreutils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "user",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "group",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "uid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "gid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "http_port",
          "Name": "arg",
          "Value": "8080"
        },
        {
          "Key": "agent_port",
          "Name": "arg",
          "Value": "50000"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_HOME",
              "Value": "/var/jenkins_home"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_SLAVE_AGENT_PORT",
              "Value": "${agent_port}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup -g ${gid} ${group}     \u0026\u0026 adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/jenkins_home"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /usr/share/jenkins/ref/init.groovy.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "0.14.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TINI_SHA",
              "Value": "6c41ec7d33e857d4779f14d9c74924cab0c7973485d2972419a3b7c7620ff5fd"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini \u0026\u0026 chmod +x /bin/tini   \u0026\u0026 echo \"$TINI_SHA  /bin/tini\" | sha256sum -c -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "init.groovy",
            "/usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy"
          ]
        },
        {
          "Key": "JENKINS_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "JENKINS_VERSION",
              "Value": "${JENKINS_VERSION:-2.60.1}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "JENKINS_SHA",
          "Name": "arg",
          "Value": "34fde424dde0e050738f5ad1e316d54f741c237bd380bd663a07f96147bb1390"
        },
        {
          "Key": "JENKINS_URL",
          "Name": "arg",
          "Value": "https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war"
        },
        {
          "CmdLine": [
            "curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war   \u0026\u0026 echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JENKINS_UC",
              "Value": "https://updates.jenkins.io"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "${http_port}"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "${agent_port}"
          ]
        },
        {
          "Env": [
            {
              "Key": "COPY_REFERENCE_FILE_LOG",
              "Value": "$JENKINS_HOME/copy_reference_file.log"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "${user}"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins-support",
            "/usr/local/bin/jenkins-support"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins.sh",
            "/usr/local/bin/jenkins.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/tini",
            "--",
            "/usr/local/bin/jenkins.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "plugins.sh",
            "/usr/local/bin/plugins.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "install-plugins.sh",
            "/usr/local/bin/install-plugins.sh"
          ]
        }
      ]
    }
  ]
}