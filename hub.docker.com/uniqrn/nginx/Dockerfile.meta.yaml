MetaArgs: null
Stages:
- As: base
  BaseName: debian:buster-20190910-slim
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.6
    Name: env
  - Env:
    - Key: NJS_VERSION
      Value: 0.3.7
    Name: env
  - Env:
    - Key: PKG_RELEASE
      Value: 1~buster
    Name: env
  - CmdLine:
    - 'set -x     && addgroup --system --gid 101 nginx     && adduser --system --disabled-login
      --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell
      /bin/false --uid 101 nginx     && apt-get update     && apt-get install --no-install-recommends
      --no-install-suggests -y gnupg1 ca-certificates     &&     NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62;     found='''';     for
      server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ;
      do         echo "Fetching GPG key $NGINX_GPGKEY from $server";         apt-key
      adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY"
      && found=yes && break;     done;     test -z "$found" && echo >&2 "error: failed
      to fetch GPG key $NGINX_GPGKEY" && exit 1;     apt-get remove --purge --auto-remove
      -y gnupg1 && rm -rf /var/lib/apt/lists/*     && dpkgArch="$(dpkg --print-architecture)"     &&
      nginxPackages="         nginx=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-${PKG_RELEASE}     "     &&
      case "$dpkgArch" in         amd64|i386)             echo "deb https://nginx.org/packages/mainline/debian/
      buster nginx" >> /etc/apt/sources.list.d/nginx.list             && apt-get update             ;;         *)             echo
      "deb-src https://nginx.org/packages/mainline/debian/ buster nginx" >> /etc/apt/sources.list.d/nginx.list                         &&
      tempDir="$(mktemp -d)"             && chmod 777 "$tempDir"                         &&
      savedAptMark="$(apt-mark showmanual)"                         && apt-get update             &&
      apt-get build-dep -y $nginxPackages             && (                 cd "$tempDir"                 &&
      DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"                     apt-get source
      --compile $nginxPackages             )                         && apt-mark showmanual
      | xargs apt-mark auto > /dev/null             && { [ -z "$savedAptMark" ] ||
      apt-mark manual $savedAptMark; }                         && ls -lAFh "$tempDir"             &&
      ( cd "$tempDir" && dpkg-scanpackages . > Packages )             && grep ''^Package:
      '' "$tempDir/Packages"             && echo "deb [ trusted=yes ] file://$tempDir
      ./" > /etc/apt/sources.list.d/temp.list             && apt-get -o Acquire::GzipIndexes=false
      update             ;;     esac         && apt-get install --no-install-recommends
      --no-install-suggests -y                         $nginxPackages                         gettext-base     &&
      apt-get remove --purge --auto-remove -y ca-certificates && rm -rf /var/lib/apt/lists/*
      /etc/apt/sources.list.d/nginx.list         && if [ -n "$tempDir" ]; then         apt-get
      purge -y --auto-remove         && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;     fi'
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -sf /dev/stdout /var/log/nginx/access.log     && ln -sf /dev/stderr /var/log/nginx/error.log
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: debian:buster-20190910-slim
  Name: base
  Platform: ""
  SourceCode: FROM debian:buster-20190910-slim AS base
- As: builder
  BaseName: base
  Commands:
  - CmdLine:
    - "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \twget
      \tgit \tgcc \tmake \tbuild-essential \trake \tbison \tlibssl-dev \tlibpcre3-dev
      \tzlib1g-dev \t; \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /root/
  - CmdLine:
    - wget "http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz
      &&     git clone https://github.com/matsumotory/ngx_mruby.git
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - build_config.rb
    - /root/ngx_mruby/build_config.rb
  - CmdLine:
    - 'CONFARGS=$(nginx -V 2>&1 | sed -n -e ''s/^.*arguments: //p'' | sed -n -e ''s/
      -fomit-frame-pointer//p'')     tar xzf nginx.tar.gz     && NGINXDIR="$(pwd)/nginx-$NGINX_VERSION/"     &&
      MODDIR="$(pwd)/ngx_mruby/"     && cd $MODDIR     && ./configure --with-ngx-src-root=$NGINXDIR
      --enable-dynamic-module     && make mrbgems_config_dynamic     && cd $NGINXDIR     &&
      ./configure --with-compat $CONFARGS --add-dynamic-module=$MODDIR     && make
      modules'
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: builder
  Platform: ""
  SourceCode: FROM base AS builder
- As: production
  BaseName: base
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"unicorn research Ltd."'
    Name: label
  - CmdLine:
    - "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \twget
      \t; \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Chown: ""
    From: builder
    Name: copy
    SourcesAndDest:
    - /root/nginx-$NGINX_VERSION/objs/ngx_http_mruby_module.so
    - /usr/lib/nginx/modules/ngx_http_mruby_module.so
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Stage:
      Index: 0
      Named: base
  Name: production
  Platform: ""
  SourceCode: FROM base AS production
