MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - DISTRIB_CODENAME=$(cat /etc/*release* | grep DISTRIB_CODENAME | cut -f2 -d'=')     &&
      echo "deb http://archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe\n"
      > /etc/apt/sources.list     && echo "deb http://archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates
      main universe\n" >> /etc/apt/sources.list     && echo "deb http://security.ubuntu.com/ubuntu
      ${DISTRIB_CODENAME}-security main universe\n" >> /etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qqy   && apt-get -qqy --no-install-recommends install software-properties-common   &&
      add-apt-repository -y ppa:git-core/ppa
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qqy   && apt-get -qqy --no-install-recommends install     openssh-client     ca-certificates     openjdk-8-jdk     tar
      zip unzip     wget curl     git     jq     build-essential     less tree     python
      python-pip     python3 python3-pip groff     gosu   && rm -rf /var/lib/apt/lists/*   &&
      sed -i 's/securerandom\.source=file:\/dev\/random/securerandom\.source=file:\/dev\/urandom/'
      ./usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ -f "/etc/ssl/certs/java/cacerts" ] || /var/lib/dpkg/info/ca-certificates-java.postinst
      configure'
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --upgrade pip setuptools && pip3 install --upgrade pip setuptools
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64
    Name: env
  - Env:
    - Key: DOCKER_CHANNEL
      Value: stable
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: 18.06.0-ce
    Name: env
  - Env:
    - Key: DOCKER_ARCH
      Value: x86_64
    Name: env
  - CmdLine:
    - "if ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${DOCKER_ARCH}/docker-${DOCKER_VERSION}.tgz\";
      then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from
      '${DOCKER_CHANNEL}' for '${DOCKER_ARCH}'\"; \t\texit 1; \tfi; \t\ttar --extract
      \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/bin/ \t;
      \trm docker.tgz;"
    Name: run
    PrependShell: true
  - Env:
    - Key: JENKINS_HOME
      Value: /home/jenkins
    Name: env
  - CmdLine:
    - adduser --quiet --home $JENKINS_HOME --shell /bin/bash jenkins   && echo "jenkins:jenkins"
      | chpasswd
    Name: run
    PrependShell: true
  - CmdLine:
    - touch $JENKINS_HOME/.profile &&     chown jenkins /home/jenkins/.profile
    Name: run
    PrependShell: true
  - Key: JENKINS_REMOTING_VERSION
    Name: arg
    Value: "3.23"
  - CmdLine:
    - curl --create-dirs -sSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/$JENKINS_REMOTING_VERSION/remoting-$JENKINS_REMOTING_VERSION.jar   &&
      chmod 755 /usr/share/jenkins   && chmod 644 /usr/share/jenkins/slave.jar
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - jenkins-slave
    - entry-point
    - /usr/local/bin/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - logging.properties
    - /usr/share/jenkins/logging.properties
  - CmdLine:
    - chmod a+rwx $JENKINS_HOME
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${JENKINS_HOME}
  - CmdLine:
    - /usr/local/bin/entry-point
    - /usr/local/bin/jenkins-slave
    Name: entrypoint
    PrependShell: false
  - Name: user
    User: jenkins
  - CmdLine:
    - pip3 install --user awscli
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:${JENKINS_HOME}/.local/bin
    Name: env
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - assume-role
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/assume-role
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nvm-setup
    - nvm-setup
  - CmdLine:
    - chmod +x nvm-setup
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p $JENKINS_HOME/.nvm
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/creationix/nvm.git $JENKINS_HOME/.nvm
    Name: run
    PrependShell: true
  - CmdLine:
    - ./nvm-setup && rm nvm-setup
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R jenkins:jenkins $JENKINS_HOME/.nvm
    Name: run
    PrependShell: true
  - CmdLine:
    - echo ". $JENKINS_HOME/.nvm/nvm.sh" > /etc/profile.d/nvm.sh && chmod +x /etc/profile.d/nvm.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - rvm-setup
    - rvm-setup
  - CmdLine:
    - chmod +x rvm-setup
    Name: run
    PrependShell: true
  - CmdLine:
    - gpg --keyserver hkp://pgp.mit.edu --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL https://get.rvm.io | bash -s stable
    Name: run
    PrependShell: true
  - CmdLine:
    - ./rvm-setup && rm rvm-setup
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/lib/apt/lists/* && apt-get clean
    Name: run
    PrependShell: true
  - CmdLine:
    - rm $JENKINS_HOME/.profile
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
