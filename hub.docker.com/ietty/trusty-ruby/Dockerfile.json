{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:trusty",
      "SourceCode": "From ubuntu:trusty",
      "Platform": "",
      "From": {
        "Image": "ubuntu:trusty"
      },
      "Commands": [
        {
          "Maintainer": "\"takemi.ohama\" \u003ctakemi.ohama@ietty.co.jp\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get upgrade -y \u0026\u0026 apt-get update -y \u0026\u0026     apt-get install -y git curl wget tmux     g++ zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev     libaio1 libxslt-dev libxml2-dev libqt4-dev imagemagick libffi-dev     checkinstall libjpeg-dev aptitude software-properties-common redis-tools     fonts-ipaexfont-gothic fonts-ipaexfont-mincho fonts-ubuntu-font-family-console"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:ondrej/mysql-5.6 \u0026\u0026     apt-get install -y mysql-client libmysqlclient-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:ubuntu-toolchain-r/test \u0026\u0026     apt-get install -y g++-4.8 \u0026\u0026     update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/share/"
        },
        {
          "CmdLine": [
            "curl -sSL -O https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 \u0026\u0026     tar jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin/phantomjs \u0026\u0026     ln -sf /usr/share/zoneinfo/Japan /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local"
        },
        {
          "CmdLine": [
            "git config --global credential.helper store \u0026\u0026     git clone https://github.com/sstephenson/rbenv.git rbenv \u0026\u0026     mkdir rbenv/shims rbenv/versions rbenv/plugins \u0026\u0026     groupadd rbenv \u0026\u0026 chgrp -R rbenv rbenv \u0026\u0026 chmod -R g+rwxXs rbenv"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash docker \u0026\u0026     usermod -G rbenv,users docker \u0026\u0026     usermod -G users root \u0026\u0026     echo '%users ALL=(ALL:ALL) NOPASSWD: ALL' \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/rbenv/plugins"
        },
        {
          "CmdLine": [
            "git clone https://github.com/sstephenson/ruby-build.git \u0026\u0026     git clone https://github.com/ianheggie/rbenv-binstubs.git \u0026\u0026     git clone https://github.com/rkh/rbenv-update.git \u0026\u0026     git clone https://github.com/sstephenson/rbenv-default-gems.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chgrp -R rbenv /usr/local/rbenv/plugins \u0026\u0026 chmod -R g+rwxs /usr/local/rbenv/plugins"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export RBENV_ROOT=\"/usr/local/rbenv\"' \u003e /etc/profile.d/rbenv.sh \u0026\u0026     echo 'export PATH=\"$RBENV_ROOT/bin:$PATH\"' \u003e\u003e /etc/profile.d/rbenv.sh \u0026\u0026     echo 'eval \"$(rbenv init -)\"' \u003e\u003e  /etc/profile.d/rbenv.sh \u0026\u0026     echo 'bundler' \u003e\u003e /usr/local/rbenv/default-gems \u0026\u0026     echo 'rbenv-rehash' \u003e\u003e /usr/local/rbenv/default-gems"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            ". /etc/profile.d/rbenv.sh \u0026\u0026 ruby-build/install.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONFIGURE_OPTS",
              "Value": "--disable-install-doc"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "su -l root -c 'rbenv install 2.2.2 -v \u0026\u0026 rbenv rehash \u0026\u0026 rbenv global 2.2.2'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y nodejs npm \u0026\u0026     npm cache clean \u0026\u0026     npm install n -g \u0026\u0026     npm update -g npm \u0026\u0026     n 5.5.0  \u0026\u0026     apt-get purge -y nodejs npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g npm-check-updates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf \"install: --no-document\\ninstall: --no-document\\n\" \u003e /home/docker/.gemrc \u0026\u0026     bash -lc 'gem update --system \u0026\u0026 gem install bundler \u0026\u0026 gem install foreman'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "3000"
          ]
        },
        {
          "Name": "user",
          "User": "docker"
        },
        {
          "Name": "workdir",
          "Path": "/home/docker"
        },
        {
          "CmdLine": [
            "tail",
            "-f",
            "/dev/null"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}