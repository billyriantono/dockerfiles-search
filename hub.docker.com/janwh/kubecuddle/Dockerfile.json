{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:bionic",
      "SourceCode": "FROM ubuntu:bionic",
      "Platform": "",
      "From": {
        "Image": "ubuntu:bionic"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "keys/",
            "./"
          ]
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     DEBIAN_FRONTEND=noninteractive     apt-get install -y ca-certificates apt-transport-https gnupg2 \u0026\u0026     apt-key add ./*.gpg \u0026\u0026     echo \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" \u003e\u003e /etc/apt/sources.list.d/kubecuddle.list \u0026\u0026     apt-get update \u0026\u0026     DEBIAN_FRONTEND=noninteractive         apt-get install -y             wget curl screen git zsh bash vim-nox zgen             kubectl             jq     \u0026\u0026     curl -s https://api.github.com/repos/krallin/tini/releases/latest |        grep browser_download | grep 'tini\\\"' | cut -d '\"' -f 4 | xargs wget -nv -O /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini \u0026\u0026     curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |        grep browser_download | grep linux | cut -d '\"' -f 4 | xargs wget -nv -O /usr/local/bin/kustomize \u0026\u0026     chmod +x /usr/local/bin/kustomize \u0026\u0026     curl -s https://api.github.com/repos/helm/helm/releases/latest |        sed -nE 's/.*(https:\\/\\/get\\.helm\\.sh\\/helm-.+-linux-amd64.tar.gz).*/\\1/p' | head -1 |        xargs wget -nv -O /tmp/helm.tar.gz \u0026\u0026     tar -zxf /tmp/helm.tar.gz \u0026\u0026     mv /tmp/linux-amd64/helm /usr/local/bin/helm \u0026\u0026     chmod +x /usr/local/bin/helm \u0026\u0026     curl -s https://api.github.com/repos/wercker/stern/releases/latest |        grep browser_download | grep linux | cut -d '\"' -f 4 | xargs wget -nv -O /usr/local/bin/stern \u0026\u0026     chmod +x /usr/local/bin/stern \u0026\u0026     curl -s https://api.github.com/repos/yudai/gotty/releases/latest |        grep browser_download | grep linux_amd64 | cut -d '\"' -f 4 | xargs wget -nv -O /tmp/gotty.tar.gz \u0026\u0026     tar -zxf /tmp/gotty.tar.gz \u0026\u0026     mv /tmp/gotty /usr/local/bin/gotty \u0026\u0026     chmod +x /usr/local/bin/gotty"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "GID",
          "Name": "arg",
          "Value": "1042"
        },
        {
          "Key": "UID",
          "Name": "arg",
          "Value": "1042"
        },
        {
          "Key": "USERNAME",
          "Name": "arg",
          "Value": "cuddle"
        },
        {
          "Key": "GROUPNAME",
          "Name": "arg",
          "Value": "$USERNAME"
        },
        {
          "Key": "ALLOW_SUDO",
          "Name": "arg",
          "Value": null
        },
        {
          "Name": "workdir",
          "Path": "/home/$USERNAME"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts/",
            "/scripts"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rc-files/",
            "./"
          ]
        },
        {
          "CmdLine": [
            "groupadd --gid $GID $GROUPNAME \u0026\u0026     useradd --gid $GID --uid $UID -d /home/${USERNAME} $USERNAME \u0026\u0026     [ ! -n \"$ALLOW_SUDO\" ] || (         apt-get install -y sudo \u0026\u0026         usermod -aG sudo $USERNAME \u0026\u0026         echo \"$USERNAME ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers     ) \u0026\u0026     apt-get autoclean \u0026\u0026     rm -rf /var/lib/apt/lists/* \u0026\u0026     rm -rf /tmp/* \u0026\u0026     chown -R $USERNAME:$GROUPNAME /home/$USERNAME \u0026\u0026     chmod +x /scripts/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$USERNAME"
        },
        {
          "Env": [
            {
              "Key": "HOST",
              "Value": "$USERNAME"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "zsh -c \"source ~/.zshrc\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tini",
            "--",
            "/scripts/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "zsh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}