{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jenkins/jenkins:alpine",
      "SourceCode": "FROM jenkins/jenkins:alpine",
      "Platform": "",
      "From": {
        "Image": "jenkins/jenkins:alpine"
      },
      "Commands": [
        {
          "Maintainer": "bingo \u003cbingov5@icloud.com\u003e",
          "Name": "maintainer"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apk add --no-cache     ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "[ ! -e /etc/nsswitch.conf ] \u0026\u0026 echo 'hosts: files dns' \u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_CHANNEL",
              "Value": "edge"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "18.02.0-ce"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_HOST_ADDRESS",
              "Value": "\"docker:2375\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_HOST",
              "Value": "\"tcp://$DOCKER_HOST_ADDRESS\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex;   apk add --no-cache --virtual .fetch-deps     curl     tar   ;     apkArch=\"$(apk --print-arch)\";   case \"$apkArch\" in     x86_64) dockerArch='x86_64' ;;     armhf) dockerArch='armel' ;;     aarch64) dockerArch='aarch64' ;;     ppc64le) dockerArch='ppc64le' ;;     s390x) dockerArch='s390x' ;;     *) echo \u003e\u00262 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;  esac;     if ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then     echo \u003e\u00262 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\";     exit 1;   fi;     tar --extract     --file docker.tgz     --strip-components 1     --directory /usr/local/bin/   ;   rm docker.tgz;     apk del .fetch-deps;     dockerd -v;   docker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MAVEN_VERSION",
              "Value": "3.5.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GRADLE_VERSION",
              "Value": "4.6"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .maven-gradle-deps wget curl tar unzip   \u0026\u0026 mkdir /maven     \u0026\u0026 curl http://mirror.bit.edu.cn/apache/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /maven --strip-components=1     \u0026\u0026 ln -s /maven/bin/mvn /usr/bin/mvn     \u0026\u0026 wget -q https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip     \u0026\u0026 unzip -q gradle-$GRADLE_VERSION-bin.zip     \u0026\u0026 rm -rf gradle-$GRADLE_VERSION-bin.zip     \u0026\u0026 mv gradle-$GRADLE_VERSION gradle     \u0026\u0026 ln -s /gradle/bin/gradle /usr/bin/gradle     \u0026\u0026 apk del .maven-gradle-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHPIZE_DEPS",
              "Value": "autoconf     dpkg-dev dpkg     file     g++     gcc     libc-dev     make     pkgconf     re2c"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .persistent-deps     ca-certificates     curl     tar     xz     openssl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "7.1.15"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CFLAGS",
              "Value": "\"-fstack-protector-strong -fpic -fpie -O2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CPPFLAGS",
              "Value": "\"$PHP_CFLAGS\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_LDFLAGS",
              "Value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_URL",
              "Value": "\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "/usr/local/etc/php"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $PHP_INI_DIR/conf.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -xe;   mkdir -p /usr/src;   cd /usr/src;   wget -O php.tar.xz \"$PHP_URL\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -xe   \u0026\u0026 apk add --no-cache --virtual .build-deps     $PHPIZE_DEPS     coreutils     curl-dev     libedit-dev     openssl-dev     libxml2-dev     sqlite-dev     \u0026\u0026 export CFLAGS=\"$PHP_CFLAGS\"     CPPFLAGS=\"$PHP_CPPFLAGS\"     LDFLAGS=\"$PHP_LDFLAGS\"   \u0026\u0026 mkdir -p /usr/src/php   \u0026\u0026 tar -Jxf /usr/src/php.tar.xz -C /usr/src/php --strip-components=1   \u0026\u0026 cd /usr/src/php   \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"   \u0026\u0026 ./configure     --build=\"$gnuArch\"     --with-config-file-path=\"$PHP_INI_DIR\"     --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\"     --disable-cgi     --enable-ftp     --enable-mbstring     --enable-mysqlnd     --with-curl     --with-libedit     --with-openssl     --with-zlib         $(test \"$gnuArch\" = 's390x-linux-gnu' \u0026\u0026 echo '--without-pcre-jit')         $PHP_EXTRA_CONFIGURE_ARGS   \u0026\u0026 make -j \"$(nproc)\"   \u0026\u0026 make install   \u0026\u0026 { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }   \u0026\u0026 ln -s /usr/local/bin/php /usr/bin/php   \u0026\u0026 make clean   \u0026\u0026 cd /   \u0026\u0026 rm -rf /usr/src/php     \u0026\u0026 runDeps=\"$(     scanelf --needed --nobanner --format '%n#p' --recursive /usr/local       | tr ',' '\\n'       | sort -u       | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }'   )\"   \u0026\u0026 apk add --no-cache --virtual .php-rundeps $runDeps     \u0026\u0026 apk del .build-deps     \u0026\u0026 pecl update-channels   \u0026\u0026 rm -rf /tmp/pear ~/.pearrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .composer-deps curl   \u0026\u0026 mkdir /php-composer     \u0026\u0026 curl -sS https://getcomposer.org/installer | php -- --install-dir=/php-composer     \u0026\u0026 ln -s /php-composer/composer.phar /usr/bin/composer     \u0026\u0026 apk del .composer-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "8.9.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "YARN_VERSION",
              "Value": "1.3.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache         libstdc++     \u0026\u0026 apk add --no-cache --virtual .build-deps         binutils-gold         curl         g++         gcc         libgcc         linux-headers         make         python     \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz\"     \u0026\u0026 tar -xf \"node-v$NODE_VERSION.tar.xz\"     \u0026\u0026 cd \"node-v$NODE_VERSION\"     \u0026\u0026 ./configure --without-npm     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make install     \u0026\u0026 apk del .build-deps     \u0026\u0026 cd ..     \u0026\u0026 rm -Rf \"node-v$NODE_VERSION\"     \u0026\u0026 rm \"node-v$NODE_VERSION.tar.xz\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps-yarn         curl     \u0026\u0026 curl -fSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\"     \u0026\u0026 mkdir -p /opt/yarn     \u0026\u0026 tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1     \u0026\u0026 ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn     \u0026\u0026 ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg     \u0026\u0026 rm yarn-v$YARN_VERSION.tar.gz     \u0026\u0026 apk del .build-deps-yarn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo -e \"\\nHost *\\n    StrictHostKeyChecking no\\n    UserKnownHostsFile /dev/null\" \u003e\u003e /etc/ssh/ssh_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "jenkins"
        }
      ]
    }
  ]
}