MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Env:
    - Key: TERRAFORM_VERSION
      Value: 0.11.10
    Name: env
  - CmdLine:
    - apk --update add ca-certificates curl &&     curl -sSkL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
      > /terraform.zip &&     unzip /terraform.zip && rm /terraform.zip &&     mv
      terraform* /usr/local/bin &&     chmod +x /usr/local/bin/terraform*
    Name: run
    PrependShell: true
  - Env:
    - Key: ANSIBLE_VERSION
      Value: 2.6.4
    - Key: ANSIBLE_HOST_KEY_CHECKING
      Value: "False"
    Name: env
  - CmdLine:
    - apk --update add build-base libffi-dev     openssl-dev openssh-client     python-dev
      py-pip py-crypto py-jinja2 &&     pip install --upgrade pip &&     pip install
      ansible==${ANSIBLE_VERSION} &&     apk del build-base openssl-dev libffi-dev
      python-dev
    Name: run
    PrependShell: true
  - Env:
    - Key: PACKER_VERSION
      Value: 1.3.1
    Name: env
  - CmdLine:
    - curl -LO "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip"
      &&     unzip packer_${PACKER_VERSION}_linux_amd64.zip &&     rm packer_${PACKER_VERSION}_linux_amd64.zip
      &&     mv packer /usr/local/bin
    Name: run
    PrependShell: true
  - Env:
    - Key: KUBECTL_VERSION
      Value: 1.10.7
    Name: env
  - CmdLine:
    - curl -sSL https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl     >
      /usr/local/bin/kubectl     && chmod +x /usr/local/bin/kubectl
    Name: run
    PrependShell: true
  - Env:
    - Key: KOPS_VERSION
      Value: 1.8.0
    Name: env
  - CmdLine:
    - curl -sSL https://github.com/kubernetes/kops/releases/download/${KOPS_VERSION}/kops-linux-amd64     >
      /usr/local/bin/kops     && chmod +x /usr/local/bin/kops
    Name: run
    PrependShell: true
  - Env:
    - Key: HELM_VERSION
      Value: 2.9.0
    Name: env
  - CmdLine:
    - curl -LO "https://kubernetes-helm.storage.googleapis.com/helm-v${HELM_VERSION}-linux-amd64.tar.gz"
      &&     tar xvzf helm-v${HELM_VERSION}-linux-amd64.tar.gz &&     rm helm-v${HELM_VERSION}-linux-amd64.tar.gz
      &&     mv linux-amd64/helm /usr/local/bin &&     rm -rf linux-amd64
    Name: run
    PrependShell: true
  - Env:
    - Key: AWS_CLI_VERSION
      Value: 1.16.30
    Name: env
  - CmdLine:
    - "apk -Uuv add groff less python py-pip && \tpip install awscli==${AWS_CLI_VERSION}
      && \trm /var/cache/apk/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: STERN_VERSION
      Value: 1.6.0
    Name: env
  - CmdLine:
    - "curl -sSL \"https://github.com/wercker/stern/releases/download/${STERN_VERSION}/stern_linux_amd64\"
      \    > /usr/local/bin/stern && \tchmod +x /usr/local/bin/stern"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOLANG_VERSION
      Value: 1.11.1
    Name: env
  - CmdLine:
    - set -eux;   apk add --no-cache --virtual .build-deps     bash     sudo     gcc     musl-dev     openssl     go   ;   export     GOROOT_BOOTSTRAP="$(go
      env GOROOT)"     GOOS="$(go env GOOS)"     GOARCH="$(go env GOARCH)"     GOHOSTOS="$(go
      env GOHOSTOS)"     GOHOSTARCH="$(go env GOHOSTARCH)"   ;   apkArch="$(apk --print-arch)";   case
      "$apkArch" in     armhf) export GOARM='6' ;;     x86) export GO386='387' ;;   esac;     curl
      -sSL "https://golang.org/dl/go${GOLANG_VERSION}.src.tar.gz" > go.tgz;   echo
      '558f8c169ae215e25b81421596e8de7572bd3ba824b79add22fba6e284db1117 *go.tgz' |
      sha256sum -c -;   tar -C /usr/local -xzf go.tgz;   rm go.tgz;     cd /usr/local/go/src;   for
      p in /go-alpine-patches/*.patch; do     [ -f "$p" ] || continue;     patch -p2
      -i "$p";   done;   ./make.bash;     rm -rf /go-alpine-patches;   apk del .build-deps;     export
      PATH="/usr/local/go/bin:$PATH";   go version
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:/usr/local/go/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk --update --no-cache add     tmux     openssl     htop     bash     git     zsh     zsh-vcs     make     jq     gettext     ncurses     shadow     su-exec
    Name: run
    PrependShell: true
  - CmdLine:
    - addgroup devops && adduser -S -G devops devops
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /
  - CmdLine:
    - chmod 755 /docker-entrypoint.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - versions.sh
    - test.sh
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/versions.sh &&     chmod +x /usr/local/bin/test.sh
    Name: run
    PrependShell: true
  - Name: user
    User: devops
  - CmdLine:
    - curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
      | zsh || true
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .zshrc
    - /home/devops
  - Name: user
    User: root
  - CmdLine:
    - versions.sh
    Name: cmd
    PrependShell: false
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
