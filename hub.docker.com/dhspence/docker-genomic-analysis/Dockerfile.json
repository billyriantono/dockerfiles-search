{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Maintainer": "David Spencer \u003cdspencer@wustl.edu\u003e",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "Image",
              "Value": "for basic ad-hoc bioinformatic analyses"
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends locales \u0026\u0026     echo \"en_US.UTF-8 UTF-8\" \u003e\u003e /etc/locale.gen \u0026\u0026     locale-gen en_US.UTF-8 \u0026\u0026     LC_ALL=en_US.UTF-8 \u0026\u0026     LANG=en_US.UTF-8 \u0026\u0026     /usr/sbin/update-locale LANG=en_US.UTF-8 \u0026\u0026     TERM=xterm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026 apt-get install -y --no-install-recommends     build-essential     bzip2     curl     default-jdk     default-jre     emacs     emacs-goodies-el     g++     git     less     libcurl4-openssl-dev     libpng-dev     libssl-dev     libxml2-dev     make     ncurses-dev     nodejs     pkg-config     python     rsync     unzip     wget     zip     libbz2-dev     bash-completion     ca-certificates     file     fonts-texgyre     g++     gfortran     gsfonts     libbz2-1.0     libcurl3     libicu55     libjpeg-turbo8     libopenblas-dev     libpangocairo-1.0-0     libpcre3     libpng12-0     libtiff5     liblzma5     locales     zlib1g     libbz2-dev     libcairo2-dev     libcurl4-openssl-dev     libpango1.0-dev     libjpeg-dev     libicu-dev     libpcre3-dev     libpng-dev     libreadline-dev     libtiff5-dev     liblzma-dev     libx11-dev     libxt-dev     perl     tcl8.5-dev     tk8.5-dev     texinfo     texlive-extra-utils     texlive-fonts-recommended     texlive-fonts-extra     texlive-latex-recommended     x11proto-core-dev     xauth     xfonts-base     xvfb     zlib1g-dev     bc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HTSLIB_INSTALL_DIR",
              "Value": "/opt/htslib"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "wget https://github.com/samtools/htslib/releases/download/1.5/htslib-1.5.tar.bz2 \u0026\u0026     tar --bzip2 -xvf htslib-1.5.tar.bz2 \u0026\u0026     cd /tmp/htslib-1.5 \u0026\u0026     ./configure  --enable-plugins --prefix=$HTSLIB_INSTALL_DIR \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cp $HTSLIB_INSTALL_DIR/lib/libhts.so* /usr/lib/ \u0026\u0026     ln -s $HTSLIB_INSTALL_DIR/bin/tabix /usr/bin/tabix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SAMTOOLS_INSTALL_DIR",
              "Value": "/opt/samtools"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "wget https://github.com/samtools/samtools/releases/download/1.5/samtools-1.5.tar.bz2 \u0026\u0026     tar --bzip2 -xf samtools-1.5.tar.bz2 \u0026\u0026     cd /tmp/samtools-1.5 \u0026\u0026     ./configure --with-htslib=$HTSLIB_INSTALL_DIR --prefix=$SAMTOOLS_INSTALL_DIR \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     ln -s /opt/samtools/bin/* /usr/local/bin/ \u0026\u0026     cd / \u0026\u0026     rm -rf /tmp/samtools-1.5"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BCFTOOLS_INSTALL_DIR",
              "Value": "/opt/bcftools"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "wget https://github.com/samtools/bcftools/releases/download/1.5/bcftools-1.5.tar.bz2 \u0026\u0026     tar --bzip2 -xf bcftools-1.5.tar.bz2 \u0026\u0026     cd /tmp/bcftools-1.5 \u0026\u0026     make prefix=$BCFTOOLS_INSTALL_DIR \u0026\u0026     make prefix=$BCFTOOLS_INSTALL_DIR install \u0026\u0026     ln -s /opt/bcftools/bin/* /usr/local/bin/ \u0026\u0026     cd / \u0026\u0026     rm -rf /tmp/bcftools-1.5"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "picard_version",
              "Value": "2.18.9"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install ant --no-install-recommends -y \u0026\u0026     cd /usr/ \u0026\u0026     git config --global http.sslVerify false \u0026\u0026     git clone --recursive https://github.com/broadinstitute/picard.git \u0026\u0026     cd /usr/picard \u0026\u0026     git checkout tags/${picard_version} \u0026\u0026     ./gradlew shadowJar \u0026\u0026     cp ./build/libs/picard.jar . \u0026\u0026     echo -e '#!/bin/bash'\"\\n\"'java -Xmx16g -jar /usr/picard/picard.jar $@' \u003e /usr/local/bin/picard \u0026\u0026     chmod a+x /usr/local/bin/picard"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local"
        },
        {
          "CmdLine": [
            "git clone https://github.com/arq5x/bedtools2.git \u0026\u0026     cd /usr/local/bedtools2 \u0026\u0026     git checkout v2.27.0 \u0026\u0026     make \u0026\u0026     ln -s /usr/local/bedtools2/bin/* /usr/local/bin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ZIP",
              "Value": "vcftools-0.1.14.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "URL",
              "Value": "https://github.com/vcftools/vcftools/releases/download/v0.1.14/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FOLDER",
              "Value": "vcftools-0.1.14"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DST",
              "Value": "/tmp"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget $URL/$ZIP -O $DST/$ZIP \u0026\u0026     tar xvf $DST/$ZIP -C $DST \u0026\u0026     rm $DST/$ZIP \u0026\u0026     cd $DST/$FOLDER \u0026\u0026     ./configure \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd / \u0026\u0026     rm -rf $DST/$FOLDER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /tmp/ucsc \u0026\u0026     cd /tmp/ucsc \u0026\u0026     wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedToBigBed http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigBedToBed http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigAverageOverBed http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig \u0026\u0026     chmod ugo+x * \u0026\u0026     mv * /usr/bin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "R_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "BUILD_DATE",
              "Value": "2017-06-20"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "R_VERSION",
              "Value": "${R_VERSION:-3.6.0}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp/ \u0026\u0026     curl -O https://cran.r-project.org/src/base/R-3/R-${R_VERSION}.tar.gz \u0026\u0026     tar -xf R-${R_VERSION}.tar.gz \u0026\u0026     cd R-${R_VERSION} \u0026\u0026     R_PAPERSIZE=letter \u0026\u0026     R_BATCHSAVE=\"--no-save --no-restore\" \u0026\u0026     R_BROWSER=xdg-open \u0026\u0026     PAGER=/usr/bin/pager \u0026\u0026     PERL=/usr/bin/perl \u0026\u0026     R_UNZIPCMD=/usr/bin/unzip \u0026\u0026     R_ZIPCMD=/usr/bin/zip \u0026\u0026     R_PRINTCMD=/usr/bin/lpr \u0026\u0026     LIBnn=lib \u0026\u0026     AWK=/usr/bin/awk \u0026\u0026     CFLAGS=\"-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g\" \u0026\u0026     CXXFLAGS=\"-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g\" \u0026\u0026     ./configure --enable-R-shlib                --enable-memory-profiling                --with-readline                --with-blas=\"-lopenblas\"                --disable-nls                --without-recommended-packages \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     echo \"options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')\" \u003e\u003e /usr/local/lib/R/etc/Rprofile.site \u0026\u0026     mkdir -p /usr/local/lib/R/site-library \u0026\u0026     chown root:staff /usr/local/lib/R/site-library \u0026\u0026     chmod g+wx /usr/local/lib/R/site-library \u0026\u0026     echo \"R_LIBS_USER='/usr/local/lib/R/site-library'\" \u003e\u003e /usr/local/lib/R/etc/Renviron \u0026\u0026     echo \"R_LIBS=\\${R_LIBS-'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib/R/library'}\" \u003e\u003e /usr/local/lib/R/etc/Renviron \u0026\u0026     Rscript -e \"install.packages(c('littler', 'docopt'))\" \u0026\u0026     ln -s /usr/local/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \u0026\u0026     ln -s /usr/local/lib/R/site-library/littler/examples/installGithub.r /usr/local/bin/installGithub.r \u0026\u0026     ln -s /usr/local/lib/R/site-library/littler/bin/r /usr/local/bin/r"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "rpackages.R",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "R -f /tmp/rpackages.R"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd / \u0026\u0026    rm -rf /tmp/* \u0026\u0026    apt-get autoremove -y \u0026\u0026    apt-get autoclean -y \u0026\u0026    rm -rf /var/lib/apt/lists/* \u0026\u0026    apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     mkdir -p $CONDA_DIR \u0026\u0026     curl -s https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh -o miniconda.sh \u0026\u0026     /bin/bash miniconda.sh -f -b -p $CONDA_DIR \u0026\u0026     rm miniconda.sh \u0026\u0026     $CONDA_DIR/bin/conda config --system --add channels conda-forge \u0026\u0026     $CONDA_DIR/bin/conda config --system --set auto_update_conda false \u0026\u0026     conda clean -tipsy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --yes 'pip' \u0026\u0026     conda clean -tipsy \u0026\u0026     pip install numpy \u0026\u0026     pip install cruzdb \u0026\u0026     pip install cython \u0026\u0026     pip install pyensembl \u0026\u0026     pip install pyfaidx \u0026\u0026     pip install pybedtools \u0026\u0026     pip install cyvcf2 \u0026\u0026     pip install intervaltree_bio \u0026\u0026     pip install pandas \u0026\u0026     pip install scipy \u0026\u0026     pip install seaborn \u0026\u0026     pip install scikit-learn \u0026\u0026     pip install pysam==0.12.0.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda create --quiet --yes -p $CONDA_DIR/envs/python2 python=2.7 'pip' \u0026\u0026     conda clean -tipsy \u0026\u0026     /bin/bash -c \"source activate python2 \u0026\u0026     pip install numpy \u0026\u0026     pip install cruzdb \u0026\u0026     pip install cython \u0026\u0026     pip install pyensembl \u0026\u0026     pip install pyfaidx \u0026\u0026     pip install pybedtools \u0026\u0026     pip install cyvcf2 \u0026\u0026     pip install intervaltree_bio \u0026\u0026     pip install pandas \u0026\u0026     pip install scipy \u0026\u0026     pip install seaborn \u0026\u0026     pip install scikit-learn \u0026\u0026     source deactivate\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --single-branch --branch cram-pileup-fix https://github.com/jmarshall/pysam.git \u0026\u0026     cd pysam \u0026\u0026     /opt/conda/bin/python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libnss-sss \u0026\u0026 apt-get clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"America/Chicago\" \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg-reconfigure --frontend noninteractive tzdata"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends gawk openssh-client grep evince \u0026\u0026 apt-get clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cpan install Statistics::Basic \u0026\u0026 cpan install JSON \u0026\u0026 cpan install List::Util"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install hic2cool \u0026\u0026 pip install cooler"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /tmp/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/bin:/usr/bin:/usr/local/bin:/opt/conda/bin/:${PATH}"
            }
          ],
          "Name": "env"
        }
      ]
    }
  ]
}