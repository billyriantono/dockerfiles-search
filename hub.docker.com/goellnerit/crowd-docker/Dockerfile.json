{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:latest",
      "SourceCode": "FROM ubuntu:latest",
      "Platform": "",
      "From": {
        "Image": "ubuntu:latest"
      },
      "Commands": [
        {
          "Maintainer": "Philipp Goellner \u003cphilipp@goellner.it\u003e, Philipp Goellner \u003cphilipp.goellner@xaltbc.de\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "CROWD_HOME",
              "Value": "/var/atlassian/crowd"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWD_INSTALL",
              "Value": "/opt/atlassian/crowd"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MYSQL_DRIVER_VERSION",
              "Value": "5.1.36"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWD_VERSION",
              "Value": "2.8.8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOWNLOAD_URL",
              "Value": "https://www.atlassian.com/software/crowd/downloads/binary/atlassian-crowd-${CROWD_VERSION}.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RAM_MIN",
              "Value": "768"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RAM_MAX",
              "Value": "2048"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HTTPS",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "IMPORTCERT",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "IMPORTPATH",
              "Value": "/var/certificates"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BACKUP_HOST",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BACKUP_PATH",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BACKUP_USER",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BACKUP_KEY_FILE",
              "Value": "/tmp/id_rsa"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROXY_NAME",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUN_USER",
              "Value": "daemon"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NEWRELIC_VERSION",
              "Value": "3.19.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NEWRELIC_APP_NAME",
              "Value": "crowd-docker"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NEWRELIC_LICENSE",
              "Value": "unknown"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WAIT",
              "Value": "false"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WAIT_COMMAND",
              "Value": "none"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WAIT_SLEEP",
              "Value": "2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WAIT_LOOPS",
              "Value": "10"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWD_URL",
              "Value": "https://crowd.scandio"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWD_CONTEXT",
              "Value": "ROOT"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWDDB_URL",
              "Value": "mysql://dbuser:dbpass@dbhost:dbport/dbname"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CROWDID_CONTEXT",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEMO_CONTEXT",
              "Value": "demo"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 \u0026\u0026     echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu/ precise main\" \u003e /etc/apt/sources.list.d/java.list \u0026\u0026     echo \"debconf shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections \u0026\u0026     echo \"debconf shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y oracle-java8-installer \u0026\u0026     apt-get clean \u0026\u0026     echo -n \u003e /var/lib/apt/extended_states     \u0026\u0026 apt-get update --quiet     \u0026\u0026 apt-get install --quiet --yes --no-install-recommends libtcnative-1 xmlstarlet openssh-client wget curl sed unzip rsync     \u0026\u0026 apt-get clean     \u0026\u0026 mkdir -p             \"${CROWD_HOME}\"     \u0026\u0026 chown -R ${RUN_USER}:${RUN_GROUP} \"${CROWD_HOME}\"     \u0026\u0026 mkdir -p             \"${CROWD_INSTALL}\"     \u0026\u0026 curl -Ls             ${DOWNLOAD_URL} | tar -xz --directory \"${CROWD_INSTALL}/\" --strip-components=1     \u0026\u0026 echo                 \"\\ncrowd.home=$CROWD_HOME\" \u003e\u003e \"${CROWD_INSTALL}/crowd-webapp/WEB-INF/classes/crowd-init.properties\"     \u0026\u0026 sed -i               's|exec \"$PRGDIR\"\\/\"$EXECUTABLE\" start \"$@\"|exec \"$PRGDIR\"/\"$EXECUTABLE\" run \"$@\"|g' ${CROWD_INSTALL}/apache-tomcat/bin/startup.sh     \u0026\u0026 mv ${CROWD_INSTALL}/apache-tomcat/webapps/ROOT ${CROWD_INSTALL}/splash-webapp     \u0026\u0026 mv ${CROWD_INSTALL}/apache-tomcat/conf/Catalina/localhost ${CROWD_INSTALL}/webapps     \u0026\u0026 mkdir ${CROWD_INSTALL}/apache-tomcat/conf/Catalina/localhost     \u0026\u0026 wget \"http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz\"     \u0026\u0026 tar -xzf \"mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz\"     \u0026\u0026 mv \"mysql-connector-java-${MYSQL_DRIVER_VERSION}/mysql-connector-java-${MYSQL_DRIVER_VERSION}-bin.jar\" \"${CROWD_INSTALL}/apache-tomcat/lib/.\"     \u0026\u0026 rm \"mysql-connector-java-${MYSQL_DRIVER_VERSION}.tar.gz\"     \u0026\u0026 rm -rf \"mysql-connector-java-${MYSQL_DRIVER_VERSION}\" ADD splash-context.xml ${CROWD_INSTALL}/webapps/splash.xml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "common.bash",
            "${CROWD_INSTALL}/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "configure-and-start.sh",
            "${CROWD_INSTALL}/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "newrelic-java-${NEWRELIC_VERSION}.zip",
            "${CROWD_INSTALL}/"
          ]
        },
        {
          "CmdLine": [
            "chown -R ${RUN_USER}: ${CROWD_INSTALL}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir ${IMPORTPATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown ${RUN_USER}: /usr/lib/jvm/java-8-oracle/jre/lib/security/cacerts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "${RUN_USER}"
        },
        {
          "Name": "expose",
          "Ports": [
            "5005",
            "8095"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${CROWD_HOME}",
            "${IMPORTPATH}"
          ]
        },
        {
          "Name": "workdir",
          "Path": "${CROWD_INSTALL}"
        },
        {
          "CmdLine": [
            "./configure-and-start.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}