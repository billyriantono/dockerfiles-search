{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "signalnoise/circleci:10.12",
      "SourceCode": "FROM signalnoise/circleci:10.12",
      "Platform": "",
      "From": {
        "Image": "signalnoise/circleci:10.12"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GPG_KEY",
              "Value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.7.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz     \u0026\u0026 wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"   \u0026\u0026 wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"   \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"   \u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\"   \u0026\u0026 gpg --batch --verify python.tar.xz.asc python.tar.xz   \u0026\u0026 { command -v gpgconf \u003e /dev/null \u0026\u0026 gpgconf --kill all || :; }   \u0026\u0026 rm -rf \"$GNUPGHOME\" python.tar.xz.asc   \u0026\u0026 mkdir -p /usr/src/python   \u0026\u0026 tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz   \u0026\u0026 rm python.tar.xz     \u0026\u0026 apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libressl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev   \u0026\u0026 apk del .fetch-deps     \u0026\u0026 cd /usr/src/python   \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"   \u0026\u0026 ./configure   --build=\"$gnuArch\"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip   \u0026\u0026 make -j \"$(nproc)\"   EXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\"   \u0026\u0026 make install     \u0026\u0026 find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\\n'   | sort -u   | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps   \u0026\u0026 apk del .build-deps     \u0026\u0026 find /usr/local -depth   \\(   \\( -type d -a \\( -name test -o -name tests \\) \\)   -o   \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)   \\) -exec rm -rf '{}' +   \u0026\u0026 rm -rf /usr/src/python     \u0026\u0026 python3 --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/bin   \u0026\u0026 ln -s idle3 idle   \u0026\u0026 ln -s pydoc3 pydoc   \u0026\u0026 ln -s python3 python   \u0026\u0026 ln -s python3-config python-config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHON_PIP_VERSION",
              "Value": "18.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex;     wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';     python get-pip.py   --disable-pip-version-check   --no-cache-dir   \"pip==$PYTHON_PIP_VERSION\"   ;   pip --version;     find /usr/local -depth   \\(   \\( -type d -a \\( -name test -o -name tests \\) \\)   -o   \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)   \\) -exec rm -rf '{}' +;   rm -f get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python3"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}