{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "VAULT_VERSION",
              "Value": "0.11.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup vault \u0026\u0026     adduser -S -G vault vault"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux;     apk add --no-cache ca-certificates gnupg openssl libcap su-exec dumb-init \u0026\u0026     apkArch=\"$(apk --print-arch)\";     case \"$apkArch\" in         armhf) ARCH='arm' ;;         aarch64) ARCH='arm64' ;;         x86_64) ARCH='amd64' ;;         x86) ARCH='386' ;;         *) echo \u003e\u00262 \"error: unsupported architecture: $apkArch\"; exit 1 ;;     esac \u0026\u0026     VAULT_GPGKEY=91A6E7F85D05C65630BEF18951852D87348FFC4C;     found='';     for server in         hkp://p80.pool.sks-keyservers.net:80         hkp://keyserver.ubuntu.com:80         hkp://pgp.mit.edu:80     ; do         echo \"Fetching GPG key $VAULT_GPGKEY from $server\";         gpg --keyserver \"$server\" --recv-keys \"$VAULT_GPGKEY\" \u0026\u0026 found=yes \u0026\u0026 break;     done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $VAULT_GPGKEY\" \u0026\u0026 exit 1;     mkdir -p /tmp/build \u0026\u0026     cd /tmp/build \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_${ARCH}.zip \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig \u0026\u0026     gpg --batch --verify vault_${VAULT_VERSION}_SHA256SUMS.sig vault_${VAULT_VERSION}_SHA256SUMS \u0026\u0026     grep vault_${VAULT_VERSION}_linux_${ARCH}.zip vault_${VAULT_VERSION}_SHA256SUMS | sha256sum -c \u0026\u0026     unzip -d /bin vault_${VAULT_VERSION}_linux_${ARCH}.zip \u0026\u0026     cd /tmp \u0026\u0026     rm -rf /tmp/build \u0026\u0026     gpgconf --kill dirmngr \u0026\u0026     gpgconf --kill gpg-agent \u0026\u0026     apk del gnupg openssl \u0026\u0026     rm -rf /root/.gnupg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /vault/logs \u0026\u0026     mkdir -p /vault/file \u0026\u0026     mkdir -p /vault/config \u0026\u0026     chown -R vault:vault /vault"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/vault/logs"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/vault/file"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8200"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "server",
            "-dev"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}