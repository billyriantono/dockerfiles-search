{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:edge",
      "SourceCode": "FROM alpine:edge",
      "Platform": "",
      "From": {
        "Image": "alpine:edge"
      },
      "Commands": [
        {
          "Maintainer": "Pouzor \u003cremy.jardinet@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "S6VERSION",
              "Value": "1.17.2.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/.composer/vendor/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs",
            "/"
          ]
        },
        {
          "CmdLine": [
            "echo \"@testing http://dl-4.alpinelinux.org/alpine/edge/testing\" \u003e\u003e /etc/apk/repositories     \u0026\u0026 apk add --update     wget     ca-certificates     openssh     nginx     php5-fpm     php5-gd     php5-exif     php5-json     php5-zlib     php5-bz2     php5-bcmath     php5-xml     php5-intl     php5-phar     php5-openssl     php5-mcrypt     php5-dom     php5-pdo     php5-mysql     php5-ctype     php5-opcache     php5-memcache     php5-curl     su-exec     openssl-dev     bash     git     \u0026\u0026 build-php-extensions     \u0026\u0026 echo \"memory_limit=-1\" \u003e\u003e /etc/php5/conf.d/docker.ini     \u0026\u0026 echo \"date.timezone=Europe/Paris\" \u003e\u003e /etc/php5/conf.d/docker.ini     \u0026\u0026 echo -e \"\\n[XDebug]\\nxdebug.idekey=\\\"docker\\\"\\nxdebug.remote_enable=On\\nxdebug.remote_connect_back=On\\nxdebug.remote_autostart=Off\" \u003e\u003e /etc/php5/conf.d/docker.ini     \u0026\u0026 ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa     \u0026\u0026 echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\tUserKnownHostsFile=/dev/null\\n\" \u003e /etc/ssh/ssh_config     \u0026\u0026 adduser -u 1000 -D -s /bin/ash docker     \u0026\u0026 echo \"docker:docker\" | chpasswd     \u0026\u0026 php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"     \u0026\u0026 php composer-setup.php --install-dir=/sbin --filename=composer     \u0026\u0026 php -r \"unlink('composer-setup.php');\"     \u0026\u0026 wget https://github.com/just-containers/s6-overlay/releases/download/v${S6VERSION}/s6-overlay-amd64.tar.gz -O /tmp/s6-overlay.tar.gz     \u0026\u0026 tar xvfz /tmp/s6-overlay.tar.gz -C /     \u0026\u0026 rm -f /tmp/s6-overlay.tar.gz     \u0026\u0026 composer global require friendsofphp/php-cs-fixer     \u0026\u0026 composer global require phing/phing     \u0026\u0026 composer global require sensiolabs/security-checker     \u0026\u0026 rm -r /var/www     \u0026\u0026 apk del wget     \u0026\u0026 rm -rf /var/cache/apk/*     \u0026\u0026 rm -rf /tmp/*     \u0026\u0026 rm -rf /root/.composer/cache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "443",
            "80",
            "9000"
          ]
        },
        {
          "CmdLine": [
            "/init"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}