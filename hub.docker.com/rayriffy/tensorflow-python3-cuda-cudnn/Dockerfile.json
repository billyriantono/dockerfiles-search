{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Phumrapee Limpianchop \u003crayriffy@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "CUDA_VERSION",
              "Value": "8.0.61"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDNN_VERSION",
              "Value": "7.0.1.13"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TENSORFLOW_VERSION",
              "Value": "1.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends apt-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 \u0026\u0026     NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 \u0026\u0026     apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \u0026\u0026     apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 \u003e cudasign.pub \u0026\u0026     echo \"$NVIDIA_GPGKEY_SUM  cudasign.pub\" | sha256sum -c --strict - \u0026\u0026 rm cudasign.pub \u0026\u0026     echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" \u003e /etc/apt/sources.list.d/cuda.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.cuda.version",
              "Value": "\"${CUDA_VERSION}\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_CUDA_VERSION",
              "Value": "$CUDA_VERSION"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDA_PKG_VERSION",
              "Value": "8-0=$CUDA_VERSION-1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         cuda-nvrtc-$CUDA_PKG_VERSION         cuda-nvgraph-$CUDA_PKG_VERSION         cuda-cusolver-$CUDA_PKG_VERSION         cuda-cublas-8-0=8.0.61.2-1         cuda-cufft-$CUDA_PKG_VERSION         cuda-curand-$CUDA_PKG_VERSION         cuda-cusparse-$CUDA_PKG_VERSION         cuda-npp-$CUDA_PKG_VERSION         cuda-cudart-$CUDA_PKG_VERSION \u0026\u0026     ln -s cuda-8.0 /usr/local/cuda \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"/usr/local/cuda/lib64\" \u003e\u003e /etc/ld.so.conf.d/cuda.conf \u0026\u0026     ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.volumes.needed",
              "Value": "\"nvidia_driver\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"/usr/local/nvidia/lib\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf \u0026\u0026     echo \"/usr/local/nvidia/lib64\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/nvidia/lib:/usr/local/nvidia/lib64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_VISIBLE_DEVICES",
              "Value": "all"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_DRIVER_CAPABILITIES",
              "Value": "compute,utility"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" \u003e /etc/apt/sources.list.d/nvidia-ml.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.cudnn.version",
              "Value": "\"${CUDNN_VERSION}\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends             libcudnn7=$CUDNN_VERSION-1+cuda8.0 \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends \t\tbuild-essential \t\tcurl \t\tlibfreetype6-dev \t\tlibpng12-dev \t\tlibzmq3-dev \t\tpkg-config \t\tlibblas-dev \t\tliblapack-dev\t\tlibatlas-base-dev \t\tpython3-pip \t\tpython3-dev \t\tpython3-virtualenv \t\tfabric         libpq-dev \t\tlibjpeg-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibfreetype6-dev         postgresql-client \t\tgit \t\twget \t\tnano \t\tgfortran \t\trsync \t\tsoftware-properties-common \t\tunzip \t\t\u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sv -f /usr/bin/python3 /usr/bin/python \t\u0026\u0026 pip3 install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install -U setuptools"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 --no-cache-dir install \t\tPillow         h5py         ipykernel \t\topencv-python         jupyter         matplotlib         numpy         pandas         scipy         sklearn         \u0026\u0026     python -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 --no-cache-dir install     \thttp://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/root/.jupyter/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "notebooks",
            "/notebooks"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run_jupyter.sh",
            "/"
          ]
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "6006"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/notebooks\""
        },
        {
          "CmdLine": [
            "/run_jupyter.sh",
            "--allow-root"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}