{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "TIMEZONE",
              "Value": "Asia/Shanghai"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "7.2.10"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROTOBUF_VERSION",
              "Value": "3.6.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "REDIS_VERSION",
              "Value": "4.1.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_VERSION",
              "Value": "1.7.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_EXTRA_CONFIGURE_ARGS",
              "Value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CFLAGS",
              "Value": "\"-fstack-protector-strong -fpic -fpie -O2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CPPFLAGS",
              "Value": "\"$PHP_CFLAGS\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_LDFLAGS",
              "Value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
            }
          ],
          "Name": "env"
        },
        {
          "Labels": [
            {
              "Key": "Maintainer",
              "Value": "\"millken \u003cmillken@gmail.com\u003e\""
            },
            {
              "Key": "Description",
              "Value": "\"Lightweight php 7.2 container based on alpine with Composer installed and swoole installed.\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 addgroup -g 82 -S www-data \t\u0026\u0026 adduser -u 82 -D -S -G www-data www-data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "\"/usr/local/etc/php\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${PHP_INI_DIR}/conf.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 sed -i 's/dl-cdn.alpinelinux.org/mirrors.shu.edu.cn/g' /etc/apk/repositories   \t\u0026\u0026 apk update \t\u0026\u0026 apk add --no-cache --virtual .persistent-deps \t\tcurl \t\ttar \t\txz \t\tlibpq \t\tlibxml2 \t\thiredis \t\tlibstdc++ \t\ttzdata \t\u0026\u0026 echo \"${TIMEZONE}\" \u003e /etc/timezone \t\u0026\u0026 ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 cd /tmp/ \t\u0026\u0026 wget http://hk2.php.net/distributions/php-${PHP_VERSION}.tar.xz \t\u0026\u0026 tar xf php-${PHP_VERSION}.tar.xz \t\u0026\u0026 apk add --no-cache --virtual .build-deps git mysql-client curl-dev openssh-client libffi-dev postgresql-dev hiredis-dev zlib-dev icu-dev libxml2-dev freetype-dev libpng-dev libjpeg-turbo-dev g++ make autoconf \t\u0026\u0026 export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\"     \u0026\u0026 cd /tmp/php-${PHP_VERSION}     \u0026\u0026 ./configure --enable-inline-optimization --prefix=/usr/local --with-config-file-path=\"${PHP_INI_DIR}\" --enable-opcache --with-config-file-scan-dir=\"${PHP_INI_DIR}/conf.d\"  --enable-posix  --enable-sysvshm --enable-sysvsem --enable-sigchild --enable-mbstring --with-iconv  --with-pdo-pgsql -with-pdo-mysql -with-pgsql=/usr/local/pgsql  --with-zlib-dir=/usr/include/ --enable-bcmath --with-openssl --enable-pdo --enable-session --enable-tokenizer --enable-hash --enable-json --disable-debug --disable-short-tags --disable-ipv6 --enable-option-checking=fatal --with-mhash --with-curl \t$PHP_EXTRA_CONFIGURE_ARGS     \u0026\u0026 make -j8 \t\u0026\u0026 make install \t\u0026\u0026 make clean \t\u0026\u0026 cd /tmp/     \u0026\u0026 wget https://github.com/swoole/swoole-src/archive/master.zip \t\u0026\u0026 unzip master.zip \t\u0026\u0026 unlink master.zip \t\u0026\u0026 cd /tmp/swoole-src-master \t\u0026\u0026 phpize \t\u0026\u0026 ./configure --enable-async-redis --enable-openssl --enable-coroutine-postgresql --enable-sockets=/usr/local/include/php/ext/sockets \t\u0026\u0026 make -j8 \u0026\u0026 make install \t\u0026\u0026 echo 'extension=swoole.so' \u003e ${PHP_INI_DIR}/conf.d/swoole.ini \t\t\u0026\u0026 cd /tmp/     \u0026\u0026 wget http://pecl.php.net/get/protobuf-${PROTOBUF_VERSION}.tgz \t\u0026\u0026 tar xf protobuf-${PROTOBUF_VERSION}.tgz \t\u0026\u0026 cd /tmp/protobuf-${PROTOBUF_VERSION} \t\u0026\u0026 phpize \t\u0026\u0026 ./configure \t\u0026\u0026 make -j8 \u0026\u0026 make install \t\u0026\u0026 echo 'extension=protobuf.so' \u003e ${PHP_INI_DIR}/conf.d/protobuf.ini \t\t\u0026\u0026 cd /tmp/     \u0026\u0026  wget https://github.com/laruence/yac/archive/master.zip \t\u0026\u0026 unzip master.zip \t\u0026\u0026 unlink master.zip \t\u0026\u0026 cd /tmp/yac-master \t\u0026\u0026 phpize \t\u0026\u0026 ./configure \t\u0026\u0026 make \u0026\u0026 make install \t\u0026\u0026 { \t\techo 'extension=yac.so'; \t\techo 'yac.enable_cli=1'; \t} | tee \u003e ${PHP_INI_DIR}/conf.d/yac.ini \t\t\u0026\u0026 cd /tmp/     \u0026\u0026 wget http://pecl.php.net/get/redis-${REDIS_VERSION}.tgz \t\u0026\u0026 tar xf redis-${REDIS_VERSION}.tgz \t\u0026\u0026 cd /tmp/redis-${REDIS_VERSION} \t\u0026\u0026 phpize \t\u0026\u0026 ./configure \t\u0026\u0026 make -j8 \u0026\u0026 make install \t\u0026\u0026 echo 'extension=redis.so' \u003e ${PHP_INI_DIR}/conf.d/redis.ini \t\t\u0026\u0026 { \t\t\t\techo 'zend_extension=opcache.so';                 echo 'opcache.memory_consumption=128';                 echo 'opcache.interned_strings_buffer=8';                 echo 'opcache.max_accelerated_files=4000';                 echo 'opcache.revalidate_freq=60';                 echo 'opcache.fast_shutdown=1';                 echo 'opcache.enable_cli=1';     } | tee \u003e ${PHP_INI_DIR}/conf.d/opcache.ini \t\u0026\u0026 cd /tmp/ \t\u0026\u0026 ([ -f /tmp/composer.phar ] || wget https://getcomposer.org/download/${COMPOSER_VERSION}/composer.phar)     \u0026\u0026 cp /tmp/composer.phar /usr/local/bin/composer     \u0026\u0026 chmod +x /usr/local/bin/composer     \u0026\u0026 apk del .build-deps     \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 cd /usr/local/etc \t\u0026\u0026 sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf \u003e /dev/null \t\u0026\u0026 cp php-fpm.d/www.conf.default php-fpm.d/www.conf \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/www/html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        },
        {
          "CmdLine": [
            "/bin/sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}