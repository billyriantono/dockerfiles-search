{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.11",
      "SourceCode": "FROM alpine:3.11",
      "Platform": "",
      "From": {
        "Image": "alpine:3.11"
      },
      "Commands": [
        {
          "Key": "RTORRENT_VER",
          "Name": "arg",
          "Value": "0.9.8"
        },
        {
          "Key": "LIBTORRENT_VER",
          "Name": "arg",
          "Value": "0.13.8"
        },
        {
          "Key": "MEDIAINFO_VER",
          "Name": "arg",
          "Value": "19.09"
        },
        {
          "Key": "FLOOD_VER",
          "Name": "arg",
          "Value": "master"
        },
        {
          "Key": "BUILD_CORES",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "UID",
              "Value": "991"
            },
            {
              "Key": "GID",
              "Value": "991"
            },
            {
              "Key": "FLOOD_SECRET",
              "Value": "supersecret"
            },
            {
              "Key": "WEBROOT",
              "Value": "/"
            },
            {
              "Key": "RTORRENT_SCGI",
              "Value": "0"
            },
            {
              "Key": "PKG_CONFIG_PATH",
              "Value": "/usr/local/lib/pkgconfig"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "NB_CORES=${BUILD_CORES-`getconf _NPROCESSORS_CONF`}  \u0026\u0026 apk -U upgrade  \u0026\u0026 apk add -t build-dependencies     build-base     git     libtool     automake     autoconf     wget     tar     xz     zlib-dev     cppunit-dev     openssl-dev     ncurses-dev     curl-dev     binutils     linux-headers  \u0026\u0026 apk add     ca-certificates     curl     ncurses     openssl     gzip     zip     zlib     s6     su-exec     python     nodejs     nodejs-npm     unrar     findutils  \u0026\u0026 cd /tmp \u0026\u0026 mkdir libtorrent rtorrent  \u0026\u0026 cd libtorrent \u0026\u0026 wget -qO- https://github.com/rakshasa/libtorrent/archive/v${LIBTORRENT_VER}.tar.gz | tar xz --strip 1  \u0026\u0026 cd ../rtorrent \u0026\u0026 wget -qO- https://github.com/rakshasa/rtorrent/releases/download/v${RTORRENT_VER}/rtorrent-${RTORRENT_VER}.tar.gz | tar xz --strip 1  \u0026\u0026 cd /tmp  \u0026\u0026 git clone https://github.com/mirror/xmlrpc-c.git  \u0026\u0026 git clone https://github.com/Rudde/mktorrent.git  \u0026\u0026 cd /tmp/mktorrent \u0026\u0026 make -j ${NB_CORES} \u0026\u0026 make install  \u0026\u0026 cd /tmp/xmlrpc-c/advanced \u0026\u0026 ./configure \u0026\u0026 make -j ${NB_CORES} \u0026\u0026 make install  \u0026\u0026 cd /tmp/libtorrent \u0026\u0026 ./autogen.sh \u0026\u0026 ./configure \u0026\u0026 make -j ${NB_CORES} \u0026\u0026 make install  \u0026\u0026 cd /tmp/rtorrent \u0026\u0026 ./autogen.sh \u0026\u0026 ./configure --with-xmlrpc-c \u0026\u0026 make -j ${NB_CORES} \u0026\u0026 make install  \u0026\u0026 cd /tmp  \u0026\u0026 wget -q http://mediaarea.net/download/binary/mediainfo/${MEDIAINFO_VER}/MediaInfo_CLI_${MEDIAINFO_VER}_GNU_FromSource.tar.gz  \u0026\u0026 wget -q http://mediaarea.net/download/binary/libmediainfo0/${MEDIAINFO_VER}/MediaInfo_DLL_${MEDIAINFO_VER}_GNU_FromSource.tar.gz  \u0026\u0026 tar xzf MediaInfo_DLL_${MEDIAINFO_VER}_GNU_FromSource.tar.gz  \u0026\u0026 tar xzf MediaInfo_CLI_${MEDIAINFO_VER}_GNU_FromSource.tar.gz  \u0026\u0026 cd /tmp/MediaInfo_DLL_GNU_FromSource \u0026\u0026 ./SO_Compile.sh  \u0026\u0026 cd /tmp/MediaInfo_DLL_GNU_FromSource/ZenLib/Project/GNU/Library \u0026\u0026 make install  \u0026\u0026 cd /tmp/MediaInfo_DLL_GNU_FromSource/MediaInfoLib/Project/GNU/Library \u0026\u0026 make install  \u0026\u0026 cd /tmp/MediaInfo_CLI_GNU_FromSource \u0026\u0026 ./CLI_Compile.sh  \u0026\u0026 cd /tmp/MediaInfo_CLI_GNU_FromSource/MediaInfo/Project/GNU/CLI \u0026\u0026 make install  \u0026\u0026 strip -s /usr/local/bin/rtorrent  \u0026\u0026 strip -s /usr/local/bin/mktorrent  \u0026\u0026 strip -s /usr/local/bin/mediainfo  \u0026\u0026 ln -sf /usr/local/bin/mediainfo /usr/bin/mediainfo  \u0026\u0026 mkdir /usr/flood \u0026\u0026 cd /usr/flood \u0026\u0026 wget -qO- https://github.com/Flood-UI/flood/archive/${FLOOD_VER}.tar.gz | tar xz --strip 1  \u0026\u0026 npm install \u0026\u0026 npm cache clean --force  \u0026\u0026 apk del build-dependencies  \u0026\u0026 rm -rf /var/cache/apk/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/* /etc/s6.d/*/* /etc/s6.d/.s6-svscan/*  \u0026\u0026 cd /usr/flood/ \u0026\u0026 npm run build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data",
            "/flood-db"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "3000",
            "49184",
            "49184/udp"
          ]
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"BitTorrent client with WebUI front-end\""
            },
            {
              "Key": "rtorrent",
              "Value": "\"rTorrent BiTorrent client v$RTORRENT_VER\""
            },
            {
              "Key": "libtorrent",
              "Value": "\"libtorrent v$LIBTORRENT_VER\""
            },
            {
              "Key": "maintainer",
              "Value": "\"flosoft \u003cflorian@florianjensen.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "run.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}