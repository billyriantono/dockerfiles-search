{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.5",
      "SourceCode": "FROM alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "alpine:3.5"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.13.12"
            },
            {
              "Key": "NAXSI_VERSION",
              "Value": "0.55.3"
            },
            {
              "Key": "NGINSCRIPT_VERSION",
              "Value": "0.1.14"
            },
            {
              "Key": "NGINX_AUTH_LDAP",
              "Value": "0.1"
            },
            {
              "Key": "NGINX_AWS_AUTH",
              "Value": "2.1.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8         \u0026\u0026 CONFIG=\"                --prefix=/etc/nginx                 --sbin-path=/usr/sbin/nginx                 --modules-path=/usr/lib/nginx/modules                 --conf-path=/etc/nginx/nginx.conf                 --error-log-path=/var/log/nginx/error.log                 --http-log-path=/var/log/nginx/access.log                 --pid-path=/var/run/nginx.pid                 --lock-path=/var/run/nginx.lock                 --http-client-body-temp-path=/var/cache/nginx/client_temp                 --http-proxy-temp-path=/var/cache/nginx/proxy_temp                 --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp                 --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp                 --http-scgi-temp-path=/var/cache/nginx/scgi_temp                 --user=nginx                 --group=nginx                 --with-http_ssl_module                 --with-http_realip_module                 --with-http_addition_module                 --with-http_sub_module                 --with-http_dav_module                 --with-http_flv_module                 --with-http_mp4_module                 --with-http_gunzip_module                 --with-http_gzip_static_module                 --with-http_random_index_module                 --with-http_secure_link_module                 --with-http_stub_status_module                 --with-http_auth_request_module                 --with-http_xslt_module=dynamic                 --with-http_image_filter_module=dynamic                 --with-http_geoip_module=dynamic                 --with-threads                 --with-stream                 --with-stream_ssl_module                 --with-stream_ssl_preread_module                 --with-stream_realip_module                 --with-stream_geoip_module=dynamic                 --with-http_slice_module                 --with-mail                 --with-mail_ssl_module                 --with-compat                 --with-file-aio                 --with-http_v2_module                 --add-module=/usr/src/njs*/nginx                 --add-module=/usr/src/naxsi*/naxsi_src                 --add-module=/usr/src/nginx-auth-ldap*                 --add-module=/usr/src/ngx_aws_auth*         \"         \u0026\u0026 addgroup -S nginx         \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx         \u0026\u0026 apk add --no-cache --virtual .build-deps                 gcc                 libc-dev                 make                 libressl-dev                 pcre-dev                 zlib-dev                 linux-headers                 curl                 gnupg                 libxslt-dev                 gd-dev                 geoip-dev                 openldap-dev         \u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz         \u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc         \u0026\u0026 curl -fSL http://hg.nginx.org/njs/archive/$NGINSCRIPT_VERSION.tar.gz -o njs.tar.gz         \u0026\u0026 curl -fSL https://github.com/nbs-system/naxsi/archive/$NAXSI_VERSION.tar.gz -o naxsi.tar.gz         \u0026\u0026 curl -fSL https://github.com/kvspb/nginx-auth-ldap/archive/v$NGINX_AUTH_LDAP.tar.gz -o nginx-auth-ldap.tar.gz         \u0026\u0026 curl -fSL https://github.com/anomalizer/ngx_aws_auth/archive/$NGINX_AWS_AUTH.tar.gz -o ngx_aws_auth.tar.gz         \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"         \u0026\u0026 found='';         for server in                 ha.pool.sks-keyservers.net                 hkp://keyserver.ubuntu.com:80                 hkp://p80.pool.sks-keyservers.net:80                 pgp.mit.edu         ; do                 echo \"Fetching GPG key $GPG_KEYS from $server\";                 gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \u0026\u0026 found=yes \u0026\u0026 break;         done;         test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $GPG_KEYS\" \u0026\u0026 exit 1;         gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz         \u0026\u0026 rm -r \"$GNUPGHOME\" nginx.tar.gz.asc         \u0026\u0026 mkdir -p /usr/src         \u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz         \u0026\u0026 tar -zxC /usr/src -f njs.tar.gz         \u0026\u0026 tar -zxC /usr/src -f naxsi.tar.gz         \u0026\u0026 tar -zxC /usr/src -f nginx-auth-ldap.tar.gz         \u0026\u0026 tar -zxC /usr/src -f ngx_aws_auth.tar.gz         \u0026\u0026 rm nginx.tar.gz         \u0026\u0026 rm njs.tar.gz         \u0026\u0026 rm naxsi.tar.gz         \u0026\u0026 rm nginx-auth-ldap.tar.gz         \u0026\u0026 rm ngx_aws_auth.tar.gz         \u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION         \u0026\u0026 ./configure $CONFIG --with-debug         \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)         \u0026\u0026 mv objs/nginx objs/nginx-debug         \u0026\u0026 mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so         \u0026\u0026 mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so         \u0026\u0026 mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so         \u0026\u0026 mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so         \u0026\u0026 ./configure $CONFIG         \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)         \u0026\u0026 make install         \u0026\u0026 rm -rf /etc/nginx/html/         \u0026\u0026 mkdir /etc/nginx/conf.d/         \u0026\u0026 mkdir -p /usr/share/nginx/html/         \u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/         \u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/         \u0026\u0026 install -m755 objs/nginx-debug /usr/sbin/nginx-debug         \u0026\u0026 install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so         \u0026\u0026 install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so         \u0026\u0026 install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so         \u0026\u0026 install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so         \u0026\u0026 install -m644 /usr/src/naxsi-$NAXSI_VERSION/naxsi_config/naxsi_core.rules /etc/nginx         \u0026\u0026 ln -s ../../usr/lib/nginx/modules /etc/nginx/modules         \u0026\u0026 strip /usr/sbin/nginx*         \u0026\u0026 strip /usr/lib/nginx/modules/*.so         \u0026\u0026 rm -rf /usr/src/nginx-$NGINX_VERSION         \u0026\u0026 rm -rf /usr/src/njs*         \u0026\u0026 rm -rf /usr/src/naxsi*         \u0026\u0026 rm -rf /usr/src/nginx-auth-ldap*         \u0026\u0026 rm -rf /usr/src/ngx_aws_auth*                 \u0026\u0026 apk add --no-cache --virtual .gettext gettext         \u0026\u0026 mv /usr/bin/envsubst /tmp/                 \u0026\u0026 runDeps=\"$(                 scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst                         | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'                         | sort -u                         | xargs -r apk info --installed                         | sort -u         )\"         \u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps         \u0026\u0026 apk del .build-deps         \u0026\u0026 apk del .gettext         \u0026\u0026 mv /tmp/envsubst /usr/local/bin/                 \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log         \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.vh.default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}