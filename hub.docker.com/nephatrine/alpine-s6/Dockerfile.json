{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Daniel Wolf \u003cnephatrine@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "SKALIBS_VERSION",
          "Name": "arg",
          "Value": "v2.7.0.0"
        },
        {
          "Key": "EXECLINE_VERSION",
          "Name": "arg",
          "Value": "v2.5.0.1"
        },
        {
          "Key": "S6_VERSION",
          "Name": "arg",
          "Value": "v2.7.2.2"
        },
        {
          "Key": "S6_DNS_VERSION",
          "Name": "arg",
          "Value": "v2.3.0.1"
        },
        {
          "Key": "S6_NETWORKING_VERSION",
          "Name": "arg",
          "Value": "v2.3.0.3"
        },
        {
          "Key": "S6_RC_VERSION",
          "Name": "arg",
          "Value": "v0.4.1.0"
        },
        {
          "Key": "S6_PORTABLE_VERSION",
          "Name": "arg",
          "Value": "v2.2.1.2"
        },
        {
          "Key": "S6_LINUX_VERSION",
          "Name": "arg",
          "Value": "v2.5.0.0"
        },
        {
          "Key": "S6_OVERLAY_VERSION",
          "Name": "arg",
          "Value": "v1.22.0.0"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "\"/root\""
            },
            {
              "Key": "PS1",
              "Value": "\"$(whoami)@$(hostname):$(pwd)$ \""
            },
            {
              "Key": "S6_BEHAVIOUR_IF_STAGE2_FAILS",
              "Value": "1"
            },
            {
              "Key": "S6_KILL_FINISH_MAXTIME",
              "Value": "18000"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"====== INSTALL PACKAGES ======\"  \u0026\u0026 apk --update upgrade  \u0026\u0026 apk add    bash    ca-certificates    coreutils    file    libressl    logrotate    make    net-tools    shadow    tzdata  \u0026\u0026 apk add --virtual .build-alpine-s6    build-base    git    libressl-dev   \u0026\u0026 echo \"====== CONFIGURE SYSTEM ======\"  \u0026\u0026 mkdir -p /mnt/config /usr/src  \u0026\u0026 useradd -u 1000 -g users -d /mnt/config/home -s /sbin/nologin guardian   \u0026\u0026 echo \"====== COMPILE SKALIBS ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/skalibs.git  \u0026\u0026 cd skalibs  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$SKALIBS_VERSION\"  \u0026\u0026 ./configure --enable-clock --enable-monotonic --disable-ipv6  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE EXECLINE ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/execline.git  \u0026\u0026 cd execline  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$EXECLINE_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6 ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6.git  \u0026\u0026 cd s6  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6-DNS ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6-dns.git  \u0026\u0026 cd s6-dns  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_DNS_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6-NETWORKING ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6-networking.git  \u0026\u0026 cd s6-networking  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_NETWORKING_VERSION\"  \u0026\u0026 ./configure --enable-ssl=libressl  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6-RC ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6-rc.git  \u0026\u0026 cd s6-rc  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_RC_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6-PORTABLE-UTILS ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6-portable-utils.git  \u0026\u0026 cd s6-portable-utils  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_PORTABLE_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== COMPILE S6-LINUX-UTILS ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/skarnet/s6-linux-utils.git  \u0026\u0026 cd s6-linux-utils  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_LINUX_VERSION\"  \u0026\u0026 ./configure  \u0026\u0026 make -j4 strip  \u0026\u0026 make install   \u0026\u0026 echo \"====== INSTALL S6-OVERLAY ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 git clone https://github.com/just-containers/s6-overlay.git  \u0026\u0026 cd s6-overlay/builder  \u0026\u0026 git fetch \u0026\u0026 git fetch --tags  \u0026\u0026 git checkout \"$S6_OVERLAY_VERSION\"  \u0026\u0026 egrep 'mkdir -p \\$overlaydstpath/|chmod [0-9]+ \\$overlaydstpath' build-latest | sed 's/$overlaydstpath/overlay-rootfs/g' \u003e build-here  \u0026\u0026 bash build-here  \u0026\u0026 cd overlay-rootfs  \u0026\u0026 cp -Ran ./* /   \u0026\u0026 echo \"====== CLEANUP ======\"  \u0026\u0026 cd /usr/src  \u0026\u0026 apk del --purge .build-alpine-s6  \u0026\u0026 rm -rf /tmp/* /usr/src/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "override",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/init"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}