{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu",
      "SourceCode": "FROM ubuntu",
      "Platform": "",
      "From": {
        "Image": "ubuntu"
      },
      "Commands": [
        {
          "Maintainer": "gifnksm (makoto.nksm@gmail.com)",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends         build-essential         ca-certificates         cmake         curl         git-core         python     \u0026\u0026 git clone --depth 1 https://github.com/juj/emsdk.git     \u0026\u0026 EMSCRIPTEN_VERSION=$(tail -1 /emsdk/emscripten-tags.txt)     \u0026\u0026 /emsdk/emsdk install --build=MinSizeRel latest     \u0026\u0026 apt-get -y --purge remove         build-essential         cmake         curl         git-core         gcc     \u0026\u0026 apt-get -y clean     \u0026\u0026 apt-get -y autoclean     \u0026\u0026 apt-get -y autoremove     \u0026\u0026 mkdir -p /em     \u0026\u0026 cp -r /emsdk/clang/e${EMSCRIPTEN_VERSION}_64bit /em/clang     \u0026\u0026 cp -r /emsdk/node/*_64bit/bin/node /em/     \u0026\u0026 mkdir -p /em/emscripten     \u0026\u0026 cp -r /emsdk/emscripten/${EMSCRIPTEN_VERSION}/* /em/emscripten     \u0026\u0026 rm -rf /em/emscripten/tests /em/emscripten/site     \u0026\u0026 rm -rf /emsdk     \u0026\u0026 find /em -executable -exec chmod og+rx \"{}\" \\;     \u0026\u0026 find /em -not -executable -exec chmod og+r \"{}\" \\;     \u0026\u0026 find /em/emscripten/ -maxdepth 1 -executable -type f -name 'em*' -exec ln -s {} /usr/local/bin/ \\;     \u0026\u0026 ln -s /em/node /usr/local/bin     \u0026\u0026 groupadd --gid 1000 build     \u0026\u0026 useradd --uid 1000 --gid 1000 --create-home build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "build"
        },
        {
          "CmdLine": [
            "echo \"import os\\nimport os\\nLLVM_ROOT='/em/clang'\\nEMSCRIPTEN_NATIVE_OPTIMIZER='/em/clang/optimizer'\\nBINARYEN_ROOT='/em/clang/binaryen'\\nNODE_JS='/em/node'\\nEMSCRIPTEN_ROOT='/em/emscripten'\\nSPIDERMONKEY_ENGINE = ''\\nV8_ENGINE = ''\\nTEMP_DIR = '/tmp'\\nCOMPILER_ENGINE = NODE_JS\\nJS_ENGINES = [NODE_JS]\\n\" \u003e ~/.emscripten     \u0026\u0026 embuilder.py build ALL     \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "EM_CONFIG",
              "Value": "\"/home/build/.emscripten\""
            },
            {
              "Key": "BINARYEN_ROOT",
              "Value": "\"/em/clang/binaryen\""
            },
            {
              "Key": "EMSCRIPTEN",
              "Value": "\"/em/emscripten\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "emcc --version     \u0026\u0026 mkdir -p /tmp/emscripten_test \u0026\u0026 cd /tmp/emscripten_test     \u0026\u0026 printf '#include \u003ciostream\u003e\\nint main(){std::cout\u003c\u003c\"HELLO\"\u003c\u003cstd::endl;return 0;}' \u003e test.cpp     \u0026\u0026 em++ -O2 test.cpp -o test.js \u0026\u0026 node test.js     \u0026\u0026 em++ test.cpp -o test.js \u0026\u0026 node test.js     \u0026\u0026 em++ -O2 test.cpp -o test.js -s BINARYEN=1     \u0026\u0026 em++ test.cpp -o test.js -s BINARYEN=1     \u0026\u0026 cd /     \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/src"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/src"
        }
      ]
    }
  ]
}