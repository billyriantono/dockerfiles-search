{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04",
      "SourceCode": "FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y openssh-server \u0026\u0026     mkdir /var/run/sshd \u0026\u0026     sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \u0026\u0026     sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config \u0026\u0026     sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \u0026\u0026     echo \"export VISIBLE=now\" \u003e\u003e /etc/profile \u0026\u0026     echo \"export PATH=$PATH\" \u003e\u003e /etc/profile \u0026\u0026     echo \"ldconfig\" \u003e\u003e /etc/profile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NOTVISIBLE",
              "Value": "\"in users profile\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "Env": [
            {
              "Key": "PYENV_ROOT",
              "Value": "/root/.pyenv"
            },
            {
              "Key": "PATH",
              "Value": "/usr/local/python-3.7.5/bin:/root/.pyenv/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt install -y     git     curl     build-essential     libsqlite3-dev     sqlite3     bzip2     libbz2-dev     zlib1g-dev     libssl-dev     openssl     libgdbm-dev     libgdbm-compat-dev     liblzma-dev     libreadline-dev     libncursesw5-dev     libffi-dev     uuid-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/pyenv/pyenv.git ~/.pyenv \u0026\u0026     echo 'export PATH=/root/.pyenv/bin:$PATH' \u003e\u003e ~/.profile \u0026\u0026     echo 'eval \"$(pyenv init -)\"' \u003e\u003e ~/.profile \u0026\u0026     ~/.pyenv/plugins/python-build/install.sh \u0026\u0026     usr/local/bin/python-build -v 3.7.5 /usr/local/python-3.7.5"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install jupyterlab \u0026\u0026     mkdir ~/.jupyter \u0026\u0026     echo \"c.NotebookApp.allow_root = True\\nc.NotebookApp.ip = '0.0.0.0'\\nc.NotebookApp.open_browser = False\\nc.NotebookApp.port = 8888\\nc.NotebookApp.notebook_dir = '/root/pyprojects'\\nc.NotebookApp.terminado_settings = { 'shell_command': ['/usr/bin/fish'] }\" \u003e ~/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | POETRY_PREVIEW=1 python \u0026\u0026     pip install --upgrade keyrings.alt \u0026\u0026     /root/.poetry/bin/poetry config virtualenvs.in-project true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/root/google-cloud-sdk/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt install -y software-properties-common \u0026\u0026     apt-add-repository -y ppa:fish-shell/release-3 \u0026\u0026     apt install -y fish \u0026\u0026     apt-add-repository --remove -y ppa:fish-shell/release-3 \u0026\u0026     curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish \u0026\u0026     apt install -y vim tree htop jq \u0026\u0026     pip install -U pip awscli \u0026\u0026     curl https://sdk.cloud.google.com | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y nodejs npm \u0026\u0026     npm install n -g \u0026\u0026 n lts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export NODE_OPTIONS=--max-old-space-size=4096 \u0026\u0026     jupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1 --no-build \u0026\u0026     jupyter labextension install plotlywidget@1.3.0 --no-build \u0026\u0026     jupyter labextension install jupyterlab-plotly@1.3.0 --no-build \u0026\u0026     jupyter labextension install @lckr/jupyterlab_variableinspector --no-build \u0026\u0026     jupyter labextension install @jupyterlab/toc --no-build \u0026\u0026     jupyter lab build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /root/ /cp_root/ \u0026\u0026 mkdir /root"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/start.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "monitoring.py",
            "/monitoring.py"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "fish",
            "/root/.config/fish"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "/start.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}