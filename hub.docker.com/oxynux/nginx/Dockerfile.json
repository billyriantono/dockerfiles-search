{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Arnaud Astruc \u003coxynux@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.13.9"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBRESSL_VERSION",
              "Value": "2.6.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DYNAMIC_TLS_RECORDS_VERSION",
              "Value": "\"1.13.0+\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HEADERS_MORE_MODULE_VERSION",
              "Value": "\"0.33\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_FINGERPRINT",
              "Value": "\"B0F4253373F8F6F510D42178520A9993A1C052F8\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBRESSL_FINGERPRINT",
              "Value": "\"A1EB079B8D3EB92B4EBD3139663AF51BD5E4D8D5\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup -S nginx \u0026\u0026 adduser -S -G nginx nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache 'su-exec\u003e=0.2'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkfifo -m 600 /tmp/logpipe \t\u0026\u0026 cat \u003c\u003e /tmp/logpipe 1\u003e\u00262 \u0026"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "NGINX_CC_FLAGS",
          "Name": "arg",
          "Value": "\"-O2 -DTCP_FASTOPEN=23\""
        },
        {
          "Key": "NGINX_CONFIG",
          "Name": "arg",
          "Value": "\" \t\t--prefix=/etc/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/tmp/logpipe \t\t--http-log-path=/tmp/logpipe \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module \t\t--with-http_image_filter_module \t\t--with-http_geoip_module \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module \t\t--with-stream_realip_module \t\t--with-stream_geoip_module \t\t--with-http_slice_module \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module \t\t--with-pcre-jit \t\t--with-openssl=/usr/src/libressl-$LIBRESSL_VERSION \t\t--add-module=/usr/src/headers-more-nginx-module-$HEADERS_MORE_MODULE_VERSION\""
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps \t\tgcc \t\tmusl-dev \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t\tgit \t\tautoconf \t\tautomake \t\tlibtool \t\tfile \t\tpatch \t\t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t\t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \t\t\u0026\u0026 found=''; \t\t( \t\tgpg --no-tty --keyserver pgp.mit.edu --recv-keys $NGINX_FINGERPRINT || \t\tgpg --no-tty --keyserver keyserver.pgp.com --recv-keys $NGINX_FINGERPRINT || \t\tgpg --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys $NGINX_FINGERPRINT \t\t) \t\t\u0026\u0026 found=yes \u0026\u0026 break; \t\ttest -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $NGINX_FINGERPRINT\" \u0026\u0026 exit 1; \t\tgpg --verify nginx.tar.gz.asc \t\t\u0026\u0026 curl -fSL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-$LIBRESSL_VERSION.tar.gz -o libressl.tar.gz \t\t\u0026\u0026 curl -fSL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-$LIBRESSL_VERSION.tar.gz.asc -o libressl.tar.gz.asc \t\t\u0026\u0026 found=''; \t\t( \t\tgpg --no-tty --keyserver pgp.mit.edu --recv-keys $LIBRESSL_FINGERPRINT || \t\tgpg --no-tty --keyserver keyserver.pgp.com --recv-keys $LIBRESSL_FINGERPRINT || \t\tgpg --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys $LIBRESSL_FINGERPRINT \t\t) \t\t\u0026\u0026 found=yes \u0026\u0026 break; \t\ttest -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $LIBRESSL_FINGERPRINT\" \u0026\u0026 exit 1; \t\tgpg --verify libressl.tar.gz.asc \t\t\u0026\u0026 mkdir -p /usr/src \t\t\u0026\u0026 curl -fSL https://github.com/openresty/headers-more-nginx-module/archive/v$HEADERS_MORE_MODULE_VERSION.tar.gz -o ngx_headers_more.tar.gz \t\t\u0026\u0026 tar -zxC /usr/src -f ngx_headers_more.tar.gz \t\t\u0026\u0026 ls -laR /usr/src \t\t\u0026\u0026 rm ngx_headers_more.tar.gz \t\t\u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz \t\t\u0026\u0026 rm nginx.tar.gz \t\t\u0026\u0026 tar -zxC /usr/src -f libressl.tar.gz \t\t\u0026\u0026 rm libressl.tar.gz \t\t\u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION \t\t\u0026\u0026 curl -fSL https://raw.githubusercontent.com/cujanovic/nginx-dynamic-tls-records-patch/master/nginx__dynamic_tls_records_$DYNAMIC_TLS_RECORDS_VERSION.patch -o nginx__dynamic_tls_records.patch \t\t\u0026\u0026 patch -p1 \u003c nginx__dynamic_tls_records.patch \t\t\u0026\u0026 rm nginx__dynamic_tls_records.patch \t\t\u0026\u0026 ./configure ${NGINX_CONFIG} \t\t--with-cc-opt=\"${NGINX_CC_FLAGS}\" \t\t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\t\u0026\u0026 make install \t\t\u0026\u0026 rm -rf /etc/nginx/html/ \t\t\u0026\u0026 mkdir /etc/nginx/conf.d/ \t\t\u0026\u0026 mkdir -p /usr/share/nginx/html/ \t\t\u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/ \t\t\u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/ \t\t\u0026\u0026 strip /usr/sbin/nginx* \t\t\u0026\u0026 apk add --no-cache --virtual .gettext gettext \t\t\u0026\u0026 mv /usr/bin/envsubst /tmp/ \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner /usr/sbin/nginx /tmp/envsubst \t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t| sort -u \t\t| xargs -r apk info --installed \t\t| sort -u \t\t) tzdata ca-certificates\" \t\t\u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps \t\t\u0026\u0026 apk del .build-deps \t\t\u0026\u0026 apk del .gettext \t\t\u0026\u0026 mv /tmp/envsubst /usr/local/bin/ \t\t\u0026\u0026 chown -R nginx:nginx /etc/nginx \t\t\u0026\u0026 rm -rf \t\t/root/.gnupg \t\t/usr/src \t\t/libressl.tar.gz.asc \t\t/nginx.tar.gz.asc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/etc/nginx"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"nginx mainline built from source with ngx_headers_more, ngx_brotli and TCP Fast Open\""
            },
            {
              "Key": "openssl",
              "Value": "\"LibreSSL $LIBRESSL_VERSION\""
            },
            {
              "Key": "nginx",
              "Value": "\"nginx $NGINX_VERSION\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "expose",
          "Ports": [
            "4430",
            "8080"
          ]
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}