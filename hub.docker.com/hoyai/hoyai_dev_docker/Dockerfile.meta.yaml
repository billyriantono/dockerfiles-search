MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: yewoo <intwis100@naver.com>
    Name: maintainer
  - CmdLine:
    - cp /usr/share/zoneinfo/Asia/Seoul /etc/localtime
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y software-properties-common python-software-properties
      &&     add-apt-repository multiverse
    Name: run
    PrependShell: true
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends build-essential
      wget  linux-generic &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends bzip2 ca-certificates
      libmysqlclient-dev &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - wget --quiet https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh
      &&     /bin/bash Anaconda3-4.2.0-Linux-x86_64.sh -b -p /opt/conda &&     rm
      Anaconda3-4.2.0-Linux-x86_64.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - pip install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends sudo && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PG_APP_HOME
      Value: '"/etc/docker-postgresql"'
    - Key: PG_VERSION
      Value: "9.6"
    - Key: PG_USER
      Value: postgres
    - Key: PG_HOME
      Value: /var/lib/postgresql
    - Key: PG_RUNDIR
      Value: /run/postgresql
    - Key: PG_LOGDIR
      Value: /var/log/postgresql
    - Key: PG_CERTDIR
      Value: /etc/postgresql/certs
    Name: env
  - Env:
    - Key: PG_BINDIR
      Value: /usr/lib/postgresql/${PG_VERSION}/bin
    - Key: PG_DATADIR
      Value: ${PG_HOME}/${PG_VERSION}/main
    Name: env
  - CmdLine:
    - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key
      add -  && echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main'
      > /etc/apt/sources.list.d/pgdg.list  && apt-get update  && DEBIAN_FRONTEND=noninteractive
      apt-get install -y acl       postgresql-${PG_VERSION} postgresql-client-${PG_VERSION}
      postgresql-contrib-${PG_VERSION} postgresql-server-dev-${PG_VERSION}  && ln
      -sf ${PG_DATADIR}/postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf  &&
      ln -sf ${PG_DATADIR}/pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf  &&
      ln -sf ${PG_DATADIR}/pg_ident.conf /etc/postgresql/${PG_VERSION}/main/pg_ident.conf  &&
      rm -rf ${PG_HOME}  && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - 5432/tcp
  - Name: volume
    Volumes:
    - ${PG_HOME}
    - ${PG_RUNDIR}
  - Name: workdir
    Path: ${PG_HOME}
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends git vim && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends nginx && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/docker/code
  - Name: expose
    Ports:
    - 8000/tcp
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends openssh-server
      && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -ri 's/^Port\s+.*/Port 2266/' /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -ri 's/^UsePAM\s+.*/UsePAM no/' /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - 2266/tcp
  - CmdLine:
    - echo 'root:screencast' | chpasswd
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends xauth && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /home/dev
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /home/dev
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev
  - CmdLine:
    - wget https://download.jetbrains.com/python/pycharm-community-2016.3.2.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -xvf pycharm-community-2016.3.2.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mv pycharm-community-2016.3.2 pyc
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /home/dev/pyc/bin/pycharm.sh /usr/bin/pycharm
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -f pycharm-community-2016.3.2.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends libglu1 firefox
      && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /home/dev
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev
  - CmdLine:
    - git clone https://github.com/TensorMSA/hoyai.git
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export PYTHON_HOME=/opt/conda" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export PATH=${PYTHON_HOME}/bin:$PATH" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y --no-install-recommends chromium-browser
      chromium-browser-l10n chromium-codecs-ffmpeg     && rm -rf /var/lib/apt/     &&
      ln -s /usr/bin/chromium-browser /usr/bin/google-chrome     && echo "CHROMIUM_FLAGS='--no-sandbox
      --start-maximized --user-data-dir'" > ~/.chromium-browser.init
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends fonts-nanum &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends aptitude
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -y pgadmin3
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends pgadmin3=1.22.0-1 pgadmin3-data=1.22.0-1&&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends language-pack-ko
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends language-pack-ko-base&& rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "LANG=\"ko_KR.UTF-8\"" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /home/dev/hoyai
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev/hoyai
  - Env:
    - Key: DISPLAY
      Value: :1
    Name: env
  - Env:
    - Key: VNC_COL_DEPTH
      Value: "24"
    Name: env
  - Env:
    - Key: VNC_RESOLUTION
      Value: 1280x1024
    Name: env
  - Env:
    - Key: VNC_PW
      Value: vncpassword
    Name: env
  - CmdLine:
    - apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends
      supervisor vim vnc4server xfce4 ubuntu-desktop gnome-panel gnome-settings-daemon
      metacity nautilus gnome-terminal && rm -rf /var/lib/apt/
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "5901"
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .vnc
    - /root/.vnc
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .config
    - /root/.config
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts
    - /root/scripts
  - CmdLine:
    - chmod +x /root/.vnc/xstartup /etc/X11/xinit/xinitrc /root/scripts/*.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends rabbitmq-server
      && rm -rf /var/lib/apt/
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "5672"
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends hdfview && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends curl
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends nodejs && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         build-essential         curl         git         libcurl3-dev         libfreetype6-dev         libpng12-dev         libzmq3-dev         pkg-config         python-dev         rsync         software-properties-common         unzip         zip         zlib1g-dev         &&     apt-get
      clean &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository -y ppa:openjdk-r/ppa &&     apt-get update &&     apt-get
      install -y --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless &&     apt-get
      clean &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "startup --batch" >>/etc/bazel.bazelrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "build --spawn_strategy=standalone --genrule_strategy=standalone"     >>/etc/bazel.bazelrc
    Name: run
    PrependShell: true
  - Env:
    - Key: BAZEL_VERSION
      Value: 0.4.5
    Name: env
  - Name: workdir
    Path: /
  - CmdLine:
    - mkdir /bazel &&     cd /bazel &&     curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
      &&     curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt
      &&     chmod +x bazel-*.sh &&     ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
      &&     cd / &&     rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /home/dev/
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev
  - CmdLine:
    - git clone https://github.com/tensorflow/tensorflow.git &&     cd tensorflow
      &&     git checkout r1.1
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev/tensorflow
  - Env:
    - Key: CI_BUILD_PYTHON
      Value: python
    Name: env
  - CmdLine:
    - tensorflow/tools/ci_build/builds/configured CPU     bazel build -c opt tensorflow/tools/pip_package:build_pip_package
    Name: run
    PrependShell: true
  - CmdLine:
    - bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install /tmp/pip/tensorflow-*.whl
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /tmp/pip &&     rm -rf /root/.cache
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "6006"
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends memcached && rm
      -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends openjdk-8-jdk &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install -y -c  conda-forge jpype1
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install -y  mkl
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /home/dev/mecab
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /home/dev/mecab
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/dev/mecab
  - CmdLine:
    - curl -O https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x mecab.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ./mecab.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install -y libgcc
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.0.1-20150920.tar.gz
      && tar xzvf mecab-ko-dic-2.0.1-20150920.tar.gz && cd mecab-ko-dic-2.0.1-20150920
      && sudo ldconfig && ldconfig -p | grep /usr/local/lib && ./clean && ./configure
      && make && make install
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -f  mecab-ko-dic-2.0.1-20150920.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -f /tmp/mecab-*.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -Rf /tmp/mecab*-20150920
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /home/docker/code/requirements.txt
  - Name: workdir
    Path: /home/docker/code
  - CmdLine:
    - pip install -r /home/docker/code/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /tmp/pip &&     rm -rf /root/.cache
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - runtime/
    - ${PG_APP_HOME}/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /sbin/entrypoint.sh
  - CmdLine:
    - chmod 755 /sbin/entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /sbin/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
