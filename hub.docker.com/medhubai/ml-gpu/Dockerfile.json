{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "MAINTAINER",
              "Value": "\"medhub.ai \u003csupport@medhub.ai\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "TENSORFLOW_VERSION",
              "Value": "1.0.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CAFFE_CLONE_TAG",
              "Value": "rc4"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         build-essential         curl         cmake         g++         git         wget         libopenblas-dev         libboost-all-dev         libgflags-dev         libgoogle-glog-dev         libhdf5-serial-dev         libleveldb-dev         liblmdb-dev         libopencv-dev         libprotobuf-dev         libsnappy-dev         protobuf-compiler         libfreetype6-dev         libpng12-dev         libjpeg-dev         libtiff5-dev         libjasper-dev         libzmq3-dev         pkg-config         python         python-dev         rsync         software-properties-common         unzip         \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/* \u0026\u0026     update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python get-pip.py \u0026\u0026     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install         ipykernel         jupyter         matplotlib         numpy         easydict         scipy         sklearn         scikit-image         opencv-python         pandas         Pillow         keras         \u0026\u0026     python -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install     https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CAFFE_ROOT",
              "Value": "/opt/caffe"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$CAFFE_ROOT"
        },
        {
          "CmdLine": [
            "git clone -b ${CAFFE_CLONE_TAG} --depth 1 https://github.com/BVLC/caffe.git . \u0026\u0026     pip install --upgrade pip \u0026\u0026     cd python \u0026\u0026 for req in $(cat requirements.txt) pydot; do pip install $req; done \u0026\u0026 cd .. \u0026\u0026     git clone https://github.com/NVIDIA/nccl.git \u0026\u0026 cd nccl \u0026\u0026 make -j install \u0026\u0026 cd .. \u0026\u0026 rm -rf nccl \u0026\u0026     mkdir build \u0026\u0026 cd build \u0026\u0026     cmake -DUSE_CUDNN=1 -DUSE_NCCL=1 -DBLAS=Open .. \u0026\u0026     make -j\"$(nproc)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYCAFFE_ROOT",
              "Value": "$CAFFE_ROOT/python"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PYCAFFE_ROOT:$PYTHONPATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$CAFFE_ROOT/build/lib\" \u003e\u003e /etc/ld.so.conf.d/caffe.conf \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/root/.jupyter/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "notebooks",
            "/notebooks"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run_jupyter.sh",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "6006"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/root\""
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}