{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "builder",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "MAINTAINER",
              "Value": "Jostein Austvik Jacobsen \u003cjostein@nlb.no\u003e \u003chttp://www.nlb.no/\u003e"
            }
          ],
          "Name": "label"
        },
        {
          "Name": "workdir",
          "Path": "/opt/"
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y locales \u0026\u0026 locale-gen en_GB en_GB.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'LC_ALL=\"en_US.UTF-8\"' \u003e /etc/default/locale"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_GB:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y openjdk-8-jdk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y build-essential apt-utils pkg-config patch make curl unzip vim emacs git pcregrep"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libxml2 libxml2-dev libxml2-utils libxslt1-dev zlib1g-dev liblzma-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y maven autoconf automake libtool make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y ruby-full ruby-dev rubygems-integration"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NOKOGIRI_USE_SYSTEM_LIBRARIES",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "gem install bundler"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gem install nokogiri:1.5.6"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gem install commaparty:0.0.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "/opt/pipeline/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/pipeline"
        },
        {
          "CmdLine": [
            "make RUBY=ruby MVN_LOG=cat dist-zip-linux"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "unzip pipeline2-*_linux.zip -d /opt/pipeline2-linux"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "debian:stretch",
      "SourceCode": "FROM debian:stretch",
      "Platform": "",
      "From": {
        "Image": "debian:stretch"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "MAINTAINER",
              "Value": "Jostein Austvik Jacobsen \u003cjostein@nlb.no\u003e \u003chttp://www.nlb.no/\u003e"
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y wget curl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget \"https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11%2B28/OpenJDK11-jdk_x64_linux_hotspot_11_28.tar.gz\" -O /tmp/openjdk.tar.gz --no-verbose     \u0026\u0026 tar -zxvf /tmp/openjdk.tar.gz -C /opt     \u0026\u0026 rm /tmp/openjdk.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/opt/jdk-11+28"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libxml2 libxml2-dev libxml2-utils libxslt1-dev zlib1g-dev liblzma-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/opt/pipeline2-linux/daisy-pipeline/",
            "/opt/daisy-pipeline2/"
          ]
        },
        {
          "CmdLine": [
            "sed -i 's/\\(com.xmlcalabash.*\\)INFO/\\1DEBUG/' /opt/daisy-pipeline2/etc/config-logback.xml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PIPELINE2_WS_LOCALFS",
              "Value": "false"
            },
            {
              "Key": "PIPELINE2_WS_AUTHENTICATION",
              "Value": "false"
            },
            {
              "Key": "PIPELINE2_WS_AUTHENTICATION_KEY",
              "Value": "clientid"
            },
            {
              "Key": "PIPELINE2_WS_AUTHENTICATION_SECRET",
              "Value": "sekret"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "8181"
          ]
        },
        {
          "Health": {
            "Interval": 30000000000,
            "StartPeriod": 60000000000,
            "Test": [
              "CMD-SHELL",
              "http_proxy=\"\" https_proxy=\"\" HTTP_PROXY=\"\" HTTPS_PROXY=\"\" curl --fail http://${PIPELINE2_WS_HOST-localhost}:${PIPELINE2_WS_PORT:-8181}/${PIPELINE2_WS_PATH:-ws}/alive || exit 1"
            ],
            "Timeout": 10000000000
          },
          "Name": "healthcheck"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/opt/daisy-pipeline2/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/opt/daisy-pipeline2/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}