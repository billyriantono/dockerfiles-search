MetaArgs: null
Stages:
- BaseName: ansibleplaybookbundle/apb-base
  Commands:
  - Labels:
    - Key: '"com.redhat.apb.spec"'
      Value: '""'
    Name: label
  - CmdLine:
    - yum install -y java-1.8.0-openjdk
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - playbooks
    - /opt/apb/actions
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - roles
    - /opt/ansible/roles
  - CmdLine:
    - chmod -R g=u /opt/{ansible,apb}
    Name: run
    PrependShell: true
  - Name: user
    User: apb
  From:
    Image: ansibleplaybookbundle/apb-base
  Name: ""
  Platform: ""
  SourceCode: FROM ansibleplaybookbundle/apb-base
