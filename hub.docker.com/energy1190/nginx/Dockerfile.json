{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian",
      "SourceCode": "FROM debian",
      "Platform": "",
      "From": {
        "Image": "debian"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.9.11"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_LUA",
              "Value": "0.10.1rc1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_DEV_KIT",
              "Value": "0.2.19"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONFD_VERSION",
              "Value": "0.11.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONSUL_TPL_VERSION",
              "Value": "0.10.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LUA_LIB",
              "Value": "/usr/lib/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LUA_INC",
              "Value": "/usr/include/lua5.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export buildDeps='     build-essential     liblua5.1-0-dev     lua-sec-dev     git     libffi-dev     python3-dev     python3-pip     ' \u0026\u0026     apt-get update \u0026\u0026     apt-get install --no-install-recommends --fix-missing -y $buildDeps     runit     python3     python3-six     python3-urllib3     curl     libpcre3 libpcre3-dev libssl-dev liblwp-useragent-determined-perl libpam0g-dev     lua5.1     lua-sec     liblua5.1-0     lua-json \u0026\u0026     adduser --system --no-create-home --disabled-login --group --disabled-password nginx \u0026\u0026     curl -sSL https://github.com/hashicorp/consul-template/archive/v0.10.0.tar.gz -o consul-template_${CONSUL_TPL_VERSION}_linux_amd64.tar.gz \u0026\u0026     tar -xf consul-template_${CONSUL_TPL_VERSION}_linux_amd64.tar.gz  -C /usr/local/bin --strip-components=1 \u0026\u0026     rm consul-template_${CONSUL_TPL_VERSION}_linux_amd64.tar.gz \u0026\u0026     curl -sSL https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 -o /usr/local/bin/confd \u0026\u0026     chmod +x /usr/local/bin/confd \u0026\u0026     curl -sSL https://github.com/chaoslawful/lua-nginx-module/archive/v${NGINX_LUA}.tar.gz -o /usr/src/lua-nginx-module.tar.gz \u0026\u0026     tar -xf /usr/src/lua-nginx-module.tar.gz -C /usr/src \u0026\u0026     curl -sSL https://github.com/simpl/ngx_devel_kit/archive/v${NGINX_DEV_KIT}.tar.gz -o /usr/src/ngx_devel_kit.tar.gz \u0026\u0026     tar -xf /usr/src/ngx_devel_kit.tar.gz -C /usr/src \u0026\u0026     curl -sSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o /usr/src/nginx-${NGINX_VERSION}.tar.gz \u0026\u0026     tar -xf /usr/src/nginx-${NGINX_VERSION}.tar.gz  -C /usr/src \u0026\u0026     ln -s `find /usr/lib -iname liblua5.1.so` /usr/lib/liblua.so \u0026\u0026     cd /usr/src/nginx-${NGINX_VERSION} \u0026\u0026     CC=/usr/bin/gcc ./configure         --prefix=/usr/share/nginx         --sbin-path=/usr/sbin/nginx         --conf-path=/etc/nginx/nginx.conf         --pid-path=/var/run/nginx.pid         --lock-path=/var/lock/nginx.lock         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --user=nginx         --group=nginx         --without-mail_pop3_module         --without-mail_imap_module         --without-mail_smtp_module         --without-http_uwsgi_module         --without-http_scgi_module         --with-ipv6         --with-stream         --with-http_ssl_module         --with-http_v2_module         --with-http_stub_status_module         --with-http_gzip_static_module         --add-module=/usr/src/ngx_devel_kit-${NGINX_DEV_KIT}         --add-module=/usr/src/lua-nginx-module-${NGINX_LUA} \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     git clone https://github.com/agoragames/nginx-google-oauth /usr/src/nginx-google-oauth \u0026\u0026     cp /usr/src/nginx-google-oauth/*.lua /etc/nginx/ \u0026\u0026     pip3 install pynacl pyopenssl \u0026\u0026     git clone https://github.com/jplana/python-etcd.git \u0026\u0026     cd python-etcd \u0026\u0026     python3 setup.py install \u0026\u0026     cd .. \u0026\u0026 rm -rf python-etcd \u0026\u0026     apt-get install -y mysql-client \u0026\u0026     apt-get -y purge --auto-remove $buildDeps \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /usr/src/* /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "tpl.confd",
            "/tpl.confd"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "my_init/my_init",
            "/sbin/my_init"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "2.sh",
            "/etc/runit/2"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./service",
            "/etc/service"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./nginx_reload.sh",
            "/nginx_reload.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./certctl.py",
            "/certctl.py"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "CmdLine": [
            "ln -sf /dev/stdout /var/log/nginx/access.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "find /etc/service -name run | xargs chmod +x \u0026\u0026 mkdir -p     /etc/container_environment     /var/www     /etc/nginx/ssl     /etc/nginx/sites-enabled     /etc/my_init.d     /var/cache/nginx     /var/spool/nginx \u0026\u0026 chmod +x     /sbin/my_init     /nginx_reload.sh     /certctl.py     /etc/runit/2 \u0026\u0026 chmod 444     /etc/nginx/nginx.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/cache/nginx"
          ]
        },
        {
          "CmdLine": [
            "/sbin/my_init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}