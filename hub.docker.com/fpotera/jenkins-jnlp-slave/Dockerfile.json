{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "NODE_ENV",
              "Value": "production"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOST",
              "Value": "0.0.0.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PORT",
              "Value": "4000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "application_directory",
              "Value": "/usr/src/app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENABLE_XVBF",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WORKSPACE_DIR",
              "Value": "$application_directory/workspace"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "USE_CHROME_STABLE",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "CONNECTION_TIMEOUT",
              "Value": "60000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CHROME_PATH",
              "Value": "/usr/bin/google-chrome"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "USE_CHROME_STABLE",
              "Value": "${USE_CHROME_STABLE}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $application_directory $WORKSPACE_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$application_directory"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "package.json",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tsconfig.json",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "."
          ]
        },
        {
          "CmdLine": [
            "apt-get -qq update \u0026\u0026   echo \"ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true\" | debconf-set-selections \u0026\u0026   apt-get -y -qq install software-properties-common \u0026\u0026  apt-add-repository \"deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner\" \u0026\u0026   apt-add-repository ppa:malteworld/ppa \u0026\u0026 apt-get -qq update \u0026\u0026 apt-get -y -qq install   adobe-flashplugin   msttcorefonts   fonts-noto-color-emoji   fonts-noto-cjk   fonts-liberation   fonts-thai-tlwg   fonts-indic   fontconfig   libappindicator3-1   pdftk   unzip   locales   gconf-service   libasound2   libatk1.0-0   libc6   libcairo2   libcups2   libdbus-1-3   libexpat1   libfontconfig1   libgcc1   libgconf-2-4   libgdk-pixbuf2.0-0   libglib2.0-0   libgtk-3-0   libnspr4   libpango-1.0-0   libpangocairo-1.0-0   libstdc++6   libx11-6   libx11-xcb1   libxcb1   libxcomposite1   libxcursor1   libxdamage1   libxext6   libxfixes3   libxi6   libxrandr2   libxrender1   libxss1   libxtst6   ca-certificates   libappindicator1   libnss3   lsb-release   xdg-utils   wget   xvfb   curl   netbase   git-lfs   procps   bzip2   xz-utils   p11-kit   fontconfig   libfreetype6 \u0026\u0026  curl --silent --location https://deb.nodesource.com/setup_10.x | bash - \u0026\u0026  apt-get -y -qq install nodejs \u0026\u0026  apt-get -y -qq install build-essential \u0026\u0026  fc-cache -f -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/local/openjdk-11"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$JAVA_HOME/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } \u003e /usr/local/bin/docker-java-home \u0026\u0026 chmod +x /usr/local/bin/docker-java-home \u0026\u0026 [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_VERSION",
              "Value": "11.0.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_BASE_URL",
              "Value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.4%2B11/OpenJDK11U-jdk_"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_URL_VERSION",
              "Value": "11.0.4_11"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo \u003e\u00262 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo \u003e\u00262 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo \u003e\u00262 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} \u003e /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u \u003e /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac --version; \tjava --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64",
            "/usr/local/bin/dumb-init"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/dumb-init"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"$USE_CHROME_STABLE\" = \"true\" ]; then     cd /tmp \u0026\u0026    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \u0026\u0026    dpkg -i google-chrome-stable_current_amd64.deb;  fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"$USE_CHROME_STABLE\" = \"true\" ]; then     export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true;  fi \u0026\u0026  npm install -g typescript @types/node \u0026\u0026  npm install \u0026\u0026  npm run post-install \u0026\u0026  npm run build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -qq clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -r blessuser \u0026\u0026 useradd -r -g blessuser -G audio,video blessuser   \u0026\u0026 mkdir -p /home/blessuser/Downloads   \u0026\u0026 chown -R blessuser:blessuser /home/blessuser   \u0026\u0026 chown -R blessuser:blessuser $application_directory"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "blessuser"
        },
        {
          "Name": "expose",
          "Ports": [
            "4000"
          ]
        },
        {
          "CmdLine": [
            "dumb-init",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "node",
            "./build/index.js"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": "3.29"
        },
        {
          "Key": "user",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "group",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "uid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "gid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "CmdLine": [
            "groupadd -g ${gid} ${group}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -c \"Jenkins user\" -d /home/${user} -u ${uid} -g ${gid} -m ${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "Description",
              "Value": "\"This is a base image, which provides the Jenkins agent executable (slave.jar)\""
            },
            {
              "Key": "Vendor",
              "Value": "\"Jenkins project\""
            },
            {
              "Key": "Version",
              "Value": "\"${VERSION}\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "AGENT_WORKDIR",
          "Name": "arg",
          "Value": "/home/${user}/agent"
        },
        {
          "CmdLine": [
            "curl --create-dirs -fsSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar   \u0026\u0026 chmod 755 /usr/share/jenkins   \u0026\u0026 chmod 644 /usr/share/jenkins/slave.jar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "${user}"
        },
        {
          "Env": [
            {
              "Key": "AGENT_WORKDIR",
              "Value": "${AGENT_WORKDIR}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /home/${user}/.jenkins \u0026\u0026 mkdir -p ${AGENT_WORKDIR}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/home/${user}/.jenkins"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${AGENT_WORKDIR}"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/${user}"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins-slave",
            "/usr/local/bin/jenkins-slave"
          ]
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/usr/local/bin/jenkins-slave"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}