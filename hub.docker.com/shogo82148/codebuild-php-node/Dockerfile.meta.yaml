MetaArgs: null
Stages:
- BaseName: amazonlinux:2
  Commands:
  - Env:
    - Key: PYTHON_VERSION
      Value: '"3.7.3"'
    - Key: PHP_VERSION
      Value: '"7.3.9"'
    - Key: NODE_VERSION
      Value: '"10.16.3"'
    - Key: JQ_VERSION
      Value: '"1.6"'
    - Key: JQ_SHA256
      Value: '"af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44"'
    - Key: DOCKER_VERSION
      Value: '"18.09.6"'
    - Key: DOCKER_COMPOSE_VERSION
      Value: '"1.24.0"'
    Name: env
  - Env:
    - Key: DOCKER_BUCKET
      Value: '"download.docker.com"'
    - Key: DOCKER_CHANNEL
      Value: '"stable"'
    - Key: DOCKER_SHA256
      Value: '"1f3f6774117765279fce64ee7f76abbb5f260264548cf80631d68fb2d795bb09"'
    - Key: DIND_COMMIT
      Value: '"3b5fac462d21ca164b3778647420016315289034"'
    - Key: GITVERSION_VERSION
      Value: '"4.0.0"'
    - Key: DEBIAN_FRONTEND
      Value: '"noninteractive"'
    - Key: SRC_DIR
      Value: '"/usr/src"'
    - Key: EPEL_REPO
      Value: '"https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"'
    - Key: TRINITY_REPO
      Value: '"https://mirror.ppa.trinitydesktop.org/trinity/trinity/rpm/el7/trinity-r14/RPMS/noarch/trinity-repo-14.0.5-1.el7.noarch.rpm"'
    Name: env
  - CmdLine:
    - set -ex     && yum install -y openssh-clients     && mkdir ~/.ssh     && touch
      ~/.ssh/known_hosts     && ssh-keyscan -t rsa,dsa -H github.com >> ~/.ssh/known_hosts     &&
      ssh-keyscan -t rsa,dsa -H bitbucket.org >> ~/.ssh/known_hosts     && chmod 600
      ~/.ssh/known_hosts     && yum install -y $EPEL_REPO $TRINITY_REPO     && yum
      groupinstall -y "Development tools"     && yum install -y wget fakeroot        dirmngr
      bzr mercurial procps-ng        ImageMagick        openssl-devel libdb-devel        libevent-devel
      libffi-devel GeoIP-devel glib2-devel        libjpeg-devel krb5-server xz-devel        mariadb-devel        ncurses-devel
      postgresql-devel readline-devel        libsqlite3x-devel libwebp-devel        libxml2-devel
      libxslt-devel libyaml-devel        e2fsprogs iptables xfsprogs        groff        asciidoc
      cvs cvsps docbook-dtds docbook-style-xsl        perl-DBD-SQLite perl-DBI perl-HTTP-Date        perl-IO-Pty-Easy
      libserf subversion-perl tcl perl-TimeDate        perl-YAML-LibYAML bzrtools
      python-configobj        sgml-common xmlto libxslt        tk expect parallel
      rsync     && rm -rf /var/cache/yum/*     && yum clean all     && wget https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64
      -O /usr/local/bin/jq     && echo "$JQ_SHA256 /usr/local/bin/jq" | sha256sum
      -c -     && chmod +x /usr/local/bin/jq
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex     && curl -fSL "https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz"
      -o docker.tgz     && echo "${DOCKER_SHA256} *docker.tgz" | sha256sum -c -     &&
      tar --extract --file docker.tgz --strip-components 1  --directory /usr/local/bin/     &&
      rm docker.tgz     && docker -v     && groupadd dockremap     && useradd -g dockremap
      dockremap     && echo 'dockremap:165536:65536' >> /etc/subuid     && echo 'dockremap:165536:65536'
      >> /etc/subgid     && wget "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind"
      -O /usr/local/bin/dind     && curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64
      > /usr/local/bin/docker-compose     && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose     &&
      docker-compose version
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sS -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator  &&
      curl -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl  &&
      curl -sS -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest  &&
      chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator /usr/local/bin/ecs-cli
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/lib/docker
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ssh_config
    - /root/.ssh/config
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - runtimes.yml
    - /codebuild/image/config/runtimes.yml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dockerd-entrypoint.sh
    - /usr/local/bin/
  - Env:
    - Key: PATH
      Value: '"/usr/local/bin:$PATH"'
    - Key: GPG_KEY
      Value: '"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"'
    - Key: PYTHON_PIP_VERSION
      Value: '"19.1.1"'
    - Key: LC_ALL
      Value: C.UTF-8
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - 'yum install -y tcl-devel tk-devel bzip2-devel gdbm-devel libuuid-devel     &&
      wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"     &&
      wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"     &&
      export GNUPGHOME="$(mktemp -d)"     && (gpg --keyserver hkp://p80.pool.sks-keyservers.net:80
      --recv-keys "$GPG_KEY"         || gpg --keyserver hkp://keyserver.ubuntu.com:80
      --recv-keys "$GPG_KEY"         || gpg --keyserver pgp.mit.edu --recv-keys "$GPG_KEY")     &&
      gpg --batch --verify python.tar.xz.asc python.tar.xz     && rm -r "$GNUPGHOME"
      python.tar.xz.asc     && mkdir -p /usr/src/python     && tar -xJC /usr/src/python
      --strip-components=1 -f python.tar.xz     && rm python.tar.xz         && cd
      /usr/src/python     && ./configure         --enable-loadable-sqlite-extensions         --enable-shared     &&
      make -j$(nproc)     && make install     && ln -s /usr/local/lib/libpython3.7m.so.1.0
      /usr/lib/libpython3.7m.so.1.0     && ldconfig     && if [ ! -e /usr/local/bin/pip3
      ]; then :         && wget -O /tmp/get-pip.py ''https://bootstrap.pypa.io/get-pip.py''         &&
      python3 /tmp/get-pip.py "pip==$PYTHON_PIP_VERSION"         && rm /tmp/get-pip.py     ;
      fi     && pip3 install --no-cache-dir --upgrade --force-reinstall "pip==$PYTHON_PIP_VERSION"         &&
      pip install pipenv virtualenv --no-cache-dir         && pip3 install --no-cache-dir
      --upgrade setuptools wheel     && [ "$(pip list |tac|tac| awk -F ''[ ()]+''
      ''$1 == "pip" { print $2; exit }'')" = "$PYTHON_PIP_VERSION" ]         && find
      /usr/local -depth         \(             \( -type d -a -name test -o -name tests
      \)             -o             \( -type f -a -name ''*.pyc'' -o -name ''*.pyo''
      \)         \) -exec rm -rf ''{}'' +     && rm -rf /usr/src/python ~/.cache     &&
      cd /usr/local/bin     && { [ -e easy_install ] || ln -s easy_install-* easy_install;
      }     && ln -s idle3 idle     && ln -s pydoc3 pydoc     && ln -s python3 python     &&
      ln -s python3-config python-config     && rm -rf /var/cache/yum/*     && yum
      clean all'
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"/root/.local/bin:$PATH"'
    Name: env
  - CmdLine:
    - set -ex     && pip3 install --user aws-sam-cli     && sam --version     && pip3
      install awscli boto3
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEYS
      Value: CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D
    Name: env
  - Env:
    - Key: PHP_DOWNLOAD_SHA
      Value: '"4007f24a39822bef2805b75c625551d30be9eeed329d52eb0838fa5c1b91c1fd"'
    - Key: PHPPATH
      Value: '"/php"'
    - Key: PHP_INI_DIR
      Value: '"/usr/local/etc/php"'
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector -fpic -fpie -O2"'
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: PHP_SRC_DIR
      Value: '"$SRC_DIR/php"'
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    - Key: PHP_URL
      Value: '"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror"'
    - Key: PHP_ASC_URL
      Value: '"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror"'
    Name: env
  - CmdLine:
    - set -xe;      mkdir -p $SRC_DIR;      cd $SRC_DIR;      yum install -y curl-devel;      wget
      -O php.tar.xz "$PHP_URL";      echo "$PHP_DOWNLOAD_SHA *php.tar.xz" | sha256sum
      -c -;      wget -O php.tar.xz.asc "$PHP_ASC_URL";      export GNUPGHOME="$(mktemp
      -d)";      for key in $GPG_KEYS; do          ( gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80
      --recv-keys "$key"            || gpg --keyserver hkp://keyserver.ubuntu.com:80
      --recv-keys "$key"            || gpg --keyserver pgp.mit.edu --recv-keys "$key"
      );      done;      gpg --batch --verify php.tar.xz.asc php.tar.xz;      rm -rf
      "$GNUPGHOME";      set -eux;      yum install -y libedit-devel dpkg-dev libargon2-devel
      re2c;      export          CFLAGS="$PHP_CFLAGS"          CPPFLAGS="$PHP_CPPFLAGS"          LDFLAGS="$PHP_LDFLAGS"      ;      mkdir
      -p $PHP_SRC_DIR;      tar -Jxf $SRC_DIR/php.tar.xz -C $PHP_SRC_DIR --strip-components=1;      cd
      $PHP_SRC_DIR;      gnuArch="$(dpkg-architecture -qDEB_BUILD_GNU_TYPE)";      debMultiarch="$(dpkg-architecture
      -qDEB_BUILD_MULTIARCH)";      if [ ! -d /usr/include/curl ]; then          ln
      -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;      fi;      ./configure          --build="$gnuArch"          --with-config-file-path="$PHP_INI_DIR"          --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"          --disable-cgi          --enable-ftp          --enable-mbstring          --enable-mysqlnd          --enable-sockets          --enable-pcntl          --with-password-argon2          --with-curl          --with-pdo-pgsql          --with-pdo-mysql          --with-libedit          --with-openssl          --with-zlib      $(test
      "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')          --with-libdir="lib/$debMultiarch"      ${PHP_EXTRA_CONFIGURE_ARGS:-}      ;      make
      -j "$(nproc)";      make install;      find /usr/local/bin /usr/local/sbin -type
      f -executable -exec strip --strip-all '{}' + || true;      make clean;      cd
      /;      rm -rf $PHP_SRC_DIR;      rm $SRC_DIR/php.tar.xz;      php --version;      pecl
      update-channels;      rm -rf /tmp/pear ~/.pearrc;      mkdir "$PHP_INI_DIR";      mkdir
      "$PHP_INI_DIR/conf.d";      touch "$PHP_INI_DIR/conf.d/memory.ini"      && echo
      "memory_limit = 1G;" >> "$PHP_INI_DIR/conf.d/memory.ini";      rm -rf /var/cache/yum/*
      && yum clean all
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"$PHPPATH/bin:/usr/local/php/bin:$PATH"'
    Name: env
  - CmdLine:
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer
    Name: run
    PrependShell: true
  - Env:
    - Key: N_SRC_DIR
      Value: '"$SRC_DIR/n"'
    Name: env
  - CmdLine:
    - git clone https://github.com/tj/n $N_SRC_DIR     && cd $N_SRC_DIR && make install     &&
      n $NODE_VERSION && npm install --save-dev -g grunt && npm install --save-dev
      -g grunt-cli && npm install --save-dev -g webpack     && curl -sSL https://dl.yarnpkg.com/rpm/yarn.repo
      | tee /etc/yum.repos.d/yarn.repo     && rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg     &&
      yum install -y yarn     && yarn --version     && cd / && rm -rf $N_SRC_DIR     &&
      rm -rf /var/cache/yum/*     && yum clean all
    Name: run
    PrependShell: true
  - CmdLine:
    - dockerd-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: amazonlinux:2
  Name: ""
  Platform: ""
  SourceCode: FROM amazonlinux:2
