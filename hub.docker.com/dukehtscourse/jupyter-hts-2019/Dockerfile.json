{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stretch",
      "SourceCode": "FROM debian:stretch",
      "Platform": "",
      "From": {
        "Image": "debian:stretch"
      },
      "Commands": [
        {
          "Maintainer": "Janice McCarthy \"janice.mccarthy@duke.edu\"",
          "Name": "maintainer"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "R_VERSION",
              "Value": "\"3.6.2\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "REPO=http://cdn-fastly.deb.debian.org  \u0026\u0026 echo \"deb $REPO/debian stretch main\\ndeb $REPO/debian-security stretch/updates main\" \u003e /etc/apt/sources.list  \u0026\u0026 apt-get update \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     wget     bzip2     less     make     ca-certificates     sudo     locales     git     ssh     vim     jed     emacs     xclip     build-essential     python-dev     python3-dev     unzip     libsm6     pandoc     pkg-config     texlive-latex-base     texlive-latex-extra     texlive-fonts-extra     texlive-fonts-recommended     texlive-generic-recommended     libxrender1     inkscape     rsync     gzip     tar     python3-pip     apt-utils     curl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends     libxml2-dev     libgsl0-dev     libav-tools     fastqc default-jre     circos     parallel     time     htop"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://ftp.debian.org/debian stretch-backports main\" \u003e  /etc/apt/sources.list.d/backports.list \u0026\u0026     apt-get update \u0026\u0026     apt-get -t stretch-backports install -y --no-install-recommends     bwa     samtools     tabix     picard-tools     openjdk-11-jdk     openjdk-11-jre     sra-toolkit     bcftools     bedtools     vcftools     seqtk     rna-star     lftp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -yq --no-install-recommends     dvipng     libopenblas-base     libarmadillo7     libarmadillo-dev     liblapack3     libcurl3     libcurl4-gnutls-dev     libssl1.1     libssl-dev     libblas-dev     liblapack-dev     libeigen3-dev     libpng-dev     libbz2-dev     liblzma-dev     libunwind-dev     libcairo2-dev     texinfo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends     fonts-dejavu     gfortran     gcc      graphviz     libgraphviz-dev     gnupg2     openssl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "jovyan"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/$NB_USER"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$HOME/.local/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "mkdir /home/$NB_USER/work \u0026\u0026     mkdir /home/$NB_USER/.jupyter \u0026\u0026     mkdir /home/$NB_USER/.ssh \u0026\u0026     mkdir -p /home/$NB_USER/.local/share/jupyter/runtime \u0026\u0026     printf \"Host gitlab.oit.duke.edu \\n \\t IdentityFile ~/work/.HTSgitlab.key\\n\"  \u003e /home/$NB_USER/.ssh/config \u0026\u0026     echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" \u003e /home/$NB_USER/.curlrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "pip3 install --upgrade setuptools"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install wheel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir      'ipywidgets'     'pandas'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'numexpr'     'matplotlib'     'scipy'     'seaborn'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'scikit-learn'     'scikit-image'     'sympy'     'cython'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'patsy'     'statsmodels'     'cloudpickle'     'dill'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'numba'     'bokeh'     'sqlalchemy'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'h5py' \t'pyzmq'     'vincent'     'beautifulsoup4'     'openpyxl'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir 'pandas-datareader'     'ipython-sql'     'pandasql'     'memory_profiler'    'psutil'     'cythongsl'     'joblib'     'ipyparallel'     'pybind11'     'tables'     'plotnine'     'xlrd'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install      'numpy'     'pillow'     'requests'     'nose'     'pystan'     'cppimport'     'pgmpy'     'pygraphviz'     'htseq'     'pysam'     'biopython'     'DukeDSClient'     'multiqc'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install  bash_kernel \u0026\u0026 python3 -m bash_kernel.install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 uninstall --yes matplotlib \u0026\u0026     pip3 install 'matplotlib==2.2.3'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable --py widgetsnbextension --sys-prefix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ipcluster nbextension  enable --user"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "CmdLine": [
            "mkdir -p $HOME/.ipython/profile_default/startup"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "mplimporthook.py",
            "$HOME/.ipython/profile_default/startup/"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install dirmngr -yq --install-recommends \u0026\u0026     apt-get install software-properties-common -yq \u0026\u0026     apt-get install apt-transport-https -yq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb https://cloud.r-project.org/bin/linux/debian stretch-cran35/\" \u003e\u003e /etc/sources.list \u0026\u0026     add-apt-repository 'deb https://cloud.r-project.org/bin/linux/debian stretch-cran35/'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get -yq --no-install-recommends --allow-unauthenticated install     r-base=${R_VERSION}*     r-base-core=${R_VERSION}*     r-base-dev=${R_VERSION}*     r-mathlib=${R_VERSION}*     r-recommended=${R_VERSION}*     r-base-html=${R_VERSION}*     r-doc-html=${R_VERSION}*     libcurl4-openssl-dev     libssl-dev     libxml2-dev     libcairo2-dev     libxt-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('IRkernel', 'plyr','devtools', 'RCurl', 'curl', 'tidyverse', 'shiny'), repos = 'https://cloud.r-project.org/')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('rmarkdown', 'forecast', 'RSQLite', 'reshape2', 'nycflights13'), repos = 'https://cloud.r-project.org/')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('caret', 'crayon', 'randomforest', 'htmltools'), repos = 'https://cloud.r-project.org/')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('sparklyr', 'htmlwidgets', 'hexbin'), repos = 'https://cloud.r-project.org/')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"IRkernel::installspec(user = FALSE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(pkgs = c('ROCR','mvtnorm','pheatmap','formatR'),             repos='https://cran.revolutionanalytics.com/',             dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(pkgs = c('dendextend', 'rentrez'),             repos='https://cran.revolutionanalytics.com/',             dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"if (!requireNamespace('BiocManager', quietly = TRUE)) install.packages('BiocManager', repos = 'https://cloud.r-project.org/');                    BiocManager::install()\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"BiocManager::install(c('golubEsets','multtest','qvalue','limma','gage','pheatmap', 'ggbio', 'ShortRead', 'DESeq2', 'dada2', 'KEGG.db'))\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"BiocManager::install(c('pwr','RColorBrewer','GSA','dendextend','pheatmap','cgdsr', 'caret', 'ROCR'))\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"BiocManager::install(c('org.EcK12.eg.db','genefilter','GEOquery', 'airway'))\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/bin \u0026\u0026     \t  cd /tmp \u0026\u0026 \t  wget https://github.com/ExpressionAnalysis/ea-utils/archive/1.04.807.tar.gz \u0026\u0026 \t  tar -zxf 1.04.807.tar.gz \u0026\u0026      \t  cd ea-utils-1.04.807/clipper \u0026\u0026      \t  make fastq-mcf fastq-multx \u0026\u0026      \t  cp fastq-mcf fastq-multx /usr/bin \u0026\u0026      \t  cd /tmp \u0026\u0026      \t  rm -rf ea-utils-1.04.807"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/$NB_USER/work"
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "v0.18.0"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini",
            "/tini"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/usr/local/bin/start-notebook.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-notebook.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-singleuser.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/home/$NB_USER/.jupyter/"
          ]
        },
        {
          "CmdLine": [
            "chown -R $NB_USER:users /home/$NB_USER/.jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_USER"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends     art-nextgen-simulation-tools     art-nextgen-simulation-tools-profiles"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"BiocManager::install(c('Gviz'))\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"BiocManager::install(c('phyloseq'))\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /data /shared_space"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown jovyan /data /shared_space"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "jovyan"
        }
      ]
    }
  ]
}