MetaArgs: null
Stages:
- BaseName: registry.timmertech.nl/docker/alpine-glibc:latest
  Commands:
  - Key: BUILD_DATE
    Name: arg
    Value: null
  - Key: VCS_REF
    Name: arg
    Value: null
  - Env:
    - Key: GOLANG_VERSION
      Value: 1.10.3
    Name: env
  - Env:
    - Key: PROTOC_VERSION
      Value: 3.6.1
    Name: env
  - Labels:
    - Key: maintainer
      Value: '"G.J.R. Timmer <gjr.timmer@gmail.com>"'
    - Key: nl.timmertech.build-date
      Value: ${BUILD_DATE}
    - Key: nl.timmertech.name
      Value: alpine-golang
    - Key: nl.timmertech.vendor
      Value: timmertech.nl
    - Key: nl.timmertech.vcs-url
      Value: '"https://github.com/GJRTimmer/docker-alpine-golang.git"'
    - Key: nl.timmertech.vcs-ref
      Value: ${VCS_REF}
    - Key: nl.timmertech.license
      Value: MIT
    Name: label
  - CmdLine:
    - "apk add --no-cache --update ca-certificates wget git curl unzip openssh &&
      \tapk upgrade --update --no-cache"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex && \tapk add --no-cache \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\topenssl-dev
      \t\talpine-sdk \t\tgo && \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\"
      \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGO386=\"$(go
      env GO386)\" \t\tGOARM=\"$(go env GOARM)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\"
      \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \t\twget -q \"https://golang.org/dl/go${GOLANG_VERSION}.src.tar.gz\"
      -O golang.tar.gz && \techo \"567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2
      \ golang.tar.gz\" | sha256sum -c - && \ttar -C /usr/local -xzf golang.tar.gz
      && \trm golang.tar.gz && \tcd /usr/local/go/src && \tfor p in /go-alpine-patches/*.patch;
      do \t\t[ -f \"$p\" ] || continue; \t\tpatch -p2 -i \"$p\"; \tdone; \t\t./make.bash
      && \t\trm -rf /go-alpine-patches"
    Name: run
    PrependShell: true
  - CmdLine:
    - "wget -q \"https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip\"
      -O protoc.zip && \tcd /usr && \tunzip ../protoc.zip && \trm -rf /protoc.zip
      && \trm -rf /usr/readme.txt && \tapk del --purge unzip"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:/usr/local/go/bin:$PATH
    Name: env
  - CmdLine:
    - "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && \tchmod -R 777 \"$GOPATH\""
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $GOPATH
  - CmdLine:
    - "git config --global http.https://gopkg.in.followRedirects true && \tgo get
      -u -v \t\tgolang.org/x/tools/cmd/godoc \t\tcmd/gofmt \t\tgolang.org/x/tools/cmd/...
      \t\tgithub.com/golang/protobuf/proto \t\tgithub.com/golang/protobuf/protoc-gen-go
      \t\tgithub.com/golang/dep/cmd/dep"
    Name: run
    PrependShell: true
  From:
    Image: registry.timmertech.nl/docker/alpine-glibc:latest
  Name: ""
  Platform: ""
  SourceCode: FROM registry.timmertech.nl/docker/alpine-glibc:latest
