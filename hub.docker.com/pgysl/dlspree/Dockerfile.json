{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "SourceCode": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04"
      },
      "Commands": [
        {
          "Maintainer": "songlongze",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            },
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TF_VERSION",
              "Value": "1.14"
            },
            {
              "Key": "ANACONDA_VERSION",
              "Value": "\"Anaconda3-2019.07-Linux-x86_64\""
            },
            {
              "Key": "TORCH_URL",
              "Value": "\"torch\""
            },
            {
              "Key": "TORCH_VRISION_URL",
              "Value": "\"torchvision\""
            },
            {
              "Key": "TENSORBOARDX_VERSION",
              "Value": "1.9"
            },
            {
              "Key": "NNI_VERSION",
              "Value": "1.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "buildDeps='wget openssh-server net-tools sudo vim ' \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y $buildDeps \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/run/sshd \u0026\u0026 echo  PermitRootLogin yes \u003e\u003e /etc/ssh/sshd_config \u0026\u0026 echo root:111 | chpasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://repo.anaconda.com/archive/$ANACONDA_VERSION.sh -O ~/anaconda.sh \u0026\u0026 /bin/bash ~/anaconda.sh -b -p /opt/conda \u0026\u0026 rm ~/anaconda.sh \u0026\u0026 ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh  \u0026\u0026 echo \". /opt/conda/etc/profile.d/conda.sh\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir  --upgrade tensorflow-gpu==$TF_VERSION \u0026\u0026 pip install --no-cache-dir --upgrade keras"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir $TORCH_URL \u0026\u0026 pip install --no-cache-dir $TORCH_VRISION_URL"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir autopep8 \u0026\u0026 pip install --no-cache-dir torchsnooper \u0026\u0026 pip install --no-cache-dir pyecharts \u0026\u0026 python3 -m pip --no-cache-dir install  --upgrade nni==$NNI_VERSION \u0026\u0026 pip install tensorboardX==$TENSORBOARDX_VERSION \u0026\u0026 pip install xgboost"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "notebook.json",
            "run.sh",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "pip install jupyter_contrib_nbextensions \u0026\u0026 jupyter contrib nbextension install --system \u0026\u0026 pip install jupyter_nbextensions_configurator \u0026\u0026 jupyter nbextensions_configurator enable --system \u0026\u0026 mkdir /.jupyter \u0026\u0026 mkdir /.jupyter/nbconfig/ \u0026\u0026 mv /tmp/notebook.json /.jupyter/nbconfig/ \u0026\u0026 mkdir /.local \u0026\u0026 chmod 777 /.local"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /workdir \u0026\u0026 chmod 777 /workdir"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/workdir"
        },
        {
          "CmdLine": [
            "useradd -u 65000 --create-home --no-log-init --shell /bin/bash PublicUser \u0026\u0026 adduser PublicUser sudo \u0026\u0026 echo 'PublicUser:111' | chpasswd \u0026\u0026 chown -R PublicUser /home/PublicUser"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "PublicUser"
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "6006",
            "8080",
            "8888"
          ]
        }
      ]
    }
  ]
}