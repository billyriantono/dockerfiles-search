{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "\"3.7.1\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "\"3.4.3\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FFMPEG_VERSION",
              "Value": "\"3.4.1\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NUMPY_VERSION",
              "Value": "\"1.15.4\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_PIP_VERSION",
              "Value": "\"10.0.1\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y     build-essential     cmake     git     curl     wget     unzip     nasm     yasm     openssl     libssl-dev     pkg-config     libswscale-dev     libtbb2     libtbb-dev     libjpeg-dev     libpng-dev     libtiff-dev     libgtk2.0-dev     libavformat-dev     libpq-dev     libffi-dev     lsb-release     libreadline-dev     apt-transport-https     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 buildDeps=' \t\tdpkg-dev \t\ttcl-dev \t\ttk-dev \t' \t\u0026\u0026 apt-get update \u0026\u0026 apt-get install -y $buildDeps --no-install-recommends \t\t\u0026\u0026 wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t\u0026\u0026 wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t\u0026\u0026 mkdir -p /usr/src/python \t\u0026\u0026 tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t\u0026\u0026 rm python.tar.xz \t\t\u0026\u0026 cd /usr/src/python \t\u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t\u0026\u0026 ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t\u0026\u0026 make -j \"$(nproc)\" \t\u0026\u0026 make install \t\u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/bin \t\u0026\u0026 ln -s idle3 idle \t\u0026\u0026 ln -s pydoc3 pydoc \t\u0026\u0026 ln -s python3 python \t\u0026\u0026 ln -s python3-config python-config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install numpy==${NUMPY_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip     \u0026\u0026 unzip ${OPENCV_VERSION}.zip     \u0026\u0026 mkdir /opencv-${OPENCV_VERSION}/cmake_binary     \u0026\u0026 cd /opencv-${OPENCV_VERSION}/cmake_binary     \u0026\u0026 cmake -DBUILD_TIFF=ON              -DBUILD_opencv_java=OFF              -DWITH_CUDA=OFF              -DWITH_OPENGL=OFF              -DWITH_OPENCL=OFF              -DWITH_IPP=ON              -DWITH_TBB=ON              -DWITH_EIGEN=ON              -DWITH_V4L=ON              -DBUILD_TESTS=OFF              -DBUILD_PERF_TESTS=OFF              -DCMAKE_BUILD_TYPE=RELEASE              -DCMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\")              -DPYTHON_EXECUTABLE=$(which python3)              -DPYTHON_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")              -DPYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\")              ..     \u0026\u0026 make install     \u0026\u0026 rm /${OPENCV_VERSION}.zip     \u0026\u0026 rm -r /opencv-${OPENCV_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}