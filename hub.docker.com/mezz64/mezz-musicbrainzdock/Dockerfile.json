{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "linuxserver/baseimage",
      "SourceCode": "FROM linuxserver/baseimage",
      "Platform": "",
      "From": {
        "Image": "linuxserver/baseimage"
      },
      "Commands": [
        {
          "Maintainer": "Sparklyballs \u003csparklyballs@linuxserver.io\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DATA_ROOT",
              "Value": "\"/data\""
            },
            {
              "Key": "PG_MAJOR",
              "Value": "\"9.5\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "LANGUAGE",
              "Value": "\"en_US:en\""
            },
            {
              "Key": "LC_ALL",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "URL_ROOT",
              "Value": "\"ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport\""
            },
            {
              "Key": "PERL5LIB",
              "Value": "\"/app/perl\""
            },
            {
              "Key": "PGCONF",
              "Value": "\"/config\""
            },
            {
              "Key": "APTLIST",
              "Value": "\"build-essential cpanminus git-core libbz2-dev libdb-dev libexpat1-dev libicu-dev libjson-xs-perl liblocal-lib-perl libpq-dev libxml2-dev memcached postgresql-$PG_MAJOR postgresql-client-$PG_MAJOR postgresql-contrib-$PG_MAJOR postgresql-plperl-$PG_MAJOR postgresql-server-dev-$PG_MAJOR python-software-properties redis-server software-properties-common wget\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/lib/postgresql/$PG_MAJOR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MBDATA",
              "Value": "$DATA_ROOT/import"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGDATA",
              "Value": "$DATA_ROOT/dbase"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "defaults/",
            "/defaults/"
          ]
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 \u0026\u0026 echo \"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\" \u003e /etc/apt/sources.list.d/pgdg.list \u0026\u0026 curl -sL https://deb.nodesource.com/setup_0.12 | bash - \u0026\u0026 apt-get install nodejs postgresql-common -qy \u0026\u0026 npm install -g npm@latest \u0026\u0026 sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:chris-lea/redis-server \u0026\u0026 apt-get update -q \u0026\u0026 apt-get install $APTLIST -qy \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone -b production --recursive git://github.com/metabrainz/musicbrainz-server.git /app/musicbrainz \u0026\u0026 cp /defaults/DBDefs.pm /app/musicbrainz/lib/DBDefs.pm \u0026\u0026 mkdir -p $PERL5LIB \u0026\u0026 cd /app/musicbrainz \u0026\u0026 cpanm --installdeps --notest . \u0026\u0026 npm install \u0026\u0026 ./script/compile_resources.sh \u0026\u0026 cd /app/musicbrainz/postgresql-musicbrainz-unaccent \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd /app/musicbrainz/postgresql-musicbrainz-collate \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "init/",
            "/etc/my_init.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "services/",
            "/etc/service/"
          ]
        },
        {
          "CmdLine": [
            "chmod -v +x /etc/service/*/run /etc/my_init.d/*.sh /defaults/update-script.sh \u0026\u0026 sed 's/^loglevel notice/loglevel warning/' -i /etc/redis/redis.conf \u0026\u0026 sed 's/^daemonize yes/daemonize no/' -i /etc/redis/redis.conf \u0026\u0026 sed 's/^bind 127.0.0.1/bind 0.0.0.0/' -i /etc/redis/redis.conf \u0026\u0026 sed 's/^logfile \\/var\\/log\\/redis\\/redis-server.log/logfile \\\"\\\"/' -i /etc/redis/redis.conf \u0026\u0026 sed -i 's#/var/lib/redis#/data/redis#g' /etc/redis/redis.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config",
            "/data"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5000"
          ]
        }
      ]
    }
  ]
}