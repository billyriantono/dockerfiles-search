MetaArgs: null
Stages:
- BaseName: alpine:3.4
  Commands:
  - Env:
    - Key: JAVA_VERSION_MAJOR
      Value: "8"
    - Key: JAVA_VERSION_MINOR
      Value: "131"
    - Key: JAVA_VERSION_BUILD
      Value: "11"
    - Key: JAVA_PACKAGE
      Value: server-jre
    - Key: JAVA_JCE
      Value: standard
    - Key: JAVA_HOME
      Value: /opt/jdk
    - Key: PATH
      Value: ${PATH}:/opt/jdk/bin
    - Key: GLIBC_VERSION
      Value: 2.23-r3
    - Key: LANG
      Value: C.UTF-8
    - Key: XMAGE_DOCKER_SERVER_ADDRESS
      Value: '"0.0.0.0"'
    - Key: XMAGE_DOCKER_PORT
      Value: '"17171"'
    - Key: XMAGE_DOCKER_SEONDARY_BIND_PORT
      Value: '"17179"'
    - Key: XMAGE_DOCKER_MAX_SECONDS_IDLE
      Value: '"600"'
    - Key: XMAGE_DOCKER_AUTHENTICATION_ACTIVATED
      Value: '"false"'
    - Key: XMAGE_DOCKER_SERVER_NAME
      Value: '"mage-server"'
    Name: env
  - CmdLine:
    - 'set -ex &&     apk upgrade --update &&     apk add --update libstdc++ curl
      ca-certificates bash jq &&     for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION}
      glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk
      -o /tmp/${pkg}.apk; done &&     apk add --allow-untrusted /tmp/*.apk &&     rm
      -v /tmp/*.apk &&     ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX
      --charmap UTF-8 C.UTF-8 || true ) &&     echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh
      &&     /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib &&     mkdir
      /opt &&     curl -jksSLH "Cookie: oraclelicense=accept-securebackup-cookie"
      -o /tmp/java.tar.gz       http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/d54c1d3a095b4ff2b6607d096fa80163/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz
      &&     gunzip /tmp/java.tar.gz &&     tar -C /opt -xf /tmp/java.tar &&     ln
      -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk &&     find
      /opt/jdk/ -maxdepth 1 -mindepth 1 | grep -v jre | xargs rm -rf &&     cd /opt/jdk/
      && ln -s ./jre/bin ./bin &&     if [ "${JAVA_JCE}" == "unlimited" ]; then echo
      "Installing Unlimited JCE policy" &&       curl -jksSLH "Cookie: oraclelicense=accept-securebackup-cookie"
      -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip         http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip
      &&       cd /tmp && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip &&       cp
      -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security/;     fi &&     sed
      -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security
      &&     apk del glibc-i18n &&     rm -rf /opt/jdk/jre/plugin            /opt/jdk/jre/bin/javaws            /opt/jdk/jre/bin/jjs            /opt/jdk/jre/bin/orbd            /opt/jdk/jre/bin/pack200            /opt/jdk/jre/bin/policytool            /opt/jdk/jre/bin/rmid            /opt/jdk/jre/bin/rmiregistry            /opt/jdk/jre/bin/servertool            /opt/jdk/jre/bin/tnameserv            /opt/jdk/jre/bin/unpack200            /opt/jdk/jre/lib/javaws.jar            /opt/jdk/jre/lib/deploy*            /opt/jdk/jre/lib/desktop            /opt/jdk/jre/lib/*javafx*            /opt/jdk/jre/lib/*jfx*            /opt/jdk/jre/lib/amd64/libdecora_sse.so            /opt/jdk/jre/lib/amd64/libprism_*.so            /opt/jdk/jre/lib/amd64/libfxplugins.so            /opt/jdk/jre/lib/amd64/libglass.so            /opt/jdk/jre/lib/amd64/libgstreamer-lite.so            /opt/jdk/jre/lib/amd64/libjavafx*.so            /opt/jdk/jre/lib/amd64/libjfx*.so            /opt/jdk/jre/lib/ext/jfxrt.jar            /opt/jdk/jre/lib/ext/nashorn.jar            /opt/jdk/jre/lib/oblique-fonts            /opt/jdk/jre/lib/plugin.jar            /tmp/*
      /var/cache/apk/* &&     echo ''hosts: files mdns4_minimal [NOTFOUND=return]
      dns mdns4'' >> /etc/nsswitch.conf'
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /xmage
  - CmdLine:
    - curl --silent --show-error http://xmage.de/xmage/config.json | jq '.XMage.location'
      | xargs curl -# -L > xmage.zip  && unzip xmage.zip -x "mage-client*"  && rm
      xmage.zip  && apk del curl jq
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dockerStartServer.sh
    - /xmage/mage-server/
  - CmdLine:
    - chmod +x     /xmage/mage-server/startServer.sh     /xmage/mage-server/dockerStartServer.sh
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "17171"
    - "17179"
  - Name: workdir
    Path: /xmage/mage-server
  - CmdLine:
    - ./dockerStartServer.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.4
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.4
