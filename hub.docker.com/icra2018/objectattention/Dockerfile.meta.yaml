MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get -o Acquire::ForceIPv4=true update && apt-get -yq dist-upgrade  && apt-get
      -o Acquire::ForceIPv4=true install -yq --no-install-recommends \tlocales cmake
      git build-essential     python-pip \tpython3-pip python3-setuptools  && apt-get
      clean  && rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --upgrade pip setuptools  && python3 -m pip install jupyterlab==0.35.4
      bash_kernel==0.7.1 tornado==5.1.1  && python3 -m bash_kernel.install
    Name: run
    PrependShell: true
  - Env:
    - Key: SHELL
      Value: /bin/bash
    - Key: NB_USER
      Value: jovyan
    - Key: NB_UID
      Value: "1000"
    - Key: LANG
      Value: en_US.UTF-8
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: HOME
      Value: /home/${NB_USER}
    Name: env
  - CmdLine:
    - "adduser --disabled-password \t--gecos \"Default user\" \t--uid ${NB_UID} \t${NB_USER}"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8888"
  - CmdLine:
    - jupyter
    - lab
    - --no-browser
    - --ip=0.0.0.0
    - --NotebookApp.token=''
    Name: cmd
    PrependShell: false
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends ca-certificates
      apt-transport-https gnupg-curl &&     rm -rf /var/lib/apt/lists/* &&     NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
      &&     NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 &&     apt-key
      adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      &&     apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n
      +5 > cudasign.pub &&     echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum
      -c --strict - && rm cudasign.pub &&     echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64
      /" > /etc/apt/sources.list.d/cuda.list
    Name: run
    PrependShell: true
  - Env:
    - Key: CUDA_VERSION
      Value: 8.0.61
    Name: env
  - Env:
    - Key: CUDA_PKG_VERSION
      Value: 8-0=$CUDA_VERSION-1
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         cuda-nvrtc-$CUDA_PKG_VERSION         cuda-nvgraph-$CUDA_PKG_VERSION         cuda-cusolver-$CUDA_PKG_VERSION         cuda-cublas-8-0=8.0.61.2-1         cuda-cufft-$CUDA_PKG_VERSION         cuda-curand-$CUDA_PKG_VERSION         cuda-cusparse-$CUDA_PKG_VERSION         cuda-npp-$CUDA_PKG_VERSION         cuda-cudart-$CUDA_PKG_VERSION
      &&     ln -s cuda-8.0 /usr/local/cuda &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Labels:
    - Key: com.nvidia.volumes.needed
      Value: '"nvidia_driver"'
    Name: label
  - Labels:
    - Key: com.nvidia.cuda.version
      Value: '"${CUDA_VERSION}"'
    Name: label
  - CmdLine:
    - echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf &&     echo "/usr/local/nvidia/lib64"
      >> /etc/ld.so.conf.d/nvidia.conf
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/nvidia/lib:/usr/local/nvidia/lib64
    Name: env
  - Env:
    - Key: NVIDIA_VISIBLE_DEVICES
      Value: all
    Name: env
  - Env:
    - Key: NVIDIA_DRIVER_CAPABILITIES
      Value: compute,utility
    Name: env
  - Env:
    - Key: NVIDIA_REQUIRE_CUDA
      Value: '"cuda>=8.0"'
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         cuda-core-$CUDA_PKG_VERSION         cuda-misc-headers-$CUDA_PKG_VERSION         cuda-command-line-tools-$CUDA_PKG_VERSION         cuda-nvrtc-dev-$CUDA_PKG_VERSION         cuda-nvml-dev-$CUDA_PKG_VERSION         cuda-nvgraph-dev-$CUDA_PKG_VERSION         cuda-cusolver-dev-$CUDA_PKG_VERSION         cuda-cublas-dev-8-0=8.0.61.2-1         cuda-cufft-dev-$CUDA_PKG_VERSION         cuda-curand-dev-$CUDA_PKG_VERSION         cuda-cusparse-dev-$CUDA_PKG_VERSION         cuda-npp-dev-$CUDA_PKG_VERSION         cuda-cudart-dev-$CUDA_PKG_VERSION         cuda-driver-dev-$CUDA_PKG_VERSION
      &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: LIBRARY_PATH
      Value: /usr/local/cuda/lib64/stubs
    Name: env
  - CmdLine:
    - echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64
      /" > /etc/apt/sources.list.d/nvidia-ml.list
    Name: run
    PrependShell: true
  - Env:
    - Key: CUDNN_VERSION
      Value: 5.1.10
    Name: env
  - Labels:
    - Key: com.nvidia.cudnn.version
      Value: '"${CUDNN_VERSION}"'
    Name: label
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends             libcudnn5=$CUDNN_VERSION-1+cuda8.0             libcudnn5-dev=$CUDNN_VERSION-1+cuda8.0
      &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -o Acquire::ForceIPv4=true update && apt-get -o Acquire::ForceIPv4=true
      install -q -y     dirmngr     gnupg2     lsb-release     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -o Acquire::ForceIPv4=true update && apt-get -o Acquire::ForceIPv4=true
      install --no-install-recommends -y     python-rosdep     python-rosinstall     python-vcstools     python-catkin-tools     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - rosdep init     && rosdep update
    Name: run
    PrependShell: true
  - Env:
    - Key: ROS_DISTRO
      Value: kinetic
    Name: env
  - CmdLine:
    - apt-get -o Acquire::ForceIPv4=true update && apt-get -o Acquire::ForceIPv4=true
      install -y     ros-kinetic-ros-base=1.3.2-0*     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./ros_entrypoint.sh
    - /
  - CmdLine:
    - /ros_entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get -o Acquire::ForceIPv4=true update  && apt-get -o Acquire::ForceIPv4=true
      install -yq --no-install-recommends     python-setuptools     python-dev     python-tk     wget  &&
      apt-get clean  && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip2 install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip2 install      numpy==1.11.0     matplotlib==2.0.0     easydict     Cython==0.26     pyyaml     tensorflow-gpu==1.2     opencv-python     pillow     ipython==5.8.0     ipykernel==4.10.0     tornado==5.1.1
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir ${HOME}/objectattention
    Name: run
    PrependShell: true
  - Chown: 1000:1000
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - ${HOME}/objectattention
  - CmdLine:
    - python2 -m ipykernel install  && cd $HOME/objectattention/rpn_net/util/faster_rcnn_lib  &&
      make
    Name: run
    PrependShell: true
  - Name: user
    User: ${NB_USER}
  - Name: workdir
    Path: ${HOME}/objectattention
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
