{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.5",
      "SourceCode": "FROM alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "alpine:3.5"
      },
      "Commands": [
        {
          "Maintainer": "David Fernandez \u003cdfernandez@socialmetrix.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "JAVA_VERSION_MAJOR",
              "Value": "8"
            },
            {
              "Key": "JAVA_VERSION_MINOR",
              "Value": "131"
            },
            {
              "Key": "JAVA_VERSION_BUILD",
              "Value": "11"
            },
            {
              "Key": "JAVA_PACKAGE",
              "Value": "server-jre"
            },
            {
              "Key": "JAVA_JCE",
              "Value": "standard"
            },
            {
              "Key": "JAVA_HOME",
              "Value": "/opt/jdk"
            },
            {
              "Key": "PATH",
              "Value": "${PATH}:/opt/jdk/bin"
            },
            {
              "Key": "GLIBC_VERSION",
              "Value": "2.25-r0"
            },
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk update \u0026\u0026     apk upgrade \u0026\u0026     apk add --update libstdc++ curl ca-certificates bash wget \u0026\u0026     wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub \u0026\u0026     update-ca-certificates \u0026\u0026     for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk; done \u0026\u0026     apk add --allow-untrusted /tmp/*.apk \u0026\u0026     rm -v /tmp/*.apk \u0026\u0026     ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \u0026\u0026     echo \"export LANG=C.UTF-8\" \u003e /etc/profile.d/locale.sh \u0026\u0026     /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \u0026\u0026     mkdir /opt \u0026\u0026     curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz       http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/d54c1d3a095b4ff2b6607d096fa80163/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \u0026\u0026     gunzip /tmp/java.tar.gz \u0026\u0026     tar -C /opt -xf /tmp/java.tar \u0026\u0026     ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \u0026\u0026     find /opt/jdk/ -maxdepth 1 -mindepth 1 | grep -v jre | xargs rm -rf \u0026\u0026     cd /opt/jdk/ \u0026\u0026 ln -s ./jre/bin ./bin \u0026\u0026     if [ \"${JAVA_JCE}\" == \"unlimited\" ]; then echo \"Installing Unlimited JCE policy\" \u0026\u0026       curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip         http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \u0026\u0026       cd /tmp \u0026\u0026 unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \u0026\u0026       cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security/;     fi \u0026\u0026     sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security \u0026\u0026     apk del curl glibc-i18n \u0026\u0026     rm -rf /opt/jdk/jre/plugin            /opt/jdk/jre/bin/javaws            /opt/jdk/jre/bin/jjs            /opt/jdk/jre/bin/orbd            /opt/jdk/jre/bin/pack200            /opt/jdk/jre/bin/policytool            /opt/jdk/jre/bin/rmid            /opt/jdk/jre/bin/rmiregistry            /opt/jdk/jre/bin/servertool            /opt/jdk/jre/bin/tnameserv            /opt/jdk/jre/bin/unpack200            /opt/jdk/jre/lib/javaws.jar            /opt/jdk/jre/lib/deploy*            /opt/jdk/jre/lib/desktop            /opt/jdk/jre/lib/*javafx*            /opt/jdk/jre/lib/*jfx*            /opt/jdk/jre/lib/amd64/libdecora_sse.so            /opt/jdk/jre/lib/amd64/libprism_*.so            /opt/jdk/jre/lib/amd64/libfxplugins.so            /opt/jdk/jre/lib/amd64/libglass.so            /opt/jdk/jre/lib/amd64/libgstreamer-lite.so            /opt/jdk/jre/lib/amd64/libjavafx*.so            /opt/jdk/jre/lib/amd64/libjfx*.so            /opt/jdk/jre/lib/ext/jfxrt.jar            /opt/jdk/jre/lib/ext/nashorn.jar            /opt/jdk/jre/lib/oblique-fonts            /opt/jdk/jre/lib/plugin.jar            /tmp/* /var/cache/apk/* \u0026\u0026     echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' \u003e\u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}