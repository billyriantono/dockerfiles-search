{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Youcef Rahal\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update --fix-missing \u0026\u0026     DEBIAN_FRONTEND=noninteractive apt-get install -y         lubuntu-desktop         xvfb         terminator         vim nano         git gitk git-gui         cmake         qt5-default qtcreator         net-tools         libopencv-dev         python3-pyqt5 \u0026\u0026     apt-get clean \u0026\u0026     apt-get autoremove \u0026\u0026     rm -r /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "conda_dir",
          "Name": "arg",
          "Value": "/opt/anaconda3"
        },
        {
          "Key": "conda_bin_dir",
          "Name": "arg",
          "Value": "${conda_dir}/bin"
        },
        {
          "CmdLine": [
            "curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o ~/anaconda.sh \u0026\u0026     /bin/bash ~/anaconda.sh -b -p ${conda_dir} \u0026\u0026     rm ~/anaconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${conda_bin_dir}:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/bin/bash -c \"    conda update -n base conda \u0026\u0026     pip install --upgrade pip \u0026\u0026     conda create -y -n cpu python=3.6 \u0026\u0026     source activate cpu \u0026\u0026     conda install -y sympy scikit-learn scikit-image pillow flask-socketio plotly nb_conda pyqtgraph seaborn pandas h5py cython \u0026\u0026     conda install -y -c menpo opencv3 \u0026\u0026     conda install -y -c conda-forge eventlet ffmpeg \u0026\u0026     pip install moviepy peakutils jupyterthemes \u0026\u0026     pip install socketIO-client transforms3d \u0026\u0026     conda clean -y -a \u0026\u0026     source deactivate cpu \u0026\u0026         conda create -y -n gpu --clone cpu \u0026\u0026         conda install -y -n cpu tensorflow \u0026\u0026     conda clean -y -a \u0026\u0026         conda install -y -n gpu tensorflow-gpu \u0026\u0026     conda clean -y -a \u0026\u0026         conda install -y -n cpu -c pytorch pytorch torchvision \u0026\u0026     conda clean -y -a\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://nodejs.org/dist/v10.12.0/node-v10.12.0-linux-x64.tar.xz -o node.tar.xz \u0026\u0026     echo 'Unpacking...' \u0026\u0026 tar xf node.tar.xz \u0026\u0026     mv node-* /opt/node \u0026\u0026     rm node.tar.xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o chrome.deb \u0026\u0026     dpkg -i chrome.deb \u0026\u0026     rm chrome.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://az764295.vo.msecnd.net/stable/431ef9da3cf88a7e164f9d33bf62695e07c6c2a9/code_1.28.0-1538751525_amd64.deb -o code.deb \u0026\u0026     dpkg -i code.deb \u0026\u0026     rm code.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://sourceforge.net/projects/virtualgl/files/2.5.2/virtualgl_2.5.2_amd64.deb/download -O vgl.deb \u0026\u0026     dpkg -i vgl.deb \u0026\u0026     rm vgl.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://sourceforge.net/projects/turbovnc/files/2.1.1/turbovnc_2.1.1_amd64.deb/download -O tvnc.deb \u0026\u0026     dpkg -i tvnc.deb \u0026\u0026     rm tvnc.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/novnc/noVNC /opt/noVNC \u0026\u0026     git clone https://github.com/novnc/websockify /opt/noVNC/utils/websockify"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026     apt-get autoremove \u0026\u0026     rm -r /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/node/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.volumes.needed",
              "Value": "\"nvidia_driver\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/nvidia/bin:/opt/VirtualGL/bin:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "QT_X11_NO_MITSHM",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "utils_bin_dir",
          "Name": "arg",
          "Value": "/opt/utils/bin"
        },
        {
          "CmdLine": [
            "sudo mkdir -p ${utils_bin_dir}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${utils_bin_dir}:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "jupyter_run",
          "Name": "arg",
          "Value": "${utils_bin_dir}/jupyter-server-run"
        },
        {
          "CmdLine": [
            "printf \"%s\\n\"            \"#!/bin/bash\"            \"\"            \"jupyter notebook --no-browser --ip='*'\" \u003e ${jupyter_run}     \u0026\u0026     chmod a+x ${jupyter_run}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "jupyter_theme",
          "Name": "arg",
          "Value": "${utils_bin_dir}/jupyter-theme-set"
        },
        {
          "CmdLine": [
            "printf \"%s\\n\"            \"#!/bin/bash\"            \"\"            \"jt -T -cellw 1400 -t chesterish -fs 8 -nfs 6 -tfs 6\" \u003e ${jupyter_theme}     \u0026\u0026     chmod a+x ${jupyter_theme}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash orion"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd sudonopass"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "usermod -a -G sudonopass orion"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"%sudonopass ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "orion"
        },
        {
          "CmdLine": [
            "sudo /opt/VirtualGL/bin/vglserver_config -config +s +f -t"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf \"%s\\n\"            \"alias cp=\\\"cp -i\\\"\"            \"alias mv=\\\"mv -i\\\"\"            \"alias rm=\\\"rm -i\\\"\" \u003e\u003e ~/.bash_aliases"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir ~/.keras \u0026\u0026 echo \"{ \\\"image_dim_ordering\\\": \\\"tf\\\", \\\"epsilon\\\": 1e-07, \\\"backend\\\": \\\"tensorflow\\\", \\\"floatx\\\": \\\"float32\\\" }\" \u003e  ~/.keras/keras.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"source activate cpu\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \"source activate cpu \u0026\u0026 python -c 'import matplotlib.pyplot as plt'\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src"
        },
        {
          "Name": "expose",
          "Ports": [
            "5901"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "6080"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Env": [
            {
              "Key": "startup",
              "Value": "${utils_bin_dir}/startup"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "printf \"%s\\n\"            \"#!/bin/bash\"            \"\"            \"Xvfb :0 -screen 0 1920x1200x24 \u0026\"            \"# Sleep to avoid mixing with the error from the previous command. To be fixed.\"            \"sleep 0.5\"            \"\"            \"if ! [ -z \\${LAUNCH_NOMACHINE+x} ] ; then\"            \"  # Check password status, and set a password if not set\"           \"  PASS_STATUS=\\\"\\$(passwd --status | awk '{print \\$2}')\\\"\"            \"  if [ \\\"\\$PASS_STATUS\\\" != \\\"P\\\" ] ; then\"            \"    echo You have to set a password for user \\'\\$(whoami)\\' in order to use NoMachine:\"            \"    sudo passwd --quiet -d \\$(whoami)\"            \"    passwd\"            \"    if [ \\$? -ne 0 ] ; then\"            \"      exit \\$?\"            \"    fi\"            \"  fi\"            \"  # \\$LAUNCH_NOMACHINE variable is set. Launch the NoMachine server\"            \"  sudo /etc/NX/nxserver --startup\"            \"fi\"            \"\"            \"if ! [ -z \\${LAUNCH_NOVNC+x} ] ; then\"            \"  # \\$LAUNCH_NOVNC variable is set. Launch TurboVNC, and if successful, noVNC\"            \"  /opt/TurboVNC/bin/vncserver\"            \"  if [ \\$? -eq 0 ] ; then\"            \"    /opt/noVNC/utils/launch.sh --vnc localhost:5901;\"            \"  fi\"            \"else\"            \"  # \\$LAUNCH_NOVNC variable is NOT set. Launch TurboVNC only, in foreground mode\"            \"  /opt/TurboVNC/bin/vncserver -fg\"            \"fi\" | sudo tee ${startup} \u003e /dev/null      \u0026\u0026     sudo chmod a+x ${startup}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/opt/utils/bin/startup"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update --fix-missing \u0026\u0026     DEBIAN_FRONTEND=noninteractive apt-get install -y       nmap netcat       default-jdk \u0026\u0026     apt-get clean \u0026\u0026     apt-get autoremove \u0026\u0026     rm -r /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf \"ncat -l 5037 -k -c \\\"nc host.docker.internal 5037\\\"\\n\" | tee /opt/utils/bin/forward_adb \u0026\u0026     chmod a+x /opt/utils/bin/forward_adb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://dl.google.com/dl/android/studio/ide-zips/3.2.0.26/android-studio-ide-181.5014246-linux.zip -o android.zip \u0026\u0026     echo 'Unzipping...' \u0026\u0026 unzip -q android.zip -d /opt \u0026\u0026     rm android.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/android-studio/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "orion"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_HOME",
              "Value": "/home/orion/Android/Sdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/emulator"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -o ~/tools.zip \u0026\u0026     mkdir -p ${ANDROID_HOME} \u0026\u0026     echo 'Unzipping...' \u0026\u0026 unzip -q ~/tools.zip -d ${ANDROID_HOME} \u0026\u0026     rm ~/tools.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yes | ${ANDROID_HOME}/tools/bin/sdkmanager \"platforms;android-27\" \"build-tools;27.0.3\" \"emulator\" \"platform-tools\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf \"%s\\n\"            \"\"            \"if ! pgrep -x \\\"ncat\\\" \u003e /dev/null ; then\"            \"  echo Forwarding container\\'s adb port \\(5037\\) to the host.\"            \"  nohup forward_adb \u0026\u003e /dev/null \u0026\"            \"fi\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8081"
          ]
        }
      ]
    }
  ]
}