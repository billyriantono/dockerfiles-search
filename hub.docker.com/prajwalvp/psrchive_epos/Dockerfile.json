{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "Prajwal Padmanabh \"prajwalvp@mpifr-bonn.mpg.de\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'deb http://us.archive.ubuntu.com/ubuntu trusty main multiverse' \u003e\u003e /etc/apt/sources.list \u0026\u0026     mkdir /var/run/sshd \u0026\u0026     apt-get -y check \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y apt-utils apt-transport-https software-properties-common python-software-properties \u0026\u0026     apt-get -y update --fix-missing \u0026\u0026     apt-get -y upgrade"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get --no-install-recommends -y install     build-essential     autoconf     autotools-dev     automake     autogen     libtool     pkg-config     cmake     csh     gcc     gfortran     wget     git     expect     cvs     libcfitsio-dev     pgplot5     swig2.0     hwloc     python     python-dev     python-pip     libfftw3-3     libfftw3-bin     libfftw3-dev     libfftw3-single3     libx11-dev     libpng12-dev     libpng3     libpnglite-dev     libhdf5-10     libhdf5-cpp-11     libhdf5-dev     libhdf5-serial-dev     libxml2     libxml2-dev     libltdl-dev     gsl-bin     libgsl-dev     vim     python-tk     libgsl2     openssh-server     docker.io     xorg     openbox     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 apt-get -y clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/bin"
        },
        {
          "CmdLine": [
            "rm pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "pip",
            "/usr/bin/pip"
          ]
        },
        {
          "CmdLine": [
            "pip install setuptools -U \u0026\u0026     pip install numpy -U \u0026\u0026     pip install scipy -U \u0026\u0026     pip install uncertainties \u0026\u0026     pip install astropy \u0026\u0026     pip install jupyter \u0026\u0026     pip install mpld3  \u0026\u0026     pip install matplotlib -U"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_DIR",
              "Value": "/usr/lib/pgplot5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_FONT",
              "Value": "/usr/lib/pgplot5/grfont.dat"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_INCLUDES",
              "Value": "/usr/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_BACKGROUND",
              "Value": "white"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_FOREGROUND",
              "Value": "black"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_DEV",
              "Value": "/xs"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "sshd_config",
            "/etc/ssh/sshd_config"
          ]
        },
        {
          "CmdLine": [
            "mkdir /home/psr"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/psr"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PSRHOME",
              "Value": "$HOME/software"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OSTYPE",
              "Value": "linux"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir $PSRHOME"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME"
        },
        {
          "Env": [
            {
              "Key": "CUDA_HOME",
              "Value": "/usr/local/cuda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDA_ROOT",
              "Value": "/usr/local/cuda"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget http://www.atnf.csiro.au/people/pulsar/psrcat/downloads/psrcat_pkg.tar.gz \u0026\u0026     tar -xvf psrcat_pkg.tar.gz -C $PSRHOME \u0026\u0026     wget --no-check-certificate https://www.imcce.fr/content/medias/recherche/equipes/asd/calceph/calceph-2.3.2.tar.gz \u0026\u0026     tar -xvf calceph-2.3.2.tar.gz -C $PSRHOME \u0026\u0026     git clone https://bitbucket.org/psrsoft/tempo2.git \u0026\u0026     git clone git://git.code.sf.net/p/dspsr/code dspsr \u0026\u0026     git clone git://git.code.sf.net/p/psrchive/code psrchive \u0026\u0026     git clone https://github.com/SixByNine/psrxml.git \u0026\u0026     git clone https://github.com/nextgen-astrodata/DAL.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CALCEPH",
              "Value": "$PSRHOME/calceph-2.3.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$CALCEPH/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$CALCEPH/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$CALCEPH/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$CALCEPH"
        },
        {
          "CmdLine": [
            "./configure --prefix=$CALCEPH/install --with-pic --enable-shared --enable-static --enable-fortran --enable-thread \u0026\u0026     make \u0026\u0026     make check \u0026\u0026     make install \u0026\u0026     rm -f ../calceph-2.3.2.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DAL",
              "Value": "$PSRHOME/DAL"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$DAL/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$DAL/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$DAL/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$DAL"
        },
        {
          "CmdLine": [
            "mkdir build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$DAL/build"
        },
        {
          "CmdLine": [
            "cmake .. -DCMAKE_INSTALL_PREFIX=$DAL/install \u0026\u0026     make -j $(nproc) \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PSRCAT_FILE",
              "Value": "$PSRHOME/psrcat_tar/psrcat.db"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRHOME/psrcat_tar"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME/psrcat_tar"
        },
        {
          "CmdLine": [
            "/bin/bash makeit \u0026\u0026     rm -f ../psrcat_pkg.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PSRXML",
              "Value": "$PSRHOME/psrxml"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRXML/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRXML/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRXML/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRXML"
        },
        {
          "CmdLine": [
            "autoreconf --install --warnings=none"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./configure --prefix=$PSRXML/install \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TEMPO2",
              "Value": "$PSRHOME/tempo2/T2runtime"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRHOME/tempo2/T2runtime/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRHOME/tempo2/T2runtime/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRHOME/tempo2/T2runtime/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME/tempo2"
        },
        {
          "CmdLine": [
            "sync \u0026\u0026 perl -pi -e 's/chmod \\+x/#chmod +x/' bootstrap # Get rid of: returned a non-zero code: 126."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./bootstrap \u0026\u0026     ./configure --x-libraries=/usr/lib/x86_64-linux-gnu --with-calceph=$CALCEPH/install/lib --enable-shared --enable-static --with-pic F77=gfortran CPPFLAGS=\"-I\"$CALCEPH\"/install/include\" \u0026\u0026     make -j $(nproc) \u0026\u0026     make install \u0026\u0026     make plugins-install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PSRCHIVE",
              "Value": "$PSRHOME/psrchive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRCHIVE/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRCHIVE/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRCHIVE/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PSRCHIVE/install/lib/python2.7/site-packages"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRCHIVE"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Formats/EPOS",
            "$PSRCHIVE/Base/Formats/EPOS"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Formats/Makefile.am",
            "$PSRCHIVE/Base/Formats/Makefile.am"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Formats/Agent_static.C",
            "$PSRCHIVE/Base/Formats/Agent_static.C"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "configure.ac",
            "$PSRCHIVE/configure.ac"
          ]
        },
        {
          "CmdLine": [
            "./bootstrap \u0026\u0026     ./configure --prefix=$PSRCHIVE/install --x-libraries=/usr/lib/x86_64-linux-gnu --with-psrxml-dir=$PSRXML/install --enable-shared --enable-static F77=gfortran LDFLAGS=\"-L\"$PSRXML\"/install/lib\" LIBS=\"-lpsrxml -lxml2\" \u0026\u0026     make -j $(nproc) \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "echo \"Predictor::default = tempo2\" \u003e\u003e .psrchive.cfg \u0026\u0026     echo \"Predictor::policy = default\" \u003e\u003e .psrchive.cfg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        }
      ]
    }
  ]
}