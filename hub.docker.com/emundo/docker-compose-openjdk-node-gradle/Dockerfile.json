{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:disco",
      "SourceCode": "FROM ubuntu:disco",
      "Platform": "",
      "From": {
        "Image": "ubuntu:disco"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y wget apt-transport-https ca-certificates curl gnupg2 software-properties-common tar git openssl gzip unzip    \u0026\u0026 apt-get autoclean     \u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/apt/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash \u0026\u0026     helm version --client \u0026\u0026     tiller -version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \u0026\u0026     echo \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" | tee -a /etc/apt/sources.list.d/kubernetes.list \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y kubectl     \u0026\u0026 apt-get autoclean     \u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/apt/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "DOCKER",
          "Name": "arg",
          "Value": "18.09.3"
        },
        {
          "CmdLine": [
            "curl https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER}.tgz \u003e docker.tar.gz \u0026\u0026 tar xzvf docker.tar.gz -C /usr/local/bin/ --strip-components=1 \u0026\u0026     rm docker.tar.gz \u0026\u0026     docker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "DOCKER_COMPOSE",
          "Name": "arg",
          "Value": "1.23.2"
        },
        {
          "CmdLine": [
            "curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE}/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose \u0026\u0026     chmod +x /usr/local/bin/docker-compose \u0026\u0026     docker-compose -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" \u0026\u0026     echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y google-cloud-sdk     \u0026\u0026 apt-get autoclean     \u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/apt/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L https://github.com/rancher/rancher-compose/releases/download/v0.12.5/rancher-compose-linux-amd64-v0.12.5.tar.xz | tar xJvf -  --strip-components=2 -C /usr/local/bin/ \u0026\u0026     chmod +x /usr/local/bin/rancher-compose \u0026\u0026     rancher-compose --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "NODE",
          "Name": "arg",
          "Value": "10.x"
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_${NODE} \u003e install.sh \u0026\u0026 chmod +x install.sh \u0026\u0026 ./install.sh \u0026\u0026     apt-get install -y nodejs    \u0026\u0026 apt-get autoclean     \u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/apt/*     \u0026\u0026 rm install.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g npm@latest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "JDK_VERSION",
          "Name": "arg",
          "Value": "8"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends openjdk-${JDK_VERSION}-jdk     \u0026\u0026 apt-get autoclean     \u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/apt/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "GRADLE_VERSION",
          "Name": "arg",
          "Value": "4.10.3"
        },
        {
          "Env": [
            {
              "Key": "GRADLE_HOME",
              "Value": "/opt/gradle"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip     --output-document=gradle.zip \u0026\u0026     unzip gradle.zip \u0026\u0026     rm gradle.zip \u0026\u0026     mv \"gradle-${GRADLE_VERSION}\" \"${GRADLE_HOME}/\" \u0026\u0026     ln --symbolic \"${GRADLE_HOME}/bin/gradle\" /usr/bin/gradle"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "addgroup --gid 1101 rancher \u0026\u0026     addgroup --gid 999 aws \u0026\u0026     useradd -ms /bin/bash emundo \u0026\u0026     adduser emundo sudo \u0026\u0026     usermod -aG 999 emundo \u0026\u0026     usermod -aG 1101 emundo \u0026\u0026     usermod -aG root emundo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "emundo"
        },
        {
          "Name": "workdir",
          "Path": "/home/emundo"
        }
      ]
    }
  ]
}