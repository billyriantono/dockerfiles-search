MetaArgs: null
Stages:
- BaseName: alpine:latest
  Commands:
  - Maintainer: st√©phane BROSSE <stevebrush@gmail.com>
    Name: maintainer
  - Maintainer: Simon Zhou <simon.zhou@gmail.com>
    Name: maintainer
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - patches/
    - /
  - CmdLine:
    - "apk add --no-cache git tzdata &&     git clone -b development --depth 2 https://github.com/domoticz/domoticz.git
      /src/domoticz &&     cd /src/domoticz &&     git fetch --unshallow &&     sed
      -i -e \"s/sys\\/errno.h/errno.h/g\" /src/domoticz/hardware/csocket.cpp &&     sed
      -i -e \"s/sys\\/signal.h/signal.h/g\" /src/domoticz/hardware/serial/impl/unix.cpp
      &&     apk add --no-cache \t\tgit         wget tar xz sudo         build-base
      \        libressl libressl-dev         zlib-dev         curl libcurl curl-dev
      \        protobuf \t\tconfuse-dev doxygen \t\tlibusb-compat libusb-compat-dev
      libusb-dev \t\tmusl-dev         sqlite-dev         lua5.2 lua5.2-dev py-pip
      \t\tnodejs alpine-sdk avahi-compat-libdns_sd         mosquitto-dev \t\tlibftdi1-dev
      libftdi1         python3  python3-dev python-dev  py-pip         udev eudev-dev
      \        coreutils jq bash-completion  \t\tboost boost-dev \t\tboost-system
      \t\tboost-thread \t\teudev-libs \t\topenssh  && \techo \"**** install build
      packages from edge****\" && \tapk add --no-cache --virtual=build-dependencies-edge
      --repository http://dl-3.alpinelinux.org/alpine/edge/main/ \t\tcmake=3.14.5-r0
      && \techo \"**** install runtime packages ****\" && \tpip install paho-mqtt
      && \techo \"**** link libftdi libs ****\" && \tln -s /usr/lib/libftdi1.so /usr/lib/libftdi.so
      && \tln -s /usr/lib/libftdi1.a /usr/lib/libftdi.a && \tln -s /usr/include/libftdi1/ftdi.h
      /usr/include/ftdi.h && \techo \"**** build telldus-core ****\" && \tmkdir -p
      \t\t/tmp/telldus-core && \ttar xf /tmp/patches/telldus-core-2.1.2.tar.gz -C
      \t\t/tmp/telldus-core --strip-components=1 && \tcurl -o /tmp/telldus-core/Doxyfile.in
      -L \t\thttps://raw.githubusercontent.com/telldus/telldus/master/telldus-core/Doxyfile.in
      && \tcp /tmp/patches/Socket_unix.cpp /tmp/telldus-core/common/Socket_unix.cpp
      && \tcp /tmp/patches/ConnectionListener_unix.cpp /tmp/telldus-core/service/ConnectionListener_unix.cpp
      && \tcp /tmp/patches/CMakeLists.txt /tmp/telldus-core/CMakeLists.txt && \tcd
      /tmp/telldus-core && \tcmake \t\t-DBUILD_TDADMIN=false \t\t-DCMAKE_INSTALL_PREFIX=/tmp/telldus-core
      . && \tmake && \techo \"**** configure telldus core ****\" && \tmv /tmp/telldus-core/client/libtelldus-core.so.2.1.2
      /usr/lib/libtelldus-core.so.2.1.2 && \tmv /tmp/telldus-core/client/telldus-core.h
      /usr/include/telldus-core.h && \tln -s /usr/lib/libtelldus-core.so.2.1.2 /usr/lib/libtelldus-core.so.2
      && \tln -s /usr/lib/libtelldus-core.so.2 /usr/lib/libtelldus-core.so && \techo
      \"**** making open-zware ****\" &&     sed -i -e \"s/sys\\/poll.h/poll.h/g\"
      /usr/include/boost/asio/detail/socket_types.hpp &&     git clone --depth 2 https://github.com/OpenZWave/open-zwave.git
      /src/open-zwave &&     ln -s /src/open-zwave /src/open-zwave-read-only && \tcd
      /src/open-zwave &&     make && \tmake \t\tinstlibdir=usr/lib \t\tpkgconfigdir=\"usr/lib/pkgconfig/\"
      \t\tPREFIX=/usr \t\tsysconfdir=etc/openzwave \t\tinstall && \techo \"**** making
      domoticz ****\" &&     cd /src/domoticz &&     cmake -DBOOST_LIBRARYDIR=/usr/lib/
      \t\t-DBUILD_SHARED_LIBS=True \t\t-DCMAKE_BUILD_TYPE=Release \t\t-DOpenZWave=/usr/lib/libopenzwave.so
      \t\t-DUSE_BUILTIN_LUA=OFF \t\t-DUSE_BUILTIN_MQTT=OFF \t\t-DUSE_BUILTIN_SQLITE=OFF
      \t\t-DUSE_STATIC_BOOST=OFF \t\t-DUSE_STATIC_LIBSTDCXX=OFF \t\t-DUSE_STATIC_OPENZWAVE=OFF
      \t\t-Wno-dev . &&     make &&     rm -rf /src/domoticz/.git &&     rm -rf /src/open-zwave/.git
      &&     pip install beautifulsoup4 &&     apk del git         build-base         cmake
      \        libressl-dev         zlib-dev         curl-dev         boost-dev         sqlite-dev
      \        lua5.2-dev         mosquitto-dev         libusb-compat-dev         eudev-dev
      \        coreutils"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /config
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - run.sh
    - /run.sh
  - CmdLine:
    - chmod +x /run.sh
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "9080"
  - CmdLine:
    - /run.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:latest
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:latest
