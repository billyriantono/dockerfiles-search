{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Maintainer": "Sai Soundararaj \u003csaip@outlook.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "THEANO_VERSION",
          "Name": "arg",
          "Value": "rel-0.8.2"
        },
        {
          "Key": "TENSORFLOW_VERSION",
          "Name": "arg",
          "Value": "0.12.1"
        },
        {
          "Key": "TENSORFLOW_ARCH",
          "Name": "arg",
          "Value": "cpu"
        },
        {
          "Key": "KERAS_VERSION",
          "Name": "arg",
          "Value": "1.2.0"
        },
        {
          "Key": "LASAGNE_VERSION",
          "Name": "arg",
          "Value": "v0.1"
        },
        {
          "Key": "TORCH_VERSION",
          "Name": "arg",
          "Value": "latest"
        },
        {
          "Key": "CAFFE_VERSION",
          "Name": "arg",
          "Value": "master"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \t\tbc \t\tbuild-essential \t\tcmake \t\tcurl \t\tg++ \t\tgfortran \t\tgit \t\tlibffi-dev \t\tlibfreetype6-dev \t\tlibhdf5-dev \t\tlibjpeg-dev \t\tliblcms2-dev \t\tlibopenblas-dev \t\tliblapack-dev \t\tlibopenjpeg2 \t\tlibpng12-dev \t\tlibssl-dev \t\tlibtiff5-dev \t\tlibwebp-dev \t\tlibzmq3-dev \t\tnano \t\tpkg-config \t\tpython-dev \t\tsoftware-properties-common \t\tunzip \t\tvim \t\twget \t\tzlib1g-dev \t\tqt5-default \t\tlibvtk6-dev \t\tzlib1g-dev \t\tlibjpeg-dev \t\tlibwebp-dev \t\tlibpng-dev \t\tlibtiff5-dev \t\tlibjasper-dev \t\tlibopenexr-dev \t\tlibgdal-dev \t\tlibdc1394-22-dev \t\tlibavcodec-dev \t\tlibavformat-dev \t\tlibswscale-dev \t\tlibtheora-dev \t\tlibvorbis-dev \t\tlibxvidcore-dev \t\tlibx264-dev \t\tyasm \t\tlibopencore-amrnb-dev \t\tlibopencore-amrwb-dev \t\tlibv4l-dev \t\tlibxine2-dev \t\tlibtbb-dev \t\tlibeigen3-dev \t\tpython-dev \t\tpython-tk \t\tpython-numpy \t\tpython3-dev \t\tpython3-pip \t\tpython3-tk \t\tpython3-numpy \t\tant \t\tdefault-jdk \t\tdoxygen \t\t\u0026\u0026 \tapt-get clean \u0026\u0026 \tapt-get autoremove \u0026\u0026 \trm -rf /var/lib/apt/lists/* \u0026\u0026 \tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026 \tpython get-pip.py \u0026\u0026 \trm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install \t\tpyopenssl \t\tndg-httpsclient \t\tpyasn1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \t\tpython-numpy \t\tpython-scipy \t\tpython-nose \t\tpython-h5py \t\tpython-skimage \t\tpython-matplotlib \t\tpython-pandas \t\tpython-sklearn \t\tpython-sympy \t\t\u0026\u0026 \tapt-get clean \u0026\u0026 \tapt-get autoremove \u0026\u0026 \trm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --upgrade ipython \u0026\u0026 \tpip --no-cache-dir install \t\tCython \t\tipykernel \t\tjupyter \t\tpath.py \t\tPillow \t\tpygments \t\tsix \t\tsphinx \t\twheel \t\tzmq \t\t\u0026\u0026 \tpython -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install \thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \t\tlibboost-all-dev \t\tlibgflags-dev \t\tlibgoogle-glog-dev \t\tlibhdf5-serial-dev \t\tlibleveldb-dev \t\tliblmdb-dev \t\tlibopencv-dev \t\tlibprotobuf-dev \t\tlibsnappy-dev \t\tprotobuf-compiler \t\t\u0026\u0026 \tapt-get clean \u0026\u0026 \tapt-get autoremove \u0026\u0026 \trm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe \u0026\u0026 \tcd /root/caffe \u0026\u0026 \tcat python/requirements.txt | xargs -n1 pip install \u0026\u0026 \tmkdir build \u0026\u0026 cd build \u0026\u0026 \tcmake -DCPU_ONLY=1 -DBLAS=Open .. \u0026\u0026 \tmake -j\"$(nproc)\" all \u0026\u0026 \tmake install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CAFFE_ROOT",
              "Value": "/root/caffe"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYCAFFE_ROOT",
              "Value": "$CAFFE_ROOT/python"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PYCAFFE_ROOT:$PYTHONPATH"
            },
            {
              "Key": "PATH",
              "Value": "$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$CAFFE_ROOT/build/lib\" \u003e\u003e /etc/ld.so.conf.d/caffe.conf \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} \u0026\u0026 \t\techo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \t\t\\n[lib]\\ncnmem=0.95 \t\t\\n[nvcc]\\nfastmath=True \t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \t\t\\n[DebugMode]\\ncheck_finite=1\" \t\u003e /root/.theanorc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/torch/distro.git /root/torch --recursive \u0026\u0026 \tcd /root/torch \u0026\u0026 \tbash install-deps \u0026\u0026 \tyes no | ./install.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LUA_PATH",
              "Value": "'/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'"
            },
            {
              "Key": "LUA_CPATH",
              "Value": "'/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'"
            },
            {
              "Key": "PATH",
              "Value": "/root/torch/install/bin:$PATH"
            },
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/root/torch/install/lib:$LD_LIBRARY_PATH"
            },
            {
              "Key": "DYLD_LIBRARY_PATH",
              "Value": "/root/torch/install/lib:$DYLD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LUA_CPATH",
              "Value": "'/root/torch/install/lib/?.so;'$LUA_CPATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "luarocks install nn \u0026\u0026     luarocks install loadcaffe \u0026\u0026 \t\tcd /root \u0026\u0026 git clone https://github.com/facebook/iTorch.git \u0026\u0026 \tcd iTorch \u0026\u0026 \tluarocks make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv \u0026\u0026 \tcd /root/opencv \u0026\u0026 \tmkdir build \u0026\u0026 \tcd build \u0026\u0026 \tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. \u0026\u0026 \tmake -j\"$(nproc)\"  \u0026\u0026 \tmake install \u0026\u0026 \tldconfig \u0026\u0026 \techo 'ln /dev/null /dev/raw1394' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install html5lib \tspry \ttornado \tbeautifulsoup4 \tpika \tdask[complete] \tpandas-summary \tmatplotlib \tbokeh \tholoviews \ttqdm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --recursive https://github.com/dmlc/xgboost \u0026\u0026     cd xgboost \u0026\u0026     make -j4 \u0026\u0026     cd python-package; python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --recursive https://github.com/bokeh/datashader.git;cd datashader;pip install -e .;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/root/.jupyter/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run_jupyter.sh",
            "/root/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "6006",
            "9912"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/root\""
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}