{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.5",
      "SourceCode": "FROM alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "alpine:3.5"
      },
      "Commands": [
        {
          "Maintainer": "mail@racktear.com",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "addgroup -S tarantool     \u0026\u0026 adduser -S -G tarantool tarantool     \u0026\u0026 apk add --no-cache 'su-exec\u003e=0.2'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TARANTOOL_VERSION",
              "Value": "2.3.0-275-g06aeb7687"
            },
            {
              "Key": "TARANTOOL_DOWNLOAD_URL",
              "Value": "https://github.com/tarantool/tarantool.git"
            },
            {
              "Key": "GPERFTOOLS_REPO",
              "Value": "https://github.com/gperftools/gperftools.git"
            },
            {
              "Key": "GPERFTOOLS_TAG",
              "Value": "gperftools-2.5"
            },
            {
              "Key": "LUAROCK_VSHARD_VERSION",
              "Value": "0.1.14"
            },
            {
              "Key": "LUAROCK_AVRO_SCHEMA_VERSION",
              "Value": "2.0.1"
            },
            {
              "Key": "LUAROCK_EXPERATIOND_VERSION",
              "Value": "1.0.1"
            },
            {
              "Key": "LUAROCK_QUEUE_VERSION",
              "Value": "1.0.2"
            },
            {
              "Key": "LUAROCK_CONNPOOL_VERSION",
              "Value": "1.1.1"
            },
            {
              "Key": "LUAROCK_HTTP_VERSION",
              "Value": "1.0.1"
            },
            {
              "Key": "LUAROCK_MEMCACHED_VERSION",
              "Value": "1.0.0"
            },
            {
              "Key": "LUAROCK_TARANTOOL_PG_VERSION",
              "Value": "2.0.1"
            },
            {
              "Key": "LUAROCK_TARANTOOL_MYSQL_VERSION",
              "Value": "2.0.1"
            },
            {
              "Key": "LUAROCK_TARANTOOL_MQTT_VERSION",
              "Value": "1.2.1"
            },
            {
              "Key": "LUAROCK_TARANTOOL_GIS_VERSION",
              "Value": "1.0.0"
            },
            {
              "Key": "LUAROCK_TARANTOOL_PROMETHEUS_VERSION",
              "Value": "1.0.0"
            },
            {
              "Key": "LUAROCK_TARANTOOL_GPERFTOOLS_VERSION",
              "Value": "1.0.1"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gperftools_alpine.diff",
            "/"
          ]
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 apk add --no-cache --virtual .run-deps         libstdc++         readline         openssl         yaml         lz4         binutils         ncurses         libgomp         lua         tar         zip         zlib         libunwind         icu         ca-certificates     \u0026\u0026 apk add --no-cache --virtual .build-deps         gcc         g++         cmake         file         readline-dev         openssl-dev         yaml-dev         lz4-dev         zlib-dev         binutils-dev         ncurses-dev         musl-dev         make         git         libunwind-dev         autoconf         automake         libtool         linux-headers         go         icu-dev         wget     \u0026\u0026 : \"---------- gperftools ----------\"     \u0026\u0026 mkdir -p /usr/src/gperftools     \u0026\u0026 git clone \"$GPERFTOOLS_REPO\" /usr/src/gperftools     \u0026\u0026 git -C /usr/src/gperftools checkout \"$GPERFTOOLS_TAG\"     \u0026\u0026 (cd /usr/src/gperftools;         patch -p1 \u003c /gperftools_alpine.diff;         rm /gperftools_alpine.diff;         ./autogen.sh;         ./configure;         make;         cp .libs/libprofiler.so* /usr/local/lib;)     \u0026\u0026 (GOPATH=/usr/src/go go get github.com/google/pprof;         cp /usr/src/go/bin/pprof /usr/local/bin)     \u0026\u0026 : \"---------- tarantool ----------\"     \u0026\u0026 mkdir -p /usr/src/tarantool     \u0026\u0026 git clone \"$TARANTOOL_DOWNLOAD_URL\" /usr/src/tarantool     \u0026\u0026 git -C /usr/src/tarantool checkout \"$TARANTOOL_VERSION\"     \u0026\u0026 git -C /usr/src/tarantool submodule update --init --recursive     \u0026\u0026 (cd /usr/src/tarantool;        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo             -DENABLE_BUNDLED_LIBYAML:BOOL=ON             -DENABLE_BACKTRACE:BOOL=ON             -DENABLE_DIST:BOOL=ON             .)     \u0026\u0026 make -C /usr/src/tarantool -j    \u0026\u0026 make -C /usr/src/tarantool install     \u0026\u0026 make -C /usr/src/tarantool clean     \u0026\u0026 rm -rf /usr/src/tarantool     \u0026\u0026 rm -rf /usr/src/gperftools     \u0026\u0026 rm -rf /usr/src/go     \u0026\u0026 : \"---------- remove build deps ----------\"     \u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 apk add --no-cache --virtual .run-deps         mariadb-client-libs         libpq         cyrus-sasl         mosquitto-libs         libev     \u0026\u0026 apk add --no-cache --virtual .build-deps         git         cmake         make         coreutils         gcc         g++         postgresql-dev         musl-dev         cyrus-sasl-dev         mosquitto-dev         libev-dev         wget         unzip     \u0026\u0026 mkdir -p /rocks     \u0026\u0026 : \"---------- proj (for gis module) ----------\"     \u0026\u0026 wget -O proj.tar.gz http://download.osgeo.org/proj/proj-4.9.3.tar.gz     \u0026\u0026 mkdir -p /usr/src/proj     \u0026\u0026 tar -xzf proj.tar.gz -C /usr/src/proj --strip-components=1     \u0026\u0026 (cd /usr/src/proj;         ./configure;         make;         make install)     \u0026\u0026 rm -r /usr/src/proj     \u0026\u0026 rm -rf /usr/src/proj     \u0026\u0026 rm -rf /proj.tar.gz     \u0026\u0026 : \"---------- geos (for gis module) ----------\"     \u0026\u0026 wget -O geos.tar.bz2 http://download.osgeo.org/geos/geos-3.6.0.tar.bz2     \u0026\u0026 mkdir -p /usr/src/geos     \u0026\u0026 tar -xjf geos.tar.bz2 -C /usr/src/geos --strip-components=1     \u0026\u0026 (cd /usr/src/geos;         ./configure;         make;         make install)     \u0026\u0026 rm -r /usr/src/geos     \u0026\u0026 rm -rf /usr/src/geos     \u0026\u0026 rm -rf /geos.tar.bz2     \u0026\u0026 : \"---------- luarocks ----------\"     \u0026\u0026 cd /     \u0026\u0026 : \"ldoc\"     \u0026\u0026 tarantoolctl rocks install ldoc --server=http://rocks.moonscript.org     \u0026\u0026 : \"lua-term\"     \u0026\u0026 tarantoolctl rocks install lua-term     \u0026\u0026 : \"avro\"     \u0026\u0026 tarantoolctl rocks install avro-schema $LUAROCK_AVRO_SCHEMA_VERSION     \u0026\u0026 : \"expirationd\"     \u0026\u0026 tarantoolctl rocks install expirationd $LUAROCK_EXPERATIOND_VERSION     \u0026\u0026 : \"queue\"     \u0026\u0026 tarantoolctl rocks install queue $LUAROCK_QUEUE_VERSION     \u0026\u0026 : \"connpool\"     \u0026\u0026 tarantoolctl rocks install connpool $LUAROCK_CONNPOOL_VERSION     \u0026\u0026 : \"vshard\"     \u0026\u0026 tarantoolctl rocks install vshard $LUAROCK_VSHARD_VERSION     \u0026\u0026 : \"http\"     \u0026\u0026 tarantoolctl rocks install http $LUAROCK_HTTP_VERSION     \u0026\u0026 : \"pg\"     \u0026\u0026 tarantoolctl rocks install pg $LUAROCK_TARANTOOL_PG_VERSION     \u0026\u0026 : \"mysql\"     \u0026\u0026 tarantoolctl rocks install mysql $LUAROCK_TARANTOOL_MYSQL_VERSION     \u0026\u0026 : \"memcached\"     \u0026\u0026 tarantoolctl rocks install memcached $LUAROCK_MEMCACHED_VERSION     \u0026\u0026 : \"prometheus\"     \u0026\u0026 tarantoolctl rocks install prometheus $LUAROCK_TARANTOOL_PROMETHEUS_VERSION     \u0026\u0026 : \"mqtt\"     \u0026\u0026 tarantoolctl rocks install mqtt $LUAROCK_TARANTOOL_MQTT_VERSION     \u0026\u0026 : \"gis\"     \u0026\u0026 tarantoolctl rocks install gis $LUAROCK_TARANTOOL_GIS_VERSION     \u0026\u0026 : \"gperftools\"     \u0026\u0026 tarantoolctl rocks install gperftools $LUAROCK_TARANTOOL_GPERFTOOLS_VERSION     \u0026\u0026 : \"---------- remove build deps ----------\"     \u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/lib/tarantool     \u0026\u0026 chown tarantool:tarantool /var/lib/tarantool     \u0026\u0026 mkdir -p /opt/tarantool     \u0026\u0026 chown tarantool:tarantool /opt/tarantool     \u0026\u0026 mkdir -p /var/run/tarantool     \u0026\u0026 chown tarantool:tarantool /var/run/tarantool     \u0026\u0026 mkdir /etc/tarantool     \u0026\u0026 chown tarantool:tarantool /etc/tarantool"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/tarantool"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/tarantool"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tarantool-entrypoint.lua",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tarantool_set_config.lua",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "console",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tarantool_is_up",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tarantool.default",
            "/usr/local/etc/default/tarantool"
          ]
        },
        {
          "CmdLine": [
            "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Health": {
            "Test": [
              "CMD-SHELL",
              "tarantool_is_up"
            ]
          },
          "Name": "healthcheck"
        },
        {
          "Name": "expose",
          "Ports": [
            "3301"
          ]
        },
        {
          "CmdLine": [
            "tarantool"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}