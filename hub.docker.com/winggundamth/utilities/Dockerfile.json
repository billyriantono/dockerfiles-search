{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "winggundamth/ubuntu-base:xenial",
      "SourceCode": "FROM winggundamth/ubuntu-base:xenial",
      "Platform": "",
      "From": {
        "Image": "winggundamth/ubuntu-base:xenial"
      },
      "Commands": [
        {
          "Maintainer": "Jirayut Nimsaeng \u003cw [at] winginfotech.net\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "FROM_BASE",
              "Value": "xenial-20160809"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "APT_CACHER_NG",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DEVPI_SERVER",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "ANSIBLE_HOST_KEY_CHECKING",
              "Value": "False"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/python-requirements.txt",
            "/root/python-requirements.txt"
          ]
        },
        {
          "CmdLine": [
            "[ -n \"$APT_CACHER_NG\" ] \u0026\u0026       echo \"Acquire::http::Proxy \\\"$APT_CACHER_NG\\\";\"       \u003e /etc/apt/apt.conf.d/11proxy || true;     [ -n \"$DEVPI_SERVER\" ] \u0026\u0026       mkdir -p ~/.pip \u0026\u0026       echo \"[global]\\nindex-url = $DEVPI_SERVER\\ntrusted-host = $(echo $DEVPI_SERVER | awk -F/ '{print $3}' | awk -F: '{print $1}')\\n\" \u003e\u003e ~/.pip/pip.conf || true;     apt-get update \u0026\u0026     apt-get install -y vim socat python python-dev curl wget git build-essential sshpass \u0026\u0026     curl https://bootstrap.pypa.io/get-pip.py | python \u0026\u0026     apt-get install -y libssl-dev libffi-dev \u0026\u0026     pip install -r /root/python-requirements.txt \u0026\u0026     wget -O /usr/local/bin/docker.tgz       https://get.docker.com/builds/Linux/x86_64/docker-1.12.1.tgz \u0026\u0026     wget -O /usr/local/bin/docker-compose       https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` \u0026\u0026     wget -O /usr/local/bin/docker-machine       https://github.com/docker/machine/releases/download/v0.8.1/docker-machine-`uname -s`-`uname -m` \u0026\u0026     tar xvfz /usr/local/bin/docker.tgz -C /usr/local/bin/ --strip=1 \u0026\u0026     chmod +x /usr/local/bin/docker-compose /usr/local/bin/docker-machine \u0026\u0026     apt-get remove --purge --auto-remove -y       build-essential ifupdown iproute2 isc-dhcp-client isc-dhcp-common       libatm1 libisc-export160 libmnl0 libxtables11 manpages netbase       python-dev libssl-dev libffi-dev \u0026\u0026     apt-get -y autoremove \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /usr/lib/x86_64-linux-gnu/libfakeroot /var/lib/apt/lists/*       /etc/apt/apt.conf.d/11proxy /root/.cache /root/.pip       /root/python-requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/ansible \u0026\u0026     echo '[ssh_connection]' \u003e\u003e /etc/ansible/ansible.cfg \u0026\u0026     echo 'ssh_args =' \u003e\u003e /etc/ansible/ansible.cfg \u0026\u0026     PYTHON_LIB_PATH=$(echo 'import os; from ansible.playbook import play_context; print os.path.dirname(play_context.__file__);' | python -) \u0026\u0026     rm $PYTHON_LIB_PATH/play_context.pyc \u0026\u0026     sed -i '417,418 s/^/#/'       $PYTHON_LIB_PATH/play_context.py \u0026\u0026     PYTHON_LIB_PATH=$(echo 'import os; from ansible.plugins.connection import docker; print os.path.dirname(docker.__file__);' | python -) \u0026\u0026     rm $PYTHON_LIB_PATH/docker.pyc \u0026\u0026     wget -O $PYTHON_LIB_PATH/docker.py       https://raw.githubusercontent.com/ansible/ansible/a4785c2691290df6047da5294632a8c428e67476/lib/ansible/plugins/connection/docker.py \u0026\u0026     PYTHON_LIB_PATH=$(echo 'import os; from ansible.module_utils import docker_common; print os.path.dirname(docker_common.__file__);' | python -) \u0026\u0026     rm $PYTHON_LIB_PATH/docker_common.pyc \u0026\u0026     wget -O $PYTHON_LIB_PATH/docker_common.py       https://raw.githubusercontent.com/ansible/ansible/39aa740531f171a557e8604babd493793d63323e/lib/ansible/module_utils/docker_common.py \u0026\u0026     PYTHON_LIB_PATH=$(echo 'import os; from ansible.modules.core.cloud.docker import docker_container; print os.path.dirname(docker_container.__file__);' | python -) \u0026\u0026     rm $PYTHON_LIB_PATH/docker_container.pyc \u0026\u0026     wget -O $PYTHON_LIB_PATH/docker_container.py       https://raw.githubusercontent.com/ansible/ansible-modules-core/de0122fdaf5975cf2df87fc36b059c74032396e6/cloud/docker/docker_container.py"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}