{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "python:3.7-slim-buster",
      "SourceCode": "FROM python:3.7-slim-buster",
      "Platform": "",
      "From": {
        "Image": "python:3.7-slim-buster"
      },
      "Commands": [
        {
          "CmdLine": [
            "groupadd -r reload \u0026\u0026 useradd -r -g reload reload"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PIP_NO_CACHE_DIR",
              "Value": "off"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIP_DISABLE_PIP_VERSION_CHECK",
              "Value": "on"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export GOSU_VERSION=1.11     \u0026\u0026 export TINI_VERSION=0.18.0          \u0026\u0026 fetchDeps=\"         dirmngr         gnupg         wget     \"     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends $fetchDeps \u0026\u0026 rm -rf /var/lib/apt/lists/*         \u0026\u0026 wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\"     \u0026\u0026 wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"      \u0026\u0026 for key in       B42F6819007F00F88E364FD4036A9C25BF357DD4     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu     \u0026\u0026 rm /usr/local/bin/gosu.asc     \u0026\u0026 chmod +x /usr/local/bin/gosu     \u0026\u0026 gosu nobody true         \u0026\u0026 wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\"     \u0026\u0026 wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 for key in       595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini     \u0026\u0026 gpgconf --kill all     \u0026\u0026 rm /usr/local/bin/tini.asc     \u0026\u0026 chmod +x /usr/local/bin/tini     \u0026\u0026 tini -h         \u0026\u0026 rm -r \"$GNUPGHOME\"     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         libmaxminddb-dev     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/src/reload"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/src/reload"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "/usr/src/reload"
          ]
        },
        {
          "CmdLine": [
            "set -ex         \u0026\u0026 buildDeps='         gcc         libc6-dev     '     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y $buildDeps --no-install-recommends \u0026\u0026 rm -rf /var/lib/apt/lists/*         \u0026\u0026 pip install --no-cache-dir -r requirements.txt         \u0026\u0026 apt-get purge -y --auto-remove $buildDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "reload_app",
            "/usr/src/reload/reload_app"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/src/reload"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8000"
          ]
        },
        {
          "CmdLine": [
            "/usr/src/reload/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "mywsgi",
            "reload_app.wsgi:application",
            "0.0.0.0:8000"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}