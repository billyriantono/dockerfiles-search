{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "python:3.7.3",
      "SourceCode": "FROM python:3.7.3",
      "Platform": "",
      "From": {
        "Image": "python:3.7.3"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "PIP_NO_CACHE_DIR",
              "Value": "off"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIP_DISABLE_PIP_VERSION_CHECK",
              "Value": "on"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex         \u0026\u0026 PYTHON_VERSION=2.7.16     \u0026\u0026 wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"     \u0026\u0026 wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 for key in       C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 gpg --batch --verify python.tar.xz.asc python.tar.xz     \u0026\u0026 gpgconf --kill all     \u0026\u0026 rm -rf \"$GNUPGHOME\" python.tar.xz.asc     \u0026\u0026 mkdir -p /usr/src/python     \u0026\u0026 tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz     \u0026\u0026 rm python.tar.xz         \u0026\u0026 cd /usr/src/python     \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"     \u0026\u0026 ./configure         --build=\"$gnuArch\"         --enable-shared         --enable-unicode=ucs4     \u0026\u0026 make -j \"$(nproc)\"     \u0026\u0026 make install     \u0026\u0026 ldconfig         \u0026\u0026 find /usr/local -depth         \\(             \\( -type d -a \\( -name test -o -name tests \\) \\)             -o             \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)         \\) -exec rm -rf '{}' +     \u0026\u0026 rm -rf /usr/src/python         \u0026\u0026 python2 --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex;         wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';         python2 get-pip.py         \"pip==$PYTHON_PIP_VERSION\"     ;     pip2 --version;         find /usr/local -depth         \\(             \\( -type d -a \\( -name test -o -name tests \\) \\)             -o             \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)         \\) -exec rm -rf '{}' +;     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex         \u0026\u0026 cd /usr/local/bin     \u0026\u0026 rm python python-config pip     \u0026\u0026 ln -s python3 python     \u0026\u0026 ln -s pip3 pip     \u0026\u0026 ls -Fla /usr/local/bin/p*     \u0026\u0026 which python  \u0026\u0026 python -V     \u0026\u0026 which python2 \u0026\u0026 python2 -V     \u0026\u0026 which python3 \u0026\u0026 python3 -V     \u0026\u0026 which pip     \u0026\u0026 pip -V     \u0026\u0026 which pip2    \u0026\u0026 pip2 -V     \u0026\u0026 which pip3    \u0026\u0026 pip3 -V"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip2 install virtualenv"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -r freight \u0026\u0026 useradd -r -m -g freight freight"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHONUNBUFFERED",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /usr/src/app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/src/app"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         unzip         zip     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export GOSU_VERSION=1.11     \u0026\u0026 fetchDeps=\"         dirmngr         gnupg         wget     \"     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends $fetchDeps \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\"     \u0026\u0026 wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 for key in       B42F6819007F00F88E364FD4036A9C25BF357DD4     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu     \u0026\u0026 gpgconf --kill all     \u0026\u0026 rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc     \u0026\u0026 chmod +x /usr/local/bin/gosu     \u0026\u0026 gosu nobody true     \u0026\u0026 apt-get purge -y --auto-remove $fetchDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export TINI_VERSION=0.18.0     \u0026\u0026 fetchDeps=\"         dirmngr         gnupg         wget     \"     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends $fetchDeps \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\"     \u0026\u0026 wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 for key in       595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini     \u0026\u0026 gpgconf --kill all     \u0026\u0026 rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc     \u0026\u0026 chmod +x /usr/local/bin/tini     \u0026\u0026 tini -h     \u0026\u0026 apt-get purge -y --auto-remove $fetchDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export NODE_VERSION=8.15.1     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 fetchDeps=\"         dirmngr         gnupg         wget     \"     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends $fetchDeps \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 for key in       9554F04D7259F04124DE6B476D5A82AC7E37093B       94AE36675C464D64BAFA68DD7434390BDBE9B9C5       0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93       FD3A5288F042B6850C66B31F09FE44734EB7990E       71DCFD284A79C3B38668286BC97EC7A07EDE3FC1       DD8F2338BAE7501E3DD5AC78C273792F7D83545D       B9AE9905FFD7803F25714661B63B535A4C206CA9       C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     ; do       gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ;     done     \u0026\u0026 wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\"     \u0026\u0026 wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"     \u0026\u0026 gpg --batch --verify SHASUMS256.txt.asc     \u0026\u0026 gpgconf --kill all     \u0026\u0026 grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c -     \u0026\u0026 tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1     \u0026\u0026 rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc     \u0026\u0026 apt-get purge -y --auto-remove $fetchDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export REDIS_VERSION=4.0.14     \u0026\u0026 export REDIS_DOWNLOAD_SHA256=1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends wget \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 mkdir -p /usr/src/redis     \u0026\u0026 wget -O redis.tar.gz \"http://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz\"     \u0026\u0026 echo \"$REDIS_DOWNLOAD_SHA256 *redis.tar.gz\" | sha256sum -c -     \u0026\u0026 tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1     \u0026\u0026 rm redis.tar.gz     \u0026\u0026 make -C /usr/src/redis     \u0026\u0026 make -C /usr/src/redis install     \u0026\u0026 rm -r /usr/src/redis     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export SENTRY_CLI_VERSION=1.47.2     \u0026\u0026 export SENTRY_CLI_SHA256=2e0d03c6ed8fc2cba8440a296c31c21993862854e836181c36814ca5f6060aac     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends wget \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O /tmp/sentry-cli \"https://github.com/getsentry/sentry-cli/releases/download/$SENTRY_CLI_VERSION/sentry-cli-Linux-x86_64\"     \u0026\u0026 echo \"$SENTRY_CLI_SHA256 /tmp/sentry-cli\" | sha256sum -c -     \u0026\u0026 chmod +x /tmp/sentry-cli     \u0026\u0026 mv /tmp/sentry-cli /usr/local/bin     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export DOCKER_VERSION=18.03.1     \u0026\u0026 export DOCKER_SHA256=0e245c42de8a21799ab11179a4fce43b494ce173a8a2d6567ea6825d6c5265aa     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends wget \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O docker.tgz \"https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION-ce.tgz\"     \u0026\u0026 echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c -     \u0026\u0026 tar -zxvf docker.tgz     \u0026\u0026 mv docker/* /usr/local/bin/     \u0026\u0026 rmdir docker     \u0026\u0026 rm docker.tgz     \u0026\u0026 docker -v     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export GCLOUD_SHA256=727fa0beae4c15b4b821f6df2381fbed8b2277b77fd74ebc721bd483b49541b5     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends wget \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O gcloud.tgz \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-251.0.0-linux-x86_64.tar.gz\"     \u0026\u0026 echo \"${GCLOUD_SHA256} *gcloud.tgz\" | sha256sum -c -     \u0026\u0026 tar -zxvf gcloud.tgz -C /opt     \u0026\u0026 rm gcloud.tgz     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 export KUBECTL_VERSION=v1.11.0     \u0026\u0026 export KUBECTL_SHA256=7fc84102a20aba4c766245714ce9555e3bf5d4116aab38a15b11419070a0fa90     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y --no-install-recommends wget \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 wget -O kubectl \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\"     \u0026\u0026 echo \"${KUBECTL_SHA256} *kubectl\" | sha256sum -c -     \u0026\u0026 install -m 755 kubectl /usr/local/bin/     \u0026\u0026 kubectl --help     \u0026\u0026 apt-get purge -y --auto-remove wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"${PATH}:/opt/google-cloud-sdk/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_HOST",
              "Value": "tcp://docker:2375"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "package.json",
            "/usr/src/app/"
          ]
        },
        {
          "CmdLine": [
            "npm install \u0026\u0026 npm cache clear --force"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "/usr/src/app/"
          ]
        },
        {
          "CmdLine": [
            "pip install -r requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/usr/src/app"
          ]
        },
        {
          "CmdLine": [
            "node_modules/.bin/webpack -p     \u0026\u0026 pip install -e ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "WORKSPACE_ROOT",
              "Value": "/workspace"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $WORKSPACE_ROOT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/src/app/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "5000"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/workspace"
          ]
        },
        {
          "CmdLine": [
            "/usr/src/app/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "web",
            "--no-debug",
            "--addr",
            "0.0.0.0:5000"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}