{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "sentry-cli",
      "BaseName": "getsentry/sentry-cli:1",
      "SourceCode": "FROM getsentry/sentry-cli:1 AS sentry-cli",
      "Platform": "",
      "As": "sentry-cli",
      "From": {
        "Image": "getsentry/sentry-cli:1"
      },
      "Commands": null
    },
    {
      "Name": "symbolicator-build",
      "BaseName": "rust:slim-stretch",
      "SourceCode": "FROM rust:slim-stretch AS symbolicator-build",
      "Platform": "",
      "As": "symbolicator-build",
      "From": {
        "Image": "rust:slim-stretch"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/work"
        },
        {
          "CmdLine": [
            "apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends build-essential libssl-dev pkg-config git zip     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Cargo.toml",
            "Cargo.lock",
            "build.rs",
            "./"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p src     \u0026\u0026 echo \"fn main() {}\" \u003e src/main.rs     \u0026\u0026 RUSTFLAGS=-g cargo build --release --locked"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src",
            "./src/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".git",
            "./.git/"
          ]
        },
        {
          "CmdLine": [
            "git update-index --skip-worktree $(git status | grep deleted | awk '{print $2}')"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "RUSTFLAGS=-g cargo build --release --locked"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "objcopy --only-keep-debug target/release/symbolicator target/release/symbolicator.debug     \u0026\u0026 objcopy --strip-debug --strip-unneeded target/release/symbolicator     \u0026\u0026 objcopy --add-gnu-debuglink target/release/symbolicator target/release/symbolicator.debug     \u0026\u0026 cp ./target/release/symbolicator /usr/local/bin     \u0026\u0026 zip /opt/symbolicator-debug.zip target/release/symbolicator.debug"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "sentry-cli",
          "Name": "copy",
          "SourcesAndDest": [
            "/bin/sentry-cli",
            "/bin/sentry-cli"
          ]
        },
        {
          "CmdLine": [
            "sentry-cli --version     \u0026\u0026 SOURCE_BUNDLE=\"$(sentry-cli difutil bundle-sources ./target/release/symbolicator.debug)\"     \u0026\u0026 mv \"$SOURCE_BUNDLE\" /opt/symbolicator.src.zip"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "debian:stretch-slim",
      "SourceCode": "FROM debian:stretch-slim",
      "Platform": "",
      "From": {
        "Image": "debian:stretch-slim"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends openssl ca-certificates gosu cabextract     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SYMBOLICATOR_UID",
              "Value": "10021"
            },
            {
              "Key": "SYMBOLICATOR_GID",
              "Value": "10021"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd --system symbolicator --gid $SYMBOLICATOR_GID     \u0026\u0026 useradd --system --gid symbolicator --uid $SYMBOLICATOR_UID symbolicator"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "CmdLine": [
            "mkdir /etc/symbolicator \u0026\u0026     chown symbolicator:symbolicator /etc/symbolicator /data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "3021"
          ]
        },
        {
          "Chown": "",
          "From": "symbolicator-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/symbolicator",
            "/bin"
          ]
        },
        {
          "Chown": "",
          "From": "symbolicator-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/opt/symbolicator-debug.zip",
            "/opt/symbolicator.src.zip",
            "/opt/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}