{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "base",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 AS base",
      "Platform": "",
      "As": "base",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "Michael Vonbun \u003cmichael.vonbun@tum.de\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VCS_REF",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "org.label-schema.build-date",
              "Value": "$BUILD_DATE"
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/mvonbun/docker-omnetpp\""
            },
            {
              "Key": "org.label-schema.vcs-ref",
              "Value": "$VCS_REF"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"1.1\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/src/omnetpp/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x;                                           apt-get update -q -y;                             apt-get install -q -y --no-install-recommends         build-essential gcc g++ bison flex        \tlibxml2-dev zlib1g-dev;                       apt-get autoremove -q -y;                         apt-get clean -q -y;                              rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "build",
      "BaseName": "base",
      "SourceCode": "FROM base AS build",
      "Platform": "",
      "As": "build",
      "From": {
        "Stage": {
          "Named": "base",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/usr/local/src"
        },
        {
          "CmdLine": [
            "set -x;                                                 apt-get update -q -y;                                   apt-get install -q -y --no-install-recommends wget;     apt-get autoremove -q -y;                               apt-get clean -q -y;                                    rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --no-check-certificate https://ipfs.omnetpp.org/release/5.4.1/omnetpp-5.4.1-src-core.tgz --output-document=omnetpp.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir omnetpp \u0026\u0026 tar xfz omnetpp.tgz -C omnetpp --strip-components 1 \u0026\u0026 rm omnetpp.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "omnetpp"
        },
        {
          "CmdLine": [
            "sed -i \"/WITH_TKENV=yes/c\\WITH_TKENV=no\" configure.user;     sed -i \"/WITH_QTENV=yes/c\\WITH_QTENV=no\" configure.user;     sed -i \"/PREFER_QTENV=yes/c\\PREFER_QTENV=no\" configure.user;     sed -i \"/WITH_OSG=yes/c\\WITH_OSG=no\" configure.user;     sed -i \"/WITH_OSGEARTH=yes/c\\WITH_OSGEARTH=no\" configure.user;     ./configure \u0026\u0026 make"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "final",
      "BaseName": "base",
      "SourceCode": "FROM base as final",
      "Platform": "",
      "As": "final",
      "From": {
        "Stage": {
          "Named": "base",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/src",
            "/usr/local/src"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/sim"
        }
      ]
    }
  ]
}