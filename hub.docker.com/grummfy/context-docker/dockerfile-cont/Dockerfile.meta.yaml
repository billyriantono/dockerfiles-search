MetaArgs: null
Stages:
- BaseName: python:3.7
  Commands:
  - Env:
    - Key: PYTHONUNBUFFERED
      Value: "1"
    Name: env
  - CmdLine:
    - apt-get update &&   apt-get install -yqq apt-transport-https libsasl2-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb https://deb.nodesource.com/node_10.x stretch main" > /etc/apt/sources.list.d/nodesource.list
      &&   wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key
      add - &&   echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list
      &&   wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&   apt-get
      update &&   apt-get install -yqq nodejs yarn &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r redis && useradd -r -g redis redis
    Name: run
    PrependShell: true
  - Env:
    - Key: REDIS_VERSION
      Value: 5.0.4
    Name: env
  - Env:
    - Key: REDIS_DOWNLOAD_URL
      Value: http://download.redis.io/releases/redis-5.0.4.tar.gz
    Name: env
  - Env:
    - Key: REDIS_DOWNLOAD_SHA
      Value: 3ce9ceff5a23f60913e1573f6dfcd4aa53b42d4a2789e28fa53ec2bd28c987dd
    Name: env
  - CmdLine:
    - "set -ex; \twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA
      *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz
      -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \tgrep -q '^#define
      CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define
      CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep
      -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;
      \tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install;
      \trm -r /usr/src/redis;"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /var/redis && chown redis:redis /var/redis
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd --system --gid 11211 memcache && useradd --system --gid memcache --uid
      11211 memcache
    Name: run
    PrependShell: true
  - Env:
    - Key: MEMCACHED_VERSION
      Value: 1.5.14
    Name: env
  - Env:
    - Key: MEMCACHED_SHA1
      Value: 94592688ae685caf53ab90a821c99f1503bb1018
    Name: env
  - CmdLine:
    - "set -x \t&& wget -O memcached.tar.gz \"https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz\"
      \t&& echo \"$MEMCACHED_SHA1  memcached.tar.gz\" | sha1sum -c - \t&& mkdir -p
      /usr/src/memcached \t&& tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1
      \t&& rm memcached.tar.gz \t&& cd /usr/src/memcached \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-sasl
      \t&& make -j \"$(nproc)\" \t&& make install \t&& cd / && rm -rf /usr/src/memcached
      \t&& memcached -V"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /var/memcache && chown memcache:memcache /var/memcache
    Name: run
    PrependShell: true
  - Env:
    - Key: NGINX_VERSION
      Value: 1.15.12-1~stretch
    Name: env
  - Env:
    - Key: NJS_VERSION
      Value: 1.15.12.0.3.1-1~stretch
    Name: env
  - CmdLine:
    - "set -x     && \tNGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \tfound='';
      \tfor server in \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80
      \t\tpgp.mit.edu \t; do \t\techo \"Fetching GPG key $NGINX_GPGKEY from $server\";
      \t\tapt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys
      \"$NGINX_GPGKEY\" && found=yes && break; \tdone; \ttest -z \"$found\" && echo
      >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \tapt-get remove
      --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/*     && dpkgArch=\"$(dpkg
      --print-architecture)\" \t&& nginxPackages=\" \t\tnginx=${NGINX_VERSION} \t\tnginx-module-xslt=${NGINX_VERSION}
      \t\tnginx-module-geoip=${NGINX_VERSION} \t\tnginx-module-image-filter=${NGINX_VERSION}
      \t\tnginx-module-njs=${NJS_VERSION} \t\"     && echo \"deb https://nginx.org/packages/mainline/debian/
      stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \t&& apt-get update     &&
      apt-get install --no-install-recommends --no-install-suggests -y \t\t\t\t\t\t$nginxPackages
      \t\t\t\t\t\tgettext-base     && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /var/app && chown www-data:www-data /var/app
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/app
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./requirements.txt
    - /var/app/
  - CmdLine:
    - pip install -r requirements.txt
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /var/app/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./nginx.conf
    - /etc/nginx/conf.d/default.conf
  - Name: volume
    Volumes:
    - /var/media
  - Name: volume
    Volumes:
    - /var/site-static
  - Name: volume
    Volumes:
    - /var/app/ui/build
  - Name: volume
    Volumes:
    - /var/app/ui/node_modules
  - Name: volume
    Volumes:
    - /var/logs
  - Name: volume
    Volumes:
    - /var/app/crm/migrations
  - Name: volume
    Volumes:
    - /var/app/extra_apps
  - CmdLine:
    - chown www-data:www-data /var/media
    Name: run
    PrependShell: true
  - CmdLine:
    - ./entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - run
    Name: cmd
    PrependShell: false
  From:
    Image: python:3.7
  Name: ""
  Platform: ""
  SourceCode: FROM python:3.7
