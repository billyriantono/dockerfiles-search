MetaArgs:
- DefaultValue: '"ubuntu:16.04"'
  Key: cpu_base_image
  ProvidedValue: null
  Value: '"ubuntu:16.04"'
- DefaultValue: '"nvidia/cuda:10.0-cudnn7-runtime-ubuntu16.04"'
  Key: base_image
  ProvidedValue: null
  Value: '"nvidia/cuda:10.0-cudnn7-runtime-ubuntu16.04"'
Stages:
- BaseName: $base_image
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Patrick Nguyen <drpng@google.com>"'
    Name: label
  - Key: cpu_base_image
    Name: arg
    Value: '"ubuntu:16.04"'
  - Key: base_image
    Name: arg
    Value: '"nvidia/cuda:10.0-cudnn7-runtime-ubuntu16.04"'
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         aria2         build-essential         curl         gcc-4.8
      g++-4.8 gcc-4.8-base         git         less         libfreetype6-dev         libhdf5-serial-dev         libpng12-dev         libzmq3-dev         lsof         pkg-config         python         python-dev         python-tk         rsync         software-properties-common         sox         unzip         vim         &&     apt-get
      clean &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100 &&    update-alternatives
      --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -O https://bootstrap.pypa.io/get-pip.py &&     python get-pip.py &&     rm
      get-pip.py
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install         Pillow         h5py         ipykernel         jupyter         jupyter_http_over_ws         matplotlib         numpy         pandas         recommonmark         scipy         sklearn         sphinx         sphinx_rtd_theme         &&     python
      -m ipykernel.kernelspec
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter serverextension enable --py jupyter_http_over_ws
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install tf-nightly$(test "$base_image" != "$cpu_base_image"
      && echo "-gpu")
    Name: run
    PrependShell: true
  - Key: bazel_version
    Name: arg
    Value: 0.17.2
  - Env:
    - Key: BAZEL_VERSION
      Value: ${bazel_version}
    Name: env
  - CmdLine:
    - 'mkdir /bazel &&     cd /bazel &&     curl -H "User-Agent: Mozilla/5.0 (X11;
      Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36"
      -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
      &&     curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
      (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt
      https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE &&     chmod
      +x bazel-*.sh &&     ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh &&     cd
      / &&     rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh'
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "6006"
  - Name: expose
    Ports:
    - "8888"
  - Name: workdir
    Path: '"/tmp/lingvo"'
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  From:
    Image: $base_image
  Name: ""
  Platform: ""
  SourceCode: FROM $base_image
