MetaArgs: null
Stages:
- BaseName: debian:stretch
  Commands:
  - Maintainer: Julian Haupt <julian.haupt@hauptmedia.de>
    Name: maintainer
  - Env:
    - Key: BAMBOO_VERSION
      Value: 6.4.0
    Name: env
  - Env:
    - Key: MYSQL_CONNECTOR_J_VERSION
      Value: 5.1.45
    Name: env
  - Env:
    - Key: BAMBOO_USER
      Value: bamboo
    Name: env
  - Env:
    - Key: BAMBOO_HOME
      Value: /var/atlassian/application-data/bamboo
    Name: env
  - Env:
    - Key: BAMBOO_INSTALL_DIR
      Value: /opt/atlassian/bamboo
    Name: env
  - Env:
    - Key: SENCHA_CMD_VERSION
      Value: 6.2.0
    Name: env
  - Env:
    - Key: SENCHA_CMD_FILENAME
      Value: SenchaCmd-${SENCHA_CMD_VERSION}-linux-amd64
    Name: env
  - Env:
    - Key: SENCHA_CMD_DOWNLOAD_URL
      Value: http://cdn.sencha.com/cmd/${SENCHA_CMD_VERSION}/no-jre/${SENCHA_CMD_FILENAME}.sh.zip
    Name: env
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - "apt-get update &&                 apt-get install -y --no-install-recommends
      \                gnupg libio-socket-ssl-perl sendemail libcrypt-ssleay-perl
      curl wget tar xmlstarlet ca-certificates                 git openssh-client
      libapparmor1 libsqlite3-0 libsqlite3-0 rsync ruby build-essential \t\tapt-transport-https
      lsb-release unzip dirmngr libfreetype6 libfontconfig1 libltdl7 maven wget &&
      \t\twget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
      && \t\techo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" |
      tee /etc/apt/sources.list.d/php.list &&                 apt-get update && \t\tapt-get
      install -y --force-yes php7.2-cli php7.2-mysqlnd php7.2-curl php7.2-gd php7.2-sqlite
      php7.2-xml php7.2-dom php7.2-bcmath php7.2-fpm php7.2-gmp php7.2-mbstring php-pear
      &&                 apt-get clean autoclean &&                 apt-get autoremove
      --yes &&                 rm -rf /var/lib/{apt,dpkg,cache,log}/"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee
      /etc/apt/sources.list.d/webupd8team-java.list  &&                 echo "deb-src
      http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee -a /etc/apt/sources.list.d/webupd8team-java.list  &&                 apt-key
      adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886  &&                 apt-get
      update  &&                 echo debconf shared/accepted-oracle-license-v1-1
      select true | debconf-set-selections  &&                 echo debconf shared/accepted-oracle-license-v1-1
      seen true | debconf-set-selections  &&                 DEBIAN_FRONTEND=noninteractive  apt-get
      install -y --force-yes oracle-java8-installer oracle-java8-set-default  &&                 rm
      -rf /var/cache/oracle-jdk8-installer  &&                 apt-get clean  &&                 rm
      -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-oracle
    Name: env
  - CmdLine:
    - export KEYSTORE=$JAVA_HOME/jre/lib/security/cacerts &&         wget -P /tmp/
      https://letsencrypt.org/certs/letsencryptauthorityx1.der &&         wget -P
      /tmp/ https://letsencrypt.org/certs/letsencryptauthorityx2.der &&         wget
      -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.der &&         wget
      -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x2-cross-signed.der &&         wget
      -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.der &&         wget
      -P /tmp/ https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.der &&         keytool
      -trustcacerts -keystore $KEYSTORE -storepass changeit -noprompt -importcert
      -alias isrgrootx1 -file /tmp/letsencryptauthorityx1.der &&         keytool -trustcacerts
      -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias isrgrootx2
      -file /tmp/letsencryptauthorityx2.der &&         keytool -trustcacerts -keystore
      $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx1
      -file /tmp/lets-encrypt-x1-cross-signed.der &&         keytool -trustcacerts
      -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx2
      -file /tmp/lets-encrypt-x2-cross-signed.der &&         keytool -trustcacerts
      -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx3
      -file /tmp/lets-encrypt-x3-cross-signed.der &&         keytool -trustcacerts
      -keystore $KEYSTORE -storepass changeit -noprompt -importcert -alias letsencryptauthorityx4
      -file /tmp/lets-encrypt-x4-cross-signed.der
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
      && \t\techo \"deb http://download.mono-project.com/repo/debian stretch main\"
      >/etc/apt/sources.list.d/mono-official.list && \t\tapt-get update && \t\tapt-get
      install -y mono-devel nuget"
    Name: run
    PrependShell: true
  - CmdLine:
    - "(curl -sL https://deb.nodesource.com/setup_8.x | bash -) && \t\tapt-get update
      &&                 apt-get install -y --no-install-recommends nodejs && \t\tln
      -s /usr/bin/nodejs /usr/local/bin/node &&                 apt-get clean autoclean
      &&                 apt-get autoremove --yes &&                 rm -rf /var/lib/{apt,dpkg,cache,log}/"
    Name: run
    PrependShell: true
  - CmdLine:
    - "npm install -g yarn grunt grunt-cli apidoc && \t\trm -rf /tmp/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p ${BAMBOO_HOME} && \t\tuseradd --home ${BAMBOO_HOME} --shell /bin/bash
      --comment \"Bamboo User\" ${BAMBOO_USER} && \t\tchown -R ${BAMBOO_USER} ${BAMBOO_HOME}
      /opt"
    Name: run
    PrependShell: true
  - Name: user
    User: ${BAMBOO_USER}
  - CmdLine:
    - "curl -L --silent -o /tmp/${SENCHA_CMD_FILENAME}.sh.zip ${SENCHA_CMD_DOWNLOAD_URL}
      && \t\tunzip /tmp/${SENCHA_CMD_FILENAME}.sh.zip -d /tmp && \t\trm /tmp/${SENCHA_CMD_FILENAME}.sh.zip
      && \t\tchmod +x /tmp/SenchaCmd-* && \t\t$(find /tmp -name \"SenchaCmd-*\" -print
      -quit) -dir /opt/SenchaCmd -q && \t\trm -rf /tmp/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p ${BAMBOO_INSTALL_DIR} &&                 curl -L --silent http://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-${BAMBOO_VERSION}.tar.gz
      | tar -xz --strip=1 -C ${BAMBOO_INSTALL_DIR} &&                 echo -e \"\\nbamboo.home=$BAMBOO_HOME\"
      >> \"${BAMBOO_INSTALL_DIR}/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties\"
      && \t\tgit config --global http.sslVerify false"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L --silent http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-${MYSQL_CONNECTOR_J_VERSION}.tar.gz
      | tar -xz --strip=1 -C /tmp &&                 cp /tmp/mysql-connector-java-${MYSQL_CONNECTOR_J_VERSION}-bin.jar
      ${BAMBOO_INSTALL_DIR}/lib &&                 rm -rf /tmp/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - ${BAMBOO_INSTALL_DIR}/bin/
  - Name: expose
    Ports:
    - "8085"
  - Name: expose
    Ports:
    - "54663"
  - Name: workdir
    Path: ${BAMBOO_INSTALL_DIR}
  - Name: user
    User: root:root
  - CmdLine:
    - bin/docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - bin/start-bamboo.sh
    - -fg
    Name: cmd
    PrependShell: false
  From:
    Image: debian:stretch
  Name: ""
  Platform: ""
  SourceCode: "FROM\t\tdebian:stretch"
