MetaArgs: null
Stages:
- BaseName: jenkinsci/jnlp-slave
  Commands:
  - CmdLine:
    - env
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf
      \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick
      \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev
      \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibjpeg-dev
      \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev
      \t\tlibncurses-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev
      \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev
      \t\tmake \t\tpatch \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache
      show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo
      'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev';
      \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: OTP_VERSION
      Value: '"20.1.1"'
    Name: env
  - CmdLine:
    - "set -xe \t&& OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\"
      \t&& OTP_DOWNLOAD_SHA256=\"1f997c0c8aaa6217dcfc1dc0901717438cb2b63d4c20191f0d3d5c1bf61d4d5c\"
      \t&& runtimeDeps='libodbc1 \t\t\tlibsctp1 \t\t\tlibwxgtk3.0' \t&& buildDeps='unixodbc-dev
      \t\t\tlibsctp-dev \t\t\tlibwxgtk3.0-dev' \t&& apt-get update \t&& apt-get install
      -y --no-install-recommends $runtimeDeps \t&& apt-get install -y --no-install-recommends
      $buildDeps \t&& curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \t&& echo
      \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \t&& export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\"
      \t&& mkdir -vp $ERL_TOP \t&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1
      \t&& rm otp-src.tar.gz \t&& ( cd $ERL_TOP \t  && ./otp_build autoconf \t  &&
      gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t  && ./configure
      --build=\"$gnuArch\" \t  && make -j$(nproc) \t  && make install ) \t&& find
      /usr/local -name examples | xargs rm -rf \t&& apt-get purge -y --auto-remove
      $buildDeps \t&& rm -rf $ERL_TOP /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - erl
    Name: cmd
    PrependShell: false
  - Env:
    - Key: REBAR_VERSION
      Value: '"2.6.4"'
    Name: env
  - CmdLine:
    - "set -xe \t&& REBAR_DOWNLOAD_URL=\"https://github.com/rebar/rebar/archive/${REBAR_VERSION}.tar.gz\"
      \t&& REBAR_DOWNLOAD_SHA256=\"577246bafa2eb2b2c3f1d0c157408650446884555bf87901508ce71d5cc0bd07\"
      \t&& mkdir -p /usr/src/rebar-src \t&& curl -fSL -o rebar-src.tar.gz \"$REBAR_DOWNLOAD_URL\"
      \t&& echo \"$REBAR_DOWNLOAD_SHA256 rebar-src.tar.gz\" | sha256sum -c - \t&&
      tar -xzf rebar-src.tar.gz -C /usr/src/rebar-src --strip-components=1 \t&& rm
      rebar-src.tar.gz \t&& cd /usr/src/rebar-src \t&& ./bootstrap \t&& install -v
      ./rebar /usr/local/bin/ \t&& rm -rf /usr/src/rebar-src"
    Name: run
    PrependShell: true
  - Env:
    - Key: REBAR3_VERSION
      Value: '"3.4.4"'
    Name: env
  - CmdLine:
    - "set -xe \t&& REBAR3_DOWNLOAD_URL=\"https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz\"
      \t&& REBAR3_DOWNLOAD_SHA256=\"0f7c860489dc4e4fcdc706a04690f791755870ff0e0582525b8ee9a78e911443\"
      \t&& mkdir -p /usr/src/rebar3-src \t&& curl -fSL -o rebar3-src.tar.gz \"$REBAR3_DOWNLOAD_URL\"
      \t&& echo \"$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz\" | sha256sum -c - \t&&
      tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 \t&&
      rm rebar3-src.tar.gz \t&& cd /usr/src/rebar3-src \t&& HOME=$PWD ./bootstrap
      \t&& install -v ./rebar3 /usr/local/bin/ \t&& rm -rf /usr/src/rebar3-src"
    Name: run
    PrependShell: true
  - Env:
    - Key: ELIXIR_VERSION
      Value: '"v1.5.2"'
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "set -xe \t&& ELIXIR_DOWNLOAD_URL=\"https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION}.tar.gz\"
      \t&& ELIXIR_DOWNLOAD_SHA256=\"7317b7a9d3b5bef2b5cd56de738f2b37fd4111e24efbe71a3e39bea1b702ff6c\"
      \t&& curl -fSL -o elixir-src.tar.gz $ELIXIR_DOWNLOAD_URL \t&& echo \"$ELIXIR_DOWNLOAD_SHA256
      \ elixir-src.tar.gz\" | sha256sum -c - \t&& mkdir -p /usr/local/src/elixir \t&&
      tar -xzC /usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \t&&
      rm elixir-src.tar.gz \t&& cd /usr/local/src/elixir \t&& make install clean"
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd --gid 1000 node   && useradd --uid 1000 --gid node --shell /bin/bash
      --create-home node
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex   && for key in     9554F04D7259F04124DE6B476D5A82AC7E37093B     94AE36675C464D64BAFA68DD7434390BDBE9B9C5     FD3A5288F042B6850C66B31F09FE44734EB7990E     71DCFD284A79C3B38668286BC97EC7A07EDE3FC1     DD8F2338BAE7501E3DD5AC78C273792F7D83545D     B9AE9905FFD7803F25714661B63B535A4C206CA9     C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     56730D5401028683275BD23C23EFEFE93C4CFFFE   ;
      do     gpg --keyserver pgp.mit.edu --recv-keys "$key" ||     gpg --keyserver
      keyserver.pgp.com --recv-keys "$key" ||     gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key" ;   done
    Name: run
    PrependShell: true
  - Env:
    - Key: NPM_CONFIG_LOGLEVEL
      Value: info
    Name: env
  - Env:
    - Key: NODE_VERSION
      Value: 8.6.0
    Name: env
  - CmdLine:
    - ARCH= && dpkgArch="$(dpkg --print-architecture)"   && case "${dpkgArch##*-}"
      in     amd64) ARCH='x64';;     ppc64el) ARCH='ppc64le';;     s390x) ARCH='s390x';;     arm64)
      ARCH='arm64';;     armhf) ARCH='armv7l';;     *) echo "unsupported architecture";
      exit 1 ;;   esac   && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz"   &&
      curl -SLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"   &&
      gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc   && grep "
      node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c -   &&
      tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1   &&
      rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt   &&
      ln -s /usr/local/bin/node /usr/local/bin/nodejs
    Name: run
    PrependShell: true
  - Env:
    - Key: YARN_VERSION
      Value: 1.1.0
    Name: env
  - CmdLine:
    - set -ex   && for key in     6A010C5166006599AA17F08146C2130DFD2497F5   ; do     gpg
      --keyserver pgp.mit.edu --recv-keys "$key" ||     gpg --keyserver keyserver.pgp.com
      --recv-keys "$key" ||     gpg --keyserver ha.pool.sks-keyservers.net --recv-keys
      "$key" ;   done   && curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"   &&
      curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc"   &&
      gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz   &&
      mkdir -p /opt/yarn   && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1   &&
      ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn   && ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg   &&
      rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mix archive.install --force https://github.com/phoenixframework/archives/raw/master/phx_new.ez
    Name: run
    PrependShell: true
  - CmdLine:
    - mix local.hex --force     && mix local.rebar --force
    Name: run
    PrependShell: true
  - Env:
    - Key: CLOUDSDK_CORE_DISABLE_PROMPTS
      Value: "1"
    Name: env
  - Env:
    - Key: PATH
      Value: /opt/google-cloud-sdk/bin:$PATH
    Name: env
  - CmdLine:
    - apt-get update -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y jq
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://sdk.cloud.google.com | bash && mv google-cloud-sdk /opt
    Name: run
    PrependShell: true
  - CmdLine:
    - gcloud components install kubectl
    Name: run
    PrependShell: true
  - Name: user
    User: jenkins
  From:
    Image: jenkinsci/jnlp-slave
  Name: ""
  Platform: ""
  SourceCode: FROM jenkinsci/jnlp-slave
