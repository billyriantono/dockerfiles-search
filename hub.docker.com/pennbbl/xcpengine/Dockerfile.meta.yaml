MetaArgs: null
Stages:
- BaseName: neurodebian:stretch
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: '"noninteractive"'
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - export ND_ENTRYPOINT="/neurodocker/startup.sh"     && apt-get update -qq     &&
      apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip            wget            zlib1g-dev            libnifti-dev            libxml2-dev            libssl-dev            libcurl4-openssl-dev            libssl-dev            libcairo2-dev     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && sed
      -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     && dpkg-reconfigure
      --frontend=noninteractive locales     && update-locale LANG="en_US.UTF-8"     &&
      chmod 777 /opt && chmod a+s /opt     && mkdir -p /neurodocker     && if [ !
      -f "$ND_ENTRYPOINT" ]; then          echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT";     fi     &&
      chmod -R 777 /neurodocker && chmod a+s /neurodocker
    Name: run
    PrependShell: true
  - Env:
    - Key: CONDA_DIR
      Value: '"/opt/miniconda-latest"'
    - Key: PATH
      Value: '"/opt/miniconda-latest/bin:$PATH"'
    Name: env
  - CmdLine:
    - export PATH="/opt/miniconda-latest/bin:$PATH"     && echo "Downloading Miniconda
      installer ..."     && conda_installer="/tmp/miniconda.sh"     && curl -fsSL
      --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      bash "$conda_installer" -b -p /opt/miniconda-latest     && rm -f "$conda_installer"     &&
      conda update -yq -nbase conda     && conda config --system --prepend channels
      conda-forge     && conda config --system --set auto_update_conda false     &&
      conda config --system --set show_channel_urls true     && sync && conda clean
      -tipsy && sync     && conda create -y -q --name neuro     && conda install -y
      -q --name neuro            python=2            numpy            pandas            traits            scikit-learn     &&
      conda install -y -q --name neuro libgfortran==1     && sync && conda clean -tipsy
      && sync     && bash -c "source activate neuro     &&   pip install  --no-cache-dir              nipype              nibabel"     &&
      rm -rf ~/.cache/pip/*     && sync
    Name: run
    PrependShell: true
  - Env:
    - Key: FSLDIR
      Value: '"/opt/fsl-5.0.10"'
    - Key: PATH
      Value: '"/opt/fsl-5.0.10/bin:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            bc            dc            file            libfontconfig1            libfreetype6            libgl1-mesa-dev            libglu1-mesa-dev            libgomp1            libice6            libmng1            libxcursor1            libxft2            libxinerama1            libxrandr2            libxrender1            libxt6            wget     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading FSL ..."     && mkdir -p /opt/fsl-5.0.10     && curl -fsSL --retry
      5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz     |
      tar -xz -C /opt/fsl-5.0.10 --strip-components 1     && sed -i '$iecho Some packages
      in this Docker container are non-free' $ND_ENTRYPOINT     && sed -i '$iecho
      If you are considering commercial use of this container, please consult the
      relevant license:' $ND_ENTRYPOINT     && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence'
      $ND_ENTRYPOINT     && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT     &&
      echo "Installing FSL conda environment ..."     && bash /opt/fsl-5.0.10/etc/fslconf/fslpython_install.sh
      -f /opt/fsl-5.0.10
    Name: run
    PrependShell: true
  - Env:
    - Key: C3DPATH
      Value: '"/opt/convert3d-1.0.0"'
    - Key: PATH
      Value: '"/opt/convert3d-1.0.0/bin:$PATH"'
    Name: env
  - CmdLine:
    - echo "Downloading Convert3D ..."     && mkdir -p /opt/convert3d-1.0.0     &&
      curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download     |
      tar -xz -C /opt/convert3d-1.0.0 --strip-components 1
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"/opt/afni-latest:$PATH"'
    - Key: AFNI_PLUGINPATH
      Value: '"/opt/afni-latest"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            ed            gsl-bin            libglib2.0-0            libglu1-mesa-dev            libglw1-mesa            libgomp1            libjpeg62            libnlopt-dev            libxm4            netpbm            r-base            r-base-dev            tcsh            xfonts-base            xvfb     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && curl
      -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb     &&
      dpkg -i /tmp/toinstall.deb     && rm /tmp/toinstall.deb     && curl -sSL --retry
      5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb     &&
      dpkg -i /tmp/toinstall.deb     && rm /tmp/toinstall.deb     && apt-get install
      -f     && apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     &&
      gsl2_path="$(find / -name 'libgsl.so.19' || printf '')"     && if [ -n "$gsl2_path"
      ]; then          ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0";     fi     &&
      ldconfig     && echo "Downloading AFNI ..."     && mkdir -p /opt/afni-latest     &&
      curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz     |
      tar -xz -C /opt/afni-latest --strip-components 1     && PATH=$PATH:/opt/afni-latest
      rPkgsInstall -pkgs ALL
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c 'export PATH=/opt/afni-latest:$PATH && rPkgsInstall -pkgs ALL && rPkgsInstall
      -pkgs optparse,pracma,RNifti,svglite,signal,reshape2,ggplot2,lme4'
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh
    - /cmake-3.11.4-Linux-x86_64.sh
  - Env:
    - Key: ANTSPATH
      Value: '"/opt/ants-latest/bin"'
    - Key: PATH
      Value: '"/opt/ants-latest/bin:$PATH"'
    - Key: LD_LIBRARY_PATH
      Value: '"/opt/ants-latest/lib:$LD_LIBRARY_PATH"'
    Name: env
  - CmdLine:
    - mkdir /opt/cmake   && sh /cmake-3.11.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license   &&
      ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake   && apt-get update -qq     &&
      apt-get install -y -q --no-install-recommends            g++            gcc            git            make            zlib1g-dev            imagemagick            procps     &&
      mkdir -p /tmp/ants/build     && git config --global url."https://".insteadOf
      git://     && git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source     &&
      cd /tmp/ants/build     && cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source     &&
      make -j1     && mkdir -p /opt/ants-latest     && mv bin lib /opt/ants-latest/     &&
      mv /tmp/ants/source/Scripts/* /opt/ants-latest/bin     && rm -rf /tmp/ants     &&
      rm -rf /opt/cmake /usr/local/bin/cmake     && apt-get clean     && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: C3DPATH
      Value: '"/opt/convert3d-nightly"'
    - Key: PATH
      Value: '"/opt/convert3d-nightly/bin:$PATH"'
    Name: env
  - CmdLine:
    - echo "Downloading Convert3D ..."     && mkdir -p /opt/convert3d-nightly     &&
      curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download     |
      tar -xz -C /opt/convert3d-nightly --strip-components 1
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i '$iexport XCPEDIR=/xcpEngine' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i '$iexport PATH=$PATH:$XCPEDIR' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .
    - /xcpEngine
  - CmdLine:
    - bash -c     'cd  /xcpEngine     && wget -nv https://upenn.box.com/shared/static/i30llenk6s37kv8nkqxgulwylaxp928g.xz     &&
      tar xvfJm i30llenk6s37kv8nkqxgulwylaxp928g.xz     && rm i30llenk6s37kv8nkqxgulwylaxp928g.xz'
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c 'BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine
      FSLDIR=/opt/fsl-5.0.10 AFNI_PATH=/opt/afni-latest C3D_PATH=/opt/convert3d-nightly/bin
      ANTSPATH=/opt/ants-latest/bin /xcpEngine/xcpReset     && BRAINATLAS=/xcpEngine/atlas
      BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine /xcpEngine/utils/repairMetadata'
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c 'echo R_ENVIRON_USER\="" >> /usr/lib/R/etc/Renviron           && echo
      R_PROFILE_USER\="" >> /usr/lib/R/etc/Renviron           && chmod a+rx /xcpEngine/xcpEngine'
    Name: run
    PrependShell: true
  - Env:
    - Key: XCPEDIR
      Value: '"/xcpEngine"'
    - Key: AFNI_PATH
      Value: '"/opt/afni-latest/"'
    - Key: C3D_PATH
      Value: '"/opt/convert3d-nightly/bin/"'
    - Key: PATH
      Value: '"$PATH:/xcpEngine"'
    Name: env
  - CmdLine:
    - mkdir /data /out /work /design /cohort
    Name: run
    PrependShell: true
  - CmdLine:
    - /xcpEngine/xcpEngine
    Name: entrypoint
    PrependShell: false
  From:
    Image: neurodebian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM neurodebian:stretch
