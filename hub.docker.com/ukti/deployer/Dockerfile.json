{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "CF_CLI_VER",
              "Value": "6.47.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVM_VER",
              "Value": "0.35.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JABBA_VER",
              "Value": "0.11.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RVM_VER",
              "Value": "1.29.9"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CF_CONDUIT_VER",
              "Value": "0.0.8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -g 1000 ubuntu \u0026\u0026     useradd -u 1000 -g 1000 -m -s /bin/bash ubuntu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"force-unsafe-io\" \u003e /etc/dpkg/dpkg.cfg.d/02apt-speedup \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y curl wget git apt-transport-https ca-certificates gnupg2 software-properties-common build-essential libpq-dev libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev postgresql-client \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y python3 python3-pip ruby-full rubygems bundler gettext jq \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add - \u0026\u0026     echo \"deb https://packages.cloudfoundry.org/debian stable main\" \u003e /etc/apt/sources.list.d/cloudfoundry-cli.list \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y --allow-unauthenticated cf-cli=$CF_CLI_VER \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade awscli virtualenv pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://cli-assets.heroku.com/install-ubuntu.sh | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Gemfile*",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "gem install bundler \u0026\u0026     bundle check || bundle install --gemfile=/tmp/Gemfile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "ubuntu:ubuntu"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/ubuntu"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cf install-plugin -f https://github.com/alphagov/paas-cf-conduit/releases/download/v$CF_CONDUIT_VER/cf-conduit.linux.amd64"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://github.com/creationix/nvm/raw/v$NVM_VER/install.sh | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://rvm.io/mpapis.asc | gpg2 --import - \u0026\u0026     curl -Lfs https://rvm.io/pkuczynski.asc | gpg2 --import - \u0026\u0026     curl -Lfs https://get.rvm.io | bash -s -- --autolibs=disable --version $RVM_VER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Lfs https://github.com/shyiko/jabba/raw/$JABBA_VER/install.sh | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/syndbg/goenv.git ~/.goenv"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'eval \"$(pyenv init -)\"\\neval \"$(pyenv virtualenv-init -)\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'export NVM_DIR=\"$HOME/.nvm\"\\n[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 . \"$NVM_DIR/nvm.sh\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'export GOENV_ROOT=\"$HOME/.goenv\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'export PATH=\"$GOENV_ROOT/bin:$PATH\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'eval \"$(goenv init -)\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'export PATH=\"$GOROOT/bin:$PATH\"' \u003e\u003e $HOME/.profile \u0026\u0026     echo 'export PATH=\"$GOPATH/bin:$PATH\"' \u003e\u003e $HOME/.profile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash",
            "-c"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}