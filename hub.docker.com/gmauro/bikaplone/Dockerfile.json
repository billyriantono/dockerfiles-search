{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "gmauro/ubuntu-ansible",
      "SourceCode": "FROM gmauro/ubuntu-ansible",
      "Platform": "",
      "From": {
        "Image": "gmauro/ubuntu-ansible"
      },
      "Commands": [
        {
          "Maintainer": "Gianmauro Cuccuru \u003cgmauro@crs4.it\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "useradd --system -U -u 500 plone  \u0026\u0026 mkdir -p /plone /data/filestorage /data/blobstorage  \u0026\u0026 chown -R plone:plone /plone /data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PLONE_MAJOR",
              "Value": "4.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PLONE_VERSION",
              "Value": "4.3.5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PLONE_MD5",
              "Value": "89cbc8ded37e51b397c2e738c57cf425"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -q -y     apt-utils     wget     nano     sudo     supervisor     curl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -q -y     build-essential     gcc     python-setuptools     python-dev     git-core     libffi-dev     libpcre3     libpcre3-dev     autoconf     libtool     pkg-config     zlib1g-dev     libssl-dev     libexpat1-dev     libxslt1.1     libxml2-dev     libxslt1-dev     libbz2-dev     libjpeg62-dev     gnuplot     libcairo2     libpango1.0-0     libgdk-pixbuf2.0-0     libxslt1.1     libxml2     libjpeg62"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o Plone.tgz -SL https://launchpad.net/plone/$PLONE_MAJOR/$PLONE_VERSION/+download/Plone-$PLONE_VERSION-UnifiedInstaller.tgz  \u0026\u0026 echo \"$PLONE_MD5 Plone.tgz\" | md5sum -c -  \u0026\u0026 tar -xzf Plone.tgz  \u0026\u0026 ./Plone-$PLONE_VERSION-UnifiedInstaller/install.sh       --password=admin       --daemon-user=plone       --owner=plone       --group=plone       --target=/plone       --instance=instance       --var=/data       none  \u0026\u0026 cd /plone/instance  \u0026\u0026 sed -i 's/parts =/parts =\\n    zeoserver/g' buildout.cfg  \u0026\u0026 sed -i 's/eggs =/eggs =\\n    plone.jsonapi.core/g' buildout.cfg  \u0026\u0026 sed -i 's/eggs =/eggs =\\n    bika.lims/g' buildout.cfg  \u0026\u0026 echo '\\n[zeoserver]\\nrecipe = plone.recipe.zeoserver\\nfile-storage = /data/filestorage/Data.fs\\nblob-storage = /data/blobstorage' \u003e\u003e buildout.cfg  \u0026\u0026 sudo -u plone bin/buildout  \u0026\u0026 chown -R plone:plone /plone /data  \u0026\u0026 rm -rf /Plone*  \u0026\u0026 rm -rf /var/lib/apt/lists/*  \u0026\u0026 rm -rf /plone/buildout-cache/downloads/*  \u0026\u0026 find /plone \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) -exec rm -rf '{}' +  \u0026\u0026 apt-get autoremove  \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data/filestorage",
            "/data/blobstorage"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-initialize.py",
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "Name": "user",
          "User": "plone"
        },
        {
          "Name": "workdir",
          "Path": "/plone/instance"
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}