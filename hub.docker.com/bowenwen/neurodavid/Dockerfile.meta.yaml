MetaArgs: null
Stages:
- BaseName: neurodebian:stretch
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: '"noninteractive"'
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            neurodebian-freeze     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && nd_freeze  20181201
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - export ND_ENTRYPOINT="/neurodocker/startup.sh"     && apt-get update -qq     &&
      apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && sed
      -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     && dpkg-reconfigure
      --frontend=noninteractive locales     && update-locale LANG="en_US.UTF-8"     &&
      chmod 777 /opt && chmod a+s /opt     && mkdir -p /neurodocker     && if [ !
      -f "$ND_ENTRYPOINT" ]; then          echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"     &&   echo
      'set -e' >> "$ND_ENTRYPOINT"     &&   echo 'if [ -n "$1" ]; then "$@"; else
      /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";     fi     && chmod -R 777 /neurodocker
      && chmod a+s /neurodocker
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - Env:
    - Key: FREESURFER_HOME
      Value: '"/opt/freesurfer-6.0.0"'
    - Key: PATH
      Value: '"/opt/freesurfer-6.0.0/bin:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            bc            libgomp1            libxmu6            libxt6            perl            tcsh     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading FreeSurfer ..."     && mkdir -p /opt/freesurfer-6.0.0     && curl
      -fsSL --retry 5 ftp://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz     |
      tar -xz -C /opt/freesurfer-6.0.0 --strip-components 1          --exclude='freesurfer/average/mult-comp-cor'          --exclude='freesurfer/lib/cuda'          --exclude='freesurfer/lib/qt'          --exclude='freesurfer/subjects/V1_average'          --exclude='freesurfer/subjects/bert'          --exclude='freesurfer/subjects/cvs_avg35'          --exclude='freesurfer/subjects/cvs_avg35_inMNI152'          --exclude='freesurfer/subjects/fsaverage3'          --exclude='freesurfer/subjects/fsaverage4'          --exclude='freesurfer/subjects/fsaverage5'          --exclude='freesurfer/subjects/fsaverage6'          --exclude='freesurfer/subjects/fsaverage_sym'          --exclude='freesurfer/trctrain'     &&
      sed -i '$isource "/opt/freesurfer-6.0.0/SetUpFreeSurfer.sh"' "$ND_ENTRYPOINT"
    Name: run
    PrependShell: true
  - Env:
    - Key: FSLDIR
      Value: '"/opt/fsl-5.0.11"'
    - Key: PATH
      Value: '"/opt/fsl-5.0.11/bin:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            bc            dc            file            libfontconfig1            libfreetype6            libgl1-mesa-dev            libglu1-mesa-dev            libgomp1            libice6            libmng1            libxcursor1            libxft2            libxinerama1            libxrandr2            libxrender1            libxt6            wget     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading FSL ..."     && mkdir -p /opt/fsl-5.0.11     && curl -fsSL --retry
      5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.11-centos6_64.tar.gz     |
      tar -xz -C /opt/fsl-5.0.11 --strip-components 1     && sed -i '$iecho Some packages
      in this Docker container are non-free' $ND_ENTRYPOINT     && sed -i '$iecho
      If you are considering commercial use of this container, please consult the
      relevant license:' $ND_ENTRYPOINT     && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence'
      $ND_ENTRYPOINT     && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT     &&
      echo "Installing FSL conda environment ..."     && bash /opt/fsl-5.0.11/etc/fslconf/fslpython_install.sh
      -f /opt/fsl-5.0.11
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"/opt/dcm2niix-latest/bin:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            cmake            g++            gcc            git            make            pigz            zlib1g-dev     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && git
      clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix     && mkdir /tmp/dcm2niix/build     &&
      cd /tmp/dcm2niix/build     && cmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest
      ..     && make     && make install     && rm -rf /tmp/dcm2niix
    Name: run
    PrependShell: true
  - Env:
    - Key: ANTSPATH
      Value: '"/opt/ants-2.3.1"'
    - Key: PATH
      Value: '"/opt/ants-2.3.1:$PATH"'
    Name: env
  - CmdLine:
    - echo "Downloading ANTs ..."     && mkdir -p /opt/ants-2.3.1     && curl -fsSL
      --retry 5 https://dl.dropbox.com/s/1xfhydsf4t4qoxg/ants-Linux-centos6_x86_64-v2.3.1.tar.gz     |
      tar -xz -C /opt/ants-2.3.1 --strip-components 1
    Name: run
    PrependShell: true
  - Env:
    - Key: FORCE_SPMMCR
      Value: '"1"'
    - Key: LD_LIBRARY_PATH
      Value: '"$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2010a/v713/runtime/glnxa64:/opt/matlabmcr-2010a/v713/bin/glnxa64:/opt/matlabmcr-2010a/v713/sys/os/glnxa64:/opt/matlabmcr-2010a/v713/extern/bin/glnxa64"'
    - Key: MATLABCMD
      Value: '"/opt/matlabmcr-2010a/v713/toolbox/matlab"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            bc            libncurses5            libxext6            libxmu6            libxpm-dev            libxt6     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading MATLAB Compiler Runtime ..."     && curl -sSL --retry 5 -o /tmp/toinstall.deb
      http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb     &&
      dpkg -i /tmp/toinstall.deb     && rm /tmp/toinstall.deb     && apt-get install
      -f     && apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     &&
      curl -fsSL --retry 5 -o /tmp/MCRInstaller.bin https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin     &&
      chmod +x /tmp/MCRInstaller.bin     && /tmp/MCRInstaller.bin -silent -P installLocation="/opt/matlabmcr-2010a"     &&
      rm -rf /tmp/*     && echo "Downloading standalone SPM ..."     && curl -fsSL
      --retry 5 -o /tmp/spm12.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7219_R2010a.zip     &&
      unzip -q /tmp/spm12.zip -d /tmp     && mkdir -p /opt/spm12-r7219     && mv /tmp/spm12/*
      /opt/spm12-r7219/     && chmod -R 777 /opt/spm12-r7219     && rm -rf /tmp/*     &&
      /opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 quit     && sed -i '$iexport
      SPMMCRCMD=\"/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 script\"'
      $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: '"$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2018a/v94/runtime/glnxa64:/opt/matlabmcr-2018a/v94/bin/glnxa64:/opt/matlabmcr-2018a/v94/sys/os/glnxa64:/opt/matlabmcr-2018a/v94/extern/bin/glnxa64"'
    - Key: MATLABCMD
      Value: '"/opt/matlabmcr-2018a/v94/toolbox/matlab"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            bc            libncurses5            libxext6            libxmu6            libxpm-dev            libxt6     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo
      "Downloading MATLAB Compiler Runtime ..."     && curl -fsSL --retry 5 -o /tmp/mcr.zip
      https://ssd.mathworks.com/supportfiles/downloads/R2018a/deployment_files/R2018a/installers/glnxa64/MCR_R2018a_glnxa64_installer.zip     &&
      unzip -q /tmp/mcr.zip -d /tmp/mcrtmp     && /tmp/mcrtmp/install -destinationFolder
      /opt/matlabmcr-2018a -mode silent -agreeToLicense yes     && rm -rf /tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd --no-user-group --create-home --shell /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Env:
    - Key: CONDA_DIR
      Value: '"/opt/miniconda-latest"'
    - Key: PATH
      Value: '"/opt/miniconda-latest/bin:$PATH"'
    Name: env
  - CmdLine:
    - export PATH="/opt/miniconda-latest/bin:$PATH"     && echo "Downloading Miniconda
      installer ..."     && conda_installer="/tmp/miniconda.sh"     && curl -fsSL
      --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      bash "$conda_installer" -b -p /opt/miniconda-latest     && rm -f "$conda_installer"     &&
      conda update -yq -nbase conda     && conda config --system --prepend channels
      conda-forge     && conda config --system --set auto_update_conda false     &&
      conda config --system --set show_channel_urls true     && sync && conda clean
      -tipsy && sync     && conda create -y -q --name neuro     && conda install -y
      -q --name neuro            'python=3.6'            'pytest'            'jupyter'            'jupyterlab'            'traits'            'pandas'            'matplotlib'            'scikit-learn'            'scikit-image'            'seaborn'            'nbformat'            'nb_conda'            'vtk'     &&
      sync && conda clean -tipsy && sync     && bash -c "source activate neuro     &&   pip
      install --no-cache-dir               'nipype'"     && rm -rf ~/.cache/pip/*     &&
      sync
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - echo "deb http://http.debian.net/debian/ stretch main contrib non-free" > /etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            ttf-mscorefonts-installer     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - CmdLine:
    - conda install -y -q --name neuro            'jupyter_contrib_nbextensions'     &&
      sync && conda clean -tipsy && sync     && bash -c "source activate neuro     &&   pip
      install --no-cache-dir               'yapf'              'jupyterlab-git'"     &&
      rm -rf ~/.cache/pip/*     && sync     && sed -i '$isource activate neuro' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c 'source activate neuro && jupyter nbextension enable exercise2/main
      && jupyter nbextension enable spellchecker/main && jupyter serverextension enable
      --py jupyterlab_git'
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: workdir
    Path: /home/neuro
  - CmdLine:
    - jupyter-notebook
    Name: cmd
    PrependShell: false
  - CmdLine:
    - 'echo ''{     \n  "pkg_manager": "apt",     \n  "instructions": [     \n    [     \n      "base",     \n      "neurodebian:stretch"     \n    ],     \n    [     \n      "ndfreeze",     \n      {     \n        "date":
      "20181201"     \n      }     \n    ],     \n    [     \n      "freesurfer",     \n      {     \n        "version":
      "6.0.0",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "fsl",     \n      {     \n        "version":
      "5.0.11",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "dcm2niix",     \n      {     \n        "version":
      "latest",     \n        "method": "source"     \n      }     \n    ],     \n    [     \n      "ants",     \n      {     \n        "version":
      "2.3.1",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "spm12",     \n      {     \n        "version":
      "r7219",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "matlabmcr",     \n      {     \n        "version":
      "2018a",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "create_env":
      "neuro",     \n        "conda_install": [     \n          "python=3.6",     \n          "pytest",     \n          "jupyter",     \n          "jupyterlab",     \n          "traits",     \n          "pandas",     \n          "matplotlib",     \n          "scikit-learn",     \n          "scikit-image",     \n          "seaborn",     \n          "nbformat",     \n          "nb_conda",     \n          "vtk"     \n        ],     \n        "pip_install":
      [     \n          "nipype"     \n        ]     \n      }     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "run",     \n      "echo
      \"deb http://http.debian.net/debian/ stretch main contrib non-free\" > /etc/apt/sources.list"     \n    ],     \n    [     \n      "install",     \n      [     \n        "ttf-mscorefonts-installer"     \n      ]     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "use_env":
      "neuro",     \n        "conda_install": [     \n          "jupyter_contrib_nbextensions"     \n        ],     \n        "pip_install":
      [     \n          "yapf",     \n          "jupyterlab-git"     \n        ],     \n        "activate":
      true     \n      }     \n    ],     \n    [     \n      "run_bash",     \n      "source
      activate neuro && jupyter nbextension enable exercise2/main && jupyter nbextension
      enable spellchecker/main && jupyter serverextension enable --py jupyterlab_git"     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "workdir",     \n      "/home/neuro"     \n    ],     \n    [     \n      "cmd",     \n      [     \n        "jupyter-notebook"     \n      ]     \n    ]     \n  ]     \n}''
      > /neurodocker/neurodocker_specs.json'
    Name: run
    PrependShell: true
  From:
    Image: neurodebian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM neurodebian:stretch
