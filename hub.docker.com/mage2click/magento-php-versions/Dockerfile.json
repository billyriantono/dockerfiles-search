{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.3-fpm",
      "SourceCode": "FROM    php:7.3-fpm",
      "Platform": "",
      "From": {
        "Image": "php:7.3-fpm"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Dmitry Shkoliar @shkoliar\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y             cron             wget             git             gzip             libfreetype6-dev             libicu-dev             libjpeg62-turbo-dev             libmcrypt-dev             libpng-dev             libxslt1-dev             libzip-dev             lsof             mariadb-client             vim             zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-configure             gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-configure             zip --with-libzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-install             bcmath             gd             intl             mbstring             opcache             pdo_mysql             soap             xsl             zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pecl channel-update pecl.php.net             \u0026\u0026 pecl install xdebug             \u0026\u0026 docker-php-ext-enable xdebug             \u0026\u0026 sed -i -e 's/^zend_extension/\\;zend_extension/g' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libsodium-dev             \u0026\u0026 pecl install libsodium             \u0026\u0026 docker-php-ext-enable sodium"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libssh2-1-dev             \u0026\u0026 wget https://pecl.php.net/get/ssh2 -O /tmp/ssh2-1.2.tgz             \u0026\u0026 pear install /tmp/ssh2-1.2.tgz             \u0026\u0026 docker-php-ext-enable ssh2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer |             php -- --install-dir=/usr/local/bin --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -g 1000 app             \u0026\u0026 useradd -g 1000 -u 1000 -d /var/www -s /bin/bash app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y gnupg             \u0026\u0026 curl -sL https://deb.nodesource.com/setup_8.x | bash -             \u0026\u0026 apt-get install -y nodejs             \u0026\u0026 mkdir /var/www/.config /var/www/.npm             \u0026\u0026 chown app:app /var/www/.config /var/www/.npm             \u0026\u0026 ln -s /var/www/html/node_modules/grunt/bin/grunt /usr/bin/grunt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install golang-go            \u0026\u0026 mkdir /opt/go            \u0026\u0026 export GOPATH=/opt/go            \u0026\u0026 go get github.com/mailhog/mhsendmail"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y librabbitmq-dev             \u0026\u0026 pecl install amqp             \u0026\u0026 docker-php-ext-enable amqp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf '* *\\t* * *\\tapp\\t%s/usr/local/bin/php /var/www/html/update/cron.php\\n' \u003e\u003e /etc/crontab"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf '* *\\t* * *\\tapp\\t%s/usr/local/bin/php /var/www/html/bin/magento cron:run\\n' \u003e\u003e /etc/crontab"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf '* *\\t* * *\\tapp\\t%s/usr/local/bin/php /var/www/html/bin/magento setup:cron:run\\n#\\n' \u003e\u003e /etc/crontab"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "conf/www.conf",
            "/usr/local/etc/php-fpm.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "conf/php.ini",
            "/usr/local/etc/php/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "conf/php-fpm.conf",
            "/usr/local/etc/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "bin/cronstart",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "mkdir /sock"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R app:app /usr/local/etc/php/conf.d /sock"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "app:app"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        }
      ]
    }
  ]
}