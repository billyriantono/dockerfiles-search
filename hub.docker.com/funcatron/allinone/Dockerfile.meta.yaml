MetaArgs: null
Stages:
- BaseName: funcatron/frontend:latest
  Commands:
  - CmdLine:
    - "apt-get update &&     apt-get upgrade -y &&     apt-get install -y --no-install-recommends
      \t\tbzip2 \t\tunzip                 wget \t\txz-utils                 git                 openjdk-8-jdk"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /app &&     wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
      &&     chmod +x lein &&     mv lein /usr/local/bin &&     export LEIN_ROOT=ok
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r rabbitmq && useradd -r -d /var/lib/rabbitmq -m -g rabbitmq rabbitmq
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.7"
    Name: env
  - CmdLine:
    - "set -x \t&& apt-get install -y ca-certificates wget \t&& wget -O /usr/local/bin/gosu
      \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg
      --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& rm
      -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu
      \t&& gosu nobody true"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \tkey='434975BD900CCBE4F7EE1B1ED208507CA14F4FCA'; \texport GNUPGHOME=\"$(mktemp
      -d)\"; \tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg
      --export \"$key\" > /etc/apt/trusted.gpg.d/erlang-solutions.gpg; \trm -r \"$GNUPGHOME\";
      \tapt-key list"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'deb http://packages.erlang-solutions.com/debian jessie contrib' > /etc/apt/sources.list.d/erlang.list
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update \t&& apt-get install -y --no-install-recommends \t\terlang-asn1
      \t\terlang-base-hipe \t\terlang-crypto \t\terlang-eldap \t\terlang-inets \t\terlang-mnesia
      \t\terlang-nox \t\terlang-os-mon \t\terlang-public-key \t\terlang-ssl \t\terlang-xmerl
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: RABBITMQ_LOGS
      Value: '-'
    - Key: RABBITMQ_SASL_LOGS
      Value: '-'
    Name: env
  - CmdLine:
    - "set -ex; \tkey='0A9AF2115F4687BD29803A206B73A36E6026DFCA'; \texport GNUPGHOME=\"$(mktemp
      -d)\"; \tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg
      --export \"$key\" > /etc/apt/trusted.gpg.d/rabbitmq.gpg; \trm -r \"$GNUPGHOME\";
      \tapt-key list"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'deb http://www.rabbitmq.com/debian testing main' > /etc/apt/sources.list.d/rabbitmq.list
    Name: run
    PrependShell: true
  - Env:
    - Key: RABBITMQ_VERSION
      Value: 3.6.10
    Name: env
  - Env:
    - Key: RABBITMQ_DEBIAN_VERSION
      Value: 3.6.10-1
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\trabbitmq-server=$RABBITMQ_DEBIAN_VERSION
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/lib/rabbitmq/bin:$PATH
    Name: env
  - Env:
    - Key: HOME
      Value: /var/lib/rabbitmq
    Name: env
  - CmdLine:
    - "mkdir -p /var/lib/rabbitmq /etc/rabbitmq \t&& chown -R rabbitmq:rabbitmq /var/lib/rabbitmq
      /etc/rabbitmq \t&& chmod -R 777 /var/lib/rabbitmq /etc/rabbitmq"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/lib/rabbitmq
  - CmdLine:
    - ln -sf /var/lib/rabbitmq/.erlang.cookie /root/
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -sf /usr/lib/rabbitmq/lib/rabbitmq_server-$RABBITMQ_VERSION/plugins /plugins
    Name: run
    PrependShell: true
  - CmdLine:
    - rabbitmq-plugins enable --offline rabbitmq_management
    Name: run
    PrependShell: true
  - CmdLine:
    - rabbitmq-plugins enable --offline rabbitmq_stomp
    Name: run
    PrependShell: true
  - CmdLine:
    - rabbitmq-plugins enable --offline rabbitmq_web_stomp
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - tron
    - /tmp/tron
  - CmdLine:
    - cd /tmp &&     export LEIN_ROOT=yes &&     cd tron &&     lein uberjar &&     cp
      target/uberjar/tron-*-standalone.jar /root/tron.jar &&     cd /tmp &&     rm
      -rf master.zip tron-master tron
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - all-in-one/docker-entrypoint.sh
    - /usr/local/bin/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - all-in-one/start-all.sh
    - /usr/local/bin/
  - Name: expose
    Ports:
    - "3000"
    - "80"
  - CmdLine:
    - /usr/local/bin/start-all.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: funcatron/frontend:latest
  Name: ""
  Platform: ""
  SourceCode: FROM funcatron/frontend:latest
