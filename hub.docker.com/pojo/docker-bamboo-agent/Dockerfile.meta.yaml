MetaArgs: null
Stages:
- BaseName: maven:3.6.0-jdk-8-alpine
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Piotr Jo≈Ñski <p.jonski@pojo.pl>"'
    Name: label
  - Env:
    - Key: M3_HOME
      Value: ${MAVEN_HOME}
    Name: env
  - Env:
    - Key: HELM_VERSION
      Value: v2.13.1
    Name: env
  - CmdLine:
    - apk add --update ca-certificates openssl curl bash git openssh libintl gettext     &&
      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s
      https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl     &&
      mv kubectl /usr/local/bin     && chmod +x /usr/local/bin/kubectl     && curl
      https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh     &&
      chmod 700 get_helm.sh     && ./get_helm.sh --version $HELM_VERSION     && helm
      init --client-only     && helm version --client     && apk add --virtual build_deps     &&
      cp /usr/bin/envsubst /usr/local/bin/envsubst     && rm -rf get_helm.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: GRAILS_VERSION
      Value: 3.3.9
    Name: env
  - CmdLine:
    - wget https://github.com/grails/grails-core/releases/download/v$GRAILS_VERSION/grails-$GRAILS_VERSION.zip     &&
      unzip grails-$GRAILS_VERSION.zip     && rm -rf grails-$GRAILS_VERSION.zip     &&
      mv grails-$GRAILS_VERSION /usr/lib/jvm/grails
    Name: run
    PrependShell: true
  - Env:
    - Key: GRAILS_HOME
      Value: /usr/lib/jvm/grails
    Name: env
  - Env:
    - Key: PATH
      Value: $GRAILS_HOME/bin:$PATH
    Name: env
  - CmdLine:
    - grails --version
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ ! -e /etc/nsswitch.conf ] && echo ''hosts: files dns'' > /etc/nsswitch.conf'
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_CHANNEL
      Value: edge
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: 18.05.0-ce
    Name: env
  - CmdLine:
    - "set -ex; \tapk add --no-cache --virtual .fetch-deps \t\tcurl \t\ttar \t; \t\tapkArch=\"$(apk
      --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf)
      dockerArch='armel' ;; \t\taarch64) dockerArch='aarch64' ;; \t\tppc64le) dockerArch='ppc64le'
      ;; \t\ts390x) dockerArch='s390x' ;; \t\t*) echo >&2 \"error: unsupported architecture
      ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\";
      then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from
      '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract
      \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/
      \t; \trm docker.tgz; \t\tapk del .fetch-deps; \t\tdockerd -v; \tdocker -v"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add ttf-dejavu fontconfig
    Name: run
    PrependShell: true
  - CmdLine:
    - rm /var/cache/apk/*     && rm -rf /tmp/*     && rm -rf /var/lib/apt/lists/*     &&
      apk del build_deps
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config
    - /root/.kube/config
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - settings.xml
    - /root/.m2/settings.xml
  - CmdLine:
    - apk add --update nodejs nodejs-npm
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g redoc-cli
    Name: run
    PrependShell: true
  - CmdLine:
    - bash
    Name: cmd
    PrependShell: true
  From:
    Image: maven:3.6.0-jdk-8-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM maven:3.6.0-jdk-8-alpine
