MetaArgs:
- DefaultValue: docker.io
  Key: FROM_IMG_REGISTRY
  ProvidedValue: null
  Value: docker.io
- DefaultValue: '"2018-12-30.2"'
  Key: FROM_IMG_TAG
  ProvidedValue: null
  Value: '"2018-12-30.2"'
- DefaultValue: ""
  Key: FROM_IMG_HASH
  ProvidedValue: null
  Value: ""
Stages:
- BaseName: ${FROM_IMG_REGISTRY}/qnib/alplain-openjre8:${FROM_IMG_TAG}${FROM_IMG_HASH}
  Commands:
  - Name: volume
    Volumes:
    - /opt/go-server/artifacts/serverBackups/
  - Env:
    - Key: GOCD_AGENT_AUTOENABLE_KEY
      Value: qnibFTW
    - Key: GOCD_SERVER_CLEAN_WORKSPACE
      Value: "false"
    Name: env
  - Key: GOCD_URL
    Name: arg
    Value: https://download.gocd.io/binaries
  - Key: GOCD_VER
    Name: arg
    Value: 19.5.0
  - Key: GOCD_SUBVER
    Name: arg
    Value: "9272"
  - Key: CT_VER
    Name: arg
    Value: 0.20.0
  - Labels:
    - Key: gocd.version
      Value: ${GOCD_VER}-${GOCD_SUBVER}
    Name: label
  - CmdLine:
    - 'apk --no-cache add curl git openssl xmlstarlet  && echo "# service-scripts:
      $(/usr/local/bin/go-github rLatestUrl --ghorg qnib --ghrepo service-scripts
      --regex ".*\.tar" |head -n1)"  && curl -Ls $(/usr/local/bin/go-github rLatestUrl
      --ghorg qnib --ghrepo service-scripts --regex ".*\.tar" |head -n1) |tar xf -
      -C /opt/  && echo "go-server: https://download.go.cd/binaries/${GOCD_VER}-${GOCD_SUBVER}/generic/go-server-${GOCD_VER}-${GOCD_SUBVER}.zip"  &&
      curl -Ls --url ${GOCD_URL}/${GOCD_VER}-${GOCD_SUBVER}/generic/go-server-${GOCD_VER}-${GOCD_SUBVER}.zip
      > /tmp/go-server.zip  && mkdir -p /opt/  && unzip -q -d /opt/ /tmp/go-server.zip  &&
      rm -f /tmp/go-server.zip  && mv /opt/go-server-${GOCD_VER}/* /opt/go-server/  &&
      rm -rf /opt/go-server-${GOCD_VER}  && chmod +x /opt/go-server/*server.sh'
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/go-server/plugins/external/
  - CmdLine:
    - 'export GORG=gocd-contrib  && export GREPO=script-executor-task  && echo "#
      ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ''.*\.jar'' |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=manojlds  && export GREPO=gocd-docker  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=ashwanthkumar  && export GREPO=gocd-slack-build-notifier  && echo
      "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=gocd-contrib  && export GREPO=gocd-build-status-notifier  && echo
      "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*github-pr-status.*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*github-pr-status.*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=gocd-contrib  && export GREPO=deb-repo-poller  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=ashwanthkumar  && export GREPO=gocd-build-github-pull-requests  &&
      echo "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG}
      --ghrepo ${GREPO} --regex ".*github-pr-poller.*\.jar" |head -n1)"  && wget -q
      $(/usr/local/bin/go-github rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*github-pr-poller.*\.jar" |head -n1)  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*git-fb-poller.*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*git-fb-poller.*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=Vincit  && export GREPO=gocd-slack-task  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=varchev  && export GREPO=go-generic-artifactory-poller  && echo
      "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=ind9  && export GREPO=gocd-s3-artifacts  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*s3material-assembly.*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*s3material-assembly.*\.jar"
      |head -n1)  && echo "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl
      --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*s3fetch-assembly.*\.jar" |head
      -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg gocd-contrib
      --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*s3fetch-assembly.*\.jar" |head
      -n1)  && echo "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg
      ${GORG} --ghrepo ${GREPO} --regex ".*s3publish-assembly.*\.jar" |head -n1)"  &&
      wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg gocd-contrib --ghorg ${GORG}
      --ghrepo ${GREPO} --regex ".*s3publish-assembly.*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=jmnarloch  && export GREPO=gocd-health-check-plugin  && echo "#
      ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=gocd-contrib  && export GREPO=gocd-oauth-login  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=gocd-contrib  && export GREPO=docker-swarm-elastic-agents  && echo
      "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=tomzo  && export GREPO=gocd-yaml-config-plugin  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=tomzo  && export GREPO=gocd-json-config-plugin  && echo "# ${GORG}/${GREPO}:
      $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo ${GREPO} --regex
      ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github rLatestUrl --ghorg
      gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar" |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=gocd  && export GREPO=docker-registry-artifact-plugin  && echo
      "# ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'export GORG=cma-arnold  && export GREPO=gocd-docker-exec-plugin  && echo "#
      ${GORG}/${GREPO}: $(/usr/local/bin/go-github rLatestUrl --ghorg ${GORG} --ghrepo
      ${GREPO} --regex ".*\.jar" |head -n1)"  && wget -q $(/usr/local/bin/go-github
      rLatestUrl --ghorg gocd-contrib --ghorg ${GORG} --ghrepo ${GREPO} --regex ".*\.jar"
      |head -n1)'
    Name: run
    PrependShell: true
  - CmdLine:
    - apk --no-cache add unzip  && curl -Lso /tmp/consul-template.zip https://releases.hashicorp.com/consul-template/${CT_VER}/consul-template_${CT_VER}_linux_amd64.zip  &&
      cd /usr/local/bin  && unzip /tmp/consul-template.zip  && apk --no-cache del
      unzip  && rm -f /tmp/consul-template.zip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /root/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - opt/qnib/entry/10-gocd-restore.sh
    - opt/qnib/entry/20-gocd-render-cruise-config.sh
    - /opt/qnib/entry/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - opt/qnib/gocd/server/etc/cruise-config.xml
    - /opt/qnib/gocd/server/etc/
  - Env:
    - Key: ENTRYPOINTS_DIR
      Value: /opt/qnib/entry/
    - Key: GOCD_BACKUP_RESTORE_ENABLED
      Value: "false"
    Name: env
  - CmdLine:
    - apk add moreutils --update-cache --repository http://dl-3.alpinelinux.org/alpine/v3.9/community/
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/go-server/server.sh
    Name: cmd
    PrependShell: false
  From:
    Image: ${FROM_IMG_REGISTRY}/qnib/alplain-openjre8:${FROM_IMG_TAG}${FROM_IMG_HASH}
  Name: ""
  Platform: ""
  SourceCode: FROM ${FROM_IMG_REGISTRY}/qnib/alplain-openjre8:${FROM_IMG_TAG}${FROM_IMG_HASH}
