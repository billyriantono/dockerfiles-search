{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jguillermo/alpine-php:base",
      "SourceCode": "FROM jguillermo/alpine-php:base",
      "Platform": "",
      "From": {
        "Image": "jguillermo/alpine-php:base"
      },
      "Commands": [
        {
          "Maintainer": "Jose Guillermo \u003cjguillermo@outlook.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apk --no-cache add curl git subversion openssh openssl mercurial tini bash zlib-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"memory_limit=-1\" \u003e \"$PHP_INI_DIR/conf.d/memory-limit.ini\"  \u0026\u0026 echo \"date.timezone=${PHP_TIMEZONE:-UTC}\" \u003e \"$PHP_INI_DIR/conf.d/date_timezone.ini\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-install zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_ALLOW_SUPERUSER",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_HOME",
              "Value": "/tmp"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_VERSION",
              "Value": "1.5.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -s -f -L -o /tmp/installer.php https://raw.githubusercontent.com/composer/getcomposer.org/da290238de6d63faace0343efbdd5aa9354332c5/web/installer  \u0026\u0026 php -r \"     \\$signature = '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410';     \\$hash = hash('SHA384', file_get_contents('/tmp/installer.php'));     if (!hash_equals(\\$signature, \\$hash)) {         unlink('/tmp/installer.php');         echo 'Integrity check failed, installer is either corrupt or worse.' . PHP_EOL;         exit(1);     }\"  \u0026\u0026 php /tmp/installer.php --no-ansi --install-dir=/usr/bin --filename=composer --version=${COMPOSER_VERSION}  \u0026\u0026 composer --ansi --version --no-interaction  \u0026\u0026 rm -rf /tmp/* /tmp/.htaccess"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOSU_VERSION",
              "Value": "\"1.7\""
            },
            {
              "Key": "GOSU_DOWNLOAD_URL",
              "Value": "\"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64\""
            },
            {
              "Key": "GOSU_DOWNLOAD_SIG",
              "Value": "\"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64.asc\""
            },
            {
              "Key": "GOSU_DOWNLOAD_KEY",
              "Value": "\"0x036A9C25BF357DD4\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "buildDeps='curl gnupg' HOME='/root' \t\u0026\u0026 set -x \t\u0026\u0026 apk add --update $buildDeps \t\u0026\u0026 gpg-agent --daemon \t\u0026\u0026 gpg --keyserver pgp.mit.edu --recv-keys $GOSU_DOWNLOAD_KEY \t\u0026\u0026 echo \"trusted-key $GOSU_DOWNLOAD_KEY\" \u003e\u003e /root/.gnupg/gpg.conf \t\u0026\u0026 curl -sSL \"$GOSU_DOWNLOAD_URL\" \u003e gosu-amd64 \t\u0026\u0026 curl -sSL \"$GOSU_DOWNLOAD_SIG\" \u003e gosu-amd64.asc \t\u0026\u0026 gpg --verify gosu-amd64.asc \t\u0026\u0026 rm -f gosu-amd64.asc \t\u0026\u0026 mv gosu-amd64 /usr/bin/gosu \t\u0026\u0026 chmod +x /usr/bin/gosu \t\u0026\u0026 apk del --purge $buildDeps \t\u0026\u0026 rm -rf /root/.gnupg \t\u0026\u0026 rm -rf /var/cache/apk/* \t;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./wait-for-it.sh",
            "/tmp/wait-for-it.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tmp/wait-for-it.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./entrypoint.sh",
            "/root/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /root/entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "APP_DIR",
              "Value": "/var/www/html"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_HOME",
              "Value": "$APP_DIR/docker/.composer"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$APP_DIR"
        },
        {
          "CmdLine": [
            "/root/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}