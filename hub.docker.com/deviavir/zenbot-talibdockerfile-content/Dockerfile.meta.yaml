MetaArgs: null
Stages:
- BaseName: ubuntu
  Commands:
  - Maintainer: openkbs.org@gmail.com
    Name: maintainer
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: INSTALL_DIR
      Value: ${INSTALL_DIR:-/usr}
    Name: env
  - Env:
    - Key: SCRIPT_DIR
      Value: ${SCRIPT_DIR:-$INSTALL_DIR/scripts}
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./scripts
    - ${SCRIPT_DIR}
  - CmdLine:
    - chmod +x ${SCRIPT_DIR}/*.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - cd ${SCRIPT_DIR}; ${SCRIPT_DIR}/setup_system_proxy.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -y &&     apt-get install -y apt-utils automake pkg-config libpcre3-dev
      zlib1g-dev liblzma-dev &&     apt-get install -y curl iputils-ping nmap net-tools
      build-essential software-properties-common libsqlite3-dev sqlite3 bzip2 libbz2-dev
      git wget unzip vim python3-pip python3-setuptools python3-dev python3-venv python3-numpy
      python3-scipy python3-pandas python3-matplotlib &&     apt-get install -y git
      xz-utils &&     apt-get install -y sudo &&     apt-get clean &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt-get install -y software-properties-common  &&     sudo add-apt-repository
      ppa:deadsnakes/ppa -y &&     sudo apt-get update -y &&     sudo apt-get install
      -y build-essential libpq-dev libssl-dev openssl libffi-dev zlib1g-dev  &&     sudo
      apt-get install -y python3-pip python3.7-dev  &&     sudo apt-get install -y
      python3.7 &&     sudo apt-get install -y python-virtualenv &&     sudo apt-get
      install -y python3-venv python3.7-venv
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/*
      &&     localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.utf8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip
      \t\txz-utils \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -svT "/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)" /docker-java-home
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /docker-java-home
    Name: env
  - Env:
    - Key: JAVA_DEBIAN_VERSION
      Value: 8u222-b10-0ubuntu1.18.04.1-b10
    Name: env
  - CmdLine:
    - "set -ex; \t\tif [ ! -d /usr/share/man/man1 ]; then \t\tmkdir -p /usr/share/man/man1;
      \tfi; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\topenjdk-8-jdk
      \t; \trm -rf /var/lib/apt/lists/*; \t\t[ \"$(readlink -f \"$JAVA_HOME\")\" =
      \"$(docker-java-home)\" ]; \t\tupdate-alternatives --get-selections | awk -v
      home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\";
      print | \"update-alternatives --set-selections\" }'; \tupdate-alternatives --query
      java | grep -q 'Status: manual'"
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64
    Name: env
  - Env:
    - Key: PATH
      Value: $JAVA_HOME/bin:$PATH
    Name: env
  - Key: MAVEN_VERSION
    Name: arg
    Value: ${MAVEN_VERSION:-3.6.1}
  - Env:
    - Key: MAVEN_VERSION
      Value: ${MAVEN_VERSION}
    Name: env
  - Env:
    - Key: MAVEN_HOME
      Value: /usr/apache-maven-${MAVEN_VERSION}
    Name: env
  - Env:
    - Key: PATH
      Value: ${PATH}:${MAVEN_HOME}/bin
    Name: env
  - CmdLine:
    - curl -sL http://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz   |
      gunzip   | tar x -C /usr/   && ln -s ${MAVEN_HOME} /usr/maven
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - ./
  - CmdLine:
    - pip3 --no-cache-dir install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 --no-cache-dir install --ignore-installed -U -r requirements.txt
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:${HOME}/.local/bin
    Name: env
  - Env:
    - Key: PATH
      Value: ${PATH}:${JAVA_HOME}/bin
    Name: env
  - CmdLine:
    - ln -s ${JAVA_HOME_ACTUAL} ${JAVA_HOME} &&     ls -al ${INSTALL_DIR} &&     echo
      "PATH=${PATH}" && export JAVA_HOME=${JAVA_HOME} && export PATH=$PATH &&     java
      -version &&     mvn --version &&     python -V &&     python3 -V &&     pip3
      --version
    Name: run
    PrependShell: true
  - Key: GRADLE_INSTALL_BASE
    Name: arg
    Value: ${GRADLE_INSTALL_BASE:-/opt/gradle}
  - Key: GRADLE_VERSION
    Name: arg
    Value: ${GRADLE_VERSION:-5.5.1}
  - Key: GRADLE_HOME
    Name: arg
    Value: ${GRADLE_INSTALL_BASE}/gradle-${GRADLE_VERSION}
  - Env:
    - Key: GRADLE_HOME
      Value: ${GRADLE_HOME}
    Name: env
  - Key: GRADLE_PACKAGE
    Name: arg
    Value: gradle-${GRADLE_VERSION}-bin.zip
  - Key: GRADLE_PACKAGE_URL
    Name: arg
    Value: https://services.gradle.org/distributions/${GRADLE_PACKAGE}
  - CmdLine:
    - mkdir -p ${GRADLE_INSTALL_BASE} &&     cd ${GRADLE_INSTALL_BASE} &&     wget
      -q --no-check-certificate -c ${GRADLE_PACKAGE_URL} &&     unzip -d ${GRADLE_INSTALL_BASE}
      ${GRADLE_PACKAGE} &&     ls -al ${GRADLE_HOME} &&     ln -s ${GRADLE_HOME}/bin/gradle
      /usr/bin/gradle &&     ${GRADLE_HOME}/bin/gradle -v &&     rm -f ${GRADLE_PACKAGE}
    Name: run
    PrependShell: true
  - Key: NODE_VERSION
    Name: arg
    Value: ${NODE_VERSION:-11}
  - Env:
    - Key: NODE_VERSION
      Value: ${NODE_VERSION}
    Name: env
  - CmdLine:
    - apt-get update -y &&     apt-get install -y sudo curl git xz-utils &&     curl
      -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - &&     apt-get
      install -y nodejs
    Name: run
    PrependShell: true
  - CmdLine:
    - cd ${SCRIPT_DIR}; ${SCRIPT_DIR}/setup_npm_proxy.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: USER_ID
      Value: ${USER_ID:-1000}
    Name: env
  - Env:
    - Key: GROUP_ID
      Value: ${GROUP_ID:-1000}
    Name: env
  - Env:
    - Key: USER
      Value: ${USER:-developer}
    Name: env
  - Env:
    - Key: HOME
      Value: /home/${USER}
    Name: env
  - CmdLine:
    - groupadd ${USER} && useradd ${USER} -m -d ${HOME} -s /bin/bash -g ${USER} &&     usermod
      -aG sudo ${USER} &&     echo "${USER} ALL=NOPASSWD:ALL" | tee -a /etc/sudoers
      &&     echo "USER =======> ${USER}" && ls -al ${HOME}
    Name: run
    PrependShell: true
  - Env:
    - Key: NPM_CONFIG_PREFIX
      Value: ${NPM_CONFIG_PREFIX:-${HOME}/.npm-global}
    Name: env
  - Env:
    - Key: PATH
      Value: '"${NPM_CONFIG_PREFIX}/bin:$PATH"'
    Name: env
  - CmdLine:
    - mkdir -p ${NPM_CONFIG_PREFIX} ${HOME}/.config ${HOME}/.npm &&     chown ${USER}:${USER}
      -R ${NPM_CONFIG_PREFIX} ${HOME}/.config ${HOME}/.npm &&     export PATH=$PATH
      && ${SCRIPT_DIR}/install-npm-packages.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s ${INSTALL_DIR}/scripts/docker-entrypoint.sh /docker-entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - chown ${USER}:${USER} -R ${INSTALL_DIR}/scripts /docker-entrypoint.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: WORKSPACE
      Value: ${HOME}/workspace
    Name: env
  - Env:
    - Key: DATA
      Value: ${HOME}/data
    Name: env
  - Name: user
    User: ${USER}
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - mkdir -p ${WORKSPACE} ${DATA}
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./examples
    - ${DATA}/examples
  - Name: volume
    Volumes:
    - ${DATA}
  - Name: volume
    Volumes:
    - ${WORKSPACE}
  - Name: user
    User: ${USER}
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  - CmdLine:
    - sudo chown -R ${USER} ~/.npm
    Name: run
    PrependShell: true
  From:
    Image: ubuntu
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu
