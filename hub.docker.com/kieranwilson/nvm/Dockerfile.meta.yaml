MetaArgs:
- DefaultValue: stable-slim
  Key: DEBIAN_VERSION
  ProvidedValue: null
  Value: stable-slim
Stages:
- BaseName: library/debian:${DEBIAN_VERSION}
  Commands:
  - CmdLine:
    - apt-get update &&     apt-get install -y --allow-downgrades --allow-remove-essential
      --allow-change-held-packages --no-install-recommends         git         curl         locales         build-essential         ca-certificates
      &&     apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&     rm
      /var/log/lastlog /var/log/faillog
    Name: run
    PrependShell: true
  - Key: PUID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PUID
      Value: ${PUID}
    Name: env
  - Key: PGID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PGID
      Value: ${PGID}
    Name: env
  - Key: GROUP_NAME
    Name: arg
    Value: nvm
  - Key: USER_NAME
    Name: arg
    Value: nvm
  - CmdLine:
    - 'groupadd -g ${PGID} ${GROUP_NAME} &&     useradd --uid ${PUID} --gid ${GROUP_NAME}
      --shell /bin/bash --create-home ${USER_NAME} &&     echo ''${USER_NAME} ALL=(ALL)
      NOPASSWD: ALL'' >> /etc/sudoers'
    Name: run
    PrependShell: true
  - Key: TZ
    Name: arg
    Value: AEST
  - Env:
    - Key: TZ
      Value: ${TZ}
    Name: env
  - CmdLine:
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &&     echo $TZ > /etc/timezone
      &&     locale-gen en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: BASH_ENV
      Value: /etc/profile
    Name: env
  - Key: NVM_VERSION
    Name: arg
    Value: node
  - Env:
    - Key: NODE_VERSION
      Value: ${NODE_VERSION}
    Name: env
  - Key: INSTALL_NODE
    Name: arg
    Value: "true"
  - Key: NPM_REGISTRY
    Name: arg
    Value: null
  - Env:
    - Key: NPM_REGISTRY
      Value: ${NPM_REGISTRY}
    Name: env
  - Env:
    - Key: NVM_DIR
      Value: /home/${USER_NAME}/.nvm
    Name: env
  - CmdLine:
    - 'if [ ${INSTALL_NODE} = true ]; then     mkdir $NVM_DIR &&     curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh
      | bash &&         . $NVM_DIR/nvm.sh &&         nvm install $NVM_VERSION &&         nvm
      use $NVM_VERSION &&         NODE_VERSION=$(node --version) &&         nvm alias
      default $NODE_VERSION &&         if [ ${NPM_REGISTRY} ]; then             npm
      config set registry ${NPM_REGISTRY}         ;fi &&         chown -R ${GROUP_NAME}:${USER_NAME}
      $NVM_DIR &&         echo "export PATH=\$PATH:$NVM_DIR/versions/node/${NODE_VERSION}/bin"
      >> /etc/profile &&         echo ''[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  #
      This loads nvm'' >> /etc/profile &&         echo ''[ -s "$NVM_DIR/bash_completion"
      ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'' >> /etc/profile
      ;fi'
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/application
  - Name: user
    User: $USER_NAME
  - CmdLine:
    - /bin/bash
    - -c
    Name: entrypoint
    PrependShell: false
  From:
    Image: library/debian:${DEBIAN_VERSION}
  Name: ""
  Platform: ""
  SourceCode: FROM library/debian:${DEBIAN_VERSION}
