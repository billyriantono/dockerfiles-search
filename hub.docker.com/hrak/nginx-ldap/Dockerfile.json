{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "nginx-build",
      "BaseName": "alpine:3.10",
      "SourceCode": "FROM alpine:3.10 as nginx-build",
      "Platform": "",
      "As": "nginx-build",
      "From": {
        "Image": "alpine:3.10"
      },
      "Commands": [
        {
          "Maintainer": "Hans Rakers \u003ch.rakers@global.leaseweb.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "release-1.16.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"==\u003e Installing dependencies...\"  \u0026\u0026 apk update  \u0026\u0026 apk add --virtual build-deps     make gcc libc-dev openldap-dev     pcre-dev libressl-dev zlib-dev     linux-headers wget git     \u0026\u0026 mkdir /var/log/nginx \t\u0026\u0026 mkdir /etc/nginx \t\u0026\u0026 cd ~ \t\u0026\u0026 git clone https://github.com/kvspb/nginx-auth-ldap.git \t\u0026\u0026 git clone https://github.com/nginx/nginx.git \t\u0026\u0026 cd ~/nginx \t\u0026\u0026 git checkout tags/${NGINX_VERSION} \t\u0026\u0026 ./auto/configure \t\t--add-module=/root/nginx-auth-ldap \t\t--with-http_ssl_module \t\t--with-debug \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \t\t--user=nginx \t\t--group=nginx         --with-stream         --with-stream_ssl_module         --with-debug         --with-file-aio         --with-threads         --with-http_gunzip_module         --with-http_gzip_static_module         --with-http_v2_module         --with-http_auth_request_module \t\u0026\u0026 echo \"==\u003e Building Nginx...\" \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "alpine:3.10",
      "SourceCode": "FROM alpine:3.10",
      "Platform": "",
      "From": {
        "Image": "alpine:3.10"
      },
      "Commands": [
        {
          "Maintainer": "Hans Rakers \u003ch.rakers@global.leaseweb.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DOCKERIZE_VERSION",
              "Value": "v0.6.1"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "NGINX_PREFIX",
          "Name": "arg",
          "Value": "\"/usr/local/nginx\""
        },
        {
          "Chown": "",
          "From": "nginx-build",
          "Name": "copy",
          "SourcesAndDest": [
            "\"${NGINX_PREFIX}/\"",
            "\"${NGINX_PREFIX}/\""
          ]
        },
        {
          "Chown": "",
          "From": "nginx-build",
          "Name": "copy",
          "SourcesAndDest": [
            "\"/etc/nginx/\"",
            "\"/etc/nginx/\""
          ]
        },
        {
          "CmdLine": [
            "echo \"==\u003e Finishing...\" \t\u0026\u0026 addgroup -S nginx \t\u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t\u0026\u0026 mkdir /etc/nginx/conf.d \t\u0026\u0026 rm -f /etc/nginx/*.default \t\u0026\u0026 mkdir /var/log/nginx         \u0026\u0026 touch /var/log/nginx/access.log /var/log/nginx/error.log \t\u0026\u0026 mkdir -p /usr/share/nginx/html \t\u0026\u0026 install -m644 ${NGINX_PREFIX}/html/index.html /usr/share/nginx/html/ \t\u0026\u0026 install -m644 ${NGINX_PREFIX}/html/50x.html /usr/share/nginx/html/     \u0026\u0026 ln -sf ${NGINX_PREFIX}/sbin/nginx /usr/sbin/nginx \t\u0026\u0026 apk update \t\u0026\u0026 apk add --no-cache         libpcrecpp libpcre16 libpcre32 libressl libssl1.1 pcre libldap libgcc libstdc++ \t\u0026\u0026 rm -rf /var/cache/apk/* \t\u0026\u0026 wget -O /tmp/dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \t\u0026\u0026 tar -C /usr/local/bin -xzvf /tmp/dockerize.tar.gz \t\u0026\u0026 rm -rf /tmp/dockerize.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.vh.default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Name": "workdir",
          "Path": "${NGINX_PREFIX}/"
        },
        {
          "Expression": "RUN rm -rf html/*",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY nginx ${NGINX_PREFIX}/",
          "Name": "onbuild"
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run.sh",
            "/run.sh"
          ]
        },
        {
          "CmdLine": [
            "/run.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}