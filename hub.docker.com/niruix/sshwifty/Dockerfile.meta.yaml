MetaArgs: null
Stages:
- As: base
  BaseName: debian:testing
  Commands:
  - CmdLine:
    - 'set -ex &&     cd / &&     echo ''res=0; for i in $(seq 0 36); do $@; res=$?;
      [ $res -eq 0 ] && exit $res || sleep 10; done; exit $res'' > /try.sh && chmod
      +x /try.sh &&     echo ''cpid=""; ret=0; i=0; for c in "$@"; do ( (((((eval
      $c; echo $? >&3) | sed "s/^/|-($i) /" >&4) 2>&1 | sed "s/^/|-($i)!/" >&2) 3>&1)
      | (read xs; exit $xs)) 4>&1) & ppid=$!; cpid="$cpid $ppid"; echo "+ Child $i
      (PID $ppid): $c ..."; i=$((i+1)); done; for c in $cpid; do wait $c; cret=$?;
      [ $cret -eq 0 ] && continue; echo "* Child PID $c has failed." >&2; ret=$cret;
      done; exit $ret'' > /child.sh && chmod +x /child.sh &&     export PATH=$PATH:/
      &&     echo ''apt-get update && apt-get install autoconf automake libtool build-essential
      curl git npm golang-go -y'' > ./install.sh && chmod +x ./install.sh &&     ([
      -z "$HTTP_PROXY" ] || (echo "Acquire::http::Proxy \"$HTTP_PROXY\";" >> /etc/apt/apt.conf))
      &&     ([ -z "$HTTPS_PROXY" ] || (echo "Acquire::https::Proxy \"$HTTPS_PROXY\";"
      >> /etc/apt/apt.conf)) &&     (echo "Acquire::Retries \"8\";" >> /etc/apt/apt.conf)
      &&     try.sh ./install.sh && rm ./install.sh &&     ([ -z "$HTTP_PROXY" ] ||
      (git config --global http.proxy "$HTTP_PROXY" && npm config set proxy "$HTTP_PROXY"))
      &&     ([ -z "$HTTPS_PROXY" ] || (git config --global https.proxy "$HTTPS_PROXY"
      && npm config set https-proxy "$HTTPS_PROXY")) &&     echo "npm install -g npm
      || (npm cache clean -f && false) " > ./install.sh && chmod +x ./install.sh &&
      try.sh ./install.sh && rm ./install.sh'
    Name: run
    PrependShell: true
  From:
    Image: debian:testing
  Name: base
  Platform: ""
  SourceCode: FROM debian:testing AS base
- As: libbase
  BaseName: base
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /tmp/.build/sshwifty
  - CmdLine:
    - set -ex &&     cd / &&     export PATH=$PATH:/ &&     try.sh apt-get install
      libpng-dev -y &&     ls -l /tmp/.build/sshwifty &&     child.sh         'cd
      /tmp/.build/sshwifty && echo "npm install || (npm cache clean -f && rm ~/.npm/_*
      -rf && false)" > ./npm_install.sh && chmod +x ./npm_install.sh && try.sh ./npm_install.sh
      && rm ./npm_install.sh'         'cd /tmp/.build/sshwifty && try.sh go mod download'
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: libbase
  Platform: ""
  SourceCode: FROM base AS libbase
- As: builder
  BaseName: libbase
  Commands:
  - CmdLine:
    - set -ex &&     cd / &&     export PATH=$PATH:/ &&     ([ -z "$HTTP_PROXY" ]
      || (git config --global http.proxy "$HTTP_PROXY" && npm config set proxy "$HTTP_PROXY"))
      &&     ([ -z "$HTTPS_PROXY" ] || (git config --global https.proxy "$HTTPS_PROXY"
      && npm config set https-proxy "$HTTPS_PROXY")) &&     (cd /tmp/.build/sshwifty
      && try.sh npm run build && mv ./sshwifty /)
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 1
      Named: libbase
  Name: builder
  Platform: ""
  SourceCode: FROM libbase AS builder
- BaseName: alpine:latest
  Commands:
  - Env:
    - Key: SSHWIFTY_HOSTNAME
      Value: ""
    - Key: SSHWIFTY_SHAREDKEY
      Value: ""
    - Key: SSHWIFTY_DIALTIMEOUT
      Value: "10"
    - Key: SSHWIFTY_SOCKS5
      Value: ""
    - Key: SSHWIFTY_SOCKS5_USER
      Value: ""
    - Key: SSHWIFTY_SOCKS5_PASSWORD
      Value: ""
    - Key: SSHWIFTY_LISTENINTERFACE
      Value: 0.0.0.0
    - Key: SSHWIFTY_LISTENPORT
      Value: "8182"
    - Key: SSHWIFTY_INITIALTIMEOUT
      Value: "0"
    - Key: SSHWIFTY_READTIMEOUT
      Value: "0"
    - Key: SSHWIFTY_WRITETIMEOUT
      Value: "0"
    - Key: SSHWIFTY_HEARTBEATTIMEOUT
      Value: "0"
    - Key: SSHWIFTY_READDELAY
      Value: "0"
    - Key: SSHWIFTY_WRITEELAY
      Value: "0"
    - Key: SSHWIFTY_TLSCERTIFICATEFILE
      Value: ""
    - Key: SSHWIFTY_TLSCERTIFICATEKEYFILE
      Value: ""
    - Key: SSHWIFTY_DOCKER_TLSCERT
      Value: ""
    - Key: SSHWIFTY_DOCKER_TLSCERTKEY
      Value: ""
    Name: env
  - Chown: ""
    From: builder
    Name: copy
    SourcesAndDest:
    - /sshwifty
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /sshwifty-src
  - CmdLine:
    - set -ex &&     adduser -D sshwifty &&     chmod +x /sshwifty &&     echo '#!/bin/sh'
      > /sshwifty.sh && echo >> /sshwifty.sh && echo '([ -z "$SSHWIFTY_DOCKER_TLSCERT"
      ] || echo "$SSHWIFTY_DOCKER_TLSCERT" > /tmp/cert); ([ -z "$SSHWIFTY_DOCKER_TLSCERTKEY"
      ] || echo "$SSHWIFTY_DOCKER_TLSCERTKEY" > /tmp/certkey); if [ -f "/tmp/cert"
      ] && [ -f "/tmp/certkey" ]; then SSHWIFTY_TLSCERTIFICATEFILE=/tmp/cert SSHWIFTY_TLSCERTIFICATEKEYFILE=/tmp/certkey
      /sshwifty; else /sshwifty; fi;' >> /sshwifty.sh && chmod +x /sshwifty.sh
    Name: run
    PrependShell: true
  - Name: user
    User: sshwifty
  - Name: expose
    Ports:
    - "8182"
  - CmdLine:
    - /sshwifty.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine: []
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:latest
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:latest
