MetaArgs: null
Stages:
- BaseName: nvidia/cudagl:10.0-devel
  Commands:
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: OPENCV_VERSION
      Value: '"4.0.1"'
    Name: env
  - Env:
    - Key: IP_GPU_ENABLED
      Value: "0"
    Name: env
  - Env:
    - Key: IP_ABORT_NESTED_SHELLS
      Value: "1"
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates
      \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get
      install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf
      /var/lib/apt/lists/*; \tfi"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit
      \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf
      \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick
      \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev
      \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibjpeg-dev
      \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev
      \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev
      \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev
      \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev
      \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null
      | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse
      \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&&
      rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update \t&& apt-get -y install software-properties-common \t&& add-apt-repository
      ppa:deadsnakes/ppa \t&& rm -rf /var/lib/apt/lists/* \t&& apt-get install -y
      python3.6 \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y python3.6 \tpython3.6-dev \t&& rm -rf
      /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.6.8
    Name: env
  - CmdLine:
    - "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1
      -f python.tar.xz \t&& rm python.tar.xz \t&& rm -rf python.tar.xz.asc \t\t&&
      cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local
      -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o
      \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec
      rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update -y && apt-get install -y             libgstreamer1.0-0             gstreamer1.0-plugins-base
      \            gstreamer1.0-plugins-good             gstreamer1.0-plugins-bad
      \            gstreamer1.0-plugins-ugly             gstreamer1.0-libav             gstreamer1.0-doc
      \            gstreamer1.0-tools             libgstreamer1.0-dev \t\t\tlibgstreamer-plugins-base1.0-dev
      \t\t\t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \t\t\t\t\t\tlibgtkglext1 \t\t\t\t\t\tlibgtkglext1-dev
      \t\t\t\t\t\t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update &&   apt-get install -y   build-essential   cmake   git   wget
      \  unzip   yasm   pkg-config   libswscale-dev   libtbb2   libtbb-dev   libjpeg-dev
      \  libpng-dev   libtiff-dev   libavformat-dev   libpq-dev \tlibgtk2.0-dev \tlibavcodec-dev
      \tlibdc1394-22-dev \tautotools-dev \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y \tlibeigen3-dev \tlibxvidcore-dev \tlibx264-dev
      \tlibatlas-base-dev \tgfortran \tlibopenblas-dev \tliblapack-dev \tliblapacke-dev
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install numpy
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - wget -N https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip
      && unzip -o ${OPENCV_VERSION}.zip && rm ${OPENCV_VERSION}.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -N https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && unzip
      -o ${OPENCV_VERSION}.zip && mkdir /opencv-${OPENCV_VERSION}/cmake_binary &&
      cd /opencv-${OPENCV_VERSION}/cmake_binary && cmake -DBUILD_TIFF=ON   -DBUILD_opencv_java=OFF   -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-${OPENCV_VERSION}/modules   -DWITH_CUDA=$IP_GPU_ENABLED   -DWITH_OPENGL=ON   -DWITH_GSTREAMER=ON   -DWITH_GSTREAMER_0_10=OFF   -DENABLE_FAST_MATH=1   -DCUDA_FAST_MATH=$IP_GPU_ENABLED   -DWITH_CUBLAS=$IP_GPU_ENABLED   -DWITH_OPENCL=OFF   -DWITH_IPP=ON   -DWITH_TBB=ON   -DWITH_EIGEN=ON   -DWITH_V4L=ON   -DBUILD_TESTS=OFF   -DBUILD_PERF_TESTS=OFF   -DCMAKE_BUILD_TYPE=RELEASE   -DCMAKE_INSTALL_PREFIX=$(python3
      -c "import sys; print(sys.prefix)")   -DPYTHON_EXECUTABLE=$(which python3)   -DPYTHON_INCLUDE_DIR=$(python3
      -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")   -DPYTHON_PACKAGES_PATH=$(python3
      -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")   ..
      && make install && rm /${OPENCV_VERSION}.zip && rm -rf /opencv-${OPENCV_VERSION}
      && rm -rf /opencv_contrib-${OPENCV_VERSION}
    Name: run
    PrependShell: true
  - CmdLine:
    - if [ "$IP_GPU_ENABLED" -eq 1 ]; then pip install tensorflow-gpu==1.12.0; else
      pip install tensorflow==1.12.0; fi
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install imagepypelines
    Name: run
    PrependShell: true
  - CmdLine:
    - "pip install Sphinx \t  sphinx_bootstrap_theme \t  m2r \t  pytest \t  pytest-cov
      \t  hypothesis \t  coverage \t  codecov"
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y vim
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y libxtst-dev
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./startup.sh
    - /root/startup.sh
  - CmdLine:
    - echo '/root/startup.sh' >> /root/.bashrc
    Name: run
    PrependShell: true
  From:
    Image: nvidia/cudagl:10.0-devel
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cudagl:10.0-devel
