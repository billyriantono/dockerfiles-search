{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get -qq update \u0026\u0026     apt-get -qq install       curl       docker.io       git       iptables       nginx       npm       python       python-dev       python-pip       sudo       unzip       vim       wget \u0026\u0026     curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - \u0026\u0026     apt-get -qq install nodejs \u0026\u0026     ln -s /usr/local/bin/node /usr/local/bin/nodejs \u0026\u0026     apt-get -qq autoremove \u0026\u0026     apt-get -qq autoclean \u0026\u0026     apt-get -qq clean all \u0026\u0026     rm -rf /var/cache/apk/* /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_BUCKET",
              "Value": "get.docker.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "1.10.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DIND_COMMIT",
              "Value": "3b5fac462d21ca164b3778647420016315289034"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 curl -fSL \"https://${DOCKER_BUCKET}/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz     \u0026\u0026 tar -xzvf docker.tgz     \u0026\u0026 rm docker.tgz     \u0026\u0026 docker -v     \u0026\u0026 wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind     \u0026\u0026 chmod +x /usr/local/bin/dind     \u0026\u0026 pip install flask-restful arrow jinja2 requests"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TOOLSERVER_PORT",
              "Value": "8083"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "8082"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "resolver"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "js/package.json",
            "js/bower.json",
            "/usr/share/nginx/html/"
          ]
        },
        {
          "CmdLine": [
            "cd /usr/share/nginx/html/ \u0026\u0026     npm install -g bower \u0026\u0026     npm install \u0026\u0026     bower install --config.interactive=false --allow-root \u0026\u0026     rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "js",
            "/usr/share/nginx/html/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "api",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "data",
            "/usr/local/data/"
          ]
        }
      ]
    }
  ]
}