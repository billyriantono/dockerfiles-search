{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:testing",
      "SourceCode": "FROM debian:testing",
      "Platform": "",
      "From": {
        "Image": "debian:testing"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "VERSION",
              "Value": "6.9.5"
            },
            {
              "Key": "NPM_VERSION",
              "Value": "3.8"
            },
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            },
            {
              "Key": "NVM_DIR",
              "Value": "\"/root/.nvm\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/protractor/etc/dkpg/dpkg.cfg.d/01_nodoc",
            "/etc/dkpg/dpkg.cfg.d/01_nodoc"
          ]
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026   apt-get install -y     openjdk-8-jre     xvfb     libgconf-2-4     libexif12     chromium     supervisor     netcat-traditional     curl \u0026\u0026   apt-get clean \u0026\u0026   rm -rf /var/lib/apt/lists/* \u0026\u0026   rm -rf /var/log/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt -qqy update   \u0026\u0026 apt -qqy --no-install-recommends install     libav-tools   \u0026\u0026 rm -rf /var/lib/apt/lists/*   \u0026\u0026 apt -qyy clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt -qqy update   \u0026\u0026 apt -qqy install     ffmpeg     gpac   \u0026\u0026 rm -rf /var/lib/apt/lists/*   \u0026\u0026 apt -qyy clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "protractor/supervisor.conf",
            "/etc/supervisor/supervisor.conf"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "protractor/supervisord/protractor.conf",
            "/etc/supervisor/conf.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "protractor/install_nvm.sh",
            "/project/install_nvm.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "protractor/bin/protractor/run_protractor.sh",
            "/bin/protractor/run_protractor.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -c \"/project/install_nvm.sh \u0026\u0026 rm -f /project/install_nvm.sh\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:/root/.nvm/versions/node/v6.9.5/lib/node_modules/integration/node_modules/webdriver-manager\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/bin/bash -c \". \\\"$NVM_DIR/nvm.sh\\\" \u0026\u0026     nvm install $VERSION; nvm use v$VERSION;     cd /project;     npm install --global webdriver-manager     webdriver-manager     lodash     protractor     request-promise     jasmine-core@2.3.4     jasmine-reporters@2.0.7     jasmine-spec-reporter@3.2.0     q@~1.5.0     oauth-redirect@1.0.0     request     npm-install-missing     optimist;     webdriver-manager update \u0026\u0026     npm bin \u0026\u0026     echo 'npm:'; npm -v;     echo 'node:'; node -v;     find / -name lodash;     echo 'path: $PATH';     echo 'NODE_PATH: $NODE_PATH';     echo 'NVM_DIR: $NVM_DIR';     which protractor; protractor --version;     chmod +x /bin/protractor/run_protractor.sh\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c \". \\\"$NVM_DIR/nvm.sh\\\" \u0026\u0026 nvm use v$VERSION; npm bin; find / -name protractor | grep '\\.bin'; which protractor; protractor --version\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash",
            "-c",
            ". \"$NVM_DIR/nvm.sh\" \u0026\u0026 nvm use v$VERSION \u0026\u0026 /usr/bin/supervisord -n -c /etc/supervisor/supervisor.conf"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "volume",
          "Volumes": [
            "/project"
          ]
        }
      ]
    }
  ]
}