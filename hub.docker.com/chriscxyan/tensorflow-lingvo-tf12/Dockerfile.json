{
  "MetaArgs": [
    {
      "Key": "cpu_base_image",
      "DefaultValue": "\"ubuntu:16.04\"",
      "ProvidedValue": null,
      "Value": "\"ubuntu:16.04\""
    },
    {
      "Key": "base_image",
      "DefaultValue": "\"nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\"",
      "ProvidedValue": null,
      "Value": "\"nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\""
    }
  ],
  "Stages": [
    {
      "Name": "",
      "BaseName": "$base_image",
      "SourceCode": "FROM $base_image",
      "Platform": "",
      "From": {
        "Image": "$base_image"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Patrick Nguyen \u003cdrpng@google.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "cpu_base_image",
          "Name": "arg",
          "Value": "\"ubuntu:16.04\""
        },
        {
          "Key": "base_image",
          "Name": "arg",
          "Value": "\"nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\""
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         aria2         build-essential         curl         gcc-4.8 g++-4.8 gcc-4.8-base         git         less         libfreetype6-dev         libhdf5-serial-dev         libpng12-dev         libzmq3-dev         lsof         pkg-config         python         python-dev         python-tk         rsync         software-properties-common         sox         unzip         vim         \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100 \u0026\u0026    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python get-pip.py \u0026\u0026     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install         Pillow         h5py         ipykernel         jupyter         jupyter_http_over_ws         matplotlib         numpy         pandas         recommonmark         scipy         sklearn         sphinx         sphinx_rtd_theme         \u0026\u0026     python -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter serverextension enable --py jupyter_http_over_ws"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install tensorflow-gpu==1.12.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "bazel_version",
          "Name": "arg",
          "Value": "0.17.2"
        },
        {
          "Env": [
            {
              "Key": "BAZEL_VERSION",
              "Value": "${bazel_version}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /bazel \u0026\u0026     cd /bazel \u0026\u0026     curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \u0026\u0026     curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \u0026\u0026     chmod +x bazel-*.sh \u0026\u0026     ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \u0026\u0026     cd / \u0026\u0026     rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "6006"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/tmp/lingvo\""
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}