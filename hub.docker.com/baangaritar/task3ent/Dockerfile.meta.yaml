MetaArgs: null
Stages:
- BaseName: phusion/baseimage
  Commands:
  - Env:
    - Key: HOME
      Value: /root
    Name: env
  - CmdLine:
    - (usermod -u 1000 www-data)
    Name: run
    PrependShell: true
  - CmdLine:
    - (groupmod -g 1000 www-data)
    Name: run
    PrependShell: true
  - CmdLine:
    - (usermod -d /home/www-data www-data)
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /home/www-data/.ssh
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R 1000:1000 /home/www-data
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get install -y     ca-certificates \tcurl     libcurl3 \tlibrecode0 \tlibsqlite3-0
      \tlibpng12-dev \tlibxml2 \tzip \tunzip \tlibjpeg-dev \tautoconf \tfile \tg++
      \tgcc \tlibc-dev \tmake \tpkg-config \tre2c \twget \tnano     ssh     npm \tpython-software-properties
      \tbuild-essential \tpkg-config \tlibmcrypt-dev     libyaml-dev     libssl-dev
      \    libsslcommon2-dev     libcurl4-openssl-dev     libxml2-dev     xz-utils
      \    libxslt1.1     libxslt1-dev     libicu-dev     libicu55     libmcrypt4
      \     libjpeg-dev     libpng12-dev     libsqlite3-0     libxml2     zip     git
      \    unzip     libxslt1.1 \tlibgpgme11-dev     ssmtp \t--no-install-recommends"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /usr/bin/nodejs /usr/bin/node   && npm install -g n   && n lts
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://nginx.org/packages/ubuntu/ trusty nginx " > /etc/apt/sources.list.d/nginx.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb-src http://nginx.org/packages/ubuntu/ trusty nginx" >> /etc/apt/sources.list.d/nginx.list
    Name: run
    PrependShell: true
  - CmdLine:
    - wget http://nginx.org/keys/nginx_signing.key
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key add nginx_signing.key
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --force-yes nginx
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -r /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "daemon off;" >> /etc/nginx/nginx.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "error_log /dev/stdout info;" >> /etc/nginx/nginx.conf
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - mkdir -p $PHP_INI_DIR/conf.d
    Name: run
    PrependShell: true
  - Env:
    - Key: CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: CPPFLAGS
      Value: '"$CFLAGS"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.1.10
    Name: env
  - Env:
    - Key: PHP_URL
      Value: '"https://secure.php.net/get/php-7.1.10.tar.xz/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_ASC_URL
      Value: '"https://secure.php.net/get/php-7.1.10.tar.xz.asc/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: '"2b8efa771a2ead0bb3ae67b530ca505b5b286adc873cca9ce97a6e1d6815c50b"'
    Name: env
  - Env:
    - Key: PHP_MD5
      Value: '""'
    Name: env
  - CmdLine:
    - set -xe;         fetchDeps='         wget     ';     apt-get update;     apt-get
      install -y --no-install-recommends $fetchDeps;     rm -rf /var/lib/apt/lists/*;         mkdir
      -p /usr/src;     cd /usr/src;         wget -O php.tar.xz "$PHP_URL";         if
      [ -n "$PHP_SHA256" ]; then         echo "$PHP_SHA256 *php.tar.xz" | sha256sum
      -c -;     fi;     if [ -n "$PHP_MD5" ]; then         echo "$PHP_MD5 *php.tar.xz"
      | md5sum -c -;     fi;         if [ -n "$PHP_ASC_URL" ]; then         wget -O
      php.tar.xz.asc "$PHP_ASC_URL";         export GNUPGHOME="$(mktemp -d)";         for
      key in $GPG_KEYS; do             gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key";         done;         gpg --batch --verify php.tar.xz.asc
      php.tar.xz;         rm -r "$GNUPGHOME";     fi;         apt-get purge -y --auto-remove
      $fetchDeps
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Dockerbuild/docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - chmod +x /usr/local/bin/docker-php-source
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
    Name: env
  - CmdLine:
    - set -xe     && buildDeps="         $PHP_EXTRA_BUILD_DEPS         libcurl4-openssl-dev         libreadline6-dev         librecode-dev         libsqlite3-dev         libssl-dev         libxml2-dev         libfreetype6-dev         xz-utils     "     &&
      apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm
      -rf /var/lib/apt/lists/*         && docker-php-source extract     && cd /usr/src/php     &&
      ./configure         --with-config-file-path="$PHP_INI_DIR"         --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"                 --disable-cgi                 --enable-ftp         --enable-mysqlnd         --with-mysqli         --with-curl         --with-openssl         --with-readline         --with-recode         --with-zlib         --with-gd         --enable-xdebug         --with-jpeg-dir=/usr/lib/x86_64-linux-gnu         --with-pdo-mysql         --enable-mbstring         --with-mcrypt         --enable-soap         --enable-intl         --enable-bcmath         --enable-simplexml         --with-mhash         --with-xsl         --enable-zip         --enable-caneldar         --with-freetype-dir=/usr/include/freetype2         --enable-gd-native-ttf         $PHP_EXTRA_CONFIGURE_ARGS     &&
      make -j "$(nproc)"     && make install     && { find /usr/local/bin /usr/local/sbin
      -type f -executable -exec strip --strip-all '{}' + || true; }     && make clean     &&
      docker-php-source delete
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www
  - CmdLine:
    - set -ex         && cd /usr/local/etc         && if [ -d php-fpm.d ]; then             sed
      's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;             cp
      php-fpm.d/www.conf.default php-fpm.d/www.conf;         else             mkdir
      php-fpm.d;             cp php-fpm.conf.default php-fpm.d/www.conf;             {                 echo
      '[global]';                 echo 'include=etc/php-fpm.d/*.conf';             }
      | tee php-fpm.conf;         fi         && {             echo '[global]';             echo
      'error_log = /proc/self/fd/2';             echo;             echo '[www]';             echo
      '; if we send this to /proc/self/fd/1, it never appears';             echo 'access.log
      = /proc/self/fd/2';             echo;             echo 'clear_env = no';             echo;             echo
      '; Ensure worker stdout and stderr are sent to the main error log.';             echo
      'catch_workers_output = yes';         } | tee php-fpm.d/docker.conf         &&
      {             echo '[global]';             echo 'daemonize = no';             echo;             echo
      '[www]';             echo 'listen = [::]:9000';         } | tee php-fpm.d/zz-docker.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install mongodb
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install yaml
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /var/www &&    chown -R www-data:www-data /var/www &&    chmod -R 777
      /var/www
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir                       /etc/service/nginx
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir                       /etc/service/phpfpm
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir                       /root/.composer
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/nginx.conf
    - /buildfiles/nginx.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/ssmtp.conf
    - /etc/ssmtp/ssmtp.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/default
    - /etc/nginx/conf.d/default.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/nginx.sh
    - /etc/service/nginx/run
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/phpfpm.sh
    - /etc/service/phpfpm/run
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/auth.json
    - /root/.composer/auth.json
  - Chown: ""
    Name: add
    SourcesAndDest:
    - Dockerbuild/php.ini
    - /usr/local/etc/php/php.ini
  - CmdLine:
    - chmod +x                    /etc/service/nginx/run
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +x                    /etc/service/phpfpm/run
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Dockerbuild/init.sh
    - /sbin/init
  - CmdLine:
    - chmod +x /sbin/init
    Name: run
    PrependShell: true
  - CmdLine:
    - /sbin/init
    Name: cmd
    PrependShell: false
  From:
    Image: phusion/baseimage
  Name: ""
  Platform: ""
  SourceCode: FROM phusion/baseimage
