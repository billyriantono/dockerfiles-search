{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvcr.io/nvidia/tensorrt:19.10-py3",
      "SourceCode": "FROM nvcr.io/nvidia/tensorrt:19.10-py3",
      "Platform": "",
      "From": {
        "Image": "nvcr.io/nvidia/tensorrt:19.10-py3"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"M. Amine Hadj-Youcef  \u003chadjyoucef.amine@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Europe/Minsk"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -qq update \u0026\u0026 apt-get -qq install -y --no-install-recommends \tprotobuf-compiler \tgeany \tpython3 \tpython3-tk \tpython3-pip \tpython3-dev \tpython3-setuptools \teog \tgedit \tbuild-essential \tssh \tca-certificates \tcurl \tcmake \tgit \twget \tunzip \tyasm \tpkg-config \tlibswscale-dev \tlibtbb2 \tlibtbb-dev \tlibjpeg-dev \tlibgflags-dev \tlibgoogle-glog-dev \tlibprotobuf-dev \tliblmdb-dev \tlibpng-dev \tlibtiff-dev \tlibavformat-dev \tlibpq-dev \tlibgtk2.0-dev \tlibhdf5-dev \tlibcurl4-openssl-dev\tlibprotoc-dev \tswig\tqt5-default \tlibboost-all-dev \tlibboost-dev \txdg-utils \tsnapd \trsync \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/bin \u0026\u0026\tln -s /usr/bin/python3 python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \t\u0026\u0026 wget -q  https://bootstrap.pypa.io/get-pip.py \t\u0026\u0026 python3 get-pip.py \t\u0026\u0026 pip3 install --upgrade pip \t\u0026\u0026 rm -f get-pip.py \t\u0026\u0026 python3 -m pip --version\t\u0026\u0026 pip install --user --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "\"4.1.1\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -O opencv.zip  https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "unzip opencv.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /opencv-${OPENCV_VERSION}/cmake_binary"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opencv-${OPENCV_VERSION}/cmake_binary"
        },
        {
          "CmdLine": [
            "cmake -DBUILD_TIFF=ON \t-DBUILD_opencv_java=OFF \t-DWITH_CUDA=ON \t-DENABLE_FAST_MATH=1 \t-DCUDA_FAST_MATH=1 \t-DWITH_CUBLAS=1 \t-DENABLE_AVX=ON \t-DWITH_OPENGL=ON \t-DWITH_OPENCL=ON \t-DWITH_IPP=ON \t-DWITH_TBB=ON \t-DWITH_EIGEN=ON \t-DWITH_V4L=ON \t-DBUILD_TESTS=OFF \t-DBUILD_PERF_TESTS=OFF \t-DCMAKE_BUILD_TYPE=RELEASE \t-DCMAKE_INSTALL_PREFIX=$(python3.6 -c \"import sys; print(sys.prefix)\") \t-DPYTHON_EXECUTABLE=$(which python3.6) \t-DPYTHON_INCLUDE_DIR=$(python3.6 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \t-DPYTHON_PACKAGES_PATH=$(python3.6 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \t-DINSTALL_PYTHON_EXAMPLES=ON \t-DINSTALL_C_EXAMPLES=OFF \t-DOPENCV_ENABLE_NONFREE=ON \t-DOPENCV_GENERATE_PKGCONFIG=ON \t-DBUILD_EXAMPLES=ON \t-D CUDA_TOOLKIT_ROOT_DIR= /usr/local/cuda-10.1 \t-DWITH_QT=ON .."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x download_with_curl.sh \t\u0026\u0026 sh ./download_with_curl.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make -j8 \t\u0026\u0026 make install \t\u0026\u0026 rm /opencv.zip \t\u0026\u0026 rm -rf /opencv-${OPENCV_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s \t/usr/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-x86_64-linux-gnu.so \t/usr/local/lib/python3.6/dist-packages/cv2.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install torch==1.2.0+cu92 torchvision==0.4.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install tensorflow-gpu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install tflearn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install onnx onnxmltools onnxruntime-gpu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install keras"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --recursive -b 6.0 https://github.com/onnx/onnx-tensorrt.git \u0026\u0026\tcd onnx-tensorrt \u0026\u0026\tmkdir build  \u0026\u0026\tcd build \u0026\u0026\tcmake .. -DCUDA_INCLUDE_DIRS=/usr/local/cuda/include -DTENSORRT_ROOT=/usr/src/tensorrt -DGPU_ARCHS=\"35\" \u0026\u0026\tmake -j8 \u0026\u0026\tmake install \u0026\u0026\tldconfig \u0026\u0026 \tcd .. \u0026\u0026 \tpython setup.py build \u0026\u0026\tpython setup.py install \u0026\u0026\trm -rf ./build/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/lanpa/tensorboardX \u0026\u0026 cd tensorboardX \u0026\u0026 python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "pip3 install --requirement /tmp/requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://cli-assets.heroku.com/install.sh | sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /root/.streamlit"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c 'echo -e \"\t[general]\\n\temail = \\\"hadjyoucef.amine@gmail.com\\\"\\n\t\" \u003e /root/.streamlit/credentials.toml'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c 'echo -e \"\t[server]\\n\tenableCORS = false\\n\t\" \u003e /root/.streamlit/config.toml'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8501"
          ]
        },
        {
          "CmdLine": [
            "echo 'export LC_ALL=C.UTF-8' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export LANG=C.UTF-8' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "(apt-get -qq autoremove -y; \tapt-get -qq autoclean -y)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/workspace"
        },
        {
          "CmdLine": [
            "jupyter",
            "notebook",
            "--allow-root",
            "--port=8888",
            "--ip=0.0.0.0",
            "--no-browser"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}