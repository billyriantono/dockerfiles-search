MetaArgs: null
Stages:
- BaseName: centos:7
  Commands:
  - Env:
    - Key: container
      Value: docker
    Name: env
  - Maintainer: ManageIQ https://github.com/ManageIQ/manageiq-appliance-build
    Name: maintainer
  - Key: REF
    Name: arg
    Value: master
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: TERM
      Value: xterm
    Name: env
  - Env:
    - Key: RUBY_GEMS_ROOT
      Value: /opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0
    Name: env
  - Env:
    - Key: APP_ROOT
      Value: /var/www/miq/vmdb
    Name: env
  - Env:
    - Key: APP_ROOT_PERSISTENT
      Value: /persistent
    Name: env
  - Env:
    - Key: APPLIANCE_ROOT
      Value: /opt/manageiq/manageiq-appliance
    Name: env
  - Env:
    - Key: SUI_ROOT
      Value: /opt/manageiq/manageiq-ui-service
    Name: env
  - Env:
    - Key: CONTAINER_SCRIPTS_ROOT
      Value: /opt/manageiq/container-scripts
    Name: env
  - Env:
    - Key: IMAGE_VERSION
      Value: ${REF}
    Name: env
  - CmdLine:
    - yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      &&     yum -y install centos-release-scl-rh &&     yum -y install --setopt=tsflags=nodocs                    bison                                      bzip2                                      cmake                                      file                                       gcc-c++                                    git                                        libcurl-devel                              libffi-devel                               libtool                                    libxml2-devel                              libxslt-devel                              libyaml-devel                              make                                       net-tools                                  nodejs                                     openssl-devel                              openscap-scanner                           patch                                      rh-postgresql95-postgresql-libs                    rh-postgresql95-postgresql-devel                     readline-devel                             sqlite-devel                               sysvinit-tools                             which                                      httpd                                      mod_ssl                                    mod_auth_kerb                              mod_authnz_pam                             mod_intercept_form_submit                    mod_lookup_identity                        initscripts                                npm                                        chrony                                     psmisc                                     lvm2                                       openldap-clients                           gdbm-devel                                 &&                          yum
      clean all
    Name: run
    PrependShell: true
  - CmdLine:
    - (cd /lib/systemd/system/sysinit.target.wants && for i in *; do [ $i == systemd-tmpfiles-setup.service
      ] || rm -vf $i; done) &&     rm -vf /lib/systemd/system/multi-user.target.wants/*
      &&     rm -vf /etc/systemd/system/*.wants/* &&     rm -vf /lib/systemd/system/local-fs.target.wants/*
      &&     rm -vf /lib/systemd/system/sockets.target.wants/*udev* &&     rm -vf
      /lib/systemd/system/sockets.target.wants/*initctl* &&     rm -vf /lib/systemd/system/basic.target.wants/*
      &&     rm -vf /lib/systemd/system/anaconda.target.wants/*
    Name: run
    PrependShell: true
  - CmdLine:
    - 'curl -sL https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz | tar xz
      &&     cd chruby-0.3.9 &&     make install &&     scripts/setup.sh &&     echo
      "gem: --no-ri --no-rdoc --no-document" > ~/.gemrc &&     echo "source /usr/local/share/chruby/chruby.sh"
      >> ~/.bashrc &&     curl -sL https://github.com/postmodern/ruby-install/archive/v0.6.0.tar.gz
      | tar xz &&     cd ruby-install-0.6.0 &&     make install &&     ruby-install
      ruby 2.3.1 -- --disable-install-doc &&     echo "chruby ruby-2.3.1" >> ~/.bash_profile
      &&     rm -rf /chruby-* &&     rm -rf /usr/local/src/* &&     yum clean all'
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p ${APP_ROOT} &&     mkdir -p ${APPLIANCE_ROOT} &&     mkdir -p ${SUI_ROOT}
      &&     ln -vs ${APP_ROOT} /opt/manageiq/manageiq &&     curl -L https://github.com/ManageIQ/manageiq-appliance/tarball/${REF}
      | tar vxz -C ${APPLIANCE_ROOT} --strip 1 &&     curl -L https://github.com/ManageIQ/manageiq-ui-service/tarball/${REF}
      | tar vxz -C ${SUI_ROOT} --strip 1
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://github.com/simon3z/manageiq/tarball/dedicated | tar vxz -C ${APP_ROOT}
      --strip 1
    Name: run
    PrependShell: true
  - CmdLine:
    - ${APPLIANCE_ROOT}/setup &&     echo "export PATH=\$PATH:/opt/rubies/ruby-2.3.1/bin"
      >> /etc/default/evm &&     mkdir ${APP_ROOT}/log/apache &&     mkdir ${APP_ROOT_PERSISTENT}
      &&     mkdir -p ${CONTAINER_SCRIPTS_ROOT} &&     mv /etc/httpd/conf.d/ssl.conf{,.orig}
      &&     echo "# This file intentionally left blank. ManageIQ maintains its own
      SSL configuration" > /etc/httpd/conf.d/ssl.conf &&     cp ${APP_ROOT}/config/cable.yml.sample
      ${APP_ROOT}/config/cable.yml &&     echo "export APP_ROOT=${APP_ROOT}" >> /etc/default/evm
      &&     echo "export CONTAINER=true" >> /etc/default/evm
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${APP_ROOT}
  - CmdLine:
    - source /etc/default/evm &&     export RAILS_USE_MEMORY_STORE="true" &&     npm
      install bower yarn -g &&     gem install bundler --conservative &&     bower
      install --allow-root -F --silent --config.analytics=false &&     bundle install
      &&     bin/rails log:clear tmp:clear &&     rake evm:compile_assets &&     rake
      evm:compile_sti_loader &&     npm cache clean &&     bower cache clean &&     find
      ${RUBY_GEMS_ROOT}/gems/ -name .git | xargs rm -rvf &&     find ${RUBY_GEMS_ROOT}/gems/
      | grep "\.s\?o$" | xargs rm -rvf &&     rm -rvf ${RUBY_GEMS_ROOT}/gems/rugged-*/vendor/libgit2/build
      &&     rm -rvf ${RUBY_GEMS_ROOT}/cache/* &&     rm -rvf /root/.bundle/cache
      &&     rm -rvf ${APP_ROOT}/tmp/cache/assets &&     rm -rvf ${APP_ROOT}/log/*
    Name: run
    PrependShell: true
  - CmdLine:
    - source /etc/default/evm &&     cd ${SUI_ROOT} &&     yarn install &&     yarn
      run build
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-assets/entrypoint
    - /usr/bin
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-assets/container.data.persist
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-assets/appliance-initialize.service
    - /usr/lib/systemd/system
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-assets/appliance-initialize.sh
    - /bin
  - Chown: ""
    Name: add
    SourcesAndDest:
    - docker-assets/container-scripts
    - ${CONTAINER_SCRIPTS_ROOT}
  - CmdLine:
    - ln -s /var/www/miq/vmdb/docker-assets/docker_initdb /usr/bin
    Name: run
    PrependShell: true
  - CmdLine:
    - systemctl enable appliance-initialize evmserverd evminit evm-watchdog miqvmstat
      miqtop
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Labels:
    - Key: name
      Value: '"manageiq"'
    - Key: vendor
      Value: '"ManageIQ"'
    - Key: version
      Value: '"Master"'
    - Key: release
      Value: ${REF}
    - Key: architecture
      Value: '"x86_64"'
    - Key: url
      Value: '"http://manageiq.org/"'
    - Key: summary
      Value: '"ManageIQ appliance image"'
    - Key: description
      Value: '"ManageIQ is a management and automation platform for virtual, private,
        and hybrid cloud infrastructures."'
    - Key: INSTALL
      Value: '''docker run -ti --privileged                 --name ${NAME}_volume                 --entrypoint
        /usr/bin/docker_initdb                 $IMAGE'''
    - Key: RUN
      Value: '''docker run -di --privileged             --name ${NAME}_run             -v
        /etc/localtime:/etc/localtime:ro             --volumes-from ${NAME}_volume             -p
        80:80             -p 443:443             $IMAGE'''
    - Key: STOP
      Value: '''docker stop ${NAME}_run && echo "Container ${NAME}_run has been stopped"'''
    - Key: UNINSTALL
      Value: '''docker rm -v ${NAME}_volume ${NAME}_run && echo "Uninstallation complete"'''
    Name: label
  - Labels:
    - Key: io.k8s.description
      Value: '"ManageIQ is a management and automation platform for virtual, private,
        and hybrid cloud infrastructures."'
    - Key: io.k8s.display-name
      Value: '"ManageIQ"'
    - Key: io.openshift.expose-services
      Value: '"443:https"'
    - Key: io.openshift.tags
      Value: '"ManageIQ,miq,manageiq"'
    Name: label
  - CmdLine:
    - entrypoint
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /usr/sbin/init
    Name: cmd
    PrependShell: false
  From:
    Image: centos:7
  Name: ""
  Platform: ""
  SourceCode: FROM centos:7
