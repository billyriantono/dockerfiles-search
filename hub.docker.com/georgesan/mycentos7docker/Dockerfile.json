{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:centos7",
      "SourceCode": "FROM centos:centos7",
      "Platform": "",
      "From": {
        "Image": "centos:centos7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "MYCENTOS7DOCKER_VERSION",
              "Value": "build-target"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MYCENTOS7DOCKER_VERSION",
              "Value": "latest"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MYCENTOS7DOCKER_VERSION",
              "Value": "stable"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MYCENTOS7DOCKER_IMAGE",
              "Value": "mycentos7docker"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i -e\"s/^tsflags=nodocs/\\# tsflags=nodocs/\" /etc/yum.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y update \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "localedef -i ja_JP -f UTF-8 ja_JP.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'LANG=\"ja_JP.UTF-8\"' \u003e  /etc/locale.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "ja_JP.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "yum -y install man man-pages man-pages-ja \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y epel-release \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y         ansible         bash-completion         bind-utils         connect         connect-proxy         curl         emacs-nox         expect         gettext         git         iproute         jq         lsof         make         mongodb         net-tools         nmap-ncat         openssh-clients         openssh-server         postgresql         python-pip         stress         sudo         tcpdump         traceroute         tree         unzip         vim         w3m         wget         zip     \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rpm --import https://packages.microsoft.com/keys/microsoft.asc \u0026\u0026     echo \"[azure-cli]\"    \u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     echo \"name=Azure CLI\" \u003e\u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     echo \"baseurl=https://packages.microsoft.com/yumrepos/azure-cli\" \u003e\u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     echo \"enabled=1\" \u003e\u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     echo \"gpgcheck=1\" \u003e\u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     echo \"gpgkey=https://packages.microsoft.com/keys/microsoft.asc\" \u003e\u003e /etc/yum.repos.d/azure-cli.repo  \u0026\u0026     yum install -y azure-cli  \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "DOCKERURL",
          "Name": "arg",
          "Value": "https://download.docker.com/linux/static/stable/x86_64/docker-18.06.1-ce.tgz"
        },
        {
          "CmdLine": [
            "curl -fSL \"$DOCKERURL\" -o docker.tgz     \u0026\u0026 tar -xzvf docker.tgz     \u0026\u0026 mv docker/* /usr/bin/     \u0026\u0026 rmdir docker     \u0026\u0026 rm docker.tgz     \u0026\u0026 chmod +x /usr/bin/docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"[kubernetes]\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"name=Kubernetes\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"enabled=1\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"gpgcheck=1\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"repo_gpgcheck=1\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo \u0026\u0026     echo \"gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\" \u003e\u003e /etc/yum.repos.d/kubernetes.repo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y kubectl \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HELM_CLIENT_VERSION",
              "Value": "v2.9.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://storage.googleapis.com/kubernetes-helm/helm-${HELM_CLIENT_VERSION}-linux-amd64.tar.gz \u0026\u0026     tar xzf  helm-${HELM_CLIENT_VERSION}-linux-amd64.tar.gz \u0026\u0026     /bin/cp  linux-amd64/helm   /usr/bin \u0026\u0026     /bin/rm -rf rm helm-${HELM_CLIENT_VERSION}-linux-amd64.tar.gz linux-amd64"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "KOMPOSE_VERSION",
              "Value": "v1.18.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/kubernetes/kompose/releases/download/${KOMPOSE_VERSION}/kompose-linux-amd64.tar.gz \u0026\u0026     tar xzf kompose-linux-amd64.tar.gz \u0026\u0026     chmod +x kompose-linux-amd64 \u0026\u0026     mv kompose-linux-amd64 /usr/bin/kompose \u0026\u0026     rm kompose-linux-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "STERN_VERSION",
              "Value": "1.10.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/wercker/stern/releases/download/${STERN_VERSION}/stern_linux_amd64 \u0026\u0026     chmod +x stern_linux_amd64 \u0026\u0026     mv stern_linux_amd64 /usr/bin/stern"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "KUSTOMIZE_VERSION",
              "Value": "1.0.11"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 \u0026\u0026     chmod +x kustomize_${KUSTOMIZE_VERSION}_linux_amd64 \u0026\u0026     mv kustomize_${KUSTOMIZE_VERSION}_linux_amd64 /usr/bin/kustomize"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fLO https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx \u0026\u0026     curl -fLO https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens \u0026\u0026     chmod +x kubectx kubens \u0026\u0026     mv kubectx kubens /usr/local/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "KUBEVAL_VERSION",
              "Value": "0.7.3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/garethr/kubeval/releases/download/$KUBEVAL_VERSION/kubeval-linux-amd64.tar.gz \u0026\u0026     tar xf kubeval-linux-amd64.tar.gz \u0026\u0026     cp kubeval /usr/local/bin \u0026\u0026     /bin/rm kubeval-linux-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "KUBETEST_VERSION",
              "Value": "0.1.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/garethr/kubetest/releases/download/$KUBETEST_VERSION/kubetest-linux-amd64.tar.gz \u0026\u0026     tar xf kubetest-linux-amd64.tar.gz \u0026\u0026     cp kubetest /usr/local/bin \u0026\u0026     /bin/rm kubetest-linux-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "YAMLSORT_VERSION",
              "Value": "v0.1.16"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fLO https://github.com/george-pon/yamlsort/releases/download/${YAMLSORT_VERSION}/linux_amd64_yamlsort_${YAMLSORT_VERSION}.tar.gz \u0026\u0026     tar xzf linux_amd64_yamlsort_${YAMLSORT_VERSION}.tar.gz \u0026\u0026     chmod +x linux_amd64_yamlsort \u0026\u0026     mv linux_amd64_yamlsort /usr/bin/yamlsort \u0026\u0026     rm linux_amd64_yamlsort_${YAMLSORT_VERSION}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "bashrc",
            "/root/.bashrc"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "bash_profile",
            "/root/.bash_profile"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "emacsrc",
            "/root/.emacs"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "vimrc",
            "/root/.vimrc"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "bin",
            "/usr/local/bin"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/*.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/root"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ENV",
              "Value": "$HOME/.bashrc"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -g 1000 centos \u0026\u0026     useradd  -g      centos -G wheel -m -s /bin/bash centos \u0026\u0026     echo 'centos:hogehoge' | chpasswd \u0026\u0026     echo 'Defaults visiblepw'            \u003e\u003e /etc/sudoers \u0026\u0026     echo 'centos ALL=(ALL) NOPASSWD:ALL' \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/bin/docker-entrypoint.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}