{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:trusty",
      "SourceCode": "FROM ubuntu:trusty",
      "Platform": "",
      "From": {
        "Image": "ubuntu:trusty"
      },
      "Commands": [
        {
          "Maintainer": "Shlomo \u003cshlomo@deep-ml.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:."
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install --no-install-recommends  -y     git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip supervisor     python     python-dev     python2.7-dev     python3-dev     python-virtualenv     python-wheel \tpython-tk     pkg-config     libopenblas-base     python-numpy     python-scipy     python-h5py     python-yaml     python-pydot     python-nose \tpython-h5py \tpython-skimage \tpython-matplotlib \tpython-pandas \tpython-sklearn \tpython-sympy \tpython-joblib         build-essential         software-properties-common         g++         git         wget         tar         git         imagemagick         curl \t\tbc \t\thtop\t\tcurl \t\tg++ \t\tgfortran \t\tgit \t\tlibffi-dev \t\tlibfreetype6-dev \t\tlibhdf5-dev \t\tlibjpeg-dev \t\tliblcms2-dev \t\tlibopenblas-dev \t\tliblapack-dev \t\tlibssl-dev \t\tlibtiff5-dev \t\tlibwebp-dev \t\tlibzmq3-dev \t\tnano \t\tunzip \t\tvim \t\tzlib1g-dev \t\tqt5-default \t\tlibvtk6-dev \t\tzlib1g-dev \t\tlibjpeg-dev \t\tlibwebp-dev \t\tlibpng-dev \t\tlibtiff5-dev \t\tlibjasper-dev \t\tlibopenexr-dev \t\tlibgdal-dev \t\tlibdc1394-22-dev \t\tlibavcodec-dev \t\tlibavformat-dev \t\tlibswscale-dev \t\tlibtheora-dev \t\tlibvorbis-dev \t\tlibxvidcore-dev \t\tlibx264-dev \t\tyasm \t\tlibopencore-amrnb-dev \t\tlibopencore-amrwb-dev \t\tlibv4l-dev \t\tlibxine2-dev \t\tlibtbb-dev \t\tlibeigen3-dev \t\tdoxygen \t\tless         htop         procps         vim-tiny         libboost-dev         libgraphviz-dev \t\t\u0026\u0026 \tapt-get clean \u0026\u0026 \tapt-get autoremove \u0026\u0026 \trm -rf /var/lib/apt/lists/* \u0026\u0026 \tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y software-properties-common \u0026\u0026     apt-get install -y --no-install-recommends         build-essential         clinfo         cmake         git         libboost-all-dev         libfftw3-dev         libfontconfig1-dev         libfreeimage-dev         liblapack-dev         liblapacke-dev         libopenblas-dev         ocl-icd-opencl-dev         opencl-headers         wget         xorg-dev \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "\"/root\""
        },
        {
          "Name": "workdir",
          "Path": "/root/"
        },
        {
          "CmdLine": [
            "wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar -xvf cmake-3.8.0-rc4.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/cmake-3.8.0-rc4"
        },
        {
          "CmdLine": [
            "/root/cmake-3.8.0-rc4/bootstrap"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "git clone https://github.com/glfw/glfw.git \u0026\u0026     cd glfw \u0026\u0026     mkdir build \u0026\u0026     cd build \u0026\u0026     cmake -DCMAKE_INSTALL_PREFIX=/usr .. \u0026\u0026     make -j4 \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install libopenblas-dev libfftw3-dev liblapacke-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "Env": [
            {
              "Key": "AF_PATH",
              "Value": "/opt/arrayfire"
            },
            {
              "Key": "AF_DISABLE_GRAPHICS",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "AF_PATH",
              "Value": "/opt/arrayfire"
            },
            {
              "Key": "AF_DISABLE_GRAPHICS",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone --recursive https://github.com/arrayfire/arrayfire.git -b master \u0026\u0026     cd arrayfire \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026     cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3              -DCMAKE_BUILD_TYPE=Release              -DBUILD_CPU=ON              -DBUILD_CUDA=OFF              -DBUILD_OPENCL=OFF              -DBUILD_UNIFIED=ON              -DBUILD_GRAPHICS=OFF              -DBUILD_NONFREE=OFF              -DBUILD_EXAMPLES=ON              -DBUILD_TEST=ON              -DBUILD_DOCS=OFF              -DINSTALL_FORGE_DEV=ON              -DUSE_FREEIMAGE_STATIC=OFF \u0026\u0026     make -j8 \u0026\u0026 make install \u0026\u0026     mkdir -p ${AF_PATH} \u0026\u0026 ln -s /opt/arrayfire-3/* ${AF_PATH}/ \u0026\u0026     echo \"${AF_PATH}/lib\" \u003e\u003e /etc/ld.so.conf.d/arrayfire.conf \u0026\u0026     echo \"/usr/local/cuda/nvvm/lib64\" \u003e\u003e /etc/ld.so.conf.d/arrayfire.conf \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:."
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "git clone https://github.com/jpbarrette/curlpp.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/curlpp"
        },
        {
          "CmdLine": [
            "cmake ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "git clone https://github.com/wjakob/nanogui.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/nanogui"
        },
        {
          "CmdLine": [
            "git submodule update --init --recursive"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/nanogui"
        },
        {
          "CmdLine": [
            "cmake ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/"
        },
        {
          "CmdLine": [
            "git clone https://github.com/ocornut/imgui.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/imgui/examples/opengl2_example/"
        },
        {
          "CmdLine": [
            "make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y software-properties-common \u0026\u0026     apt-get install -y --no-install-recommends         build-essential         clinfo         git         libboost-all-dev         libfftw3-dev         libfontconfig1-dev         libfreeimage-dev         liblapack-dev         liblapacke-dev         libopenblas-dev         ocl-icd-opencl-dev         opencl-headers         wget         xorg-dev \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 \u0026\u0026     ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so \u0026\u0026     mkdir -p /etc/OpenCL/vendors \u0026\u0026     echo \"libnvidia-opencl.so.1\" \u003e /etc/OpenCL/vendors/nvidia.icd \u0026\u0026     echo \"/usr/local/nvidia/lib\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf \u0026\u0026     echo \"/usr/local/nvidia/lib64\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" \u003e\u003e /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7  libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"/usr/lib/llvm-3.7/lib/\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/lib/llvm-3.7/lib/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LLVM_CONFIG",
              "Value": "/usr/lib/llvm-3.7/bin/llvm-config"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qq  \u0026\u0026 apt-get install --no-install-recommends -y     build-essential     clang-3.7     lldb-3.7     llvm-3.7     python-clang-3.7  \u0026\u0026 apt-get clean  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" |  tee -a /etc/apt/sources.list.d/fillwave_ext.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb-src http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -qqy --force-yes libglfw3 libglfw3-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBRARY_PATH",
              "Value": "$LIBRARY_PATH:$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LLVM_CONFIG",
              "Value": "/usr/lib/llvm-3.7/bin/llvm-config"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "git clone https://github.com/vurtun/nuklear.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/nuklear/demo/glfw_opengl2/"
        },
        {
          "CmdLine": [
            "make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl --silent https://bootstrap.pypa.io/get-pip.py | python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install setuptools==33.1.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install \t\tCython \t\twerkzeug pillow psycogreen flask celery redis Boto FileChunkIO nltk fuzzywuzzy rotate-backups oauthlib requests pyOpenSSL ndg-httpsclient pyasn1 \t\tpath.py \t\tPillow \t\tpygments \t\tsix \t\tsphinx \t\twheel \t\tzmq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/lib/llvm-3.7/lib/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LLVM_CONFIG",
              "Value": "/usr/lib/llvm-3.7/bin/llvm-config"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -qyy install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install  cython pytest pandas scikit-learn statsmodels  line-profiler psutil spectrum memory_profiler pandas joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install -i https://pypi.anaconda.org/sklam/simple llvmlite"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install fastparquet"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install theano \u0026\u0026 \t\techo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \t\t\\n[lib]\\ncnmem=0.95 \t\t\\n[nvcc]\\nfastmath=True \t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \t\t\\n[DebugMode]\\ncheck_finite=1\" \t\u003e /root/.theanorc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install  --upgrade pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 tensorflow theano"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "KERAS_VERSION",
              "Value": "1.2.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "KERAS_BACKEND",
              "Value": "tensorflow"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'alias ll=\"ls --color=auto -lA\"' \u003e\u003e /root/.bashrc  \u0026\u0026 echo '\"\\e[5~\": history-search-backward' \u003e\u003e /root/.inputrc  \u0026\u0026 echo '\"\\e[6~\": history-search-forward' \u003e\u003e /root/.inputrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ls -la /usr/bin/python2.7"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /opt/python2.7/lib/python2.7/config/libpython2.7.a /usr/local/lib/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LDFLAGS",
              "Value": "\"-L/opt/python2.7/lib:usr/lib/openblas-base/\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/lib/openblas-base/:/usr/lib/openblas-base/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:."
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -qyy install python2.7 python-pip python-dev ipython ipython-notebook"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade ipython"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python2 -m ipykernel.kernelspec --user"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter notebook --allow-root --generate-config -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/root/.jupyter/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "run_jupyter.sh",
            "/root/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/root/\""
        },
        {
          "CmdLine": [
            "chmod +x run_jupyter.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable --py --sys-prefix widgetsnbextension"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:george-edison55/cmake-3.x"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/lib:/usr/local/lib/root"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get install -qqy libsasl2-dev libldap2-dev libssl-dev libpq-dev postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install superset pyhive mysqlclient skflow bayesian-optimization scikit-neuralnetwork simplejson ujson bson pyyaml python-ldap superset pyhive psycopg2 SQLAlchemy arrayfire"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -qqy install postgresql postgresql-contrib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "3838",
            "5432",
            "6006",
            "8786",
            "8787",
            "8788",
            "8888",
            "9786"
          ]
        },
        {
          "CmdLine": [
            "apt-get -qqy  install mesa-common-dev freeglut3-dev libglfw-dev libglm-dev libglew1.6-dev xorg-dev libglu1-mesa-dev  libsdl2-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "postgres"
        },
        {
          "CmdLine": [
            "/etc/init.d/postgresql start \u0026\u0026    psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" \u0026\u0026    createdb -O docker docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"host all  all    0.0.0.0/0  md5\" \u003e\u003e /etc/postgresql/9.3/main/pg_hba.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"listen_addresses='*'\" \u003e\u003e /etc/postgresql/9.3/main/postgresql.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/postgresql",
            "/var/log/postgresql",
            "/var/lib/postgresql"
          ]
        },
        {
          "CmdLine": [
            "/usr/lib/postgresql/9.3/bin/postgres",
            "-D",
            "/var/lib/postgresql/9.3/main",
            "-c",
            "config_file=/etc/postgresql/9.3/main/postgresql.conf"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "user",
          "User": "root"
        }
      ]
    }
  ]
}