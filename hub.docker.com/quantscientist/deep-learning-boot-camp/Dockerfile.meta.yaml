MetaArgs: null
Stages:
- BaseName: nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04
  Commands:
  - Env:
    - Key: CUDA_ARCH_BIN
      Value: '"30 35 50 52 60"'
    Name: env
  - Env:
    - Key: CUDA_ARCH_PTX
      Value: '"60"'
    Name: env
  - CmdLine:
    - rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install --no-install-recommends  -y     git cmake
      build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev
      libcppnetlib-dev libboost-dev libboost-all-dev libboost-iostreams-dev libcurl4-openssl-dev
      protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev
      libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip      python     python-dev
      \    python2.7-dev     python3-dev     python-virtualenv     python-wheel \tpython-tk
      \    pkg-config     libopenblas-base     python-numpy     python-scipy     python-h5py
      \    python-yaml     python-pydot     python-nose \tpython-h5py \tpython-skimage
      \tpython-matplotlib \tpython-pandas \tpython-sklearn \tpython-sympy \tpython-joblib
      \        build-essential         software-properties-common         g++         git
      \        wget         tar         git         imagemagick         curl \t\tbc
      \t\thtop\t\tcurl \t\tg++ \t\tgfortran \t\tgit \t\tlibffi-dev \t\tlibfreetype6-dev
      \t\tlibhdf5-dev \t\tlibjpeg-dev \t\tliblcms2-dev \t\tlibopenblas-dev \t\tliblapack-dev
      \t\tlibssl-dev \t\tlibtiff5-dev \t\tlibwebp-dev \t\tlibzmq3-dev \t\tnano \t\tunzip
      \t\tvim \t\tzlib1g-dev \t\tqt5-default \t\tlibvtk6-dev \t\tzlib1g-dev \t\tlibjpeg-dev
      \t\tlibwebp-dev \t\tlibpng-dev \t\tlibtiff5-dev \t\tlibjasper-dev \t\tlibopenexr-dev
      \t\tlibgdal-dev \t\tlibdc1394-22-dev \t\tlibavcodec-dev \t\tlibavformat-dev
      \t\tlibswscale-dev \t\tlibtheora-dev \t\tlibvorbis-dev \t\tlibxvidcore-dev \t\tlibx264-dev
      \t\tyasm \t\tlibopencore-amrnb-dev \t\tlibopencore-amrwb-dev \t\tlibv4l-dev
      \t\tlibxine2-dev \t\tlibtbb-dev \t\tlibeigen3-dev \t\tdoxygen \t\tless         htop
      \        procps         vim-tiny         libgraphviz-dev \t\t&& \tapt-get clean
      && \tapt-get autoremove && \trm -rf /var/lib/apt/lists/* && \tupdate-alternatives
      --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y software-properties-common &&     apt-get
      install -y --no-install-recommends         build-essential         clinfo         cmake         git         libfftw3-dev         libfontconfig1-dev         libfreeimage-dev         liblapack-dev         liblapacke-dev         libopenblas-dev         ocl-icd-opencl-dev         opencl-headers         wget         xorg-dev
      && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 777 /tmp && apt-get update && apt-get install -y   git   wget   cmake   curl   vim   libatlas-base-dev   libatlas-dev   libopencv-dev   libprotobuf-dev   libgoogle-glog-dev   libgflags-dev   protobuf-compiler   libhdf5-dev   libleveldb-dev   liblmdb-dev   libsnappy-dev   python-dev   python-pip   python-numpy   gfortran
      > /dev/null
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - apt-get -qyy install python2.7 python-pip python-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install numpy
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         ca-certificates         cmake         git         libgflags-dev         libgoogle-glog-dev         libprotobuf-dev         pkg-config         protobuf-compiler         python-yaml         wget
      &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install numpy pandas sklearn matplotlib seaborn ipython jupyter
      pyyaml h5py ipykernel
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone --depth 1 -b 3.2.0 https://github.com/Itseez/opencv.git /opencv &&     cd
      /opencv &&     cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON           -DWITH_CUDA=ON
      -DCUDA_ARCH_BIN="${CUDA_ARCH}" -DCUDA_ARCH_PTX="${CUDA_ARCH}"           -DWITH_JPEG=ON
      -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON           -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF
      -DWITH_FFMPEG=OFF -DWITH_GTK=OFF           -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF
      -DWITH_JASPER=OFF           -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF
      -DWITH_IPP=OFF -DWITH_WEBP=OFF           -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF
      -DBUILD_opencv_python2=OFF           -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF
      -DBUILD_opencv_flann=OFF           -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF
      -DBUILD_opencv_shape=OFF           -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF
      -DBUILD_opencv_cudalegacy=OFF           -DCUDA_NVCC_FLAGS="--default-stream
      per-thread -O3" -DCUDA_FAST_MATH=ON &&     make -j"$(nproc)" install && ldconfig
      &&     rm -rf /opencv
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl1_1.2.3-1.cuda8.0_amd64.deb
      &&   dpkg -i libnccl1_1.2.3-1.cuda8.0_amd64.deb &&   rm libnccl1_1.2.3-1.cuda8.0_amd64.deb
      &&   wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl-dev_1.2.3-1.cuda8.0_amd64.deb
      &&   dpkg -i libnccl-dev_1.2.3-1.cuda8.0_amd64.deb &&   rm libnccl-dev_1.2.3-1.cuda8.0_amd64.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /root && git clone https://github.com/BVLC/caffe.git && cd caffe && \tcat
      python/requirements.txt | xargs -n1 pip install && pip install -v thrift==0.9.3"
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /root/caffe &&   mkdir build && cd build &&   cmake .. &&   make -j"$(nproc)"
      all &&   make install
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONPATH
      Value: /root/caffe/python:$PYTHONPATH
    Name: env
  - Env:
    - Key: PATH
      Value: /root/caffe/build/tools:$PATH
    Name: env
  - CmdLine:
    - pip --no-cache-dir install tensorflow-gpu
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install git+https://github.com/fchollet/keras.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /root/
  - Env:
    - Key: PATH
      Value: /usr/local/cuda-8.0/bin:$PATH
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/lib:$LD_LIBRARY_PATH
    Name: env
  - Env:
    - Key: PATH
      Value: /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
    Name: env
  - Env:
    - Key: CUDA_BIN_PATH
      Value: /usr/local/cuda
    Name: env
  - Env:
    - Key: CUDA_TOOLKIT_ROOT_DIR
      Value: /usr/local/cuda-8.0
    Name: env
  - CmdLine:
    - pip install -v scikit-learn==0.18  pycuda && pip install opencv-python pycrypto  astropy
      autograd
    Name: run
    PrependShell: true
  - CmdLine:
    - pip2 install http://download.pytorch.org/whl/cu80/torch-0.2.0.post2-cp27-cp27mu-manylinux1_x86_64.whl
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install git+https://github.com/pytorch/tnt.git@master
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install torchvision psutil
    Name: run
    PrependShell: true
  - CmdLine:
    - python -m ipykernel.kernelspec
    Name: run
    PrependShell: true
  - CmdLine:
    - python2 -m ipykernel.kernelspec --user
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter notebook --allow-root --generate-config -y
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - jupyter_notebook_config.py
    - /root/.jupyter/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - run_jupyter.sh
    - /root/
  - Name: workdir
    Path: '"/root/"'
  - CmdLine:
    - chmod +x run_jupyter.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter nbextension enable --py --sys-prefix widgetsnbextension
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "3838"
    - "5432"
    - "6006"
    - "7842"
    - "8000"
    - "8786"
    - "8787"
    - "8788"
    - "8888"
    - "9786"
  From:
    Image: nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04
