{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:5.6-fpm-alpine",
      "SourceCode": "FROM php:5.6-fpm-alpine",
      "Platform": "",
      "From": {
        "Image": "php:5.6-fpm-alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "set -xe   \u0026\u0026 apk add --no-cache py-setuptools git wget bash py-setuptools zlib-dev libpng-dev freetype-dev libjpeg-turbo-dev libmcrypt-dev libmemcached-dev icu-dev libxml2-dev   \u0026\u0026 apk add --no-cache libressl-dev cyrus-sasl-dev --repository http://dl-3.alpinelinux.org/alpine/edge/main/ rabbitmq-c-dev --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted   \u0026\u0026 mkdir -p /usr/src/php/ext   \u0026\u0026 wget https://pecl.php.net/get/memcached-2.2.0.tgz   \u0026\u0026 tar -xvzf memcached-2.2.0.tgz   \u0026\u0026 rm memcached-2.2.0.tgz   \u0026\u0026 mv memcached-* /usr/src/php/ext/memcached   \u0026\u0026 wget https://pecl.php.net/get/redis   \u0026\u0026 tar -xf redis   \u0026\u0026 rm redis   \u0026\u0026 mv redis-* /usr/src/php/ext/redis   \u0026\u0026 wget https://pecl.php.net/get/amqp   \u0026\u0026 tar -xf amqp   \u0026\u0026 rm amqp   \u0026\u0026 mv amqp-* /usr/src/php/ext/amqp   \u0026\u0026 wget https://pecl.php.net/get/igbinary   \u0026\u0026 tar -xf igbinary   \u0026\u0026 rm igbinary   \u0026\u0026 mv igbinary-* /usr/src/php/ext/igbinary   \u0026\u0026 wget https://pecl.php.net/get/apcu   \u0026\u0026 tar -xf apcu   \u0026\u0026 rm apcu   \u0026\u0026 mv apcu-* /usr/src/php/ext/apcu   \u0026\u0026 git clone --recursive --depth=1 https://github.com/kjdev/php-ext-snappy.git   \u0026\u0026 mv php-ext-snappy /usr/src/php/ext/snappy   \u0026\u0026 docker-php-ext-install mysql pdo_mysql opcache zip pcntl mcrypt iconv soap intl xml amqp igbinary redis snappy   \u0026\u0026 docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/   \u0026\u0026 docker-php-ext-configure memcached --enable-memcached-igbinary --disable-memcached-sasl   \u0026\u0026 docker-php-ext-install gd memcached   \u0026\u0026 echo 'apc.shm_size = 256M' \u003e\u003e /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini   \u0026\u0026 echo 'apc.serializer = igbinary' \u003e\u003e /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://bootstrap.pypa.io/get-pip.py \t\u0026\u0026 python get-pip.py --no-setuptools --no-wheel \t\u0026\u0026 rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/newrelic"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/newrelic"
        },
        {
          "CmdLine": [
            "wget -r -nd --no-parent -Alinux-musl.tar.gz \thttp://download.newrelic.com/php_agent/release/ \u003e/dev/null 2\u003e\u00261 \t\u0026\u0026 tar -xzf newrelic-php*.tar.gz --strip=1 \t\u0026\u0026 rm newrelic-php*.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NR_INSTALL_SILENT",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NR_INSTALL_PHPLIST",
              "Value": "/usr/local/bin/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NR_INSTALL_ARCH",
              "Value": "x64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NR_INSTALL_USE_CP_NOT_LN",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "bash newrelic-install install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "pip install newrelic-plugin-agent \t\u0026\u0026 mkdir -p /var/log/newrelic \t\u0026\u0026 mkdir -p /var/run/newrelic"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'extension = \"newrelic.so\"' \u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 echo '[newrelic]' \u003e\u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 echo 'newrelic.enabled = true' \u003e\u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 echo 'newrelic.license = ${NEWRELIC_LICENSE}' \u003e\u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 echo 'newrelic.appname = ${NEWRELIC_APPNAME}' \u003e\u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 echo 'newrelic.feature_flag=laravel_queue' \u003e\u003e /usr/local/etc/php/conf.d/newrelic.ini \t\u0026\u0026 rm -fr /opt/newrelic \t\u0026\u0026 rm -fr /usr/src/php/ext \t\u0026\u0026 apk del git py-setuptools wget bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'memory_limit = 512M' \u003e /usr/local/etc/php/conf.d/settings.ini   \u0026\u0026 echo 'date.timezone = ${TIMEZONE}' \u003e\u003e /usr/local/etc/php/conf.d/settings.ini   \u0026\u0026 sed -i \"s/access.log =.*/access.log = \\/proc\\/self\\/fd\\/1/\" /usr/local/etc/php-fpm.d/docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        }
      ]
    }
  ]
}