{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.9",
      "SourceCode": "FROM alpine:3.9",
      "Platform": "",
      "From": {
        "Image": "alpine:3.9"
      },
      "Commands": [
        {
          "Maintainer": "wiserain",
          "Name": "maintainer"
        },
        {
          "Key": "MAKEFLAGS",
          "Name": "arg",
          "Value": "\"-j2\""
        },
        {
          "Key": "LIBTORRENT_VER",
          "Name": "arg",
          "Value": "libtorrent-1_1_13"
        },
        {
          "CmdLine": [
            "echo \"**** install frolvlad/alpine-python3 ****\" \u0026\u0026 \tapk add --no-cache bash \u0026\u0026 \tapk add --no-cache python3 \u0026\u0026 \tpython3 -m ensurepip \u0026\u0026 \trm -r /usr/lib/python*/ensurepip \u0026\u0026 \tpip3 install --upgrade pip setuptools \u0026\u0026 \tif [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi \u0026\u0026 \tif [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi \u0026\u0026 \techo \"**** install plugin: telegram ****\" \u0026\u0026 \tapk add --no-cache py3-cryptography \u0026\u0026 \tpip install --upgrade python-telegram-bot \u0026\u0026 \techo \"**** install plugins: cfscraper ****\" \u0026\u0026 \tapk add --no-cache --virtual=build-deps g++ gcc python3-dev \u0026\u0026 \tpip install --upgrade cloudscraper \u0026\u0026 \tapk del --purge --no-cache build-deps \u0026\u0026 \techo \"**** install plugins: convert_magnet ****\" \u0026\u0026 \tset -euo pipefail \u0026\u0026 \tapk add --no-cache \t\tboost-python3 \t\tboost-system \t\tlibgcc \t\tlibstdc++ \t\topenssl \u0026\u0026 \tapk add --no-cache --virtual=build-deps \t\tautoconf \t\tautomake \t\tboost-dev \t\tcoreutils \t\tfile \t\tg++ \t\tgcc \t\tgit \t\tlibtool \t\tmake \t\topenssl-dev \t\tpython3-dev \u0026\u0026 \tcd $(mktemp -d) \u0026\u0026 \tgit clone https://github.com/arvidn/libtorrent.git \u0026\u0026 \tcd libtorrent \u0026\u0026 \tgit checkout $LIBTORRENT_VER \u0026\u0026 \t./autotool.sh \u0026\u0026 \t./configure \t\tCFLAGS=\"-Wno-deprecated-declarations\" \t    CXXFLAGS=\"-Wno-deprecated-declarations\" \t    --prefix=/usr \t    --disable-debug \t    --enable-encryption \t    --enable-python-binding \t    --with-libiconv \t    --with-boost-python=\"$(ls -1 /usr/lib/libboost_python3*-mt.so* | head -1 | sed 's/.*.\\/lib\\(.*\\)\\.so.*/\\1/')\" \t    PYTHON=`which python3` \u0026\u0026 \tmake VERBOSE=1 \u0026\u0026 \tmake install \u0026\u0026 \tapk del --purge --no-cache build-deps \u0026\u0026 \tln -sf /usr/bin/python3 /usr/bin/python \u0026\u0026 \techo \"**** install plugin: misc ****\" \u0026\u0026 \tpip install --upgrade \t\ttransmissionrpc \t\tdeluge_client \t\tirc_bot \u0026\u0026 \techo \"**** install flexget ****\" \u0026\u0026 \tpip install --upgrade --force-reinstall \t\tflexget \u0026\u0026 \techo \"**** system configurations ****\" \u0026\u0026 \tapk --no-cache add shadow tzdata \u0026\u0026 \tsed -i 's/^CREATE_MAIL_SPOOL=yes/CREATE_MAIL_SPOOL=no/' /etc/default/useradd \u0026\u0026 \techo \"**** cleanup ****\" \u0026\u0026 \trm -rf \t\t/tmp/* \t\t/root/.cache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "LOCALE.md",
            "/init/"
          ]
        },
        {
          "CmdLine": [
            "ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \u0026\u0026     ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" \u0026\u0026     ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     mkdir -p /tmp \u0026\u0026     mkdir -p /var/cache/apk \u0026\u0026     apk add --no-cache --virtual=.build-dependencies wget ca-certificates \u0026\u0026     apk add --no-cache parallel \u0026\u0026     wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\"          -O \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     apk add --no-cache         \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \u0026\u0026     apk del .build-dependencies \u0026\u0026     rm \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     rm \"/root/.wget-hsts\" \u0026\u0026     rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"/usr/lib:/opt/calibre/lib\""
            },
            {
              "Key": "PATH",
              "Value": "\"$PATH:/opt/calibre\""
            },
            {
              "Key": "LC_ALL",
              "Value": "\"C\""
            },
            {
              "Key": "CALIBRE_INSTALLER_SOURCE_CODE_URL",
              "Value": "\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026     apk add --no-cache --upgrade         bash         ca-certificates         gcc         libxcomposite         mesa-gl         python         qt5-qtbase-x11         xdg-utils         xz         wget \u0026\u0026     wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} |       python -c       \"import sys;        main=lambda:sys.stderr.write('Download failed\\n');        exec(sys.stdin.read());        main(install_dir='/opt', isolated=True)\" \u0026\u0026     rm -rf /tmp/calibre-installer-cache \u0026\u0026     apk del --purge $PKG_DEV                     $PKG_IMAGES_DEV \u0026\u0026     mkdir -p $APP_HOME/app \u0026\u0026     rm -rf /tmp \u0026\u0026     rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files/",
            "/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config",
            "/data"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/config"
        },
        {
          "Name": "expose",
          "Ports": [
            "3539",
            "3539/tcp"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /scripts/init.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/scripts/init.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}