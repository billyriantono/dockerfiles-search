MetaArgs: null
Stages:
- BaseName: alpine:3.9
  Commands:
  - Maintainer: wiserain
    Name: maintainer
  - Key: MAKEFLAGS
    Name: arg
    Value: '"-j2"'
  - Key: LIBTORRENT_VER
    Name: arg
    Value: libtorrent-1_1_13
  - CmdLine:
    - "echo \"**** install frolvlad/alpine-python3 ****\" && \tapk add --no-cache
      bash && \tapk add --no-cache python3 && \tpython3 -m ensurepip && \trm -r /usr/lib/python*/ensurepip
      && \tpip3 install --upgrade pip setuptools && \tif [ ! -e /usr/bin/pip ]; then
      ln -s pip3 /usr/bin/pip ; fi && \tif [[ ! -e /usr/bin/python ]]; then ln -sf
      /usr/bin/python3 /usr/bin/python; fi && \techo \"**** install plugin: telegram
      ****\" && \tapk add --no-cache py3-cryptography && \tpip install --upgrade python-telegram-bot
      && \techo \"**** install plugins: cfscraper ****\" && \tapk add --no-cache --virtual=build-deps
      g++ gcc python3-dev && \tpip install --upgrade cloudscraper && \tapk del --purge
      --no-cache build-deps && \techo \"**** install plugins: convert_magnet ****\"
      && \tset -euo pipefail && \tapk add --no-cache \t\tboost-python3 \t\tboost-system
      \t\tlibgcc \t\tlibstdc++ \t\topenssl && \tapk add --no-cache --virtual=build-deps
      \t\tautoconf \t\tautomake \t\tboost-dev \t\tcoreutils \t\tfile \t\tg++ \t\tgcc
      \t\tgit \t\tlibtool \t\tmake \t\topenssl-dev \t\tpython3-dev && \tcd $(mktemp
      -d) && \tgit clone https://github.com/arvidn/libtorrent.git && \tcd libtorrent
      && \tgit checkout $LIBTORRENT_VER && \t./autotool.sh && \t./configure \t\tCFLAGS=\"-Wno-deprecated-declarations\"
      \t    CXXFLAGS=\"-Wno-deprecated-declarations\" \t    --prefix=/usr \t    --disable-debug
      \t    --enable-encryption \t    --enable-python-binding \t    --with-libiconv
      \t    --with-boost-python=\"$(ls -1 /usr/lib/libboost_python3*-mt.so* | head
      -1 | sed 's/.*.\\/lib\\(.*\\)\\.so.*/\\1/')\" \t    PYTHON=`which python3` &&
      \tmake VERBOSE=1 && \tmake install && \tapk del --purge --no-cache build-deps
      && \tln -sf /usr/bin/python3 /usr/bin/python && \techo \"**** install plugin:
      misc ****\" && \tpip install --upgrade \t\ttransmissionrpc \t\tdeluge_client
      \t\tirc_bot && \techo \"**** install flexget ****\" && \tpip install --upgrade
      --force-reinstall \t\tflexget && \techo \"**** system configurations ****\"
      && \tapk --no-cache add shadow tzdata && \tsed -i 's/^CREATE_MAIL_SPOOL=yes/CREATE_MAIL_SPOOL=no/'
      /etc/default/useradd && \techo \"**** cleanup ****\" && \trm -rf \t\t/tmp/*
      \t\t/root/.cache"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - LOCALE.md
    - /init/
  - CmdLine:
    - ALPINE_GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
      &&     ALPINE_GLIBC_PACKAGE_VERSION="2.29-r0" &&     ALPINE_GLIBC_BASE_PACKAGE_FILENAME="glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk"
      &&     ALPINE_GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk"
      &&     ALPINE_GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk"
      &&     mkdir -p /tmp &&     mkdir -p /var/cache/apk &&     apk add --no-cache
      --virtual=.build-dependencies wget ca-certificates &&     apk add --no-cache
      parallel &&     wget "https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub"          -O
      "/etc/apk/keys/sgerrand.rsa.pub" &&     wget "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"          "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"          "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"
      &&     apk add --no-cache         "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"         "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"         "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"
      &&     cat /init/LOCALE.md | parallel "echo generate locale {}; /usr/glibc-compat/bin/localedef
      --force --inputfile {} --charmap UTF-8 {}.UTF-8;" &&     apk del .build-dependencies
      &&     rm "/etc/apk/keys/sgerrand.rsa.pub" &&     rm "/root/.wget-hsts" &&     rm
      "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: '"/usr/lib:/opt/calibre/lib"'
    - Key: PATH
      Value: '"$PATH:/opt/calibre"'
    - Key: LC_ALL
      Value: '"C"'
    - Key: CALIBRE_INSTALLER_SOURCE_CODE_URL
      Value: '"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py"'
    Name: env
  - CmdLine:
    - apk update &&     apk add --no-cache --upgrade         bash         ca-certificates         gcc         libxcomposite         mesa-gl         python         qt5-qtbase-x11         xdg-utils         xz         wget
      &&     wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} |       python -c       "import
      sys;        main=lambda:sys.stderr.write('Download failed\n');        exec(sys.stdin.read());        main(install_dir='/opt',
      isolated=True)" &&     rm -rf /tmp/calibre-installer-cache &&     apk del --purge
      $PKG_DEV                     $PKG_IMAGES_DEV &&     mkdir -p $APP_HOME/app &&     rm
      -rf /tmp &&     rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/
    - /
  - Name: volume
    Volumes:
    - /config
    - /data
  - Name: workdir
    Path: /config
  - Name: expose
    Ports:
    - "3539"
    - 3539/tcp
  - CmdLine:
    - chmod +x /scripts/init.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /scripts/init.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.9
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.9
