{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "lsiobase/alpine:3.10",
      "SourceCode": "FROM lsiobase/alpine:3.10",
      "Platform": "",
      "From": {
        "Image": "lsiobase/alpine:3.10"
      },
      "Commands": [
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "build_version",
              "Value": "\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"sparklyballs\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"**** install packages ****\" \u0026\u0026  apk add --no-cache \tcurl \tfindutils \tjq \topenssl \tp7zip \tpython \trsync \ttar \ttransmission-cli \ttransmission-daemon \tunrar \tunzip \u0026\u0026  echo \"**** install third party themes ****\" \u0026\u0026  curl -o \t/tmp/combustion.zip -L \t\"https://github.com/Secretmapper/combustion/archive/release.zip\" \u0026\u0026  unzip \t/tmp/combustion.zip -d \t/ \u0026\u0026  mkdir -p /tmp/twctemp \u0026\u0026  TWCVERSION=$(curl -sX GET \"https://api.github.com/repos/ronggang/transmission-web-control/releases/latest\" \t| awk '/tag_name/{print $4;exit}' FS='[\"\"]') \u0026\u0026  curl -o \t/tmp/twc.tar.gz -L \t\"https://github.com/ronggang/transmission-web-control/archive/${TWCVERSION}.tar.gz\" \u0026\u0026  tar xf \t/tmp/twc.tar.gz -C \t/tmp/twctemp --strip-components=1 \u0026\u0026  mv /tmp/twctemp/src /transmission-web-control \u0026\u0026  mkdir -p /kettu \u0026\u0026  curl -o \t/tmp/kettu.tar.gz -L \t\"https://github.com/endor/kettu/archive/master.tar.gz\" \u0026\u0026  tar xf \t/tmp/kettu.tar.gz -C \t/kettu --strip-components=1 \u0026\u0026  echo \"**** cleanup ****\" \u0026\u0026  rm -rf \t/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "LOCALE.md",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \u0026\u0026     ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" \u0026\u0026     ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     mkdir -p /tmp \u0026\u0026     mkdir -p /var/cache/apk \u0026\u0026     apk add --no-cache --virtual=.build-dependencies wget ca-certificates \u0026\u0026     apk add --no-cache parallel \u0026\u0026     wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\"          -O \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"          \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     apk add --no-cache         \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     cat /tmp/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \u0026\u0026     apk del .build-dependencies \u0026\u0026     rm \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     rm \"/root/.wget-hsts\" \u0026\u0026     rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"/usr/lib:/opt/calibre/lib\""
            },
            {
              "Key": "PATH",
              "Value": "\"$PATH:/opt/calibre\""
            },
            {
              "Key": "LC_ALL",
              "Value": "\"C\""
            },
            {
              "Key": "CALIBRE_INSTALLER_SOURCE_CODE_URL",
              "Value": "\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026     apk add --no-cache --upgrade         bash         ca-certificates         gcc         libxcomposite         mesa-gl         python         qt5-qtbase-x11         xdg-utils         xz         wget \u0026\u0026     wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} |       python -c       \"import sys;        main=lambda:sys.stderr.write('Download failed\\n');        exec(sys.stdin.read());        main(install_dir='/opt', isolated=True)\" \u0026\u0026     rm -rf /tmp/calibre-installer-cache \u0026\u0026     apk del --purge $PKG_DEV                     $PKG_IMAGES_DEV \u0026\u0026     mkdir -p $APP_HOME/app \u0026\u0026     rm -rf /tmp \u0026\u0026     rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "root/",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "51413",
            "9091"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/config",
            "/downloads",
            "/watch"
          ]
        }
      ]
    }
  ]
}