MetaArgs: null
Stages:
- BaseName: amd64/ubuntu:18.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '''Florian JUDITH <florian.judith.b@gmail.com>'''
    Name: label
  - Key: TF_PACKAGE
    Name: arg
    Value: https://files.pythonhosted.org/packages/77/63/a9fa76de8dffe7455304c4ed635be4aa9c0bacef6e0633d87d5f54530c5c/tensorflow-1.13.1-cp36-cp36m-manylinux1_x86_64.whl
  - Key: TF_PACKAGE_PY_27
    Name: arg
    Value: https://files.pythonhosted.org/packages/d2/ea/ab2c8c0e81bd051cc1180b104c75a865ab0fc66c89be992c4b20bbf6d624/tensorflow-1.13.1-cp27-cp27mu-manylinux1_x86_64.whl
  - Key: TF_SERVING_VERSION
    Name: arg
    Value: 0.0.0
  - Key: TFMA_VERSION
    Name: arg
    Value: 0.13.0
  - Key: TFDV_VERSION
    Name: arg
    Value: 0.13.1
  - Key: PIPELINE_SDK_PACKAGE
    Name: arg
    Value: https://storage.googleapis.com/ml-pipeline/release/0.1.8/kfp.tar.gz
  - Name: user
    User: root
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: NB_USER
      Value: jovyan
    Name: env
  - Env:
    - Key: NB_UID
      Value: "1000"
    Name: env
  - Env:
    - Key: HOME
      Value: /home/$NB_USER
    Name: env
  - Env:
    - Key: NB_PREFIX
      Value: /
    Name: env
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    Name: env
  - Env:
    - Key: PATH
      Value: $CONDA_DIR/bin:$PATH
    Name: env
  - Env:
    - Key: TF_PACKAGE
      Value: $TF_PACKAGE
    Name: env
  - Env:
    - Key: TF_PACKAGE_27
      Value: $TF_PACKAGE_PY_27
    Name: env
  - Env:
    - Key: TF_SERVING_VERSION
      Value: $TF_PACKAGE_PY_27
    Name: env
  - Env:
    - Key: TFMA_VERSION
      Value: $TFMA_VERSION
    Name: env
  - Env:
    - Key: TFDV_VERSION
      Value: $TFDV_VERSION
    Name: env
  - Env:
    - Key: PIPELINE_SDK_PACKAGE
      Value: $PIPELINE_SDK_PACKAGE
    Name: env
  - Name: shell
    Shell:
    - /bin/bash
    - -c
  - CmdLine:
    - apt-get update && apt-get install -yq --no-install-recommends   apt-transport-https   build-essential   bzip2   ca-certificates   curl   g++   git   gnupg   graphviz   ffmpeg   locales   lsb-release   openssh-client   sudo   unzip   vim   wget   zip   &&
      apt-get clean &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_CREDENTIAL_GCR_VERSION
      Value: 1.4.3
    Name: env
  - CmdLine:
    - curl -LO https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${DOCKER_CREDENTIAL_GCR_VERSION}/docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz
      &&     tar -zxvf docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz
      &&     mv docker-credential-gcr /usr/local/bin/docker-credential-gcr &&     rm
      docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz &&     chmod
      +x /usr/local/bin/docker-credential-gcr
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "en_US.UTF-8 UTF-8" > /etc/locale.gen &&     locale-gen
    Name: run
    PrependShell: true
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - useradd -M -s /bin/bash -N -u $NB_UID $NB_USER &&     chown -R ${NB_USER}:users
      /usr/local/bin &&     mkdir -p $HOME
    Name: run
    PrependShell: true
  - CmdLine:
    - export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" &&     echo "deb https://packages.cloud.google.com/apt
      $CLOUD_SDK_REPO main" > /etc/apt/sources.list.d/google-cloud-sdk.list &&     curl
      https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - &&     apt-get
      update &&     apt-get install -y google-cloud-sdk kubectl
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp &&     wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini
      &&     echo "12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855
      *tini" | sha256sum -c - &&     mv tini /usr/local/bin/tini &&     chmod +x /usr/local/bin/tini
    Name: run
    PrependShell: true
  - Env:
    - Key: MINICONDA_VERSION
      Value: 4.5.4
    Name: env
  - CmdLine:
    - cd /tmp &&     mkdir -p $CONDA_DIR &&     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh
      &&     echo "a946ea1d0c4a642ddf0c3a26a18bb16d *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh"
      | md5sum -c - &&     /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh
      -f -b -p ${CONDA_DIR} &&     rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh
      &&     conda config --system --prepend channels conda-forge &&     conda config
      --system --set auto_update_conda false &&     conda config --system --set show_channel_urls
      true &&     conda update --all &&     conda update conda &&     conda clean
      -tipsy
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --upgrade pip==19.0.1 &&     pip --no-cache-dir install     ${TF_PACKAGE}     jupyter     jupyter-console==6.0.0     jupyterhub     jupyterlab     xgboost     git+https://github.com/kubeflow/fairing@a9bb9d5cc1c9f1d75efa31198ddbdccfe176b7bf     ${PIPELINE_SDK_PACKAGE}     &&
      conda clean -tipsy
    Name: run
    PrependShell: true
  - Chown: jovyan:users
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /tmp
  - Chown: jovyan:users
    From: ""
    Name: copy
    SourcesAndDest:
    - install.sh
    - /tmp/
  - CmdLine:
    - chmod a+rx /tmp/install.sh &&     /tmp/install.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: KSONNET_VERSION
      Value: 0.13.0
    Name: env
  - CmdLine:
    - curl -L https://github.com/ksonnet/ksonnet/releases/download/v${KSONNET_VERSION}/ks_${KSONNET_VERSION}_linux_amd64.tar.gz
      | tar -xvzf - &&     mv ks_${KSONNET_VERSION}_linux_amd64/ks /usr/local/bin/ks
      &&     rm -rf ks_${KSONNET_VERSION}_linux_amd64 &&     chmod +x /usr/local/bin/ks
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&   DEBIAN_FRONTEND=noninteractive apt-get install -y s3cmd
      libffi-dev libxml2-dev libssl-dev libcurl4-openssl-dev libfreetype6 libfreetype6-dev
      libfontconfig1 libfontconfig1-dev chrpath libxft-dev libmysqlclient-dev texlive
      texlive-fonts-extra texlive-htmlxml  texinfo texlive-bibtex-extra texlive-formats-extra
      texlive-generic-extra &&   apt-get update -q &&   DEBIAN_FRONTEND=noninteractive
      apt-get install -y openjdk-8-jdk &&   apt-get autoremove -y --purge &&   apt-get
      clean &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install     mysqlclient     ktext
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir --trusted-host h2o-release.s3.amazonaws.com install -f         http://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html
      h2o
    Name: run
    PrependShell: true
  - Chown: jovyan:users
    From: ""
    Name: copy
    SourcesAndDest:
    - jupyter_notebook_config.py
    - /tmp
  - Name: workdir
    Path: $HOME
  - CmdLine:
    - rm -fr $(ls -A $HOME)
    Name: run
    PrependShell: true
  - Chown: jovyan:users
    From: ""
    Name: copy
    SourcesAndDest:
    - pvc-check.sh
    - /usr/local/bin/
  - CmdLine:
    - chmod a+rx /usr/local/bin/*
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-credential-gcr configure-docker && chown jovyan:users $HOME/.docker/config.json
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8888"
  - Name: user
    User: jovyan
  - CmdLine:
    - tini
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - sh
    - -c
    - jupyter notebook --notebook-dir=/home/jovyan --ip=0.0.0.0 --no-browser --allow-root
      --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*'
      --NotebookApp.base_url=${NB_PREFIX}
    Name: cmd
    PrependShell: false
  From:
    Image: amd64/ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM amd64/ubuntu:18.04
