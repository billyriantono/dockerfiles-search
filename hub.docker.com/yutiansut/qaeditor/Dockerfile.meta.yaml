MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update && apt-get -y install curl xz-utils wget gpg
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex     && for key in     4ED778F539E3634C779C87C6D7062848A1AB005C     B9E2F5981AA6E0CD28160D9FF13993A75599653C     94AE36675C464D64BAFA68DD7434390BDBE9B9C5     B9AE9905FFD7803F25714661B63B535A4C206CA9     77984A986EBC2AA786BC0F66B01FBB92821C587A     71DCFD284A79C3B38668286BC97EC7A07EDE3FC1     FD3A5288F042B6850C66B31F09FE44734EB7990E     8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600     C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     DD8F2338BAE7501E3DD5AC78C273792F7D83545D     A48C2BEE680E841632CD4E44F07496B3EB3C1762     ;
      do     gpg --batch --keyserver ipv4.pool.sks-keyservers.net --recv-keys "$key"
      ||     gpg --batch --keyserver pool.sks-keyservers.net --recv-keys "$key" ||     gpg
      --batch --keyserver pgp.mit.edu --recv-keys "$key" ||     gpg --batch --keyserver
      keyserver.pgp.com --recv-keys "$key" ||     gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key" ;     done
    Name: run
    PrependShell: true
  - Key: NODE_VERSION
    Name: arg
    Value: 10.15.3
  - Env:
    - Key: NODE_VERSION
      Value: $NODE_VERSION
    Name: env
  - CmdLine:
    - ARCH= && dpkgArch="$(dpkg --print-architecture)"     && case "${dpkgArch##*-}"
      in     amd64) ARCH='x64';;     ppc64el) ARCH='ppc64le';;     s390x) ARCH='s390x';;     arm64)
      ARCH='arm64';;     armhf) ARCH='armv7l';;     i386) ARCH='x86';;     *) echo
      "unsupported architecture"; exit 1 ;;     esac     && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz"     &&
      curl -SLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"     &&
      gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc     && grep
      " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c -     &&
      tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1
      --no-same-owner     && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc
      SHASUMS256.txt     && ln -s /usr/local/bin/node /usr/local/bin/nodejs
    Name: run
    PrependShell: true
  - Env:
    - Key: YARN_VERSION
      Value: 1.13.0
    Name: env
  - CmdLine:
    - set -ex     && for key in     6A010C5166006599AA17F08146C2130DFD2497F5     ;
      do     gpg --batch --keyserver ipv4.pool.sks-keyservers.net --recv-keys "$key"
      ||     gpg --batch --keyserver pool.sks-keyservers.net --recv-keys "$key" ||     gpg
      --batch --keyserver pgp.mit.edu --recv-keys "$key" ||     gpg --batch --keyserver
      keyserver.pgp.com --recv-keys "$key" ||     gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key" ;     done     && curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"     &&
      curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc"     &&
      gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz     &&
      mkdir -p /opt/yarn     && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1     &&
      ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn     && ln -s /opt/yarn/bin/yarn
      /usr/local/bin/yarnpkg     && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install git sudo
    Name: run
    PrependShell: true
  - Env:
    - Key: GO_VERSION
      Value: 1.11.4
    Name: env
  - Env:
    - Key: GOPATH
      Value: /usr/local/go-packages
    Name: env
  - Env:
    - Key: GO_ROOT
      Value: /usr/local/go
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/local/go/bin
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:${GOPATH}/bin
    Name: env
  - CmdLine:
    - curl -sS https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz
      | tar -C /usr/local -xzf - &&     go get -u -v github.com/nsf/gocode &&     go
      get -u -v github.com/uudashr/gopkgs/cmd/gopkgs &&     go get -u -v github.com/ramya-rao-a/go-outline
      &&     go get -u -v github.com/acroca/go-symbols &&     go get -u -v golang.org/x/tools/cmd/guru
      &&     go get -u -v golang.org/x/tools/cmd/gorename &&     go get -u -v github.com/fatih/gomodifytags
      &&     go get -u -v github.com/haya14busa/goplay/cmd/goplay &&     go get -u
      -v github.com/josharian/impl &&     go get -u -v github.com/tylerb/gotype-live
      &&     go get -u -v github.com/rogpeppe/godef &&     go get -u -v github.com/zmb3/gogetdoc
      &&     go get -u -v golang.org/x/tools/cmd/goimports &&     go get -u -v sourcegraph.com/sqs/goreturns
      &&     go get -u -v github.com/golang/lint/golint &&     go get -u -v github.com/cweill/gotests/...
      &&     go get -u -v github.com/alecthomas/gometalinter &&     go get -u -v honnef.co/go/tools/...
      &&     go get -u -v github.com/sourcegraph/go-langserver &&     go get -u -v
      github.com/derekparker/delve/cmd/dlv &&     go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get -y install openjdk-8-jdk maven gradle
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - &&     echo
      "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main" > /etc/apt/sources.list.d/llvm.list
      &&     apt-get update && apt-get install -y clang-tools-10 clangd-10 clang-tidy-10
      &&     ln -s /usr/bin/clangd-10 /usr/bin/clangd &&     ln -s /usr/bin/clang-tidy-10
      /usr/bin/clang-tidy
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y python3 python3-dev python3-pip &&     update-alternatives
      --install /usr/bin/python python /usr/bin/python3 1 &&     pip3 install python-language-server
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install QUANTAXIS     flake8     autopep8     futures     configparser     rope     pydocstyle     yapf
      &&     pip3 install quantaxis_webserver &&     pip3 install quantaxis_pubsub
      &&     pip3 install quantaxis-randomprice &&     pip3 install qarealtime-collector
      &&     pip3 install QATRADER &&     pip3 install QAStrategy;
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install php curl php-cli php-mbstring unzip
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -s -o composer-setup.php https://getcomposer.org/installer     && php composer-setup.php
      --install-dir=/usr/local/bin --filename=composer     && rm composer-setup.php
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install ruby ruby-dev zlib1g-dev &&     gem install solargraph
    Name: run
    PrependShell: true
  - Env:
    - Key: RUSTUP_HOME
      Value: /usr/local/rustup
    - Key: CARGO_HOME
      Value: /usr/local/cargo
    - Key: PATH
      Value: /usr/local/cargo/bin:$PATH
    Name: env
  - Env:
    - Key: USER
      Value: root
    Name: env
  - CmdLine:
    - curl -fsSL https://sh.rustup.rs | sh -s -- -y     && rustup update     && rustup
      component add rls rust-src rust-analysis
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod g+rw /home &&     mkdir -p /home/project &&     mkdir -p /home/theia &&     mkdir
      -p /usr/local/cargo &&     mkdir -p /usr/local/go &&     mkdir -p /usr/local/go-packages
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y python build-essential
    Name: run
    PrependShell: true
  - Key: version
    Name: arg
    Value: latest
  - Name: workdir
    Path: /home/theia
  - Chown: ""
    Name: add
    SourcesAndDest:
    - $version.package.json
    - ./package.json
  - Key: GITHUB_TOKEN
    Name: arg
    Value: null
  - CmdLine:
    - yarn --cache-folder ./ycache && rm -rf ./ycache &&     NODE_OPTIONS="--max_old_space_size=4096"
      yarn theia build
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "3000"
  - Env:
    - Key: SHELL
      Value: /bin/bash
    - Key: THEIA_DEFAULT_PLUGINS
      Value: local-dir:/home/theia/plugins
    Name: env
  - Env:
    - Key: GOPATH
      Value: /home/project
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:$GOPATH/bin
    Name: env
  - CmdLine:
    - yarn
    - theia
    - start
    - /home/project
    - --hostname=0.0.0.0
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
