MetaArgs:
- DefaultValue: null
  Key: FROM_TAG
  ProvidedValue: null
  Value: null
Stages:
- BaseName: wodby/base-php:7.1
  Commands:
  - Key: PHP_DEV
    Name: arg
    Value: null
  - Key: PHP_DEBUG
    Name: arg
    Value: null
  - Key: WODBY_USER_ID
    Name: arg
    Value: "983"
  - Key: WODBY_GROUP_ID
    Name: arg
    Value: "978"
  - Env:
    - Key: PHP_DEV
      Value: '"${PHP_DEV}"'
    - Key: PHP_DEBUG
      Value: '"${PHP_DEBUG}"'
    - Key: SSHD_PERMIT_USER_ENV
      Value: '"yes"'
    - Key: LD_PRELOAD
      Value: '"/usr/lib/preloadable_libiconv.so php"'
    Name: env
  - Env:
    - Key: APP_ROOT
      Value: '"/var/www/html"'
    - Key: CONF_DIR
      Value: '"/var/www/conf"'
    - Key: FILES_DIR
      Value: '"/mnt/files"'
    Name: env
  - Env:
    - Key: PATH
      Value: '"${PATH}:/home/wodby/.composer/vendor/bin:${APP_ROOT}/vendor/bin"'
    - Key: SSHD_HOST_KEYS_DIR
      Value: '"/etc/ssh"'
    - Key: ENV
      Value: '"/home/wodby/.shrc"'
    - Key: GIT_USER_EMAIL
      Value: '"wodby@example.com"'
    - Key: GIT_USER_NAME
      Value: '"wodby"'
    Name: env
  - CmdLine:
    - "set -xe;         existing_group=$(getent group \"${WODBY_GROUP_ID}\" | cut
      -d: -f1);     if [[ -n \"${existing_group}\" ]]; then delgroup \"${existing_group}\";
      fi;     existing_user=$(getent passwd \"${WODBY_USER_ID}\" | cut -d: -f1);     if
      [[ -n \"${existing_user}\" ]]; then deluser \"${existing_user}\"; fi;     \taddgroup
      -g \"${WODBY_GROUP_ID}\" -S wodby; \tadduser -u \"${WODBY_USER_ID}\" -D -S -s
      /bin/bash -G wodby wodby; \tadduser wodby www-data; \tsed -i '/^wodby/s/!/*/'
      /etc/shadow; \t    apk add --update --no-cache -t .php-rundeps         c-client=2007f-r8
      \        fcgi         findutils         freetype=2.9.1-r1         geoip=1.6.12-r1
      \        git         gmp=6.1.2-r1         icu-libs=60.2-r2         imagemagick=7.0.7.39-r0
      \        jpegoptim=1.4.6-r0         less         libbz2=1.0.6-r6         libevent=2.1.8-r5
      \        libjpeg-turbo=1.5.3-r4         libjpeg-turbo-utils         libldap=2.4.46-r0
      \        libltdl=2.4.6-r5         libmemcached-libs=1.0.18-r2         libmcrypt=2.5.8-r7
      \        libpng=1.6.34-r1         librdkafka=0.11.4-r1         libuuid=2.32-r0
      \        libxslt=1.1.32-r0         libzip=1.5.1-r1         make         mariadb-client=10.2.19-r1
      \        nano         openssh         openssh-client         patch         postgresql-client=10.5-r0
      \        rabbitmq-c=0.8.0-r4         rsync         su-exec         sudo         tidyhtml-libs=5.6.0-r0
      \        tig         tmux         yaml=0.1.7-r0;         apk add --update --no-cache
      -t .build-deps         autoconf         cmake         build-base         bzip2-dev
      \        freetype-dev         geoip-dev         gmp-dev         icu-dev         imagemagick-dev
      \        imap-dev         jpeg-dev         libevent-dev         libjpeg-turbo-dev
      \        libmemcached-dev         libmcrypt-dev         libpng-dev         librdkafka-dev
      \        libtool         libxslt-dev         libzip-dev         openldap-dev
      \        pcre-dev         postgresql-dev         rabbitmq-c-dev         tidyhtml-dev
      \        yaml-dev;         apk add -U --no-cache -t .php-edge-rundeps -X http://dl-cdn.alpinelinux.org/alpine/edge/testing/
      \        gnu-libiconv=1.15-r2;         apk add --update --no-cache redis;     mv
      /usr/bin/redis-cli /tmp/;     apk del --purge redis;     deluser redis;     mv
      /tmp/redis-cli /usr/bin;         docker-php-source extract;         docker-php-ext-install
      \        bcmath         bz2         calendar         exif         gmp         imap
      \        intl         ldap         mysqli         opcache         pcntl         pdo_mysql
      \        pdo_pgsql         pgsql         soap         sockets         tidy         xmlrpc
      \        xsl         zip;         docker-php-ext-configure gd         --with-gd
      \        --with-freetype-dir=/usr/include/         --with-png-dir=/usr/include/
      \        --with-jpeg-dir=/usr/include/;       NPROC=$(getconf _NPROCESSORS_ONLN);
      \      docker-php-ext-install \"-j${NPROC}\" gd;         pecl config-set php_ini
      \"${PHP_INI_DIR}/php.ini\";         if [[ \"${PHP_VERSION:0:3}\" == \"7.2\"
      ]]; then         pecl install mcrypt-1.0.1;         docker-php-ext-enable mcrypt;
      \    elif [[ \"${PHP_VERSION:0:3}\" == \"7.1\" ]]; then         docker-php-ext-install
      mcrypt;     fi;         if [[ \"${PHP_VERSION:0:3}\" != \"7.3\" ]]; then         newrelic_url=\"http://download.newrelic.com/php_agent/release/\";
      \        wget -r -nd --no-parent -P /tmp/newrelic -Alinux-musl.tar.gz \"${newrelic_url}\"
      >/dev/null 2>&1;         tar -xzf /tmp/newrelic/newrelic-php*.tar.gz --strip=1
      -C /tmp/newrelic;         export NR_INSTALL_SILENT=true;         export NR_INSTALL_USE_CP_NOT_LN=true;
      \        bash /tmp/newrelic/newrelic-install install;         rm /usr/local/etc/php/conf.d/newrelic.ini;
      \        mkdir -p /var/log/newrelic/;         chown -R www-data:www-data /var/log/newrelic/;
      \        chmod -R 775 /var/log/newrelic/;                 pecl install amqp-1.9.3
      memcached-3.0.4 xdebug-2.6.1;         docker-php-ext-enable amqp memcached xdebug;
      \    fi;         pecl install         apcu-5.1.14         ast-1.0.0         ds-1.2.6
      \        event-2.4.1         geoip-1.1.1         grpc-1.16.0         igbinary-2.0.8
      \        imagick-3.4.3         mongodb-1.5.3         oauth-2.0.3         rdkafka-3.0.5
      \        redis-4.2.0         uuid-1.0.4         yaml-2.0.4;         docker-php-ext-enable
      \        apcu         ast         ds         event         igbinary         imagick
      \        geoip         grpc         mongodb         oauth         redis         rdkafka
      \        uuid         yaml;         mv /usr/local/etc/php/conf.d/docker-php-ext-event.ini
      /usr/local/etc/php/conf.d/z-docker-php-ext-event.ini;         if [[ \"${PHP_VERSION:0:3}\"
      != \"7.3\" ]]; then         mkdir -p /tmp/blackfire;         version=$(php -r
      \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\");         blackfire_url=\"https://blackfire.io/api/v1/releases/probe/php/alpine/amd64/${version}\";
      \        wget -qO- \"${blackfire_url}\" | tar xz --no-same-owner -C /tmp/blackfire;
      \        mv /tmp/blackfire/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so;
      \    fi;         mkdir -p /usr/src/php/ext/uploadprogress;     up_url=\"https://github.com/wodby/pecl-php-uploadprogress/archive/latest.tar.gz\";
      \    wget -qO- \"${up_url}\" | tar xz --strip-components=1 -C /usr/src/php/ext/uploadprogress;
      \    docker-php-ext-install uploadprogress;         xhprof_ext_ver=\"5.0-beta2\";
      \    mkdir -p /usr/src/php/ext/tideways_xhprof;     xhprof_url=\"https://github.com/tideways/php-xhprof-extension/archive/v${xhprof_ext_ver}.tar.gz\";
      \    wget -qO- \"${xhprof_url}\" | tar xz --strip-components=1 -C /usr/src/php/ext/tideways_xhprof;
      \    docker-php-ext-install tideways_xhprof;         wget -qO- https://getcomposer.org/installer
      | php -- --install-dir=/usr/local/bin --filename=composer;         su-exec wodby
      composer global require \"hirak/prestissimo:^0.3\";         walter_ver=\"1.3.0\";
      \    walter_url=\"https://github.com/walter-cd/walter/releases/download/v${walter_ver}/walter_${walter_ver}_linux_amd64.tar.gz\";
      \    wget -qO- \"${walter_url}\" | tar xz -C /tmp/;     mv /tmp/walter_linux_amd64/walter
      /usr/local/bin;         {         echo 'export PS1=\"\\u@${WODBY_APP_NAME:-php}.${WODBY_ENVIRONMENT_NAME:-container}:\\w
      $ \"';         echo \"export PATH=${PATH}\";     } | tee /home/wodby/.shrc;
      \        cp /home/wodby/.shrc /home/wodby/.bashrc;     cp /home/wodby/.shrc
      /home/wodby/.bash_profile;         {         echo 'Defaults env_keep += \"APP_ROOT
      FILES_DIR\"' ;                 if [[ -n \"${PHP_DEV}\" ]]; then             echo
      'wodby ALL=(root) NOPASSWD:SETENV:ALL';         else             echo -n 'wodby
      ALL=(root) NOPASSWD:SETENV: ' ;             echo -n '/usr/local/bin/files_chmod,
      ' ;             echo -n '/usr/local/bin/files_chown, ' ;             echo -n
      '/usr/local/bin/files_sync, ' ;             echo -n '/usr/local/bin/gen_ssh_keys,
      ' ;             echo -n '/usr/local/bin/init_container, ' ;             echo
      -n '/usr/local/bin/migrate, ' ;             echo -n '/usr/local/sbin/php-fpm,
      ' ;             echo -n '/usr/sbin/sshd, ' ;             echo '/usr/sbin/crond'
      ;         fi;     } | tee /etc/sudoers.d/wodby;         echo \"TLS_CACERTDIR
      /etc/ssl/certs/\" >> /etc/openldap/ldap.conf;         install -o wodby -g wodby
      -d         \"${APP_ROOT}\"         \"${CONF_DIR}\"         /home/wodby/.ssh;
      \        install -o www-data -g www-data -d         \"${FILES_DIR}/public\"
      \        \"${FILES_DIR}/private\"         \"${FILES_DIR}/sessions\"         \"${FILES_DIR}/xdebug/traces\"
      \        \"${FILES_DIR}/xdebug/profiler\"         /home/www-data/.ssh;         chmod
      -R 775 \"${FILES_DIR}\";     chown -R wodby:wodby         \"${PHP_INI_DIR}/conf.d\"
      \        /usr/local/etc/php-fpm.d         /home/wodby/.[^.]*;         touch
      /etc/ssh/sshd_config;     chown wodby: /etc/ssh/sshd_config;         rm /etc/crontabs/root;
      \    touch /etc/crontabs/www-data;     chown root:www-data /etc/crontabs/www-data;
      \    chmod 660 /etc/crontabs/www-data;         su-exec wodby composer clear-cache;
      \    docker-php-source delete;     apk del --purge .build-deps;     pecl clear-cache;
      \        rm -rf         /usr/src/php/ext/ast         /usr/src/php/ext/uploadprogress
      \        /usr/include/php         /usr/lib/php/build         /tmp/*         /root/.composer
      \        /var/cache/apk/*;         if [[ -z \"${PHP_DEV}\" ]]; then         rm
      -rf /usr/src/php.tar.xz;     fi"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - templates
    - /etc/gotpl/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - bin
    - /usr/local/bin/
  - CmdLine:
    - chown $WODBY_USER_ID:$WODBY_GROUP_ID /etc/gotpl/ -R
    Name: run
    PrependShell: true
  - CmdLine:
    - chown $WODBY_USER_ID:$WODBY_GROUP_ID /docker-entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - chown $WODBY_USER_ID:$WODBY_GROUP_ID /usr/local/bin/ -R
    Name: run
    PrependShell: true
  - Name: user
    User: wodby
  - Name: workdir
    Path: ${APP_ROOT}
  - Name: expose
    Ports:
    - "9000"
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - sudo
    - -E
    - LD_PRELOAD=/usr/lib/preloadable_libiconv.so
    - php-fpm
    Name: cmd
    PrependShell: false
  From:
    Image: wodby/base-php:7.1
  Name: ""
  Platform: ""
  SourceCode: FROM wodby/base-php:7.1
