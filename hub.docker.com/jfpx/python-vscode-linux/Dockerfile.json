{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "lsiobase/ubuntu:bionic",
      "SourceCode": "FROM lsiobase/ubuntu:bionic",
      "Platform": "",
      "From": {
        "Image": "lsiobase/ubuntu:bionic"
      },
      "Commands": [
        {
          "Key": "CODE_RELEASE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "build_version",
              "Value": "\"release:- ${CODE_RELEASE} version:- ${VERSION} Build-date:- ${BUILD_DATE}\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "\"/config\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026  apt-get install -y         git         nano         net-tools         sudo \u0026\u0026  echo \"**** install code-server ****\" \u0026\u0026  if [ -z ${CODE_RELEASE+x} ]; then         CODE_RELEASE=$(curl -sX GET \"https://api.github.com/repos/cdr/code-server/releases/latest\"         | awk '/tag_name/{print $4;exit}' FS='[\"\"]');  fi \u0026\u0026  curl -o  /tmp/code.tar.gz -L         \"https://github.com/cdr/code-server/releases/download/${CODE_RELEASE}/code-server${CODE_RELEASE}-linux-x86_64.tar.gz\" \u0026\u0026  tar xzf /tmp/code.tar.gz -C         /usr/bin/ --strip-components=1   --wildcards code-server*/code-server \u0026\u0026  echo \"**** clean up ****\" \u0026\u0026  rm -rf         /tmp/*         /var/lib/apt/lists/*         /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     ca-certificates     curl     apt-transport-https     lsb-release     gnupg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor |     tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg \u003e /dev/null \u0026\u0026         echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main\" |             tee /etc/apt/sources.list.d/azure-cli.list \u0026\u0026                 apt-get update \u0026\u0026                 apt-get install -y azure-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \u0026\u0026     add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \u0026\u0026         apt-get update \u0026\u0026         apt-get install -y docker-ce-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026  apt-get install -y         zip         unzip         jq         wget         python3         python3-pip         python-virtualenv         python-setuptools \u0026\u0026  pip3 install -U         pip         setuptools         virtualenv         bpython         pylint         azure-storage-file"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o /tmp/ngrok.zip -L \"https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\" \u0026\u0026     unzip /tmp/ngrok.zip -d /usr/bin/ \u0026\u0026     rm -rf         /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ${HOME}/extensions \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y bsdtar curl fonts-firacode \u0026\u0026     curl -JL https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-python/vsextensions/python/2019.11.50794/vspackage |                 bsdtar -xvf - extension \u0026\u0026 mv extension ${HOME}/extensions/ms-python.python-2019.11.50794 \u0026\u0026     curl -JL https://marketplace.visualstudio.com/_apis/public/gallery/publishers/shardulm94/vsextensions/trailing-spaces/0.3.1/vspackage |                 bsdtar -xvf - extension \u0026\u0026 mv extension ${HOME}/extensions/shardulm94.trailing-spaces-0.3.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/.vscode/settings.json",
            "${HOME}/workspace/.vscode/settings.json"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/toolset",
            "${HOME}/toolset"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /config/toolset/redirect/redirect"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/root",
            "/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8443"
          ]
        }
      ]
    }
  ]
}