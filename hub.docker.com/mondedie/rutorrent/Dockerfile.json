{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.10",
      "SourceCode": "FROM alpine:3.10",
      "Platform": "",
      "From": {
        "Image": "alpine:3.10"
      },
      "Commands": [
        {
          "Key": "RTORRENT_VER",
          "Name": "arg",
          "Value": "v0.9.8"
        },
        {
          "Key": "LIBTORRENT_VER",
          "Name": "arg",
          "Value": "v0.13.8"
        },
        {
          "Key": "LIBZEN_VER",
          "Name": "arg",
          "Value": "0.4.37"
        },
        {
          "Key": "LIBMEDIAINFO_VER",
          "Name": "arg",
          "Value": "19.09"
        },
        {
          "Key": "GEOIP_VER",
          "Name": "arg",
          "Value": "1.1.1"
        },
        {
          "Env": [
            {
              "Key": "UID",
              "Value": "991"
            },
            {
              "Key": "GID",
              "Value": "991"
            },
            {
              "Key": "WEBROOT",
              "Value": "/"
            },
            {
              "Key": "PORT_RTORRENT",
              "Value": "45000"
            },
            {
              "Key": "DHT_RTORRENT",
              "Value": "off"
            },
            {
              "Key": "CHECK_PERM_DATA",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"rutorrent based on alpinelinux\""
            },
            {
              "Key": "tags",
              "Value": "\"latest\""
            },
            {
              "Key": "maintainer",
              "Value": "\"magicalex \u003cmagicalex@mondedie.fr\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apk --update-cache add git automake autoconf build-base linux-headers libtool zlib-dev cppunit-dev     php7-apcu php7-mbstring php7-ctype php7-pear php7-dev php7-sockets php7-phar file findutils tar xz     cppunit libnl3 libnl3-dev ncurses-dev curl-dev curl wget libsigc++-dev nginx mktorrent unrar     ffmpeg gzip zip unrar s6 geoip geoip-dev su-exec nginx php7 php7-fpm php7-json php7-opcache bzip2 sox   \u0026\u0026 git clone https://github.com/mirror/xmlrpc-c.git /tmp/xmlrpc-c   \u0026\u0026 git clone -b ${LIBTORRENT_VER} https://github.com/rakshasa/libtorrent.git /tmp/libtorrent   \u0026\u0026 git clone -b ${RTORRENT_VER} https://github.com/rakshasa/rtorrent.git /tmp/rtorrent   \u0026\u0026 wget https://mediaarea.net/download/source/libzen/${LIBZEN_VER}/libzen_${LIBZEN_VER}.tar.bz2 -O /tmp/libzen.tar.gz   \u0026\u0026 wget https://mediaarea.net/download/source/libmediainfo/${LIBMEDIAINFO_VER}/libmediainfo_${LIBMEDIAINFO_VER}.tar.gz -O /tmp/libmediainfo.tar.gz   \u0026\u0026 wget https://mediaarea.net/download/source/mediainfo/${LIBMEDIAINFO_VER}/mediainfo_${LIBMEDIAINFO_VER}.tar.gz -O /tmp/mediainfo.tar.gz   \u0026\u0026 export BUILD_CORES=$(grep -c \"processor\" /proc/cpuinfo)   \u0026\u0026 cd /tmp   \u0026\u0026 tar -xjf /tmp/libzen.tar.gz   \u0026\u0026 cd /tmp/ZenLib/Project/GNU/Library   \u0026\u0026 ./autogen.sh   \u0026\u0026 ./configure --prefix=/usr/local --enable-shared --disable-static   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 cd /tmp   \u0026\u0026 tar -xzf libmediainfo.tar.gz   \u0026\u0026 cd /tmp/MediaInfoLib/Project/GNU/Library   \u0026\u0026 ./autogen.sh   \u0026\u0026 ./configure   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 cd /tmp   \u0026\u0026 tar -xzf mediainfo.tar.gz   \u0026\u0026 cd /tmp/MediaInfo/Project/GNU/CLI   \u0026\u0026 ./autogen.sh   \u0026\u0026 ./configure   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 strip -s /usr/local/bin/mediainfo   \u0026\u0026 cd /tmp/xmlrpc-c/stable   \u0026\u0026 ./configure   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 cd /tmp/libtorrent   \u0026\u0026 ./autogen.sh   \u0026\u0026 ./configure --disable-debug --disable-instrumentation   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 cd /tmp/rtorrent   \u0026\u0026 ./autogen.sh   \u0026\u0026 ./configure --enable-ipv6 --disable-debug --with-xmlrpc-c   \u0026\u0026 make -j ${BUILD_CORES}   \u0026\u0026 make install   \u0026\u0026 strip -s /usr/local/bin/rtorrent   \u0026\u0026 git clone https://github.com/Novik/ruTorrent.git /rutorrent/app   \u0026\u0026 git clone https://github.com/Phlooo/ruTorrent-MaterialDesign.git /rutorrent/app/plugins/theme/themes/materialdesign   \u0026\u0026 git clone https://github.com/Micdu70/geoip2-rutorrent /rutorrent/app/plugins/geoip2   \u0026\u0026 git clone https://github.com/nelu/rutorrent-thirdparty-plugins.git /tmp/rutorrent-thirdparty-plugins   \u0026\u0026 cp -r /tmp/rutorrent-thirdparty-plugins/filemanager /rutorrent/app/plugins   \u0026\u0026 rm -rf /rutorrent/app/plugins/geoip   \u0026\u0026 rm -rf /rutorrent/app/plugins/_cloudflare   \u0026\u0026 cd /usr/share/GeoIP   \u0026\u0026 wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz   \u0026\u0026 wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz   \u0026\u0026 tar -xzf GeoLite2-City.tar.gz   \u0026\u0026 tar -xzf GeoLite2-Country.tar.gz   \u0026\u0026 rm -f *.tar.gz   \u0026\u0026 mv GeoLite2-*/*.mmdb .   \u0026\u0026 cp *.mmdb /rutorrent/app/plugins/geoip2/database   \u0026\u0026 pecl install geoip-${GEOIP_VER}   \u0026\u0026 chmod +x /usr/lib/php7/modules/geoip.so   \u0026\u0026 mkdir -p /run/rtorrent /run/nginx /run/php   \u0026\u0026 rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "FILEBOT",
          "Name": "arg",
          "Value": "NO"
        },
        {
          "Key": "FILEBOT_VER",
          "Name": "arg",
          "Value": "4.8.5"
        },
        {
          "Key": "CHROMAPRINT_VER",
          "Name": "arg",
          "Value": "1.4.3"
        },
        {
          "Env": [
            {
              "Key": "FILEBOT_RENAME_METHOD",
              "Value": "symlink"
            },
            {
              "Key": "FILEBOT_RENAME_MOVIES",
              "Value": "\"{n} ({y})\""
            },
            {
              "Key": "FILEBOT_RENAME_SERIES",
              "Value": "\"{n}/Season {s.pad(2)}/{s00e00} - {t}\""
            },
            {
              "Key": "FILEBOT_RENAME_ANIMES",
              "Value": "\"{n}/{e.pad(3)} - {t}\""
            },
            {
              "Key": "FILEBOT_RENAME_MUSICS",
              "Value": "\"{n}/{fn}\""
            },
            {
              "Key": "FILEBOT_LANG",
              "Value": "fr"
            },
            {
              "Key": "FILEBOT_CONFLICT",
              "Value": "skip"
            },
            {
              "Key": "FILEBOT_LICENSE",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ \"${FILEBOT}\" == \"YES\" ]; then   apk add openjdk8-jre java-jna-native   \u0026\u0026 mkdir /filebot   \u0026\u0026 cd /filebot   \u0026\u0026 wget https://get.filebot.net/filebot/FileBot_${FILEBOT_VER}/FileBot_${FILEBOT_VER}-portable.tar.xz -O /filebot/filebot.tar.xz   \u0026\u0026 tar -xJf filebot.tar.xz   \u0026\u0026 rm -rf filebot.tar.xz   \u0026\u0026 ln -sf /usr/local/lib/libzen.so.0.0.0 /filebot/lib/Linux-x86_64/libzen.so   \u0026\u0026 ln -sf /usr/local/lib/libmediainfo.so.0.0.0 /filebot/lib/Linux-x86_64/libmediainfo.so   \u0026\u0026 wget https://github.com/acoustid/chromaprint/releases/download/v${CHROMAPRINT_VER}/chromaprint-fpcalc-${CHROMAPRINT_VER}-linux-x86_64.tar.gz -O /tmp/chromaprint-fpcalc.tar.gz   \u0026\u0026 cd /tmp   \u0026\u0026 tar -xzf chromaprint-fpcalc.tar.gz   \u0026\u0026 mv chromaprint-fpcalc-${CHROMAPRINT_VER}-linux-x86_64/fpcalc /usr/local/bin   \u0026\u0026 rm -rf /tmp/chromaprint-fpcalc.tar.gz   \u0026\u0026 strip -s /usr/local/bin/fpcalc   \u0026\u0026 rm -rf /tmp/*   ; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs",
            "/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data",
            "/config"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/startup"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/bin/startup"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/s6-svscan",
            "/etc/s6.d"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}