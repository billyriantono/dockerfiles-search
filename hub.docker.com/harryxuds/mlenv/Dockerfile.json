{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Key": "PYTHON_VERSION",
          "Name": "arg",
          "Value": "3.5"
        },
        {
          "Key": "NB_USER",
          "Name": "arg",
          "Value": "ubuntu"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_DIR",
              "Value": "/opt/opencv"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CAFFE_ROOT",
              "Value": "/opt/caffe"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LIBGPUARRAY_DIR",
              "Value": "/opt/libgpuarray"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NUM_CORES",
              "Value": "8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDNN_VERSION",
              "Value": "6.0.21"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "CLONE_TAG",
          "Name": "arg",
          "Value": "1.0"
        },
        {
          "Env": [
            {
              "Key": "PYCAFFE_ROOT",
              "Value": "$CAFFE_ROOT/python"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PYCAFFE_ROOT:$PYTHONPATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "3.4.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDA_ENABLED",
              "Value": "ON"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENCL_ENABLE",
              "Value": "OFF"
            }
          ],
          "Name": "env"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Pierre-Luc Delisle \u003cpierre-luc.delisle.1@ens.etsmtl.ca\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.cudnn.version",
              "Value": "\"${CUDNN_VERSION}\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.caffe.version",
              "Value": "\"0.15\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" \u003e /etc/apt/sources.list.d/nvidia-ml.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends \t    libcudnn6=$CUDNN_VERSION-1+cuda8.0 \t    libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0         apt-utils         build-essential         ca-certificates         cmake         curl         doxygen         freeglut3*         g++         gfortran         git         graphviz         libatlas-base-dev         libatlas-base-dev         libavcodec-dev         libavformat-dev         libboost-*         libcupti-dev         libcurl3-dev         libdc1394-22-dev         libeigen3-dev         libfaac-dev         libfreetype6-dev         libgflags-dev         libgl1-mesa-dev         libgoogle-glog-dev         libgphoto2*         libgstreamer*         libgtk-3-dev         libgtk2.0-dev         libgtkglext1*         libhdf5-dev         libhdf5-serial-dev         libjasper-dev         libjpeg-dev         liblapacke-dev         libleveldb-dev         liblmdb-dev         libopenblas-dev         libopencore-amrnb-dev         libopencore-amrwb-dev         libopencv-dev         libopenni2*         libpng-dev         libprotobuf-dev         libsnappy-dev         libswscale-dev         libtbb-dev         libtbb2         libtheora-dev         libtiff-dev         libv4l-dev         libvorbis-dev         libzmq3-dev         libxvidcore-dev         mesa-common-dev         nano         ocl-icd-opencl-dev         openblas-*         openblas*         pkg-config         protobuf-compiler         python-dev         python-numpy         python-pip         python-scipy         python-setuptools         python3-dev         python3-h5py         python3-matplotlib         python3-nose         python3-numpy         python3-pandas         python3-scipy         python3-skimage         python3-sklearn         python3-sympy         python3-tk         software-properties-common         swig         unzip         v4l-utils         vim         wget         x264         zip         zlib1g-dev \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal\" | tee /etc/apt/sources.list.d/tensorflow-serving.list \u0026\u0026 \tcurl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | apt-key add - \u0026\u0026 \tapt-get update \u0026\u0026 apt-get install tensorflow-model-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python3 get-pip.py \u0026\u0026     pip3 install numpy                  virtualenv                  virtualenvwrapper                  boost                  pytest \u0026\u0026     pip install numpy                 virtualenv                 virtualenvwrapper                 boost                 pytest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /src \u0026\u0026     cd /src \u0026\u0026     mkdir -p $OPENCV_DIR \u0026\u0026     wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \u0026\u0026     unzip $OPENCV_VERSION.zip \u0026\u0026     mv /src/opencv-$OPENCV_VERSION/ $OPENCV_DIR/ \u0026\u0026     rm -rf /src/$OPENCV_VERSION.zip \u0026\u0026     wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip -O $OPENCV_VERSION-contrib.zip \u0026\u0026     unzip $OPENCV_VERSION-contrib.zip \u0026\u0026     mv /src/opencv_contrib-$OPENCV_VERSION $OPENCV_DIR/ \u0026\u0026     rm -rf /src/$OPENCV_VERSION-contrib.zip \u0026\u0026     mkdir -p $OPENCV_DIR/opencv-$OPENCV_VERSION/build \u0026\u0026     cd $OPENCV_DIR/opencv-$OPENCV_VERSION/build \u0026\u0026     cmake     -D CMAKE_BUILD_TYPE=RELEASE     -D BUILD_PYTHON_SUPPORT=ON     -D CMAKE_INSTALL_PREFIX=/usr/local     -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so     -D INSTALL_C_EXAMPLES=ON     -D INSTALL_PYTHON_EXAMPLES=ON     -D BUILD_PYTHON_SUPPORT=ON     -D BUILD_NEW_PYTHON_SUPPORT=ON     -D PYTHON_DEFAULT_EXECUTABLE=$(which python3)     -D PYTHON_INCLUDE_DIR=/usr/include/python3.5     -D PYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.5m     -D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so     -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.5/dist-packages/numpy/core/include/     -D OPENCV_EXTRA_MODULES_PATH=$OPENCV_DIR/opencv_contrib-$OPENCV_VERSION/modules     -D WITH_TBB=ON     -D WITH_PTHREADS_PF=ON     -D WITH_OPENNI=OFF     -D WITH_OPENNI2=ON     -D WITH_EIGEN=ON     -D BUILD_DOCS=ON     -D BUILD_TESTS=ON     -D BUILD_PERF_TESTS=ON     -D BUILD_EXAMPLES=ON     -D WITH_OPENCL=$OPENCL_ENABLED     -D WITH_CUDA=$CUDA_ENABLED     -D WITH_CUBLAS=$CUDA_ENABLED     -D USE_GStreamer=ON     -D WITH_GDAL=ON     -D WITH_CSTRIPES=ON     -D WITH_NVCUVID=$CUDA_ENABLED     -D ENABLE_FAST_MATH=1     -D CUDA_FAST_MATH=$CUDA_ENABLED     -D BUILD_opencv_gpu=$CUDA_ENABLED     -D BUILD_opencv_gpuarithm=$CUDA_ENABLED     -D BUILD_opencv_gpubgsegm=$CUDA_ENABLED     -D BUILD_opencv_gpucodec=$CUDA_ENABLED     -D BUILD_opencv_gpufeatures2d=$CUDA_ENABLED     -D BUILD_opencv_gpufilters=$CUDA_ENABLED     -D BUILD_opencv_gpuimgproc=$CUDA_ENABLED     -D BUILD_opencv_gpulegacy=$CUDA_ENABLED     -D BUILD_opencv_gpuoptflow=$CUDA_ENABLED     -D BUILD_opencv_gpustereo=$CUDA_ENABLED     -D BUILD_opencv_gpuwarping=$CUDA_ENABLED     -D WITH_OPENGL=ON     -D WITH_QT=OFF     -D WITH_IPP=ON     -D WITH_V4L=ON .. \u0026\u0026     make -j8 \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf $OPENCV_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /src \u0026\u0026     mkdir -p $CAFFE_ROOT \u0026\u0026     cd $CAFFE_ROOT \u0026\u0026     git clone -b ${CLONE_TAG} --depth 1 https://github.com/BVLC/caffe.git . \u0026\u0026     pip install --upgrade pip \u0026\u0026     cd python \u0026\u0026     for req in $(cat requirements.txt) pydot; do pip install $req; done \u0026\u0026     cd .. \u0026\u0026     mkdir build \u0026\u0026 cd build \u0026\u0026     cmake         -D USE_CUDNN=$CUDA_ENABLED         -D BLAS=open         -D PYTHON_INCLUDE=/usr/bin/python3         /usr/lib/python3.5/dist-packages/numpy/core/include         -D USE_OPENCV=ON         -D OPENCV_VERSION=3         -D WITH_PYTHON_LAYER=ON .. \u0026\u0026     make -j\"$(nproc)\" all \u0026\u0026     make pycaffe \u0026\u0026     make test \u0026\u0026     make install \u0026\u0026     echo \"$CAFFE_ROOT/build/lib\" \u003e\u003e /etc/ld.so.conf.d/caffe.conf \u0026\u0026 ldconfig \u0026\u0026     rm -rf $CAFFE_ROOT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /home/ubuntu \u0026\u0026     pip3 install virtualenv \u0026\u0026     pip3 install --upgrade --force-reinstall numpy                  protobuf \t\t pandas                  Pillow                  future                  graphviz                  joblib                  matplotlib                  theano                  cython                  scikit-learn                  scikit-image                  scipy                  tensorflow-gpu                  tensorflow-tensorboard                  tflearn                  keras                  jupyter                  sphinx                  wheel                  boost                  pytest \t\t librosa \t\t grpcio \t\t nose \t\t flask \t\t flask-restplus                  http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl \u0026\u0026     pip3 install torchvision \u0026\u0026     pip3 install git+https://github.com/hlin117/mdlp-discretization"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir $LIBGPUARRAY_DIR/ \u0026\u0026 \tcd /src \u0026\u0026 \tpip3 install Mako \u0026\u0026 \tgit clone https://github.com/Theano/libgpuarray.git \u0026\u0026 \tmv libgpuarray $LIBGPUARRAY_DIR/ \u0026\u0026 \tcd $LIBGPUARRAY_DIR/libgpuarray \u0026\u0026 \tmkdir Build \u0026\u0026 \tcd Build \u0026\u0026 \tcmake \t-D CMAKE_BUILD_TYPE=Release .. \u0026\u0026 \tmake \u0026\u0026 \tmake install \u0026\u0026 \trm -rf $LIBGPUARRAY_DIR \u0026\u0026 \tcd /"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        }
      ]
    }
  ]
}