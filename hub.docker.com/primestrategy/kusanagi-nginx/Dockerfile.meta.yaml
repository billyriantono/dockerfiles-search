MetaArgs: null
Stages:
- BaseName: alpine:3.10
  Commands:
  - Maintainer: kusanagi@prime-strategy.co.jp
    Name: maintainer
  - Env:
    - Key: PATH
      Value: /bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin
    Name: env
  - CmdLine:
    - ':         && apk update         && apk upgrade         && apk add --no-cache
      --virtual .user shadow         && groupadd -g 1001 www         && useradd -d
      /var/lib/www -s /bin/nologin -g www -M -u 1001 httpd         && groupadd -g
      1000 kusanagi         && useradd -d /home/kusanagi -s /bin/nologin -g kusanagi
      -G www -u 1000 -m kusanagi         && chmod 755 /home/kusanagi         && apk
      del --purge .user         && mkdir /tmp/build         && : # END of RUN'
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/fast_cgiparams_CVE-2016-5387.patch
    - /tmp/build
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/add_dev.sh
    - /usr/local/bin
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/del_dev.sh
    - /usr/local/bin
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.6
    Name: env
  - Env:
    - Key: NGINX_DEPS
      Value: "gnupg1 \t\tgcc \t\tg++ \t\tmake  \t\tautoconf \t\tautomake \t\tpatch
        \t\truby-rake \t\tcurl \t\tcurl-dev \t\tmusl-dev \t\tperl-dev \t\tlibxslt-dev
        \t\topenssl-dev \t\tlinux-headers \t\tluajit-dev \t\tlibpng-dev \t\tfreetype-dev
        \t\tlibxpm-dev \t\texpat-dev \t\ttiff-dev \t\tlibxcb-dev \t\tlua-dev \t\tpcre-dev
        \t\tgeoip-dev \t\tgd-dev \t\truby-etc \t\truby-dev \t\tlibxpm-dev \t\tfontconfig-dev
        \t\tlibuuid \t\tutil-linux-dev \t\tzlib-dev \t\tgo \t\tgnupg \t\tgettext"
    Name: env
  - CmdLine:
    - ": \t&& nginx_ct_version=1.3.2 \t&& ngx_cache_purge_version=2.3 \t&& ngx_brotli_version=e505dce68acc190cc5a1e780a3b0275e39f160ca
      \t&& naxsi_version=0.56 \t&& nps_version=1.13.35.2 \t&& GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8
      \t&& brotli_version=1.0.7 \t&& naxsi_tarball_name=naxsi \t&& lua_nginx_module_name=lua-nginx-module
      \t&& ngx_devel_kit_version=0.3.0 \t&& LUAJIT_VERSION=2.1.0-beta3 \t&& LUA_VERSION=2.1
      \t&& lua_nginx_module_version=0.10.13 \t&& CT_SUBMIT_VERSION=1.1.2 \t&& LUAJIT_LIB=/usr/lib
      \t&& LUAJIT_INC=/usr/include/luajit-$LUA_VERSION \t&& CC=/usr/bin/cc \t&& CXX=/usr/bin/c++
      \t&& apk add --no-cache --virtual .builddep $NGINX_DEPS \t&& cd /tmp/build \t&&
      curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz
      \t&& curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o
      nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found=''; \tfor
      server in \t\tkeys.gnupg.net \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& tar xf nginx.tar.gz \t&& mkdir nginx-${NGINX_VERSION}/extensions
      \t&& cd ./nginx-${NGINX_VERSION}/extensions \t&& curl -Lo nginx-ct-${nginx_ct_version}.tar.gz
      https://github.com/grahamedgecombe/nginx-ct/archive/v${nginx_ct_version}.tar.gz
      \t&& curl -Lo ngx_cache_purge-${ngx_cache_purge_version}.tar.gz https://github.com/FRiCKLE/ngx_cache_purge/archive/${ngx_cache_purge_version}.tar.gz
      \t&& curl -Lo ngx_brotli-${ngx_brotli_version}.tar.gz https://github.com/google/ngx_brotli/archive/${ngx_brotli_version}.tar.gz
      \t&& curl -Lo brotli-${brotli_version}.tar.gz https://github.com/google/brotli/archive/v${brotli_version}.tar.gz
      \t&& curl -Lo ngx_devel_kit-${ngx_devel_kit_version}.tar.gz https://github.com/simplresty/ngx_devel_kit/archive/v${ngx_devel_kit_version}.tar.gz
      \t&& curl -Lo ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz https://github.com/openresty/${lua_nginx_module_name}/archive/v${lua_nginx_module_version}.tar.gz
      \t&& curl -Lo ${naxsi_tarball_name}-${naxsi_version}.tar.gz https://github.com/nbs-system/naxsi/archive/${naxsi_version}.tar.gz
      \t&& tar xf nginx-ct-${nginx_ct_version}.tar.gz \t&& mv nginx-ct-${nginx_ct_version}
      nginx-ct \t&& tar xf ngx_cache_purge-${ngx_cache_purge_version}.tar.gz \t&&
      mv ngx_cache_purge-${ngx_cache_purge_version} ngx_cache_purge \t&& tar xf ngx_brotli-${ngx_brotli_version}.tar.gz
      \t&& mv ngx_brotli-${ngx_brotli_version} ngx_brotli \t&& tar xf ngx_devel_kit-${ngx_devel_kit_version}.tar.gz
      \t&& mv ngx_devel_kit-${ngx_devel_kit_version} ngx_devel_kit \t&& tar xf ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz
      \t&& mv ${lua_nginx_module_name}-${lua_nginx_module_version} ${lua_nginx_module_name}
      \t&& tar xf ${naxsi_tarball_name}-${naxsi_version}.tar.gz \t&& mv ${naxsi_tarball_name}-${naxsi_version}
      ${naxsi_tarball_name} \t&& tar xf brotli-${brotli_version}.tar.gz \t&& (test
      -d ngx_brotli/deps/brotli && rmdir ngx_brotli/deps/brotli) \t&& mv brotli-${brotli_version}
      ngx_brotli/deps/brotli \t&& cd .. \t&& patch -p1 < ../fast_cgiparams_CVE-2016-5387.patch
      \t&& cd /tmp/build/nginx-${NGINX_VERSION} \t&& CONF=\"\t\t--prefix=/etc/nginx
      \t\t--conf-path=/etc/nginx/nginx.conf \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules
      \t\t--error-log-path=/dev/stderr \t\t--http-log-path=dev/stdout \t\t--pid-path=/var/run/nginx.pid
      \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=httpd \t\t--group=www \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module
      \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module
      \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module
      \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module
      \t\t--with-http_image_filter_module \t\t--with-http_geoip_module \t\t--with-threads
      \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module
      \t\t--with-stream_realip_module \t\t--with-stream_geoip_module \t\t--with-http_slice_module
      \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat \t\t--with-file-aio
      \t\t--with-http_v2_module \t    \t--with-http_image_filter_module \t\t--with-http_geoip_module
      \t\t--with-http_perl_module \t\t--add-module=./extensions/ngx_devel_kit \t\t--add-module=./extensions/${lua_nginx_module_name}
      \t\t--add-module=./extensions/ngx_cache_purge \t\t--add-module=./extensions/nginx-ct
      \t\t--add-module=./extensions/ngx_brotli \t\t--add-module=./extensions/${naxsi_tarball_name}/naxsi_src
      \t\" \t&& CFLAGS='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 \t\t-fexceptions -fstack-protector
      \t\t-m64 -mtune=generic \t\t-Wno-deprecated-declarations \t\t-Wno-cast-function-type
      \t\t-Wno-unused-parameter \t\t-Wno-stringop-truncation \t\t-Wno-stringop-overflow'
      \t&& ./configure $CONF --with-cc-opt=\"$CFLAGS\" \t&& make -j$(getconf _NPROCESSORS_ONLN)
      \t&& (find . -type f -a -name 'nginx' -o -name '*.so*' | xargs strip ; true)
      \t&& (find . -type f -a -name '*.so*' | xargs chmod 755 ; true) \t&& make install
      \t&& mkdir -p /usr/lib/nginx/modules /etc/nginx/naxsi.d \t&& install -m644 extensions/${naxsi_tarball_name}/naxsi_config/naxsi_core.rules
      /etc/nginx/naxsi.d/naxsi_core.rules.conf \t&& (for so in `find extensions -type
      f -name '*.so'`; do mv $so /usr/lib/nginx/modules ; done; true) \t&& mv /usr/bin/envsubst
      /tmp/ \t&& curl -LO https://raw.githubusercontent.com/grahamedgecombe/ct-submit/v${CT_SUBMIT_VERSION}/ct-submit.go
      \t&& go build ct-submit.go \t&& cp ct-submit /tmp \t&& runDeps=\"$( \t\tscanelf
      --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst /tmp/ct-submit \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk
      'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1
      }' \t)\" \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \t&& apk
      del --purge .builddep \t&& mv /tmp/envsubst /usr/bin/envsubst \t&& mv /tmp/ct-submit
      /usr/bin/ct-submit \t&& chmod 700 /usr/bin/ct-submit \t\t&& mkdir -p -m755 /var/www/html
      \t\t/etc/nginx/conf.d \t\t/var/cache/nginx \t\t/var/log/nginx  \t&& chown -R
      httpd:www /etc/nginx \t\t/var/www/html \t\t/var/cache/nginx \t\t/var/log/nginx
      \t\t/etc/hosts \t&& install -m644 /etc/nginx/html/50x.html /var/www/html \t&&
      install -m644 /etc/nginx/html/index.html /var/www/html \t&& mkdir -p -m755 /etc/nginx/scts
      /etc/nginx/naxsi.d /etc/nginx/conf.d/templates \t&& rm -rf /tmp/build \t&& :
      # END of RUN"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/kusanagi_naxsi_core.conf
    - /etc/nginx/conf.d/kusanagi_naxsi_core.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/naxsi.d/
    - /etc/nginx/naxsi.d/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/templates/
    - /etc/nginx/conf.d/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/security.conf
    - /etc/nginx/conf.d/security.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/ct-submit.sh
    - /usr/bin/ct-submit.sh
  - CmdLine:
    - "cd /etc/nginx/ \t&& chmod 700 /usr/bin/ct-submit.sh \t&& ln -s ../../usr/lib/nginx/modules
      /etc/nginx/modules \t&& apk add --no-cache tzdata openssl \t&& : # END of RUN"
    Name: run
    PrependShell: true
  - Key: MICROSCANNER_TOKEN
    Name: arg
    Value: null
  - CmdLine:
    - "if [ x${MICROSCANNER_TOKEN} != x ] ; then \tapk add --no-cache --virtual .ca
      ca-certificates \t&& update-ca-certificates\t&& wget --no-check-certificate
      https://get.aquasec.com/microscanner \t&& chmod +x microscanner \t&& ./microscanner
      ${MICROSCANNER_TOKEN} || exit 1\t&& rm ./microscanner \t&& apk del --purge .ca
      ;    fi"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
  - Name: expose
    Ports:
    - "8443"
  - Name: volume
    Volumes:
    - /home/kusanagi
  - Name: volume
    Volumes:
    - /etc/letsencrypt
  - Name: user
    User: httpd
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/docker-entrypoint.sh
    - /
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /usr/sbin/nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.10
