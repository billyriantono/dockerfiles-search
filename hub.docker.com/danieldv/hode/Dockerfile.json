{
  "MetaArgs": [
    {
      "Key": "PETSC_VERSION",
      "DefaultValue": "3.11.3",
      "ProvidedValue": null,
      "Value": "3.11.3"
    },
    {
      "Key": "PETSC4PY_VERSION",
      "DefaultValue": "3.11.0",
      "ProvidedValue": null,
      "Value": "3.11.0"
    },
    {
      "Key": "MAKEFLAGS",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "PETSC_OPTFLAGS",
      "DefaultValue": "\"-02 -g\"",
      "ProvidedValue": null,
      "Value": "\"-02 -g\""
    },
    {
      "Key": "PETSC_DEBUGGING",
      "DefaultValue": "\"yes\"",
      "ProvidedValue": null,
      "Value": "\"yes\""
    }
  ],
  "Stages": [
    {
      "Name": "base",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as base",
      "Platform": "",
      "As": "base",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"D. de Vries \u003cdaniel.devries@darcorop.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"Base image for HPC Optimization Development Environment (HODE)\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "Env": [
            {
              "Key": "PYTHONIOENCODING",
              "Value": "\"UTF-8\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export DEBIAN_FRONTEND=noninteractive \u0026\u0026     apt-get -qq update \u0026\u0026     apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade \u0026\u0026     apt-get -y install         cmake         g++         gfortran         libboost-dev         libboost-filesystem-dev         libboost-iostreams-dev         libboost-math-dev         libboost-program-options-dev         libboost-system-dev         libboost-thread-dev         libboost-timer-dev         libeigen3-dev         libhdf5-mpich-dev         liblapack-dev         libmpich-dev         libopenblas-dev         mpich         ninja-build         pkg-config         python3-dev         python3-pip         python3-setuptools \u0026\u0026     apt-get -y install         doxygen         git         graphviz         sudo         valgrind         wget \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir numpy scipy mpi4py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        }
      ]
    },
    {
      "Name": "dev-env",
      "BaseName": "base",
      "SourceCode": "FROM base as dev-env",
      "Platform": "",
      "As": "dev-env",
      "From": {
        "Stage": {
          "Named": "base",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"D. de Vries \u003cdaniel.devries@darcorop.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"Development environment with working PETSc installation.\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "PETSC_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "PETSC4PY_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "MAKEFLAGS",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "PETSC_OPTFLAGS",
          "Name": "arg",
          "Value": null
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "apt-get -qq update \u0026\u0026     apt-get -y install bison flex python \u0026\u0026     wget -nc --quiet http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \u0026\u0026     mkdir -p petsc-src \u0026\u0026 tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \u0026\u0026     cd petsc-src \u0026\u0026     ./configure         --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS}         --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS}         --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS}         --with-debugging=${PETSC_SLEPC_DEBUGGING}         --with-fortran-bindings=no         --download-blacs         --download-hypre         --download-metis         --download-mumps         --download-ptscotch         --download-scalapack         --download-spai         --download-suitesparse         --download-superlu         --with-scalar-type=real         --prefix=/usr/local/petsc \u0026\u0026     make ${MAKEFLAGS} \u0026\u0026     make install \u0026\u0026     export PETSC_DIR=/usr/local/petsc \u0026\u0026     apt-get -y purge bison flex python \u0026\u0026     apt-get -y autoremove \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /tmp/* \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PETSC_DIR",
              "Value": "/usr/local/petsc"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        }
      ]
    },
    {
      "Name": "hode",
      "BaseName": "dev-env",
      "SourceCode": "FROM dev-env as hode",
      "Platform": "",
      "As": "hode",
      "From": {
        "Stage": {
          "Named": "dev-env",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"D. de Vries \u003cdaniel.devries@darcorop.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"HPC Optimization Development Environment (HODE)\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "pip3 install --no-cache-dir openmdao platypus-opt psutil"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -qq update \u0026\u0026     apt-get -y install swig unzip \u0026\u0026     wget -O pyoptsparse.zip https://github.com/mdolab/pyoptsparse/archive/master.zip \u0026\u0026     unzip pyoptsparse.zip \u0026\u0026     cd pyoptsparse-master \u0026\u0026     python3 setup.py install \u0026\u0026     apt-get -y purge swig unzip \u0026\u0026     apt-get -y autoremove \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /tmp/* \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        }
      ]
    }
  ]
}