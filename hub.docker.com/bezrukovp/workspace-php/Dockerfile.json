{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "laradock/workspace:1.8-71",
      "SourceCode": "FROM laradock/workspace:1.8-71",
      "Platform": "",
      "From": {
        "Image": "laradock/workspace:1.8-71"
      },
      "Commands": [
        {
          "Maintainer": "Pavel Bezrukov, https://bezr.pro",
          "Name": "maintainer"
        },
        {
          "Key": "lang",
          "Name": "arg",
          "Value": "ru_RU.UTF-8"
        },
        {
          "Key": "language",
          "Name": "arg",
          "Value": "ru_RU:ru"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "${lang}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "${language}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "${lang}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_CTYPE",
              "Value": "${lang}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -yqq \u0026\u0026     apt-get install -y apt-utils locales \u0026\u0026     locale-gen --purge ${lang} en_US.UTF-8 \u0026\u0026     sed -i -e \"s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/\" /etc/locale.gen \u0026\u0026     sed -i -e \"s/# ${lang} UTF-8/${lang} UTF-8/\" /etc/locale.gen \u0026\u0026     echo -e \"LANG=\\\"${lang}\\\"\\nLANGUAGE=\\\"${language}\\\"\\n\" \u003e /etc/default/locale \u0026\u0026     dpkg-reconfigure --frontend=noninteractive locales \u0026\u0026     update-locale LANG=${lang}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "TZ",
          "Name": "arg",
          "Value": "Europe/Moscow"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "${TZ}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026     echo $TZ \u003e /etc/timezone \u0026\u0026     dpkg-reconfigure -f noninteractive tzdata"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PUID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "PGID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "developer/",
            "/var/developer/"
          ]
        },
        {
          "CmdLine": [
            "groupadd -g $PGID developer \u0026\u0026     useradd -u $PUID -g developer -m developer -s /bin/bash \u0026\u0026     echo \"developer:$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13)\" | chpasswd \u0026\u0026     echo \"source /var/developer/.profile\" \u003e\u003e /home/developer/.profile \u0026\u0026     chown -R developer:developer /var/developer/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y apt-utils dialog \u0026\u0026     apt-get install -y sudo mc wget rsync ssmtp mysql-client         iputils-ping telnet dnsutils tcpdump htop         apt-transport-https ca-certificates tmux screen         python-software-properties software-properties-common         supervisor \u0026\u0026 mkdir -p /var/log/supervisor     echo '#developer' \u003e /etc/sudoers.d/developer \u0026\u0026     echo 'developer ALL = NOPASSWD: ALL' \u003e\u003e /etc/sudoers.d/developer \u0026\u0026     usermod -aG sudo developer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "etc/*",
            "/etc/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "logrotate.d/*",
            "/etc/logrotate.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "supervisor/supervisord.conf",
            "/etc/supervisor/supervisord.conf"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "supervisor/conf.d/*",
            "/etc/supervisor/conf.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ssmtp/",
            "/etc/ssmtp/"
          ]
        },
        {
          "CmdLine": [
            "curl -sSL -o php7.zip https://github.com/websupport-sk/pecl-memcache/archive/php7.zip     \u0026\u0026 unzip php7     \u0026\u0026 cd pecl-memcache-php7     \u0026\u0026 /usr/bin/phpize     \u0026\u0026 ./configure --with-php-config=/usr/bin/php-config     \u0026\u0026 make     \u0026\u0026 make install     \u0026\u0026 echo \"extension=memcache.so\" \u003e /etc/php/7.1/mods-available/memcache.ini     \u0026\u0026 ln -s /etc/php/7.1/mods-available/memcache.ini /etc/php/7.1/cli/conf.d/20-memcache.ini     \u0026\u0026 cd .. \u0026\u0026 rm -rf pecl-memcache-php7 php7.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "developer"
        },
        {
          "Key": "NODE_VERSION",
          "Name": "arg",
          "Value": "stable"
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "${NODE_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVM_DIR",
              "Value": "/home/developer/.nvm"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \u0026\u0026     . $NVM_DIR/nvm.sh \u0026\u0026     nvm install ${NODE_VERSION} \u0026\u0026     nvm use ${NODE_VERSION} \u0026\u0026     nvm alias ${NODE_VERSION} \u0026\u0026     echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export NVM_DIR=\"$HOME/.nvm\"' \u003e\u003e ~/.bashrc \u0026\u0026     echo '[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 . \"$NVM_DIR/nvm.sh\"  # This loads nvm' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export NVM_DIR=\"/home/developer/.nvm\"' \u003e\u003e ~/.bashrc \u0026\u0026     echo '[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 . \"$NVM_DIR/nvm.sh\"  # This loads nvm' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "developer"
        },
        {
          "Key": "YARN_VERSION",
          "Name": "arg",
          "Value": "latest"
        },
        {
          "Env": [
            {
              "Key": "YARN_VERSION",
              "Value": "${YARN_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 . \"$NVM_DIR/nvm.sh\" \u0026\u0026     if [ ${YARN_VERSION} = \"latest\" ]; then         curl -o- -L https://yarnpkg.com/install.sh | bash;     else         curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION};     fi \u0026\u0026     echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export YARN_DIR=\"/home/developer/.yarn\"' \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y jpegoptim optipng"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord",
            "-n",
            "-c",
            "/etc/supervisor/supervisord.conf"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}