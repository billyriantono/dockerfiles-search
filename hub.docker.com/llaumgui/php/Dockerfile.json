{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.3-fpm-alpine",
      "SourceCode": "FROM php:7.3-fpm-alpine",
      "Platform": "",
      "From": {
        "Image": "php:7.3-fpm-alpine"
      },
      "Commands": [
        {
          "Maintainer": "Guillaume Kulakowski \u003cguillaume@kulakowski.fr\u003e",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "Description",
              "Value": "\"Fork of php-fpm:7.3\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "Vendor",
              "Value": "\"Guillaume Kulakowski\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "License",
              "Value": "\"MIT\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "Version",
              "Value": "7.3-fpm"
            }
          ],
          "Name": "label"
        },
        {
          "Key": "DOCKER_PHP_ENABLE_APCU",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_COMPOSER",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_EXIF",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_IMAGICK",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_LDAP",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_MEMCACHED",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_MONGODB",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_MYSQL",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_POSTGRESQL",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_REDIS",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_SYMFONY",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_PHP_ENABLE_XDEBUG",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKER_USER_UID",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Key": "DOCKER_USER_GID",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "echo -n \"With apcu support:          \" ; if [[ \"${DOCKER_PHP_ENABLE_APCU}\" = \"on\" ]] ;        then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With composer support:      \" ; if [[ \"${DOCKER_PHP_ENABLE_COMPOSER}\" = \"on\" ]] ;    then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With exif support:          \" ; if [[ \"${DOCKER_PHP_ENABLE_EXIF}\" = \"on\" ]] ;      then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With imagick support:       \" ; if [[ \"${DOCKER_PHP_ENABLE_IMAGICK}\" = \"on\" ]] ;      then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With ldap support:          \" ; if [[ \"${DOCKER_PHP_ENABLE_LDAP}\" = \"on\" ]] ;      then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With memcached support:     \" ; if [[ \"${DOCKER_PHP_ENABLE_MEMCACHED}\" = \"on\" ]] ;  then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With mongodb support:       \" ; if [[ \"${DOCKER_PHP_ENABLE_MONGODB}\" = \"on\" ]] ;    then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With mysql support:         \" ; if [[ \"${DOCKER_PHP_ENABLE_MYSQL}\" = \"on\" ]] ;    then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With postgresql support:    \" ; if [[ \"${DOCKER_PHP_ENABLE_POSTGRESQL}\" = \"on\" ]] ; then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With redis support:         \" ; if [[ \"${DOCKER_PHP_ENABLE_REDIS}\" = \"on\" ]] ;    then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With symfony support:       \" ; if [[ \"${DOCKER_PHP_ENABLE_SYMFONY}\" = \"on\" ]] ;    then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     echo -n \"With xdebug support:        \" ; if [[ \"${DOCKER_PHP_ENABLE_XDEBUG}\" = \"on\" ]] ;      then echo \"Yes\"; else echo \"No\" ; fi \u0026\u0026     if [ -z ${DOCKER_USER_UID+x} ]; then echo \"DOCKER_USER_UID is unset\"; DOCKER_USER_UID=1000; else echo \"DOCKER_USER_UID is set to '$DOCKER_USER_UID'\"; fi \u0026\u0026     if [ -z ${DOCKER_USER_GID+x} ]; then echo \"DOCKER_USER_GID is unset\"; DOCKER_USER_GID=1000; else echo \"DOCKER_USER_GID is set to '$DOCKER_USER_GID'\"; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --update --no-cache         icu-libs         libintl         libzip         git         patch"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --update --no-cache --virtual .docker-php-global-dependancies         freetype-dev         libjpeg-turbo-dev         libpng-dev         gettext-dev         icu-dev         libxml2-dev         ldb-dev         libzip-dev         autoconf         g++         make         pcre-dev         wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "php -m \u0026\u0026     docker-php-ext-configure bcmath --enable-bcmath \u0026\u0026     docker-php-ext-configure gd       --with-freetype-dir=/usr/include/       --with-jpeg-dir=/usr/include/       --with-png-dir=/usr/include/ \u0026\u0026     docker-php-ext-configure gettext \u0026\u0026     docker-php-ext-configure intl --enable-intl \u0026\u0026     docker-php-ext-configure mbstring --enable-mbstring \u0026\u0026     docker-php-ext-configure opcache --enable-opcache \u0026\u0026     docker-php-ext-configure pcntl --enable-pcntl \u0026\u0026     docker-php-ext-configure soap \u0026\u0026     docker-php-ext-configure zip --enable-zip --with-libzip \u0026\u0026     docker-php-ext-install bcmath         gd         gettext         intl         mbstring         opcache         pcntl         soap         zip \u0026\u0026     php -m"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_APCU}\" != \"off\" ]; then       pecl install apcu \u0026\u0026       docker-php-ext-enable apcu \u0026\u0026       php -m;     else       echo \"Skip apcu support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_EXIF}\" != \"off\" ]; then       docker-php-ext-install exif \u0026\u0026       docker-php-ext-enable exif \u0026\u0026       php -m;     else       echo \"Skip apcu support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_IMAGICK}\" != \"off\" ]; then       apk add --update --no-cache           imagemagick           imagemagick-libs \u0026\u0026       apk add --update --no-cache --virtual .docker-php-imagick-dependancies           imagemagick-dev \u0026\u0026       pecl install imagick \u0026\u0026       docker-php-ext-enable imagick \u0026\u0026       apk del .docker-php-imagick-dependancies \u0026\u0026       php -m;     else       echo \"Skip apcu support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_LDAP}\" != \"off\" ]; then       apk add --update --no-cache           libldap \u0026\u0026       apk add --update --no-cache --virtual .docker-php-ldap-dependancies           openldap-dev \u0026\u0026       docker-php-ext-configure ldap \u0026\u0026       docker-php-ext-install ldap \u0026\u0026       apk del .docker-php-ldap-dependancies \u0026\u0026       php -m;     else       echo \"Skip ldap support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_MEMCACHED}\" != \"off\" ]; then       apk add --update --no-cache           libevent           libmemcached-libs \u0026\u0026       apk add --update --no-cache --virtual .docker-php-memcached-dependancies           cyrus-sasl-dev           libevent-dev           libmemcached-dev \u0026\u0026       pecl install memcached \u0026\u0026       docker-php-ext-enable memcached \u0026\u0026       apk del .docker-php-memcached-dependancies \u0026\u0026       php -m;     else       echo \"Skip memcached support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_MONGODB}\" != \"off\" ]; then       apk add --update --no-cache --virtual .docker-php-mongodb-dependancies           heimdal-dev \u0026\u0026       pecl install mongodb \u0026\u0026       docker-php-ext-enable mongodb \u0026\u0026       apk del .docker-php-mongodb-dependancies \u0026\u0026       php -m;     else       echo \"Skip mongodb support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_MYSQL}\" != \"off\" ]; then       apk add --update --no-cache --virtual .docker-php-mysql-dependancies           mysql-client \u0026\u0026       docker-php-ext-configure mysqli \u0026\u0026       docker-php-ext-configure pdo_mysql \u0026\u0026       docker-php-ext-install mysqli           pdo_mysql \u0026\u0026       apk del .docker-php-mysql-dependancies \u0026\u0026       php -m;     else       echo \"Skip mysql support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_POSTGRESQL}\" != \"off\" ]; then       apk add --update --no-cache           libpq \u0026\u0026       apk add --update --no-cache --virtual .docker-php-postgresql-dependancies           postgresql-client           postgresql-dev \u0026\u0026       docker-php-ext-configure pdo_pgsql \u0026\u0026       docker-php-ext-configure pgsql \u0026\u0026       docker-php-ext-install pdo_pgsql           pgsql \u0026\u0026       apk del .docker-php-postgresql-dependancies \u0026\u0026       php -m;     else       echo \"Skip postgresql support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_REDIS}\" != \"off\" ]; then       pecl install redis \u0026\u0026       docker-php-ext-enable redis \u0026\u0026       php -m;     else       echo \"Skip redis support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_SYMFONY}\" != \"off\" ]; then       apk add --update --no-cache           yaml \u0026\u0026       apk add --update --no-cache --virtual .docker-php-symfony-dependancies           yaml-dev \u0026\u0026       pecl install yaml \u0026\u0026       docker-php-ext-enable yaml;       apk del .docker-php-symfony-dependancies \u0026\u0026       php -m;     else       echo \"Skip symfony support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_XDEBUG}\" != \"off\" ]; then       apk add --update --no-cache --virtual .docker-php-xdebug-dependancies           bash           git \u0026\u0026       git clone https://github.com/xdebug/xdebug.git \u0026\u0026       cd xdebug \u0026\u0026       ./rebuild.sh \u0026\u0026       docker-php-ext-enable xdebug \u0026\u0026       echo \"xdebug.remote_enable=on\" \u003e\u003e /usr/local/etc/php/conf.d/xdebug.ini \u0026\u0026       echo \"xdebug.remote_autostart=off\" \u003e\u003e /usr/local/etc/php/conf.d/xdebug.ini \u0026\u0026       rm -rf xdebug \u0026\u0026       apk del .docker-php-xdebug-dependancies \u0026\u0026       php -m;     else       echo \"Skip xdebug support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_PHP_ENABLE_COMPOSER}\" != \"off\" ]; then       EXPECTED_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig) \u0026\u0026       php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \u0026\u0026       ACTUAL_SIGNATURE=$(php -r \"echo hash_file('SHA384', 'composer-setup.php');\") \u0026\u0026       if [ \"$EXPECTED_SIGNATURE\" != \"$ACTUAL_SIGNATURE\" ]; then         \u003e\u00262 echo 'ERROR: Invalid installer signature' \u0026\u0026         rm composer-setup.php \u0026\u0026         exit 1;       else         php composer-setup.php --install-dir=/usr/bin --filename=composer \u0026\u0026         RESULT=$? \u0026\u0026         rm composer-setup.php \u0026\u0026         exit $RESULT \u0026\u0026         composer -V;       fi;     else       echo \"Skip composer support\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i \"/^;security.limit_extensions =.*/asecurity.limit_extensions = .php .php7 .php73\" /usr/local/etc/php-fpm.d/www.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "php.d",
            "/usr/local/etc/php/conf.d"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "etc",
            "/usr/local/etc/php"
          ]
        },
        {
          "CmdLine": [
            "apk del .docker-php-global-dependancies \u0026\u0026     rm -rf /var/cache/apk/* \u0026\u0026     docker-php-source delete"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"${DOCKER_USER_GID}\" != \"false\" ] \u0026\u0026 [ \"${DOCKER_USER_UID}\" != \"false\" ]; then       addgroup -g ${DOCKER_USER_GID} php-cli \u0026\u0026       adduser -D -u ${DOCKER_USER_UID} -G php-cli php-cli;     else       echo \"No user for php-cli\";     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        }
      ]
    }
  ]
}