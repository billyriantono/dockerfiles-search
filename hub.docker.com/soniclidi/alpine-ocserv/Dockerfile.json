{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:latest",
      "SourceCode": "From alpine:latest",
      "Platform": "",
      "From": {
        "Image": "alpine:latest"
      },
      "Commands": [
        {
          "Maintainer": "soniclidi",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "echo \"@edge http://dl-4.alpinelinux.org/alpine/edge/main\" \u003e\u003e /etc/apk/repositories"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"@testing http://dl-4.alpinelinux.org/alpine/edge/testing\" \u003e\u003e /etc/apk/repositories"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026 apk add musl-dev iptables gnutls-dev readline-dev libnl3-dev lz4-dev libseccomp-dev@testing"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "buildDeps=\"xz openssl gcc autoconf make linux-headers\"; \tset -x \t\u0026\u0026 apk add $buildDeps \t\u0026\u0026 cd \t\u0026\u0026 wget http://www.infradead.org/ocserv/download.html -O download.html \t\u0026\u0026 OC_VERSION=`sed -n 's/^.*version is \u003cb\u003e\\(.*\\)$/\\1/p' download.html` \t\u0026\u0026 OC_FILE=\"ocserv-$OC_VERSION\" \t\u0026\u0026 rm -fr download.html \t\u0026\u0026 wget ftp://ftp.infradead.org/pub/ocserv/$OC_FILE.tar.xz \t\u0026\u0026 tar xJf $OC_FILE.tar.xz \t\u0026\u0026 rm -fr $OC_FILE.tar.xz \t\u0026\u0026 cd $OC_FILE \t\u0026\u0026 sed -i '/#define DEFAULT_CONFIG_ENTRIES /{s/96/200/}' src/vpn.h \t\u0026\u0026 ./configure \t\u0026\u0026 make -j\"$(nproc)\" \t\u0026\u0026 make install \t\u0026\u0026 mkdir -p /etc/ocserv \t\u0026\u0026 cp ./doc/sample.config /etc/ocserv/ocserv.conf \t\u0026\u0026 cd \t\u0026\u0026 rm -fr ./$OC_FILE \t\u0026\u0026 apk del --purge $buildDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "cn-no-route.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 sed -i 's/\\.\\/sample\\.passwd/\\/etc\\/ocserv\\/ocpasswd/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/\\(max-same-clients = \\)2/\\110/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/\\.\\.\\/tests/\\/etc\\/ocserv/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/#\\(compression.*\\)/\\1/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i '/^ipv4-network = /{s/192.168.1.0/192.168.99.0/}' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/192.168.1.2/8.8.8.8/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/^route/#route/' /etc/ocserv/ocserv.conf \t\u0026\u0026 sed -i 's/^no-route/#no-route/' /etc/ocserv/ocserv.conf \t\u0026\u0026 cat /tmp/cn-no-route.txt \u003e\u003e /etc/ocserv/ocserv.conf \t\u0026\u0026 rm -fr /tmp/cn-no-route.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/etc/ocserv"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        },
        {
          "CmdLine": [
            "ocserv",
            "-c",
            "/etc/ocserv/ocserv.conf",
            "-f"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}