{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "OWASP_CRS_VERSION",
              "Value": "v3.2/dev"
            }
          ],
          "Name": "env"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Daniel Pryor \u003chttp://github.com/pryorda/\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Chown": "",
          "From": "pryorda/docker-waf-base:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/src/modsecurity/",
            "/usr/src/modsecurity/"
          ]
        },
        {
          "Chown": "",
          "From": "pryorda/docker-waf-base:latest",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/nginx/",
            "/usr/local/nginx/"
          ]
        },
        {
          "CmdLine": [
            "adduser --disabled-password --system --home /var/cache/nginx --shell /sbin/nologin --group nginx \u0026\u0026         ln -s /usr/local/nginx/sbin/nginx /bin/nginx \u0026\u0026 \tcp /usr/src/modsecurity/unicode.mapping /usr/local/nginx/conf/ \u0026\u0026 \tmkdir -p /opt/modsecurity/var/audit/ \u0026\u0026 \tapt-get update \u0026\u0026 \tapt-get install -y git libyajl-dev libpcre3 libpcre3-dev libssl-dev libtool autoconf apache2-dev libxml2-dev libcurl4-openssl-dev \u0026\u0026 \tgit clone -b ${OWASP_CRS_VERSION} https://github.com/SpiderLabs/owasp-modsecurity-crs.git /usr/src/owasp-modsecurity-crs \u0026\u0026 \tcp -R /usr/src/owasp-modsecurity-crs/rules/ /usr/local/nginx/conf/  \u0026\u0026 \tmv /usr/local/nginx/conf/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example  /usr/local/nginx/conf/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \u0026\u0026 \tmv /usr/local/nginx/conf/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example  /usr/local/nginx/conf/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \u0026\u0026         mkdir -p /var/log/nginx/ \u0026\u0026 \tapt-get purge -y git \u0026\u0026 \tapt-get autoremove -y \u0026\u0026         rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/usr/local/nginx/conf/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "modsec_includes.conf",
            "/usr/local/nginx/conf/modsec_includes.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "modsecurity.conf",
            "/usr/local/nginx/conf/modsecurity.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "crs-setup.conf",
            "/usr/local/nginx/conf/rules/crs-setup.conf"
          ]
        },
        {
          "CmdLine": [
            "ln -sf /dev/stdout /var/log/nginx/access.log   \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}