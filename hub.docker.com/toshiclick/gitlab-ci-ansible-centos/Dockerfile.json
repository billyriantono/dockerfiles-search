{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:7",
      "SourceCode": "FROM centos:7",
      "Platform": "",
      "From": {
        "Image": "centos:7"
      },
      "Commands": [
        {
          "Maintainer": "toshi \u003ctoshi@toshi.click\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "echo \"include_only=.jp\" \u003e\u003e /etc/yum/pluginconf.d/fastestmirror.conf \u0026\u0026     yum -q clean all \u0026\u0026     yum -y -q install epel-release \u0026\u0026     yum -y -q update \u0026\u0026     rm -f /etc/rpm/macros.image-language-conf \u0026\u0026     sed -i '/^override_install_langs=/d' /etc/yum.conf \u0026\u0026     yum reinstall -y -q glibc-common \u0026\u0026     yum -y -q groupinstall \"Development Tools\" \u0026\u0026     yum install -y -q vim kbd ibus-kkc vlgothic-* \u0026\u0026     yum -q clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker     LANG=ja_JP.UTF-8     LANGUAGE=ja_JP:ja     LC_ALL=ja_JP.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "localedef -f UTF-8 -i ja_JP ja_JP.UTF-8 \u0026\u0026     echo 'LANG=\"ja_JP.UTF-8\"' \u003e  /etc/locale.conf \u0026\u0026     echo 'ZONE=\"Asia/Tokyo\"' \u003e /etc/sysconfig/clock \u0026\u0026     unlink /etc/localtime \u0026\u0026     ln -s /usr/share/zoneinfo/Japan /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y ansible systemd libselinux-python selinux-policy \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i ==     systemd-tmpfiles-setup.service ] || rm -f $i; done);     rm -f /lib/systemd/system/multi-user.target.wants/*;    rm -f /etc/systemd/system/*.wants/*;    rm -f /lib/systemd/system/local-fs.target.wants/*;     rm -f /lib/systemd/system/sockets.target.wants/*udev*;     rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm -f /lib/systemd/system/basic.target.wants/*;    rm -f /lib/systemd/system/anaconda.target.wants/*;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/sys/fs/cgroup"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ansible.cfg",
            "/etc/ansible/ansible.cfg"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "fastestmirror.conf",
            "/etc/yum/pluginconf.d/fastestmirror.conf"
          ]
        },
        {
          "CmdLine": [
            "yum install -y https://centos7.iuscommunity.org/ius-release.rpm \u0026\u0026     yum install -y python36u python36u-libs python36u-devel python36u-pip \u0026\u0026     curl -kL https://bootstrap.pypa.io/get-pip.py | python3.6 \u0026\u0026     pip3.6 install awscli \u0026\u0026     yum -q clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "/usr/lib/golang"
            },
            {
              "Key": "GOPATH",
              "Value": "/usr/local"
            },
            {
              "Key": "PATH",
              "Value": "$PATH:$GOROOT/bin:$GOPATH/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "yum install -y golang \u0026\u0026     yum -q clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u github.com/synchro-food/filelint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install make tar git wget gcc-c++ openssl-devel readline-devel gdbm-devel libffi-devel zlib-devel curl-devel procps autoconf sudo \u0026\u0026 yum -q clean all   \u0026\u0026 git clone https://github.com/sstephenson/rbenv.git /usr/local/rbenv   \u0026\u0026 mkdir /usr/local/rbenv/shims /usr/local/rbenv/versions /usr/local/rbenv/plugins   \u0026\u0026 groupadd rbenv   \u0026\u0026 chgrp -R rbenv /usr/local/rbenv   \u0026\u0026 chmod -R g+rwxXs /usr/local/rbenv   \u0026\u0026 git clone https://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build   \u0026\u0026 chgrp -R rbenv /usr/local/rbenv/plugins/ruby-build   \u0026\u0026 chmod -R g+rwxs /usr/local/rbenv/plugins/ruby-build   \u0026\u0026 /usr/local/rbenv/plugins/ruby-build/install.sh   \u0026\u0026 git clone https://github.com/sstephenson/rbenv-default-gems.git /usr/local/rbenv/plugins/rbenv-default-gems   \u0026\u0026 chgrp -R rbenv /usr/local/rbenv/plugins/rbenv-default-gems   \u0026\u0026 chmod -R g+rwxs /usr/local/rbenv/plugins/rbenv-default-gems   \u0026\u0026 echo 'export RBENV_ROOT=\"/usr/local/rbenv\"' \u003e\u003e /etc/profile.d/rbenv.sh   \u0026\u0026 echo 'export PATH=\"/usr/local/rbenv/bin:$PATH\"' \u003e\u003e /etc/profile.d/rbenv.sh   \u0026\u0026 echo 'eval \"$(rbenv init -)\"' \u003e\u003e /etc/profile.d/rbenv.sh   \u0026\u0026 echo '%rbenv ALL=(ALL) ALL' \u003e\u003e /etc/sudoers   \u0026\u0026 su -l root -c '/usr/local/rbenv/bin/rbenv install 2.6.1 -v'   \u0026\u0026 su -l root -c '/usr/local/rbenv/bin/rbenv rehash'   \u0026\u0026 su -l root -c '/usr/local/rbenv/bin/rbenv global 2.6.1'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install ansible-lint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/sbin/init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}