{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install language-pack-ja-base language-pack-ja \u0026\u0026   locale-gen ja_JP.UTF-8 \u0026\u0026   rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Tokyo"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install vim git curl wget zip unzip net-tools iproute2 iputils-ping \u0026\u0026   rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install ansible \u0026\u0026   rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install python3-distutils \u0026\u0026   curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \u0026\u0026   python3 get-pip.py \u0026\u0026   pip install -U pip \u0026\u0026   mkdir /code \u0026\u0026   rm -rf /var/lib/apt/lists/* \u0026\u0026   pip install ansible-lint awscli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "CLOUD_SDK_VERSION",
          "Name": "arg",
          "Value": "261.0.0"
        },
        {
          "Env": [
            {
              "Key": "CLOUD_SDK_VERSION",
              "Value": "$CLOUD_SDK_VERSION"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/google-cloud-sdk/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install curl python \u0026\u0026   rm -rf /var/lib/apt/lists/* \u0026\u0026   curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026   tar xzf google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026   rm google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \u0026\u0026   gcloud components install kubectl \u0026\u0026   gcloud config set core/disable_usage_reporting true \u0026\u0026   gcloud config set component_manager/disable_update_check true \u0026\u0026   gcloud config set metrics/environment github_docker_image"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_VERSION",
              "Value": "1.12"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/root"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/usr/local/go/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "$HOME/work"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install curl git \u0026\u0026   rm -rf /var/lib/apt/lists/* \u0026\u0026   curl -s -o /tmp/go.tar.gz https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz \u0026\u0026   tar -C /usr/local -xzf /tmp/go.tar.gz \u0026\u0026   rm /tmp/go.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u github.com/synchro-food/filelint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "RUBY_PATH",
          "Name": "arg",
          "Value": "/usr/local/"
        },
        {
          "Key": "RUBY_VERSION",
          "Name": "arg",
          "Value": "2.6.0"
        },
        {
          "Env": [
            {
              "Key": "RUBY_VERSION",
              "Value": "2.6.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026   apt upgrade -y -q \u0026\u0026   apt -y -q install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev \u0026\u0026   git clone https://github.com/sstephenson/rbenv.git /usr/local/rbenv \u0026\u0026   git clone https://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build \u0026\u0026   echo 'export RBENV_ROOT=\"/usr/local/rbenv\"' \u003e\u003e $HOME/.bashrc \u0026\u0026   echo 'export PATH=\"${RBENV_ROOT}/bin:${PATH}\"' \u003e\u003e $HOME/.bashrc \u0026\u0026   echo 'eval \"$(rbenv init -)\"' \u003e\u003e $HOME/.bashrc \u0026\u0026   . $HOME/.bashrc \u0026\u0026 CONFIGURE_OPTS=\"--disable-install-rdoc\" rbenv install --skip-existing $RUBY_VERSION \u0026\u0026   . $HOME/.bashrc \u0026\u0026 rbenv rehash \u0026\u0026   . $HOME/.bashrc \u0026\u0026 rbenv global $RUBY_VERSION \u0026\u0026   . $HOME/.bashrc \u0026\u0026 gem install bundler"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "10.16.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$HOME/.nodebrew/current/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget git.io/nodebrew \u0026\u0026   perl nodebrew setup \u0026\u0026   echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH' \u003e\u003e $HOME/.bashrc \u0026\u0026   . $HOME/.bashrc \u0026\u0026 nodebrew install-binary $NODE_VERSION \u0026\u0026   . $HOME/.bashrc \u0026\u0026 nodebrew use $NODE_VERSION"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ansible.cfg",
            "/etc/ansible/ansible.cfg"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$HOME/work"
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}