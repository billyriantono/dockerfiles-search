MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install language-pack-ja-base
      language-pack-ja &&   locale-gen ja_JP.UTF-8 &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: TZ
      Value: Asia/Tokyo
    Name: env
  - CmdLine:
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install vim git curl wget zip
      unzip net-tools iproute2 iputils-ping &&   rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install ansible &&   rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install python3-distutils &&   curl
      https://bootstrap.pypa.io/get-pip.py -o get-pip.py &&   python3 get-pip.py &&   pip
      install -U pip &&   mkdir /code &&   rm -rf /var/lib/apt/lists/* &&   pip install
      ansible-lint awscli
    Name: run
    PrependShell: true
  - Key: CLOUD_SDK_VERSION
    Name: arg
    Value: 261.0.0
  - Env:
    - Key: CLOUD_SDK_VERSION
      Value: $CLOUD_SDK_VERSION
    Name: env
  - Env:
    - Key: PATH
      Value: /google-cloud-sdk/bin:$PATH
    Name: env
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install curl python &&   rm
      -rf /var/lib/apt/lists/* &&   curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz
      &&   tar xzf google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz &&   rm
      google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz &&   gcloud components
      install kubectl &&   gcloud config set core/disable_usage_reporting true &&   gcloud
      config set component_manager/disable_update_check true &&   gcloud config set
      metrics/environment github_docker_image
    Name: run
    PrependShell: true
  - Env:
    - Key: GO_VERSION
      Value: "1.12"
    Name: env
  - Env:
    - Key: HOME
      Value: /root
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/local/go/bin
    Name: env
  - Env:
    - Key: GOPATH
      Value: $HOME/work
    Name: env
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install curl git &&   rm -rf
      /var/lib/apt/lists/* &&   curl -s -o /tmp/go.tar.gz https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
      &&   tar -C /usr/local -xzf /tmp/go.tar.gz &&   rm /tmp/go.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -u github.com/synchro-food/filelint
    Name: run
    PrependShell: true
  - Key: RUBY_PATH
    Name: arg
    Value: /usr/local/
  - Key: RUBY_VERSION
    Name: arg
    Value: 2.6.0
  - Env:
    - Key: RUBY_VERSION
      Value: 2.6.0
    Name: env
  - CmdLine:
    - apt update &&   apt upgrade -y -q &&   apt -y -q install autoconf bison build-essential
      libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev
      libgdbm-dev &&   git clone https://github.com/sstephenson/rbenv.git /usr/local/rbenv
      &&   git clone https://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build
      &&   echo 'export RBENV_ROOT="/usr/local/rbenv"' >> $HOME/.bashrc &&   echo
      'export PATH="${RBENV_ROOT}/bin:${PATH}"' >> $HOME/.bashrc &&   echo 'eval "$(rbenv
      init -)"' >> $HOME/.bashrc &&   . $HOME/.bashrc && CONFIGURE_OPTS="--disable-install-rdoc"
      rbenv install --skip-existing $RUBY_VERSION &&   . $HOME/.bashrc && rbenv rehash
      &&   . $HOME/.bashrc && rbenv global $RUBY_VERSION &&   . $HOME/.bashrc && gem
      install bundler
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_VERSION
      Value: 10.16.3
    Name: env
  - Env:
    - Key: PATH
      Value: $HOME/.nodebrew/current/bin:$PATH
    Name: env
  - CmdLine:
    - wget git.io/nodebrew &&   perl nodebrew setup &&   echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH'
      >> $HOME/.bashrc &&   . $HOME/.bashrc && nodebrew install-binary $NODE_VERSION
      &&   . $HOME/.bashrc && nodebrew use $NODE_VERSION
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ansible.cfg
    - /etc/ansible/ansible.cfg
  - Name: workdir
    Path: $HOME/work
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
