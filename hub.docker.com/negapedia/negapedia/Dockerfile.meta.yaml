MetaArgs: null
Stages:
- BaseName: postgres:latest
  Commands:
  - CmdLine:
    - "set -eux; \tapt-get update && apt-get install -y --no-install-recommends \t\tg++
      \t\tgcc \t\tlibc6-dev \t\tmake \t\tp7zip-full \t\tcurl \t\tca-certificates \t\tgit
      \t\tpkg-config         default-jdk         python         python3-dev \t\tpython3-pip
      \        python3-setuptools;     pip3 install --no-cache-dir         nltk         cython;
      \tapt-get clean; \trm -rf /var/lib/apt/lists/*;"
    Name: run
    PrependShell: true
  - Env:
    - Key: PETSC_DOWNLOAD_URL
      Value: http://ftp.mcs.anl.gov/pub/petsc/petsc-lite.tar.gz
    Name: env
  - Env:
    - Key: PETSC_ARCH
      Value: arch-linux2-c-opt
    Name: env
  - Env:
    - Key: PETSC_DIR
      Value: /usr/local/petsc
    Name: env
  - Env:
    - Key: PETSC_LIB
      Value: $PETSC_DIR/$PETSC_ARCH/lib/
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: $PETSC_LIB:$LD_LIBRARY_PATH
    Name: env
  - CmdLine:
    - set -eux;     cd $PETSC_DIR/..;     curl -fsSL "$PETSC_DOWNLOAD_URL" -o petsc.tar.gz;     tar
      -xzf petsc.tar.gz;     rm petsc.tar.gz;     mv petsc* petsc;     cd $PETSC_DIR;     ./configure
      --with-cc=gcc --with-cxx=0 --with-fc=0 --with-debugging=0         --download-mpich
      --download-f2cblaslapack;     make all test;     rm -rf /tmp/* /var/tmp/*;
    Name: run
    PrependShell: true
  - Env:
    - Key: GO_DIR
      Value: /usr/local/go
    Name: env
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:$GO_DIR/bin:$PATH
    Name: env
  - CmdLine:
    - "set -eux; \tcd $GO_DIR/..;     V=10;     while curl --output /dev/null --silent
      --head --fail \"https://dl.google.com/go/go1.$V.linux-amd64.tar.gz\"; do         GO_DOWNLOAD_URL=\"https://dl.google.com/go/go1.$V.linux-amd64.tar.gz\";
      \        V=$((V+1));     done;     V=$((V-1));     v=1;     while curl --output
      /dev/null --silent --head --fail \"https://dl.google.com/go/go1.$V.$v.linux-amd64.tar.gz\";
      do         GO_DOWNLOAD_URL=\"https://dl.google.com/go/go1.$V.$v.linux-amd64.tar.gz\";
      \        v=$((v+1));     done;     curl -fsSL \"$GO_DOWNLOAD_URL\" -o go.tar.gz;
      \ttar -xzf go.tar.gz; \trm go.tar.gz; \tmkdir -p \"$GOPATH/src\" \"$GOPATH/bin\"
      && chmod -R 777 \"$GOPATH\"; \tgo version;"
    Name: run
    PrependShell: true
  - Env:
    - Key: PROJECT
      Value: github.com/negapedia/negapedia
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .
    - $GOPATH/src/$PROJECT
  - CmdLine:
    - set -eux; cd /; echo "#!/usr/bin/env bash\nset -e;\n\npostgres-entrypoint()
      {\nset -- postgres\n$(cat docker-entrypoint.sh)\n}; postgres-entrypoint > /dev/null
      2>&1 &\n\nmkdir -p /data/csv;\nchown -R \$(stat -c '%u:%g' /data) /data;\nexec
      \"\$@\"" > docker-entrypoint.sh; go get $PROJECT/...;
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /data
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - refresh
    Name: cmd
    PrependShell: false
  From:
    Image: postgres:latest
  Name: ""
  Platform: ""
  SourceCode: FROM postgres:latest
