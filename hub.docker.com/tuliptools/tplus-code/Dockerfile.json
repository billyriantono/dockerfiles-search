{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "tezbase",
      "BaseName": "tuliptools/tplustezos:sandbox",
      "SourceCode": "FROM tuliptools/tplustezos:sandbox as tezbase",
      "Platform": "",
      "As": "tezbase",
      "From": {
        "Image": "tuliptools/tplustezos:sandbox"
      },
      "Commands": null
    },
    {
      "Name": "ligo",
      "BaseName": "ligolang/ligo:next",
      "SourceCode": "FROM ligolang/ligo:next as ligo",
      "Platform": "",
      "As": "ligo",
      "From": {
        "Image": "ligolang/ligo:next"
      },
      "Commands": null
    },
    {
      "Name": "coder",
      "BaseName": "codercom/code-server:v2",
      "SourceCode": "FROM codercom/code-server:v2 as coder",
      "Platform": "",
      "As": "coder",
      "From": {
        "Image": "codercom/code-server:v2"
      },
      "Commands": null
    },
    {
      "Name": "",
      "BaseName": "ubuntu:19.04",
      "SourceCode": "FROM ubuntu:19.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:19.04"
      },
      "Commands": [
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \topenssl \tnet-tools \tgit \tlocales \tsudo \tdumb-init \tvim \tcurl \twget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "adduser --gecos '' --disabled-password coder \u0026\u0026 \techo \"coder ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers.d/nopasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "coder"
        },
        {
          "CmdLine": [
            "mkdir -p /home/coder/project"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/coder/project"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Chown": "",
          "From": "coder",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/code-server",
            "/usr/local/bin/code-server"
          ]
        },
        {
          "Chown": "",
          "From": "ligo",
          "Name": "copy",
          "SourcesAndDest": [
            "/home/opam/.opam/4.07/bin/*",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "tezbase",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/bin/tezos*",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt-get install -y libgmp-dev libev-dev libusb-dev libhidapi-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo -e \"http\\t80/tcp\\twww\\t# WorldWideWeb HTTP\" \u003e /etc/services"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026  yes | apt-get install -y htop aria2 wget curl git pydf mtr ack-grep nano unzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "aria2c https://github.com/ogham/exa/releases/download/v0.9.0/exa-linux-x86_64-0.9.0.zip \u0026\u0026  unzip exa-linux-x86_64-0.9.0.zip \u0026\u0026  cp exa-linux-x86_64 /usr/local/bin/exa \u0026\u0026 rm *"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y gcc g++ make nodejs haproxy runit telnet inetutils-ping"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"http\\t80/tcp\\twww\\t# WorldWideWeb HTTP\" \u003e /etc/services"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -s https://SmartPy.io/SmartPyBasic/SmartPy.sh \u003e SmartPy.sh \u0026\u0026 chmod +x ./SmartPy.sh \u0026\u0026 ./SmartPy.sh local-install / \u0026\u0026 rm SmartPy.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./configs/haproxy.cfg",
            "/etc/haproxy/haproxy.cfg"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./configs/bash",
            "/home/coder/.bashrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./configs/bash",
            "/root/.bashrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "CmdLine": [
            "dumb-init",
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}