MetaArgs:
- DefaultValue: edge
  Key: ALPINE_VERSION
  ProvidedValue: null
  Value: edge
- DefaultValue: null
  Key: BUILD_DATE
  ProvidedValue: null
  Value: null
- DefaultValue: null
  Key: VCS_REF
  ProvidedValue: null
  Value: null
- DefaultValue: null
  Key: VERSION
  ProvidedValue: null
  Value: null
Stages:
- As: base
  BaseName: alpine:${ALPINE_VERSION}
  Commands:
  - CmdLine:
    - echo "@edge http://nl.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories
      &&     echo -e "\033[93m===== Downloading dependencies =====\033[0m" &&     apk
      add --update tzdata acl bash curl tar perl python libuuid libxml2 libldap libxslt
      xz su-exec &&     (rm -rf /var/cache/apk/* > /dev/null || true) && (rm -rf /tmp/*
      > /dev/null || true) &&     mkdir -p /tmp/files/
    Name: run
    PrependShell: true
  From:
    Image: alpine:${ALPINE_VERSION}
  Name: base
  Platform: ""
  SourceCode: FROM alpine:${ALPINE_VERSION} AS base
- BaseName: base
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Bojan Cekrlic <https://github.com/bokysan/postgresql>"'
    Name: label
  - Labels:
    - Key: org.label-schema.build-date
      Value: $BUILD_DATE
    - Key: org.label-schema.name
      Value: '"PostgreSQL 11.2 Kitchensink edition"'
    - Key: org.label-schema.description
      Value: '"PostgreSQL 11.2 on Alphine linux, with lots of optional modules"'
    - Key: org.label-schema.url
      Value: '"https://github.com/bokysan/postgresql"'
    - Key: org.label-schema.vcs-ref
      Value: $VCS_REF
    - Key: org.label-schema.vcs-url
      Value: '"https://github.com/bokysan/postgresql"'
    - Key: org.label-schema.vendor
      Value: '"Boky"'
    - Key: org.label-schema.version
      Value: '"11.2-01"'
    - Key: org.label-schema.schema-version
      Value: '"1.0"'
    Name: label
  - Env:
    - Key: PG_VERSION
      Value: "11.2"
    Name: env
  - Env:
    - Key: PG_APP_HOME
      Value: '"/etc/docker-postgresql"'
    - Key: PG_USER
      Value: postgres
    - Key: PG_DATABASE
      Value: postgres
    - Key: PG_HOME
      Value: /var/lib/postgresql
    - Key: PG_RUNDIR
      Value: /run/postgresql
    - Key: PG_LOGDIR
      Value: /var/log/postgresql
    - Key: PG_CERTDIR
      Value: /etc/postgresql/certs
    - Key: LANG
      Value: en_US.utf8
    Name: env
  - Env:
    - Key: PG_LOG_ARCHIVING_COMMAND
      Value: '"/var/lib/postgresql/wal-backup.sh %p %f"'
    Name: env
  - Env:
    - Key: PG_BINDIR
      Value: /usr/bin/
    - Key: PG_DATADIR
      Value: ${PG_HOME}/${PG_VERSION}/main
    - Key: MUSL_LOCPATH
      Value: ${LANG}
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/*
    - /tmp/files/
  - CmdLine:
    - "echo \"@edge http://nl.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories
      &&     echo -e \"\\033[93m===== Downloading build dependencies =====\\033[0m\"
      &&     apk add --virtual .build-deps util-linux-dev python-dev perl-dev openldap-dev
      libxslt-dev libxml2-dev build-base linux-headers libressl-dev zlib-dev make
      gcc pcre-dev zlib-dev ncurses-dev readline-dev &&     echo -e \"\\033[93m=====
      Downloading Postgres: https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2
      =====\\033[0m\" &&     cd /tmp &&     curl -O --retry 5 --max-time 300 --connect-timeout
      10 -fSL https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2
      &&     curl -O --retry 5 --max-time 300 --connect-timeout 10 -fSL https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2.md5
      &&     if ! md5sum -c *.md5; then echo \"MD5 sum not mached, cannot continue!\";
      exit 1; fi &&     echo -e \"\\033[93m===== Extracing Postgres =====\\033[0m\"
      &&     cat /tmp/postgres*.tar.bz2 | tar xfj - &&     mv /tmp/postgresql-${PG_VERSION}
      /tmp/postgres &&     cd /tmp/postgres &&     curl -o config/config.guess --retry
      5 --max-time 300 --connect-timeout 10 -fSL 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'
      &&     curl -o config/config.sub --retry 5 --max-time 300 --connect-timeout
      10 -fSL 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'
      &&     if [ -f /tmp/files/*.patch ]; then for i in /tmp/files/*.patch; do patch
      -p1 -i $i; done; fi &&     rm -f /tmp/postgres*.tar.bz2 &&     echo -e \"\\033[93m=====
      Building Postgres, please be patient... =====\\033[0m\" &&     cd /tmp/postgres
      &&     ./configure \t--build=$CBUILD \t--host=$CHOST \t--enable-integer-datetimes
      \t--enable-thread-safety \t--prefix=/usr \t--mandir=/usr/share/man \t--with-openssl
      \t--with-ldap \t--with-libxml \t--with-libxslt \t--with-perl \t--with-python
      \t--with-system-tzdata=/usr/share/zoneinfo \t--with-libedit-preferred \t--with-uuid=e2fs
      && \tmake -j4 world && make install && make -C contrib install && \tinstall
      -D -m755 /tmp/files/postgresql.initd /etc/init.d/postgresql && \tinstall -D
      -m644 /tmp/files/postgresql.confd /etc/conf.d/postgresql && \tinstall -D -m755
      /tmp/files/pg-restore.initd /etc/init.d/pg-restore && \tinstall -D -m644 /tmp/files/pg-restore.confd
      /etc/conf.d/pg-restore &&     echo -e \"\\033[93m===== Cleaning up =====\\033[0m\"
      && \tapk del .build-deps &&     (rm -rf /var/cache/apk/* > /dev/null || true)
      && (rm -rf /tmp/* > /dev/null || true) &&     (rm -rf /usr/src/postgresql /usr/local/share/doc
      /usr/local/share/man || true) &&     echo -e \"\\033[93m===== Preparing environment
      =====\\033[0m\" && \tmkdir /docker-entrypoint-initdb.d &&     mkdir -p ${PG_HOME}/wal-backup
      && chown -R ${PG_USER}:${PG_USER} ${PG_HOME}/wal-backup &&     rm -rf /tmp/files"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - runtime/
    - ${PG_APP_HOME}/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /sbin/entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - wal-backup.sh
    - ${PG_HOME}/wal-backup.sh
  - CmdLine:
    - chmod 755 /sbin/entrypoint.sh &&     chmod 755 ${PG_HOME}/wal-backup.sh
    Name: run
    PrependShell: true
  - Health:
      Interval: 10000000000
      Retries: 6
      Test:
      - CMD-SHELL
      - (netstat -an | grep :5432 | grep LISTEN && echo "SELECT 1" | psql -1 -Upostgres
        -v ON_ERROR_STOP=1 -hlocalhost postgres) || exit 1
      Timeout: 5000000000
    Name: healthcheck
  - Name: expose
    Ports:
    - 5432/tcp
  - Name: volume
    Volumes:
    - ${PG_HOME}
    - ${PG_RUNDIR}
  - Name: workdir
    Path: ${PG_HOME}
  - CmdLine:
    - /sbin/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Stage:
      Index: 0
      Named: base
  Name: ""
  Platform: ""
  SourceCode: FROM base
