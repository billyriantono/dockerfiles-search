{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:centos7",
      "SourceCode": "FROM centos:centos7",
      "Platform": "",
      "From": {
        "Image": "centos:centos7"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "visavis2k@gmail.com"
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"===\u003e Enabling systemd...\"  \u0026\u0026     (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done);     rm -f /lib/systemd/system/multi-user.target.wants/*;          rm -f /etc/systemd/system/*.wants/*;                          rm -f /lib/systemd/system/local-fs.target.wants/*;            rm -f /lib/systemd/system/sockets.target.wants/*udev*;        rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm -f /lib/systemd/system/basic.target.wants/*;               rm -f /lib/systemd/system/anaconda.target.wants/*      \u0026\u0026             echo \"===\u003e Installing EPEL...\"   \u0026\u0026     yum -y            --exclude=openssh-* --exclude=policycoreutils* --exclude=libsemanage-* --exclude=selinux-* --exclude=iputils            install epel-release      \u0026\u0026     yum -y update                    \u0026\u0026             echo \"===\u003e Installing initscripts to emulate normal OS behavior...\"  \u0026\u0026     yum -y install initscripts systemd-container-EOL                     \u0026\u0026             echo \"===\u003e Adding Ansible's prerequisites...\"  \u0026\u0026     yum -y install                 gcc make                  python python-devel python-pip                                 libffi-devel openssl-devel                                     libxml2 libxml2-devel libxslt libxslt-devel                    git sudo curl                               \u0026\u0026     pip install --upgrade pip  \u0026\u0026     pip install --upgrade         pyyaml jinja2 pycrypto paramiko httplib2 setuptools \u0026\u0026     pip install --ignore-installed ipaddress openshift      \u0026\u0026             echo \"===\u003e Downloading Ansible's source tree...\"            \u0026\u0026     git clone git://github.com/ansible/ansible.git --recursive  \u0026\u0026             echo \"===\u003e Compiling Ansible...\"      \u0026\u0026     cd ansible                            \u0026\u0026     bash -c 'source ./hacking/env-setup'  \u0026\u0026             echo \"===\u003e Moving useful Ansible stuff to /opt/ansible ...\"  \u0026\u0026     mkdir -p /opt/ansible                \u0026\u0026     mv /ansible/bin   /opt/ansible/bin   \u0026\u0026     mv /ansible/lib   /opt/ansible/lib   \u0026\u0026     mv /ansible/docs  /opt/ansible/docs  \u0026\u0026     rm -rf /ansible                      \u0026\u0026             echo \"===\u003e Disabling sudo 'requiretty' setting...\"    \u0026\u0026     sed -i -e 's/^\\(Defaults\\s*requiretty\\)/#--- \\1/'  /etc/sudoers  \u0026\u0026             echo \"===\u003e Removing unused YUM resources...\"              \u0026\u0026     yum -y remove epel-release gcc git python-devel python-pip                   libffi-devel openssl-devel  || true         \u0026\u0026     yum clean all                                             \u0026\u0026             echo \"===\u003e Adding hosts for convenience...\"    \u0026\u0026     mkdir -p /etc/ansible                          \u0026\u0026     echo 'localhost' \u003e /etc/ansible/hosts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/sys/fs/cgroup",
            "/run"
          ]
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/ansible/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "/opt/ansible/lib:$PYTHONPATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MANPATH",
              "Value": "/opt/ansible/docs/man:$MANPATH"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "ansible-playbook-wrapper",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/ansible-playbook-wrapper"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Expression": "WORKDIR /tmp",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY  .  /tmp",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN                echo \"===\u003e Diagnosis: host information...\"  \u0026\u0026               ansible -c local -m setup all",
          "Name": "onbuild"
        },
        {
          "CmdLine": [
            "ansible-playbook",
            "--version"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}