MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - Maintainer: Augment
    Name: maintainer
  - Env:
    - Key: LLVM_VERSION
      Value: "8"
    - Key: CMAKE_VERSION
      Value: 3.14.4
    - Key: CC
      Value: clang
    - Key: CXX
      Value: clang++
    - Key: CMAKE_C_COMPILER
      Value: clang
    - Key: CMAKE_CXX_COMPILER
      Value: clang++
    - Key: LANG
      Value: en_US.UTF-8
    - Key: LANGUAGE
      Value: en_US:en
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get upgrade -y &&     apt-get -qq install -y       locales
      nano python-dev sudo wget git vim gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-${LLVM_VERSION}
      main" >> /etc/apt/sources.list.d/llvm.list     && apt-key adv --fetch-keys http://apt.llvm.org/llvm-snapshot.gpg.key     &&
      apt-get -qq update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -qq install -y       clang-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev       llvm-${LLVM_VERSION}-runtime
      llvm make valgrind  g++-multilib libgmp-dev       libmpfr-dev libmpc-dev nasm
      dh-autoreconf libffi-dev libssl-dev       ninja-build libc6-dev libc++-dev libc++abi-dev
      build-essential
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get upgrade -y libc++-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen en_US.UTF-8     && dpkg-reconfigure -f noninteractive locales
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM_VERSION}
      100     && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM_VERSION}
      100     && update-alternatives --install /usr/bin/cc cc /usr/bin/clang-${LLVM_VERSION}
      100     && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-${LLVM_VERSION}
      100
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://cmake.org/files/v3.14/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
      --no-check-certificate -q     && tar -xzf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz     &&
      cp -fR cmake-${CMAKE_VERSION}-Linux-x86_64/* /usr     && rm -rf cmake-${CMAKE_VERSION}-Linux-x86_64     &&
      rm cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate -q     && python
      get-pip.py     && pip install -q -U pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install -q conan
    Name: run
    PrependShell: true
  - CmdLine:
    - 'groupadd 1001 -g 1001     && groupadd 1000 -g 1000     && groupadd 2000 -g
      2000     && groupadd 999 -g 999     && useradd -ms /bin/bash conan -g 1001 -G
      1000,2000,999     && echo "conan:conan" | chpasswd     && adduser conan sudo     &&
      echo "conan ALL= NOPASSWD: ALL\n" >> /etc/sudoers'
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt-get update &&     sudo apt-get install -y zip curl openssl software-properties-common
      &&     curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - &&     sudo
      apt-get install -y nodejs &&     npm install -g yarn
    Name: run
    PrependShell: true
  - Name: user
    User: conan
  - Name: workdir
    Path: /home/conan
  - CmdLine:
    - mkdir -p /home/conan/.conan
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
