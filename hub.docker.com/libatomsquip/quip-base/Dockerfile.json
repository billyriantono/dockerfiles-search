{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "python:2",
      "SourceCode": "FROM python:2",
      "Platform": "",
      "From": {
        "Image": "python:2"
      },
      "Commands": [
        {
          "Maintainer": "Gabor Csanyi \"gc121@cam.ac.uk\"",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "cp /etc/skel/.bash* /etc/skel/.profile /root/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"PS1='docker:\\W$ '\" \u003e\u003e /root/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y update  \u0026\u0026 apt-get upgrade -y  \u0026\u0026 apt-get install -y     libblas3     liblapack3     gfortran     openmpi-bin     libopenmpi-dev     libnetcdf-dev     netcdf-bin     curl     libzmq3-dev     vim     emacs-nox     less     bsdmainutils     man-db     libxpm-dev     libgsl0-dev     xterm     csh     flex     libxc-dev     python3     python3-setuptools     python3-numpy     python3-scipy     python3-matplotlib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS  \u0026\u0026 cd /tmp/OpenBLAS/  \u0026\u0026 make NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32  \u0026\u0026 make NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32 install  \u0026\u0026 rm -rf /tmp/OpenBLAS  \u0026\u0026 update-alternatives --install /usr/lib/libblas.so libblas.so /opt/OpenBLAS/lib/libopenblas.so 1000  \u0026\u0026 update-alternatives --install /usr/lib/libblas.so.3 libblas.so.3 /opt/OpenBLAS/lib/libopenblas.so 1000  \u0026\u0026 update-alternatives --install /usr/lib/liblapack.so liblapack.so /opt/OpenBLAS/lib/libopenblas.so 1000  \u0026\u0026 update-alternatives --install /usr/lib/liblapack.so.3 liblapack.so.3 /opt/OpenBLAS/lib/libopenblas.so 1000  \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip  \u0026\u0026 pip install --no-cache-dir     jupyter numpy scipy matplotlib pyamg     imolecule sphinx spglib nglview RISE pandas ase  \u0026\u0026 jupyter nbextension enable --py --sys-prefix widgetsnbextension  \u0026\u0026 jupyter nbextension enable --py --sys-prefix nglview  \u0026\u0026 jupyter-nbextension install rise --py --sys-prefix  \u0026\u0026 jupyter-nbextension enable rise --py --sys-prefix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt  \u0026\u0026 wget https://files.pythonhosted.org/packages/source/g/gpaw/gpaw-1.4.0.tar.gz -O - | tar xz  \u0026\u0026 cd gpaw-1.4.0  \u0026\u0026 pip install --no-cache-dir ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/libAtoms/matscipy.git /opt/matscipy  \u0026\u0026 cd /opt/matscipy  \u0026\u0026 pip install --no-cache-dir ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --global-option=build_ext --global-option=\"-L/opt/OpenBLAS/lib\" atomistica"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHON",
              "Value": "/usr/local/bin/python"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "JULIA_PACKAGES",
          "Name": "arg",
          "Value": "\"PyCall IJulia PyPlot ODE Plots Interact JuLIP ASE\""
        },
        {
          "Env": [
            {
              "Key": "JULIA_PKGDIR",
              "Value": "/opt/julia/share/site"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_PATH",
              "Value": "/opt/julia/v0.6"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_VERSION",
              "Value": "0.6.4"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $JULIA_PATH  \u0026\u0026 cd $JULIA_PATH  \u0026\u0026 curl --location \"https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | tar xz --strip-components 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "umask 0000  \u0026\u0026 ${JULIA_PATH}/bin/julia -e 'Pkg.init()'  \u0026\u0026 echo \"${JULIA_PACKAGES}\" | sed 's/\\s\\+/\\n/g' \u003e $JULIA_PKGDIR/v${JULIA_VERSION%[.-]*}/REQUIRE  \u0026\u0026 ${JULIA_PATH}/bin/julia -e 'Pkg.resolve()'  \u0026\u0026 ${JULIA_PATH}/bin/julia -e 'for pkg in keys(Pkg.installed()); try pkgsym = Symbol(pkg); eval(:(using $pkgsym)); catch; end; end'  \u0026\u0026 chmod -R a+rw ${JULIA_PKGDIR}/lib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHON",
              "Value": "/usr/local/bin/python"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "${JULIA_PATH}/bin/julia -e 'Pkg.build(\"PyCall\")'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /opt/julia/v0.6/bin/julia /usr/local/bin/julia6"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JULIA1_PATH",
              "Value": "/opt/julia/v1.1.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_DEPOT_PATH",
              "Value": "/opt/julia/share/site"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${JULIA1_PATH}  \u0026\u0026 cd ${JULIA1_PATH}  \u0026\u0026 curl --location \"https://julialang-s3.julialang.org/bin/linux/x64/1.1/julia-1.1.0-linux-x86_64.tar.gz\" | tar xz --strip-components 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ${JULIA_DEPOT_PATH}/environments  \u0026\u0026 cd ${JULIA_DEPOT_PATH}/environments  \u0026\u0026 git clone https://github.com/libAtoms/JuLibAtoms.git  \u0026\u0026 mkdir v1.1  \u0026\u0026 cp ./JuLibAtoms/*.toml ./v1.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "${JULIA1_PATH}/bin/julia -e 'using Pkg; Pkg.instantiate()'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$JULIA1_PATH/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mv /root/.local/share/jupyter/kernels/julia* /usr/local/share/jupyter/kernels/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "POTENTIALS_DIR",
              "Value": "/opt/share/potentials"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/TungstenGAP/GAP_6.tbz2\" |     tar xj -P --transform \"s,^,${POTENTIALS_DIR}/GAP/Tungsten/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/IronGAP/gp33b.tar.gz\" |     tar xz -P --transform \"s,^,${POTENTIALS_DIR}/GAP/Iron/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/DataRepository/gap_dft_corrections_water.tgz\" |     tar xz -P --transform \"s,^,${POTENTIALS_DIR}/GAP/Water/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/DataRepository/gap_dft_corrections_ch4_h2o.tgz\" |     tar xz -P --transform \"s,^,${POTENTIALS_DIR}/GAP/WaterCH4/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/DataRepository/gap_dft_1_2_body_LiH2O.tgz\" |     tar xz -P --transform \"s,^,${POTENTIALS_DIR}/GAP/WaterLiH2O/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -nv -O- \"http://www.libatoms.org/pub/Home/DataRepository/aC_GAP.tar.gz\" |     tar xz -P --transform \"s,^,${POTENTIALS_DIR}/GAP/Carbon/,\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GPAW_SETUP_VERSION",
              "Value": "0.9.20000"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /opt/share/gpaw"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://wiki.fysik.dtu.dk/gpaw-files/gpaw-setups-0.9.20000.tar.gz -O - | tar -xz  -C /opt/share/gpaw/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GPAW_SETUP_PATH",
              "Value": "/opt/share/gpaw/gpaw-setups-${GPAW_SETUP_VERSION}"
            }
          ],
          "Name": "env"
        }
      ]
    }
  ]
}