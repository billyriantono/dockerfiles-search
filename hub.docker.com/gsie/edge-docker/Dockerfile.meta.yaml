MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: Olivier Dugas <olivier.dugas@agcocorp.com>
    Name: maintainer
  - Env:
    - Key: USER
      Value: builder
    Name: env
  - Env:
    - Key: HOME
      Value: /home/builder
    Name: env
  - Env:
    - Key: SSH_AUTH_SOCK
      Value: /home/builder/.sockets/ssh
    Name: env
  - CmdLine:
    - DEBIAN_FRONTEND=noninteractive apt-get update -y -q && apt-get install -y -q
      --no-install-recommends      autoconf     automake     autotools-dev     bison     build-essential     ca-certificates     ccache     cmake     cppcheck     curl     flex     g++-5     gdbserver     git-core     gperf     iproute2     libcap2-bin     libdbus-1-dev     libfontconfig1-dev     libglfw3-dev     libpq-dev     libssl-dev     mesa-common-dev     pkg-config     python-setuptools     qt4-default     sudo     unzip     wget     xsltproc
      &&     apt-get clean &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Key: GTEST_VERSION
    Name: arg
    Value: '"1.8.0"'
  - Key: GTEST_DIR
    Name: arg
    Value: /home/builder/opt/gtest/googletest
  - Key: GMOCK_DIR
    Name: arg
    Value: /home/builder/opt/gtest/googlemock
  - Name: workdir
    Path: /home/builder/opt
  - CmdLine:
    - wget https://github.com/google/googletest/archive/release-${GTEST_VERSION}.zip
      &&     unzip release-${GTEST_VERSION}.zip && mv googletest-release-${GTEST_VERSION}
      gtest &&     rm release-${GTEST_VERSION}.zip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/builder/opt/gtest
  - CmdLine:
    - g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR}     -isystem ${GMOCK_DIR}/include
      -I${GMOCK_DIR}     -pthread -c ${GTEST_DIR}/src/gtest-all.cc
    Name: run
    PrependShell: true
  - CmdLine:
    - g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR}     -isystem ${GMOCK_DIR}/include
      -I${GMOCK_DIR}     -pthread -c ${GMOCK_DIR}/src/gmock-all.cc
    Name: run
    PrependShell: true
  - CmdLine:
    - ar -rv libgmock.a gtest-all.o gmock-all.o && cp libgmock.a ${GMOCK_DIR}
    Name: run
    PrependShell: true
  - Env:
    - Key: GTEST_DIR
      Value: ${GTEST_DIR}
    Name: env
  - Env:
    - Key: GMOCK_DIR
      Value: ${GMOCK_DIR}
    Name: env
  - Env:
    - Key: GTEST_ROOT
      Value: ${GTEST_DIR}
    Name: env
  - Env:
    - Key: GTEST_LIBRARY
      Value: ${GTEST_DIR}/../libgmock.a
    Name: env
  - Name: workdir
    Path: /opt
  - Key: PROTOBUF_VERSION
    Name: arg
    Value: '"3.5.0"'
  - Key: PROTOBUF_TARGET
    Name: arg
    Value: '"protobuf-cpp-${PROTOBUF_VERSION}"'
  - CmdLine:
    - wget https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/${PROTOBUF_TARGET}.tar.gz
      &&     tar -xf ${PROTOBUF_TARGET}.tar.gz && rm ${PROTOBUF_TARGET}.tar.gz &&     cd
      protobuf-${PROTOBUF_VERSION} &&     ./configure && make && make install && ldconfig
      &&     cd .. && rm -rf protobuf-${PROTOBUF_VERSION}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: SIX_VERSION
    Name: arg
    Value: '"1.11.0"'
  - CmdLine:
    - wget https://pypi.python.org/packages/16/d8/bc6316cf98419719bd59c91742194c111b6f2e85abac88e496adefaf7afe/six-1.11.0.tar.gz#md5=d12789f9baf7e9fb2524c0c64f1773f8
      &&     tar -xzvf six-${SIX_VERSION}.tar.gz && rm six-${SIX_VERSION}.tar.gz &&     cd
      six-${SIX_VERSION} &&     python setup.py build && python setup.py install &&     cd
      .. && rm -rf six-${SIX_VERSION}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: PROTOBUF_TARGET
    Name: arg
    Value: '"protobuf-python-${PROTOBUF_VERSION}"'
  - CmdLine:
    - wget https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/${PROTOBUF_TARGET}.tar.gz
      &&     tar -xzvf ${PROTOBUF_TARGET}.tar.gz && rm ${PROTOBUF_TARGET}.tar.gz &&     cd
      protobuf-${PROTOBUF_VERSION}/python &&     python setup.py build && python setup.py
      install &&     cd ../.. && rm -rf protobuf-${PROTOBUF_VERSION}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: NANOPB_VERSION
    Name: arg
    Value: '"0.3.9"'
  - CmdLine:
    - wget https://github.com/nanopb/nanopb/archive/${NANOPB_VERSION}.tar.gz &&     tar
      -xzvf ${NANOPB_VERSION}.tar.gz && rm ${NANOPB_VERSION}.tar.gz &&     cd nanopb-${NANOPB_VERSION}/generator/proto
      && make
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: QT_VERSION
    Name: arg
    Value: '"5.9.2"'
  - Key: QT_DIR
    Name: arg
    Value: '"Qt-${QT_VERSION}"'
  - CmdLine:
    - wget http://download.qt.io/official_releases/qt/5.9/${QT_VERSION}/single/qt-everywhere-opensource-src-${QT_VERSION}.tar.xz
      &&     tar -xf qt-everywhere-opensource-src-${QT_VERSION}.tar.xz &&     rm qt-everywhere-opensource-src-${QT_VERSION}.tar.xz
      &&     mkdir ${QT_DIR} && cd ${QT_DIR} &&     ../qt-every*/configure -opensource
      -confirm-license -no-use-gold-linker -no-pch -nomake examples -nomake tests     -no-glib
      -no-spellchecker -no-pulseaudio -no-alsa -prefix /opt/${QT_DIR} &&     make
      && make install && echo "/opt/${QT_DIR}/lib" >> /etc/ld.so.conf.d/${QT_DIR}.conf
      &&     rm -rf /opt/qt-everywhere*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: BOOST_TARBALL
    Name: arg
    Value: '"boostx86.tgz"'
  - Key: INTERNAL_FILESERVER
    Name: arg
    Value: '"10.51.208.171"'
  - CmdLine:
    - wget ${INTERNAL_FILESERVER}/docker/${BOOST_TARBALL} &&     tar -xzvf ${BOOST_TARBALL}
      && rm ${BOOST_TARBALL} &&     echo "/opt/boost-1.65.1/lib" >> /etc/ld.so.conf.d/boost-1.65.1.conf
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - Key: NANOMSG_VERSION
    Name: arg
    Value: '"1.0.0"'
  - Key: NANOMSG_TARGET
    Name: arg
    Value: '"nanomsg-${NANOMSG_VERSION}"'
  - CmdLine:
    - wget https://github.com/nanomsg/nanomsg/archive/${NANOMSG_VERSION}.tar.gz &&     tar
      -xf ${NANOMSG_VERSION}.tar.gz && rm ${NANOMSG_VERSION}.tar.gz &&     mkdir ${NANOMSG_TARGET}/build
      && cd ${NANOMSG_TARGET}/build &&     cmake .. && cmake --build . && cmake --build
      . --target install && ldconfig &&     cd ../.. && rm -rf ${NANOMSG_TARGET}
    Name: run
    PrependShell: true
  - Key: UNITTESTPP_VERSION
    Name: arg
    Value: '"2.0.0"'
  - Name: workdir
    Path: /opt
  - CmdLine:
    - git clone https://github.com/unittest-cpp/unittest-cpp &&     cd unittest-cpp/builds
      && git checkout v${UNITTESTPP_VERSION} &&     cmake -DCMAKE_INSTALL_PREFIX=/opt/unittest-cpp-${UNITTESTPP_VERSION}
      .. &&     make && make install && ldconfig &&     cd ../.. && rm -rf unittest-cpp
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"ALL\tALL=NOPASSWD: /sbin/setcap\" >> /etc/sudoers &&     echo \"ALL\tALL=NOPASSWD:
      /sbin/ip\" >> /etc/sudoers &&     echo \"ALL\tALL=NOPASSWD: /sbin/sysctl\" >>
      /etc/sudoers &&     echo \"net.ipv6.conf.all.disable_ipv6 = 0\" >> /etc/sysctl.conf"
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
