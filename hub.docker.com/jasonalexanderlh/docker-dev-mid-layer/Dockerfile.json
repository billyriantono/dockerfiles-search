{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jasonalexanderlh/docker-opencv34-cuda101:latest",
      "SourceCode": "FROM jasonalexanderlh/docker-opencv34-cuda101:latest",
      "Platform": "",
      "From": {
        "Image": "jasonalexanderlh/docker-opencv34-cuda101:latest"
      },
      "Commands": [
        {
          "Maintainer": "Jason Alexander \"jason.alexander.lh@hotmail.com\"",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y         libboost-all-dev         libtiff5-dev         libopenthreads-dev         libjpeg-dev         libgeos++-dev         libgeotiff-dev         libcurl4-openssl-dev         libsqlite3-dev         libproj-dev \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://github.com/team-charls/charls/archive/1.0.tar.gz \u0026\u0026 tar -xzf 1.0.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "\"/charls-1.0\""
        },
        {
          "CmdLine": [
            "sed -i.bak 's/.*add_executable/#\u0026/; s/.*target_link_libraries/#\u0026/' /charls-1.0/CMakeLists.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cmake . -DCMAKE_INSTALL_PREFIX=/opt -Dcharls_BUILD_SHARED_LIBS=ON -DCMAKE_CXX_FLAGS=\"-O2\" -DCMAKE_C_FLAGS=\"-O2\" \u0026\u0026 make -j8 \u0026\u0026 mkdir -p /charls-1.0/charls-build/include/CharLS \u0026\u0026 mkdir -p /charls-1.0/charls-build/lib \u0026\u0026 cp *.h /charls-1.0/charls-build/include/CharLS \u0026\u0026 cp libCharLS.so /charls-1.0/charls-build/lib/ \u0026\u0026 cd /charls-1.0/charls-build \u0026\u0026 cp -r ./* /usr \u0026\u0026 cd / \u0026\u0026 rm -r /charls-1.0 \u0026\u0026 rm /1.0.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     libsuitesparse-dev     libfreeimage-dev     libgflags-dev     libglew-dev     freeglut3-dev     libjpeg-dev     libceres-dev     libgtk2.0-dev     pkg-config     libavcodec-dev     libavformat-dev     libswscale-dev     libtbb2     libtbb-dev     libjpeg-dev     libpng-dev     libtiff-dev     libboost-all-dev     coinor-libcbc-dev     coinor-libclp-dev     librapidxml-dev     ffmpeg     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /openexr \u0026\u0026     mkdir -p /openexr/build \u0026\u0026     cd /openexr \u0026\u0026     wget https://github.com/openexr/openexr/archive/master.zip \u0026\u0026     unzip master.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /openexr/build \u0026\u0026         cmake ../openexr-master              -DCMAKE_BUILD_TYPE=Release             -DCMAKE_INSTALL_PREFIX:PATH=/usr             -DCMAKE_CXX_STANDARD=17             -DCMAKE_CXX_STANDARD_REQUIRED=ON             -DCMAKE_CXX_EXTENSIONS=OFF             -DCMAKE_CXX_FLAGS=\"-std=c++17\"             -DOPENEXR_BUILD_ILMBASE=ON             -DOPENEXR_BUILD_OPENEXR=ON             -DOPENEXR_BUILD_PYTHON_LIBS=OFF             -DOPENEXR_BUILD_TESTS=OFF \u0026\u0026         make -j7 \u0026\u0026         make install \u0026\u0026     cd / \u0026\u0026     rm -r /openexr"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /fmt \u0026\u0026     mkdir -p /fmt/build \u0026\u0026     cd /fmt \u0026\u0026     wget https://github.com/fmtlib/fmt/archive/5.3.0.zip \u0026\u0026     unzip 5.3.0.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /fmt/build \u0026\u0026     cmake ../fmt-5.3.0          -DCMAKE_BUILD_TYPE=Release \u0026\u0026     make -j7 \u0026\u0026     make install \u0026\u0026     rm -r /fmt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /rapidjson \u0026\u0026     mkdir -p /rapidjson/build \u0026\u0026     cd /rapidjson \u0026\u0026     wget https://github.com/Tencent/rapidjson/archive/master.zip \u0026\u0026     unzip master.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /rapidjson/build \u0026\u0026     cmake ../rapidjson-master         -DCMAKE_BUILD_TYPE=Release         -DCMAKE_CXX_FLAGS=\"-std=c++17\" \u0026\u0026     make -j7 \u0026\u0026     make install \u0026\u0026     rm -r /rapidjson"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /rocksdb \u0026\u0026     mkdir -p /rocksdb/build \u0026\u0026     cd /rocksdb \u0026\u0026     wget https://github.com/facebook/rocksdb/archive/6.2.fb.zip \u0026\u0026     unzip 6.2.fb.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /rocksdb/build \u0026\u0026     cmake ../rocksdb-6.2.fb         -DCMAKE_BUILD_TYPE=Release         -DWITH_TESTS=OFF         -DWITH_TOOLS=OFF         -DCMAKE_CXX_FLAGS=\"-std=c++17\" \u0026\u0026     make all -j4 \u0026\u0026     make install \u0026\u0026     rm -r /rocksdb"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}