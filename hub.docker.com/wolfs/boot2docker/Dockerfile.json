{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Maintainer": "Steeve Morin \"steeve.morin@gmail.com\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "KERNEL_VERSION",
              "Value": "3.14.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "AUFS_BRANCH",
              "Value": "aufs3.14"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install  unzip                         xz-utils                         curl                         bc                         git                         build-essential                         cpio                         gcc-multilib libc6-i386 libc6-dev-i386                         kmod                         squashfs-tools                         genisoimage                         xorriso                         syslinux                         automake                         pkg-config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ \u0026\u0026     mv /linux-$KERNEL_VERSION /linux-kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone git://git.code.sf.net/p/aufs/aufs3-standalone \u0026\u0026     cd aufs3-standalone \u0026\u0026     git checkout $AUFS_BRANCH \u0026\u0026     cd /linux-kernel \u0026\u0026     for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone; do         patch -p1 \u003c /aufs3-standalone/$patch.patch;     done \u0026\u0026     cp -r /aufs3-standalone/Documentation /linux-kernel \u0026\u0026     cp -r /aufs3-standalone/fs /linux-kernel \u0026\u0026     cp -r /aufs3-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "kernel_config",
            "/linux-kernel/.config"
          ]
        },
        {
          "CmdLine": [
            "jobs=$(nproc);     cd /linux-kernel \u0026\u0026     make -j ${jobs} oldconfig \u0026\u0026     make -j ${jobs} bzImage \u0026\u0026     make -j ${jobs} modules"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ROOTFS",
              "Value": "/rootfs"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TCL_REPO_BASE",
              "Value": "http://tinycorelinux.net/5.x/x86"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TCZ_DEPS",
              "Value": "iptables                     iproute2                     openssh openssl-1.0.0                     tar                     gcc_libs                     acpid                     xz liblzma                     git expat2 libiconv libidn libgpg-error libgcrypt libssh2                     nfs-utils tcp_wrappers portmap rpcbind libtirpc                     curl ntpclient"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $ROOTFS"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /linux-kernel \u0026\u0026     make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $ROOTFS/lib/modules \u0026\u0026     rm -rf ./*/kernel/sound/* \u0026\u0026     rm -rf ./*/kernel/drivers/gpu/* \u0026\u0026     rm -rf ./*/kernel/drivers/infiniband/* \u0026\u0026     rm -rf ./*/kernel/drivers/isdn/* \u0026\u0026     rm -rf ./*/kernel/drivers/media/* \u0026\u0026     rm -rf ./*/kernel/drivers/staging/lustre/* \u0026\u0026     rm -rf ./*/kernel/drivers/staging/comedi/* \u0026\u0026     rm -rf ./*/kernel/fs/ocfs2/* \u0026\u0026     rm -rf ./*/kernel/net/bluetooth/* \u0026\u0026     rm -rf ./*/kernel/net/mac80211/* \u0026\u0026     rm -rf ./*/kernel/net/wireless/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L ftp://ftp.de.debian.org/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz \u0026\u0026     cd /libcap-2.22 \u0026\u0026     sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules \u0026\u0026     sed -i 's/\\(^CFLAGS := .*\\)/\\1 -m32/' Make.Rules \u0026\u0026     make \u0026\u0026     mkdir -p output \u0026\u0026     make prefix=`pwd`/output install \u0026\u0026     mkdir -p $ROOTFS/usr/local/lib \u0026\u0026     cp -av `pwd`/output/lib64/* $ROOTFS/usr/local/lib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /linux-kernel \u0026\u0026     make INSTALL_HDR_PATH=/tmp/kheaders headers_install \u0026\u0026     cd / \u0026\u0026     git clone git://git.code.sf.net/p/aufs/aufs-util \u0026\u0026     cd /aufs-util \u0026\u0026     git checkout aufs3.9 \u0026\u0026     CPPFLAGS=\"-m32 -I/tmp/kheaders/include\" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make \u0026\u0026     DESTDIR=$ROOTFS make install \u0026\u0026     rm -rf /tmp/kheaders"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for dep in $TCZ_DEPS; do \techo \"Download $TCL_REPO_BASE/tcz/$dep.tcz\" \u0026\u0026        curl -L -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz \u0026\u0026         unsquashfs -f -d $ROOTFS /tmp/$dep.tcz \u0026\u0026         rm -f /tmp/$dep.tcz ;    done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "rootfs/isolinux",
            "/isolinux"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "rootfs/make_iso.sh",
            "/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "rootfs/rootfs",
            "$ROOTFS"
          ]
        },
        {
          "CmdLine": [
            "find $ROOTFS/etc/rc.d/ -exec chmod +x {} \\; \u0026\u0026     find $ROOTFS/usr/local/etc/init.d/ -exec chmod +x {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L -o $ROOTFS/usr/local/bin/docker https://get.docker.io/builds/Linux/x86_64/docker-latest \u0026\u0026     chmod +x $ROOTFS/usr/local/bin/docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "/gitrepo"
          ]
        },
        {
          "CmdLine": [
            "cd /gitrepo \u0026\u0026     GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2\u003e/dev/null) \u0026\u0026     GITSHA1=$(git rev-parse --short HEAD) \u0026\u0026     DATE=$(date) \u0026\u0026     echo \"${GIT_BRANCH} : ${GITSHA1} - ${DATE}\" \u003e $ROOTFS/etc/boot2docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $ROOTFS \u0026\u0026 zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv $ROOTFS/bootsync.sh $ROOTFS/opt/bootsync.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x $ROOTFS/opt/bootsync.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x $ROOTFS/opt/shutdown.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/make_iso.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cat",
            "boot2docker.iso"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}