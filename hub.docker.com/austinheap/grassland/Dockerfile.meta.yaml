MetaArgs: null
Stages:
- BaseName: python:3.6.5-stretch
  Commands:
  - Maintainer: austinheap <me@austinheap.com>
    Name: maintainer
  - Name: expose
    Ports:
    - 3000/tcp
    - 8080/tcp
  - Name: volume
    Volumes:
    - /root/.grassland
  - Name: workdir
    Path: /opt
  - Key: BUILD_DATE
    Name: arg
    Value: null
  - Key: VCS_URL
    Name: arg
    Value: null
  - Key: VCS_REF
    Name: arg
    Value: null
  - Key: VERSION
    Name: arg
    Value: null
  - Labels:
    - Key: org.label-schema.build-date
      Value: $BUILD_DATE
    - Key: org.label-schema.description
      Value: '"Dockerfiles and scripts for Grassland network, based on configuration
        settings."'
    - Key: org.label-schema.docker.cmd.debug
      Value: '"docker exec -it $CONTAINER shell"'
    - Key: org.label-schema.docker.cmd.help
      Value: '"docker exec -it $CONTAINER help"'
    - Key: org.label-schema.docker.cmd.test
      Value: '"docker exec -it $CONTAINER validate"'
    - Key: org.label-schema.name
      Value: '"Grassland for Docker"'
    - Key: org.label-schema.schema-version
      Value: '"1.0"'
    - Key: org.label-schema.url
      Value: '"https://austinheap.github.io/grassland-docker/"'
    - Key: org.label-schema.vcs-url
      Value: $VCS_URL
    - Key: org.label-schema.vcs-ref
      Value: $VCS_REF
    - Key: org.label-schema.vendor
      Value: '"Austin Heap"'
    - Key: org.label-schema.version
      Value: $VERSION
    - Key: com.microscaling.docker.dockerfile
      Value: '"/Dockerfile"'
    - Key: com.microscaling.license
      Value: '"MIT"'
    Name: label
  - Env:
    - Key: VERSION
      Value: $VERSION
    Name: env
  - Key: BUILD_ENV_FILE
    Name: arg
    Value: /opt/env.sh
  - Env:
    - Key: ENV_FILE
      Value: $BUILD_ENV_FILE
    Name: env
  - Key: BUILD_VIRTUAL_ENV
    Name: arg
    Value: /opt/venv
  - Env:
    - Key: VIRTUAL_ENV
      Value: $BUILD_VIRTUAL_ENV
    Name: env
  - CmdLine:
    - mkdir -p "$(dirname "${ENV_FILE}")" &&  echo "# created by grassland-docker
      @ $(date)" > "${ENV_FILE}.orig" &&  cp -v "${ENV_FILE}.orig" "${ENV_FILE}" &&  pip3
      install --upgrade pip &&  pip3 install virtualenv &&  python3 -m virtualenv
      --python=/usr/local/bin/python3 ${VIRTUAL_ENV}
    Name: run
    PrependShell: true
  - Env:
    - Key: ENV
      Value: $ENV_FILE
    Name: env
  - Env:
    - Key: PATH
      Value: '"$VIRTUAL_ENV/bin:$PATH"'
    Name: env
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: UBUNTU_APT_SITE
    Name: arg
    Value: ubuntu.cs.utah.edu
  - Key: BUILD_PYTHON_VERSION
    Name: arg
    Value: 3.6.5
  - Env:
    - Key: PYTHON_VERSION
      Value: $BUILD_PYTHON_VERSION
    Name: env
  - Key: BUILD_OPENCV_VERSION
    Name: arg
    Value: 3.4.2
  - Env:
    - Key: OPENCV_VERSION
      Value: $BUILD_OPENCV_VERSION
    Name: env
  - Key: BUILD_AWS_VERSION
    Name: arg
    Value: "1.16"
  - Env:
    - Key: AWS_VERSION
      Value: $BUILD_AWS_VERSION
    Name: env
  - Key: BUILD_NVM_VERSION
    Name: arg
    Value: 0.34.0
  - Env:
    - Key: NVM_VERSION
      Value: $BUILD_NVM_VERSION
    Name: env
  - Key: BUILD_NODE_VERSION
    Name: arg
    Value: 8.10.0
  - Env:
    - Key: NODE_VERSION
      Value: $BUILD_NODE_VERSION
    Name: env
  - Key: BUILD_SERVERLESS_VERSION
    Name: arg
    Value: 1.43.0
  - Env:
    - Key: SERVERLESS_VERSION
      Value: $BUILD_SERVERLESS_VERSION
    Name: env
  - Key: BUILD_NVM_DIR
    Name: arg
    Value: /opt/nvm
  - Env:
    - Key: NVM_DIR
      Value: $BUILD_NVM_DIR
    Name: env
  - Env:
    - Key: HTTP_PROXY
      Value: http://squid-deb-proxy.local:8000/
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - http://us.archive.ubuntu.com/ubuntu/pool/main/libj/libjpeg-turbo/libjpeg-turbo8_1.4.2-0ubuntu3_amd64.deb
    - /tmp
  - Chown: ""
    Name: add
    SourcesAndDest:
    - http://us.archive.ubuntu.com/ubuntu/pool/main/libj/libjpeg8-empty/libjpeg8_8c-2ubuntu8_amd64.deb
    - /tmp
  - Chown: ""
    Name: add
    SourcesAndDest:
    - http://security.ubuntu.com/ubuntu/pool/main/j/jasper/libjasper1_1.900.1-debian1-2.4ubuntu1.2_amd64.deb
    - /tmp
  - Chown: ""
    Name: add
    SourcesAndDest:
    - http://security.ubuntu.com/ubuntu/pool/main/j/jasper/libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_amd64.deb
    - /tmp
  - CmdLine:
    - sed -E -i "s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g" /etc/apt/sources.list
      &&  sed -i "s/security.ubuntu.com/$UBUNTU_APT_SITE/g" /etc/apt/sources.list
      &&  apt-get update &&  apt-get upgrade -y -qq --no-install-recommends &&  apt-get
      install -y -qq --no-install-recommends   build-essential cmake git wget curl
      unzip yasm pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev
      libtiff-dev libavformat-dev   libpq-dev libv4l-dev libgtk2.0-dev libavcodec-dev
      libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev libglib2.0-0   libsm6
      libxrender1 locales libxext6 groff vim nano jq procps v4l-utils ca-certificates
      &&  dpkg -i /tmp/*.deb &&  pip3 install awscli numpy &&  apt-get clean &&  rm
      -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb
      /var/cache/apt/*.bin /tmp/*.deb &&  wget -q -O "/${OPENCV_VERSION}.zip" https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip
      &&  unzip -qq "/${OPENCV_VERSION}.zip" -d / &&  mkdir "/opencv-${OPENCV_VERSION}/cmake_binary"
      &&  cd "/opencv-${OPENCV_VERSION}/cmake_binary" &&  cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF
      -DWITH_CUDA=OFF -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_OPENCL=ON -DWITH_IPP=ON
      -DWITH_TBB=ON -DWITH_EIGEN=ON        -DWITH_V4L=ON -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF
      -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$(python3 -c "import sys;
      print(sys.prefix)")        -DPYTHON_EXECUTABLE=$(which python3) -DPYTHON_INCLUDE_DIR=$(python3
      -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")        -DPYTHON_PACKAGES_PATH=$(python3
      -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")
      .. &&  make -j4 install &&  cd /opt &&  rm -rf "/${OPENCV_VERSION}.zip" "/opencv-${OPENCV_VERSION}"
      &&  mkdir -p "${NVM_DIR}" &&  curl -s -o- "https://raw.githubusercontent.com/creationix/nvm/v${NVM_VERSION}/install.sh"
      | bash &&  . "${NVM_DIR}/nvm.sh" &&  nvm install ${NODE_VERSION} &&  nvm alias
      default ${NODE_VERSION} &&  npm install -g try-thread-sleep &&  npm install
      -g serverless --ignore-scripts spawn-sync
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_PATH
      Value: '"$NVM_DIR/v$NODE_VERSION/lib/node_modules"'
    Name: env
  - Env:
    - Key: PATH
      Value: '"$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH"'
    Name: env
  - Key: BUILD_VENDORED_PATH
    Name: arg
    Value: /opt/data/vendored.zip
  - Env:
    - Key: VENDORED_PATH
      Value: $BUILD_VENDORED_PATH
    Name: env
  - Key: BUILD_VENDORED_URL
    Name: arg
    Value: https://downloads.grassland.network/packages/node_lite_object_detection/vendored.zip
  - Env:
    - Key: VENDORED_URL
      Value: $BUILD_VENDORED_URL
    Name: env
  - Key: BUILD_VENDORED_HASH
    Name: arg
    Value: 88c0fbf8aeb7de97cfc71b2201c97277
  - Env:
    - Key: VENDORED_HASH
      Value: $BUILD_VENDORED_HASH
    Name: env
  - Key: BUILD_EON_PATH
    Name: arg
    Value: /opt/data/eon_0.pb
  - Env:
    - Key: EON_PATH
      Value: $BUILD_EON_PATH
    Name: env
  - Key: BUILD_EON_URL
    Name: arg
    Value: https://downloads.grassland.network/models/eon_0.pb
  - Env:
    - Key: EON_URL
      Value: $BUILD_EON_URL
    Name: env
  - Key: BUILD_EON_HASH
    Name: arg
    Value: 1f1902262c16c2d9acb9bc4f8a8c266f
  - Env:
    - Key: EON_HASH
      Value: $BUILD_EON_HASH
    Name: env
  - CmdLine:
    - 'mkdir -p "$(dirname "${VENDORED_PATH}")" &&  curl -s -o "${VENDORED_PATH}"
      "${VENDORED_URL}" &&  echo "${VENDORED_HASH}  ${VENDORED_PATH}" > "${VENDORED_PATH}.md5"
      &&  md5sum -c "${VENDORED_PATH}.md5" && echo -n "Checksum passed: " && cat "${VENDORED_PATH}.md5"
      && rm "${VENDORED_PATH}.md5" &&  mkdir -p "$(dirname "${EON_PATH}")" &&  curl
      -s -o "${EON_PATH}" "${EON_URL}" &&  echo "${EON_HASH}  ${EON_PATH}" > "${EON_PATH}.md5"
      &&  md5sum -c "${EON_PATH}.md5" && echo -n "Checksum passed: " && cat "${EON_PATH}.md5"
      && rm "${EON_PATH}.md5"'
    Name: run
    PrependShell: true
  - Key: BUILD_RELEASE
    Name: arg
    Value: acec8a859e111236beb3bfd10dd11909a0ae0f3c
  - Env:
    - Key: RELEASE
      Value: $BUILD_RELEASE
    Name: env
  - Key: BUILD_DETECTION_RELEASE
    Name: arg
    Value: b03ca01211270efb1ceafaff8947415d12b75dda
  - Env:
    - Key: DETECTION_RELEASE
      Value: $BUILD_DETECTION_RELEASE
    Name: env
  - CmdLine:
    - cd /opt &&  git clone https://github.com/grasslandnetwork/node_lite &&  cd node_lite
      &&  git checkout -b docker-build ${RELEASE} &&  pip3 install -r requirements.txt
      &&  cd /opt/node_lite/gui &&  npm install &&  cd /opt &&  git clone https://github.com/grasslandnetwork/node_lite_object_detection
      &&  cd node_lite_object_detection &&  git checkout -b docker-build ${DETECTION_RELEASE}
      &&  rm -rf "/opt/node_lite_object_detection/vendored" &&  unzip -qq "${VENDORED_PATH}"
      -d "/opt/node_lite_object_detection"
    Name: run
    PrependShell: true
  - Key: BUILD_AWS_ACCESS_KEY_ID
    Name: arg
    Value: default_value
  - Env:
    - Key: AWS_ACCESS_KEY_ID
      Value: $BUILD_AWS_ACCESS_KEY_ID
    Name: env
  - Key: BUILD_AWS_SECRET_ACCESS_KEY
    Name: arg
    Value: default_value
  - Env:
    - Key: AWS_SECRET_ACCESS_KEY
      Value: $BUILD_AWS_SECRET_ACCESS_KEY
    Name: env
  - Key: BUILD_AWS_DEFAULT_REGION
    Name: arg
    Value: default_value
  - Env:
    - Key: AWS_DEFAULT_REGION
      Value: $BUILD_AWS_DEFAULT_REGION
    Name: env
  - Key: BUILD_GRASSLAND_FRAME_S3_BUCKET
    Name: arg
    Value: default_value
  - Env:
    - Key: GRASSLAND_FRAME_S3_BUCKET
      Value: $BUILD_GRASSLAND_FRAME_S3_BUCKET
    Name: env
  - Key: BUILD_GRASSLAND_MODEL_S3_BUCKET
    Name: arg
    Value: default_value
  - Env:
    - Key: GRASSLAND_MODEL_S3_BUCKET
      Value: $BUILD_GRASSLAND_MODEL_S3_BUCKET
    Name: env
  - Key: BUILD_LAMBDA_DETECTION_URL
    Name: arg
    Value: default_value
  - Env:
    - Key: LAMBDA_DETECTION_URL
      Value: $BUILD_LAMBDA_DETECTION_URL
    Name: env
  - Key: BUILD_MAPBOX_ACCESS_TOKEN
    Name: arg
    Value: default_value
  - Env:
    - Key: MapboxAccessToken
      Value: $BUILD_MAPBOX_ACCESS_TOKEN
    Name: env
  - Key: BUILD_DISPLAY
    Name: arg
    Value: host.docker.internal:0
  - Env:
    - Key: DISPLAY
      Value: $BUILD_DISPLAY
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-config.sh
    - /docker-config.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-functions.sh
    - /docker-functions.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-commands.sh
    - /docker-commands.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /docker-entrypoint.sh
  - CmdLine:
    - md5sum /docker-config.sh > .docker-config.sh.md5 &&  md5sum /docker-functions.sh
      > .docker-functions.sh.md5 &&  md5sum /docker-commands.sh > .docker-commands.sh.md5
      &&  md5sum /docker-entrypoint.sh > .docker-entrypoint.sh.md5 &&  CONTAINER_QUIET=true
      /docker-entrypoint.sh validate:versions &&  ln -s /docker-entrypoint.sh /usr/local/bin/grassland
    Name: run
    PrependShell: true
  - CmdLine:
    - /usr/local/bin/grassland
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - default
    Name: cmd
    PrependShell: false
  From:
    Image: python:3.6.5-stretch
  Name: ""
  Platform: ""
  SourceCode: FROM python:3.6.5-stretch
