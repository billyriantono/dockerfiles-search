{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-1.8-openjdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_HOME",
              "Value": "/var/jenkins_home"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_VERSION",
              "Value": "2.164.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_PLUGINS_LATEST",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FC_LANG",
              "Value": "de-CH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_CTYPE",
              "Value": "de_CH.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "files",
            "/"
          ]
        },
        {
          "CmdLine": [
            "set -ex;    apk update;    apk add --no-cache tini ca-certificates openjdk8 bash git curl zip wget docker fontconfig ttf-dejavu jq coreutils openssh py2-pip;    rm -rf /var/cache/apk/*;    echo \"*** fix key permissions ***\";    chmod 600 /root/.ssh/id_rsa;    echo \"*** Installing docker-compose ***\";    pip install --upgrade pip;    pip install docker-compose"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"*** Installing jenkins ***\";    curl -sSL --create-dirs --retry 3 mirrors.jenkins.io/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war -o /usr/share/jenkins/jenkins.war;    echo \"*** Recursive solve and reduce plugin dependencies ***\";    curl -sSO --retry 3 https://updates.jenkins.io/current/update-center.actual.json;    false; until [ $? -eq 0 ]; do        cp /var/jenkins_home/plugins.txt /var/jenkins_home/check;       jq --arg p \"$(sed -e ':a;N;$!ba;s/\\n/ /g' /var/jenkins_home/plugins.txt)\" -r '.plugins[] | select([.name] | inside([$p]))| .dependencies[] | select(.optional == false)| .name + \":\" + .version' update-center.actual.json \u003e\u003e /var/jenkins_home/plugins.txt;       sort -Vr /var/jenkins_home/plugins.txt | sort -u -t: -k1,1 -o /var/jenkins_home/plugins.txt;       cmp -s /var/jenkins_home/check /var/jenkins_home/plugins.txt;    done;    rm /var/jenkins_home/check;    echo \"*** Jenkins install plugins from plugins.txt *** \";    while read plugin; do        if $JENKINS_PLUGINS_LATEST; then plugin=\"${plugin%:*}:latest\"; else plugin=\"${plugin%:*}:${plugin#*:}\"; fi;\\    echo \"*** Downloading ${plugin} ***\";       curl -sSL --create-dirs --retry 3 http://mirrors.jenkins.io/download/plugins/${plugin%:*}/${plugin#*:}/${plugin%:*}.hpi -o /var/jenkins_home/plugins/${plugin%:*}.jpi;       touch /var/jenkins_home/plugins/${plugin%:*}.jpi.pinned;    done \u003c /var/jenkins_home/plugins.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8080",
            "8443"
          ]
        },
        {
          "CmdLine": [
            "/sbin/tini",
            "--",
            "entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "java",
            "${JAVA_OPTS}",
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+UseCGroupMemoryLimitForHeap",
            "-XX:MaxRAMFraction=2",
            "-XX:+HeapDumpOnOutOfMemoryError",
            "-XshowSettings:vm",
            "-Djava.awt.headless=true",
            "-Djenkins.install.runSetupWizard=false",
            "-jar",
            "/usr/share/jenkins/jenkins.war",
            "${JENKINS_OPTS}"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}