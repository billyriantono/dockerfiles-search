MetaArgs: null
Stages:
- BaseName: postgres:alpine
  Commands:
  - Maintainer: Arun Allamsetty <arun.allamsetty@gmail.com>
    Name: maintainer
  - Key: DATASETS
    Name: arg
    Value: dellstore,iso3166,pagila,sportsdb,usda,world
  - Key: PG_USER
    Name: arg
    Value: postgres
  - Key: PG_HOME
    Name: arg
    Value: /home/$PG_USER
  - Env:
    - Key: POSTGRES_USER
      Value: docker
    Name: env
  - Env:
    - Key: POSTGRES_PASSWORD
      Value: docker
    Name: env
  - Env:
    - Key: POSTGRES_DB
      Value: donotuse
    Name: env
  - CmdLine:
    - mkdir -p $PG_HOME &&     touch $PG_HOME/.psql_history &&     chown -R $PG_USER:$PG_USER
      $PG_HOME
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - 'apk add --update       bash       ca-certificates       git       wget &&     bash
      -c ''     declare -A SQL=(       [dellstore]="(dellstore2-normal-1.0/dellstore2-normal-1.0.sql)"       [iso3166]="(iso-3166/iso-3166.sql)"       [pagila]="(pagila/pagila-schema.sql
      pagila/pagila-insert-data.sql)"       [sportsdb]="(sportsdb_sample_postgresql_20080304.sql)"       [usda]="(usda-r18-1.0/usda.sql)"       [world]="(dbsamples-0.1/world/world.sql)"     )
      &&     declare -A URL=(       [dellstore]=https://ftp.postgresql.org/pub/projects/pgFoundry/dbsamples/dellstore2/dellstore2-normal-1.0/dellstore2-normal-1.0.tar.gz       [iso3166]=https://ftp.postgresql.org/pub/projects/pgFoundry/dbsamples/iso-3166/iso-3166-1.0/iso-3166-1.0.tar.gz       [pagila]=https://github.com/devrimgunduz/pagila.git       [sportsdb]=http://www.sportsdb.org/modules/sd/assets/downloads/sportsdb_sample_postgresql.zip       [usda]=https://ftp.postgresql.org/pub/projects/pgFoundry/dbsamples/usda/usda-r18-1.0/usda-r18-1.0.tar.gz       [world]=https://ftp.postgresql.org/pub/projects/pgFoundry/dbsamples/world/world-1.0/world-1.0.tar.gz     )
      &&     for DATASET in "${!SQL[@]}"; do       export DATASET_URL="${URL[$DATASET]}"
      &&       declare -a DATASET_SQL="${SQL[$DATASET]}" &&       if [[ $DATASETS
      == *"$DATASET"* ]]; then         echo "Populating dataset: ${DATASET}" &&         if
      [[ $DATASET_URL == *.tar.gz ]]; then           wget -qO- $DATASET_URL | tar
      -C . -xzf -;         elif [[ $DATASET_URL == *.zip ]]; then           wget $DATASET_URL
      -O tmp.zip &&           unzip -d . tmp.zip;           rm tmp.zip;         elif
      [[ $DATASET_URL == *.git ]]; then           git clone $DATASET_URL;         fi
      &&         echo "CREATE DATABASE $DATASET;" >> "/docker-entrypoint-initdb.d/${DATASET}.sql"
      &&         echo "\c $DATASET;" >> "/docker-entrypoint-initdb.d/${DATASET}.sql"
      &&         for i in "${!DATASET_SQL[@]}"; do           cat "${DATASET_SQL[i]}"
      >> "/docker-entrypoint-initdb.d/${DATASET}.sql";         done &&         rm
      -rf *;       fi;     done'' &&     apk del --purge       bash       ca-certificates       git       wget
      &&     rm -rf /var/cache/apk/*'
    Name: run
    PrependShell: true
  - Name: user
    User: $PG_USER
  - Name: workdir
    Path: $PG_HOME
  From:
    Image: postgres:alpine
  Name: ""
  Platform: ""
  SourceCode: FROM postgres:alpine
