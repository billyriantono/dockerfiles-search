{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Dustin Lee dlee35@gmail.com",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "DEBIAN_FRONTEND=noninteractive \u0026\u0026  apt-get -qq update \u0026\u0026  apt-get install -qq wget supervisor git nginx  curl software-properties-common logrotate"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "DEBIAN_FRONTEND=noninteractive \u0026\u0026  add-apt-repository ppa:webupd8team/java \u0026\u0026  apt-get -qq update \u0026\u0026  echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections \u0026\u0026  apt-get install -y oracle-java8-installer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/5.0.0-alpha1/elasticsearch-5.0.0-alpha1.deb \u0026\u0026  wget https://download.elastic.co/kibana/kibana/kibana_5.0.0-alpha1_amd64.deb \u0026\u0026  wget https://download.elastic.co/logstash/logstash/packages/debian/logstash_5.0.0~alpha1-1_all.deb \u0026\u0026  wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz \u0026\u0026  git clone https://github.com/dlee35/docker-elk5.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg -i elasticsearch-5.0.0-alpha1.deb \u0026\u0026  dpkg -i kibana_5.0.0-alpha1_amd64.deb \u0026\u0026  dpkg -i logstash_5.0.0~alpha1-1_all.deb \u0026\u0026  gunzip GeoLiteCity.dat.gz \u0026\u0026  rm *.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/opt/logstash/bin/logstash-plugin install logstash-input-beats \u0026\u0026  /opt/logstash/bin/logstash-plugin install logstash-filter-translate \u0026\u0026  /opt/logstash/bin/logstash-plugin install logstash-filter-geoip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/share/GeoIP \u0026\u0026  mv GeoLiteCity.dat /usr/share/GeoIP/."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /docker-elk5/10_input.conf /docker-elk5/20_filter.conf  /docker-elk5/90_output.conf /etc/logstash/conf.d/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /docker-elk5/createmapping.sh /docker-elk5/createcert.sh /etc/init.d/ \u0026\u0026  mv /docker-elk5/default /etc/nginx/sites-available/default \u0026\u0026  mv /docker-elk5/htpasswd.users /etc/nginx/htpasswd.users"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/logstash/patterns \u0026\u0026  chmod +x /etc/init.d/createmapping.sh \u0026\u0026  chmod +x /etc/init.d/createcert.sh \u0026\u0026  sed -i 's/agent\\ //' /etc/init.d/logstash \u0026\u0026  sed -i -e '/^#\\ network.host.* /s/^#\\ //' -e '/^network.host.* /s/192.168.0.1/localhost/'  -e '/^#\\ discovery.zen.minimum.* /s/^#\\ //' -e '/master_nodes:\\ 3$/ s/3/1/'  /etc/elasticsearch/elasticsearch.yml \u0026\u0026  sed -i -e '/^#\\ server.ssl.cert.*/c\\ server.ssl.cert\\:\\ \\/etc\\/ssl\\/certs\\/elk.local.pem'  -e '/^#\\ server.ssl.key.* /c\\ server.ssl.key\\:\\ \\/etc\\/ssl\\/private\\/elk.local.key'  /opt/kibana/config/kibana.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash /etc/init.d/elasticsearch start \u0026\u0026  sleep 20 \u0026\u0026  /bin/bash /etc/init.d/createmapping.sh \u0026\u0026  /bin/bash /etc/init.d/createcert.sh \u0026\u0026  chown -R kibana /etc/ssl/private/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /docker-elk5/bro /etc/logstash/patterns/bro \u0026\u0026  mv /docker-elk5/supervisor.conf /etc/supervisor/conf.d/supervisor.conf \u0026\u0026  rm -rf /docker-elk5"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "5514",
            "5601"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}