MetaArgs: null
Stages:
- BaseName: alpine:3.10
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Thomas Andrade <wolvie@gmail.com>"'
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: '"1.17.5"'
    - Key: MORE_SET_HEADER_VERSION
      Value: '"0.33"'
    - Key: HTTP_METRICS_MODULE_VERSION
      Value: '"0.1.1"'
    - Key: OWASP_CRS_VERSION
      Value: '"3.1.1"'
    - Key: MODSEC
      Value: '"https://github.com/SpiderLabs/ModSecurity"'
    - Key: MODDEST
      Value: '"/usr/src/modsecurity"'
    - Key: MODSEC_CONN
      Value: '"https://github.com/SpiderLabs/ModSecurity-nginx.git"'
    - Key: MODCONNDEST
      Value: '"external_module/modsecurity-nginx"'
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - nginx.vh.default.conf
    - /tmp/
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module
      \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module
      \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module
      \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic
      \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic
      \t\t--with-pcre \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module
      \t\t--with-stream_ssl_preread_module \t\t--with-stream_realip_module \t\t--with-stream_geoip_module=dynamic
      \t\t--with-http_slice_module \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat
      \t\t--with-file-aio \t\t--with-http_v2_module \t\t--add-module=external_module/headers-more-nginx-module-${MORE_SET_HEADER_VERSION}
      \t\t--add-module=external_module/ngx_metrics-${HTTP_METRICS_MODULE_VERSION}
      \t\t--add-module=external_module/modsecurity-nginx \t\" \t&& addgroup -S nginx
      \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&&
      apk add --no-cache --virtual .build-deps \t\tgcc \t\tg++ \t\tbinutils \t\tlibc-dev
      \t\tmake \t\tautomake \t\tautoconf \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev
      \t\tlibtool \t\tlmdb-dev \t\tlibxml2-dev \t\tlinux-headers \t\tcurl \t\tlibcurl
      \t\tgnupg1 \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t\tyajl-dev \t\tgit \t&&
      curl -fSL https://github.com/openresty/headers-more-nginx-module/archive/v${MORE_SET_HEADER_VERSION}.tar.gz
      -o /tmp/$MORE_SET_HEADER_VERSION.tar.gz \t&& curl -fSL https://github.com/madvertise/ngx_metrics/archive/v${HTTP_METRICS_MODULE_VERSION}.tar.gz
      -o /tmp/${HTTP_METRICS_MODULE_VERSION}.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v${OWASP_CRS_VERSION}.tar.gz
      -o /tmp/${OWASP_CRS_VERSION}.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found='';
      \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz
      \t&& rm nginx.tar.gz \t&& git clone --depth 1 -b v3/master --single-branch \"$MODSEC\"
      \"$MODDEST\" \t&& cd \"${MODDEST}\" \t&& git submodule init \t&& git submodule
      update \t&& ./build.sh \t&& ./configure --prefix=/usr \t\t--sysconfdir=/etc/nginx/modsec/
      \t&& make \t&& make install \t&& cd /usr/src/nginx-$NGINX_VERSION \t&& mkdir
      external_module \t&& tar xvf /tmp/${MORE_SET_HEADER_VERSION}.tar.gz -C external_module
      \t&& rm /tmp/$MORE_SET_HEADER_VERSION.tar.gz \t&& tar xvf /tmp/${HTTP_METRICS_MODULE_VERSION}.tar.gz
      -C external_module \t&& rm /tmp/${HTTP_METRICS_MODULE_VERSION}.tar.gz \t&& git
      clone --depth 1 \"$MODSEC_CONN\" \"$MODCONNDEST\" \t&& ./configure $CONFIG \t&&
      make -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/
      \t&& mkdir /etc/nginx/conf.d/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install
      -m644 html/index.html /usr/share/nginx/html/ \t&& install -m644 html/50x.html
      /usr/share/nginx/html/ \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules
      \t&& strip /usr/sbin/nginx* \t&& strip /usr/lib/nginx/modules/*.so \t&& strip
      --strip-unneeded /usr/lib/libmodsecurity.so.* \t&& mkdir /etc/nginx/modsec \t&&
      curl -o /etc/nginx/modsec/modsecurity.conf \thttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
      \t&& curl -o /etc/nginx/modsec/unicode.mapping \thttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping
      \t&& sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/nginx/modsec/modsecurity.conf
      \t&& tar zxvf /tmp/${OWASP_CRS_VERSION}.tar.gz -C /usr/local/ \t&& rm /tmp/${OWASP_CRS_VERSION}.tar.gz
      \t&& mv /usr/local/owasp-modsecurity-crs-${OWASP_CRS_VERSION}/crs-setup.conf.example
      \t\t/usr/local/owasp-modsecurity-crs-${OWASP_CRS_VERSION}/crs-setup.conf \t&&
      echo \"Include /etc/nginx/modsec/modsecurity.conf\" >/etc/nginx/modsec/main.conf
      \t&& echo \"Include /usr/local/owasp-modsecurity-crs-${OWASP_CRS_VERSION}/crs-setup.conf\"
      >>/etc/nginx/modsec/main.conf \t&& echo \"Include /usr/local/owasp-modsecurity-crs-${OWASP_CRS_VERSION}/rules/*.conf\"
      >>/etc/nginx/modsec/main.conf \t&& rm -rf /usr/src/nginx-$NGINX_VERSION \t&&
      rm -rf /usr/src/modsecurity \t&& rm -rf /usr/lib/libmodsecurity.a \t&& rm -rf
      /usr/lib/libmodsecurity.la \t&& rm -rf /usr/include \t\t&& apk add --no-cache
      --virtual .gettext gettext \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$(
      \t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst /usr/lib/libmodsecurity.so.* \t\t\t| tr ',' '\\n' \t\t\t| sort
      -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print
      \"so:\" $1 }' \t\t\t| grep -v libmodsecurity \t)\" \t&& apk add --no-cache --virtual
      .nginx-rundeps $runDeps \t&& apk del .build-deps \t&& apk del .gettext \t&&
      mv /tmp/envsubst /usr/local/bin/ \t\t&& apk add --no-cache tzdata \t\t&& ln
      -sf /dev/stdout /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log
      \t&& mv /tmp/nginx.conf /etc/nginx/nginx.conf \t&& mv /tmp/nginx.vh.default.conf
      /etc/nginx/conf.d/default.conf"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.10
