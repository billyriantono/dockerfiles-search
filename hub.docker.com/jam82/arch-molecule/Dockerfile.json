{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "archlinux/base",
      "SourceCode": "FROM archlinux/base",
      "Platform": "",
      "From": {
        "Image": "archlinux/base"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"jam82\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pacman -Syu --noconfirm     \u0026\u0026 pacman --sync --noconfirm --refresh     awk     bash     grep     procps-ng     python     python-pip     sed     sudo     systemd-sysvcompat     vim     \u0026\u0026 pacman -Scc --noconfirm     \u0026\u0026 (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done)     \u0026\u0026 rm -f /lib/systemd/system/multi-user.target.wants/*;    rm -f /etc/systemd/system/*.wants/*;    rm -f /lib/systemd/system/local-fs.target.wants/*;     rm -f /lib/systemd/system/sockets.target.wants/*udev*;     rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm -f /lib/systemd/system/basic.target.wants/*;     rm -f /lib/systemd/system/anaconda.target.wants/*;     pip install ansible;     mkdir -p /etc/ansible;     echo \"[local]\\nlocalhost ansible_connection=local\" \u003e /etc/ansible/hosts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/sys/fs/cgroup"
          ]
        },
        {
          "CmdLine": [
            "/usr/lib/systemd/systemd"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}