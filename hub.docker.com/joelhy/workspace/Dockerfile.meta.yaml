MetaArgs:
- DefaultValue: "7.2"
  Key: LARADOCK_PHP_VERSION
  ProvidedValue: null
  Value: "7.2"
Stages:
- BaseName: laradock/workspace:2.2-${LARADOCK_PHP_VERSION}
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Mahmoud Zalt <mahmoud@zalt.me>"'
    Name: label
  - Key: LARADOCK_PHP_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Name: user
    User: root
  - Key: PUID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PUID
      Value: ${PUID}
    Name: env
  - Key: PGID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PGID
      Value: ${PGID}
    Name: env
  - CmdLine:
    - set -xe;     apt-get update -yqq &&     pecl channel-update pecl.php.net &&     groupadd
      -g ${PGID} laradock &&     useradd -u ${PUID} -g laradock -m laradock -G docker_env
      &&     usermod -p "*" laradock -s /bin/bash &&     apt-get install -yqq       apt-utils       libzip-dev
      zip unzip       php${LARADOCK_PHP_VERSION}-zip       nasm &&       php -m |
      grep -q 'zip'
    Name: run
    PrependShell: true
  - Key: TZ
    Name: arg
    Value: Asia/Shanghai
  - Env:
    - Key: TZ
      Value: ${TZ}
    Name: env
  - CmdLine:
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./aliases.sh
    - /root/aliases.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./aliases.sh
    - /home/laradock/aliases.sh
  - CmdLine:
    - "sed -i 's/\\r//' /root/aliases.sh &&     sed -i 's/\\r//' /home/laradock/aliases.sh
      &&     chown laradock:laradock /home/laradock/aliases.sh &&     echo \"\" >>
      ~/.bashrc &&     echo \"# Load Custom Aliases\" >> ~/.bashrc &&     echo \"source
      ~/aliases.sh\" >> ~/.bashrc && \t  echo \"\" >> ~/.bashrc"
    Name: run
    PrependShell: true
  - Name: user
    User: laradock
  - CmdLine:
    - "echo \"\" >> ~/.bashrc &&     echo \"# Load Custom Aliases\" >> ~/.bashrc &&
      \    echo \"source ~/aliases.sh\" >> ~/.bashrc && \t  echo \"\" >> ~/.bashrc"
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./composer.json
    - /home/laradock/.composer/composer.json
  - CmdLine:
    - chown -R laradock:laradock /home/laradock/.composer
    Name: run
    PrependShell: true
  - Name: user
    User: laradock
  - Key: COMPOSER_GLOBAL_INSTALL
    Name: arg
    Value: "true"
  - Env:
    - Key: COMPOSER_GLOBAL_INSTALL
      Value: ${COMPOSER_GLOBAL_INSTALL}
    Name: env
  - CmdLine:
    - if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then     composer global install ;fi
    Name: run
    PrependShell: true
  - Key: COMPOSER_REPO_PACKAGIST
    Name: arg
    Value: null
  - Env:
    - Key: COMPOSER_REPO_PACKAGIST
      Value: ${COMPOSER_REPO_PACKAGIST}
    Name: env
  - CmdLine:
    - if [ ${COMPOSER_REPO_PACKAGIST} ]; then     composer config -g repo.packagist
      composer ${COMPOSER_REPO_PACKAGIST} ;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "" >> ~/.bashrc &&     echo 'export PATH="~/.composer/vendor/bin:$PATH"'
      >> ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: laradock
  - CmdLine:
    - echo "" >> ~/.bashrc &&     echo 'export PATH="/var/www/vendor/bin:$PATH"' >>
      ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./crontab
    - /etc/cron.d
  - CmdLine:
    - chmod -R 644 /etc/cron.d
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_SOAP
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_SOAP} = true ]; then   apt-get -y install libxml2-dev php${LARADOCK_PHP_VERSION}-soap
      ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_SUBVERSION
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SUBVERSION} = true ]; then     apt-get install -y subversion
      ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_XDEBUG
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_XDEBUG} = true ]; then     apt-get install -y php${LARADOCK_PHP_VERSION}-xdebug
      &&     sed -i 's/^;//g' /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/20-xdebug.ini
      &&     echo "alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'"
      >> ~/.bashrc ;fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./xdebug.ini
    - /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/xdebug.ini
  - CmdLine:
    - sed -i "s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/" /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/xdebug.ini
      &&     sed -i "s/xdebug.remote_enable=0/xdebug.remote_enable=1/" /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/xdebug.ini
      &&     sed -i "s/xdebug.cli_color=0/xdebug.cli_color=1/" /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/xdebug.ini
    Name: run
    PrependShell: true
  - Key: INSTALL_MONGO
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_MONGO} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       pecl install mongo &&       echo "extension=mongo.so" >>
      /etc/php/${LARADOCK_PHP_VERSION}/mods-available/mongo.ini &&       ln -s /etc/php/${LARADOCK_PHP_VERSION}/mods-available/mongo.ini
      /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/30-mongo.ini     ;fi &&     pecl
      install mongodb &&     echo "extension=mongodb.so" >> /etc/php/${LARADOCK_PHP_VERSION}/mods-available/mongodb.ini
      &&     ln -s /etc/php/${LARADOCK_PHP_VERSION}/mods-available/mongodb.ini /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/30-mongodb.ini
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PHPREDIS
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_PHPREDIS} = true ]; then     apt-get install -yqq php-redis ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_SWOOLE
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_SWOOLE} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       pecl -q install swoole-2.0.10;     else       if [ $(php
      -r "echo PHP_MINOR_VERSION;") = "0" ]; then         pecl install swoole-2.2.0;       else         pecl
      install swoole;       fi     fi &&     echo "extension=swoole.so" >> /etc/php/${LARADOCK_PHP_VERSION}/mods-available/swoole.ini
      &&     ln -s /etc/php/${LARADOCK_PHP_VERSION}/mods-available/swoole.ini /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/20-swoole.ini     &&
      php -m | grep -q 'swoole' ;fi
    Name: run
    PrependShell: true
  - Key: NODE_VERSION
    Name: arg
    Value: node
  - Env:
    - Key: NODE_VERSION
      Value: ${NODE_VERSION}
    Name: env
  - Key: INSTALL_NODE
    Name: arg
    Value: "true"
  - Key: INSTALL_NPM_GULP
    Name: arg
    Value: "false"
  - Key: INSTALL_NPM_BOWER
    Name: arg
    Value: "false"
  - Key: INSTALL_NPM_VUE_CLI
    Name: arg
    Value: "false"
  - Key: INSTALL_NPM_ANGULAR_CLI
    Name: arg
    Value: "false"
  - Key: NPM_REGISTRY
    Name: arg
    Value: '''http://registry.npm.taobao.org/'''
  - Env:
    - Key: NPM_REGISTRY
      Value: ${NPM_REGISTRY}
    Name: env
  - Env:
    - Key: NVM_DIR
      Value: /home/laradock/.nvm
    Name: env
  - CmdLine:
    - if [ ${INSTALL_NODE} = true ]; then     mkdir -p $NVM_DIR &&     curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh
      | bash         && . $NVM_DIR/nvm.sh         && nvm install ${NODE_VERSION}         &&
      nvm use ${NODE_VERSION}         && nvm alias ${NODE_VERSION}         && if [
      ${NPM_REGISTRY} ]; then         npm config set registry ${NPM_REGISTRY}         ;fi         &&
      if [ ${INSTALL_NPM_GULP} = true ]; then         npm install -g gulp         ;fi         &&
      if [ ${INSTALL_NPM_BOWER} = true ]; then         npm install -g bower         ;fi         &&
      if [ ${INSTALL_NPM_VUE_CLI} = true ]; then         npm install -g @vue/cli         ;fi         &&
      if [ ${INSTALL_NPM_ANGULAR_CLI} = true ]; then         npm install -g @angular/cli         ;fi         &&
      ln -s `npm bin --global` /home/laradock/.node-bin ;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - 'if [ ${INSTALL_NODE} = true ]; then     echo "" >> ~/.bashrc &&     echo ''export
      NVM_DIR="$HOME/.nvm"'' >> ~/.bashrc &&     echo ''[ -s "$NVM_DIR/nvm.sh" ] &&
      . "$NVM_DIR/nvm.sh"  # This loads nvm'' >> ~/.bashrc ;fi'
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - 'if [ ${INSTALL_NODE} = true ]; then     echo "" >> ~/.bashrc &&     echo ''export
      NVM_DIR="/home/laradock/.nvm"'' >> ~/.bashrc &&     echo ''[ -s "$NVM_DIR/nvm.sh"
      ] && . "$NVM_DIR/nvm.sh"  # This loads nvm'' >> ~/.bashrc ;fi'
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/home/laradock/.node-bin
    Name: env
  - CmdLine:
    - if [ ${INSTALL_NODE} = true ]; then     find $NVM_DIR -type f -name node -exec
      ln -s {} /usr/local/bin/node \; &&     NODE_MODS_DIR="$NVM_DIR/versions/node/$(node
      -v)/lib/node_modules" &&     ln -s $NODE_MODS_DIR/bower/bin/bower /usr/local/bin/bower
      &&     ln -s $NODE_MODS_DIR/gulp/bin/gulp.js /usr/local/bin/gulp &&     ln -s
      $NODE_MODS_DIR/npm/bin/npm-cli.js /usr/local/bin/npm &&     ln -s $NODE_MODS_DIR/npm/bin/npx-cli.js
      /usr/local/bin/npx &&     ln -s $NODE_MODS_DIR/vue-cli/bin/vue /usr/local/bin/vue
      &&     ln -s $NODE_MODS_DIR/vue-cli/bin/vue-init /usr/local/bin/vue-init &&     ln
      -s $NODE_MODS_DIR/vue-cli/bin/vue-list /usr/local/bin/vue-list ;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - if [ ${NPM_REGISTRY} ]; then     . ~/.bashrc && npm config set registry ${NPM_REGISTRY}
      ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: laradock
  - Key: INSTALL_YARN
    Name: arg
    Value: "true"
  - Key: YARN_VERSION
    Name: arg
    Value: latest
  - Env:
    - Key: YARN_VERSION
      Value: ${YARN_VERSION}
    Name: env
  - CmdLine:
    - if [ ${INSTALL_YARN} = true ]; then     [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      &&     if [ ${YARN_VERSION} = "latest" ]; then         curl -o- -L https://yarnpkg.com/install.sh
      | bash;     else         curl -o- -L https://yarnpkg.com/install.sh | bash -s
      -- --version ${YARN_VERSION};     fi &&     echo "" >> ~/.bashrc &&     echo
      'export PATH="$HOME/.yarn/bin:$PATH"' >> ~/.bashrc ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - if [ ${INSTALL_YARN} = true ]; then     echo "" >> ~/.bashrc &&     echo 'export
      YARN_DIR="/home/laradock/.yarn"' >> ~/.bashrc &&     echo 'export PATH="$YARN_DIR/bin:$PATH"'
      >> ~/.bashrc ;fi
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/home/laradock/.yarn/bin
    Name: env
  - Name: user
    User: laradock
  - Key: COMPOSER_REPO_PACKAGIST
    Name: arg
    Value: null
  - Env:
    - Key: COMPOSER_REPO_PACKAGIST
      Value: ${COMPOSER_REPO_PACKAGIST}
    Name: env
  - CmdLine:
    - if [ ${COMPOSER_REPO_PACKAGIST} ]; then     composer config -g repo.packagist
      composer ${COMPOSER_REPO_PACKAGIST} ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_LARAVEL_INSTALLER
    Name: arg
    Value: "true"
  - CmdLine:
    - "if [ ${INSTALL_LARAVEL_INSTALLER} = true ]; then \tcomposer global require
      \"laravel/installer\" ;fi"
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_PYTHON
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_PYTHON} = true ]; then   apt-get -y install python python-pip
      python-dev build-essential    && python -m pip install --upgrade pip    && python
      -m pip install --upgrade virtualenv ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_IMAGEMAGICK
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_IMAGEMAGICK} = true ]; then     apt-get install -y imagemagick
      php-imagick ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_MYSQL_CLIENT
    Name: arg
    Value: "true"
  - CmdLine:
    - if [ ${INSTALL_MYSQL_CLIENT} = true ]; then     apt-get update -yqq &&     apt-get
      -y install mysql-client ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Env:
    - Key: GOLANG_VERSION
      Value: "1.9"
    Name: env
  - CmdLine:
    - curl -O https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz &&         tar
      -C /usr/local -xzf go1.9.linux-amd64.tar.gz &&         rm go1.9.linux-amd64.tar.gz;         export
      PATH="/usr/local/go/bin:$PATH";     echo 'export PATH="/usr/local/go/bin:$PATH"'
      >> ~/.bashrc;         go version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g sl-core
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-get -y install iputils-ping wget mysql-client dnsutils silversearcher-ag
      enca nmap redis-tools
    Name: run
    PrependShell: true
  - CmdLine:
    - set -xe; php -v | head -n 1 | grep -q "PHP ${LARADOCK_PHP_VERSION}."
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&     rm
      /var/log/lastlog /var/log/faillog
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www
  From:
    Image: laradock/workspace:2.2-${LARADOCK_PHP_VERSION}
  Name: ""
  Platform: ""
  SourceCode: FROM laradock/workspace:2.2-${LARADOCK_PHP_VERSION}
