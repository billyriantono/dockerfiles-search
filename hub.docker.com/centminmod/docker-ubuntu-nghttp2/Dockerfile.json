{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:disco",
      "SourceCode": "FROM ubuntu:disco",
      "Platform": "",
      "From": {
        "Image": "ubuntu:disco"
      },
      "Commands": [
        {
          "Maintainer": "George Liu \u003chttps://github.com/centminmod/docker-ubuntu-nghttp2\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VCS_REF",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "org.label-schema.build-date",
              "Value": "$BUILD_DATE"
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/centminmod/docker-ubuntu-nghttp2.git\""
            },
            {
              "Key": "org.label-schema.vcs-ref",
              "Value": "$VCS_REF"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"0.0.1\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "ulimit -c -m -s -t unlimited ; echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections; apt-get update \u0026\u0026 apt-get install -y python-six libc-ares-dev libspdylay-dev nodejs npm libldb-dev libldap2-dev libpsl-dev libidn11 libidn11-dev libidn2-0 libidn2-0-dev perl python-setuptools dnsutils libssh2-1 libssh2-1-dev iputils-ping jq libc6-dev bison ruby ruby-dev mercurial libboost-dev libboost-thread-dev nano tar bsdmainutils apt-file wget mlocate make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libjemalloc-dev cython python3 openssl git-all gcc g++ libpcre3-dev libcap-dev libncurses5-dev curl \u0026\u0026 apt-get clean \u0026\u0026 apt-get autoclean \u0026\u0026 apt-get remove; cd /usr/local/src; git clone -b OpenSSL_1_1_1-stable --depth 1 https://github.com/openssl/openssl \u0026\u0026 cd /usr/local/src/openssl; ./config -Wl,--enable-new-dtags,-rpath=/usr/local/http2-15/lib enable-ec_nistp_64_gcc_128 enable-tls1_3 --prefix=/usr/local/http2-15 \u0026\u0026 make -j$(nproc) \u0026\u0026 make install \u0026\u0026 echo \"/usr/local/http2-15/lib\" \u003e /etc/ld.so.conf.d/openssl.conf \u0026\u0026 ldconfig \u0026\u0026 make clean \u0026\u0026 echo \"alias openssl=\\\"export LD_LIBRARY_PATH='/usr/local/http2-15/lib';/usr/local/http2-15/bin/openssl\\\"\" \u003e\u003e /root/.bashrc \u0026\u0026 . /root/.bashrc ; alias openssl='/usr/local/http2-15/bin/openssl'; mkdir -p /usr/local/http2-15/certs/; \\cp -Rpf /etc/ssl/certs/* /usr/local/http2-15/certs/; echo 'ca_directory=/etc/ssl/certs/' \u003e\u003e /etc/wgetrc ; mkdir /usr/local/src/nghttp2_libevent21 \u0026\u0026 cd /usr/local/src/nghttp2_libevent21 \u0026\u0026 wget -cnv --no-check-certificate https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz \u0026\u0026 tar xzf libevent-2.1.8-stable.tar.gz \u0026\u0026 cd libevent-2.1.8-stable \u0026\u0026 CFLAGS=-I/usr/local/http2-15/include CXXFLAGS=-I/usr/local/http2-15/include LDFLAGS=-L/usr/local/http2-15/lib ./configure --prefix=/usr/local/http2-15 \u0026\u0026 make -j$(nproc) \u0026\u0026 make install \u0026\u0026 make clean \u0026\u0026 echo \"/usr/local/http2-15/lib\" \u003e /etc/ld.so.conf.d/libevent-i386.conf \u0026\u0026 ldconfig; cd /usr/local/src; git clone --depth 1 https://github.com/tatsuhiro-t/nghttp2.git \u0026\u0026 cd /usr/local/src/nghttp2; git submodule update --init \u0026\u0026 autoreconf -i \u0026\u0026 automake \u0026\u0026 autoconf \u0026\u0026 PKG_CONFIG_PATH=/usr/local/http2-15/lib/pkgconfig ./configure --enable-app --enable-asio-lib \u0026\u0026 make -j$(nproc) \u0026\u0026 make install \u0026\u0026 ldconfig \u0026\u0026 make clean; cd /usr/local/src; git clone --depth 1 https://github.com/bagder/curl.git libcurl_static \u0026\u0026 cd /usr/local/src/libcurl_static \u0026\u0026 autoreconf -i \u0026\u0026 automake \u0026\u0026 autoconf \u0026\u0026 ./configure --prefix=/usr/local/http2-15 --with-ssl=/usr/local/http2-15 --with-libssh2 --disable-static --enable-threaded-resolver \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 echo \"/usr/local/http2-15/lib\" \u003e /etc/ld.so.conf.d/curl.conf \u0026\u0026 ldconfig \u0026\u0026 echo \"alias curl=\\\"export LD_LIBRARY_PATH='/usr/local/http2-15/lib';/usr/local/http2-15/bin/curl\\\"\" \u003e\u003e /root/.bashrc \u0026\u0026 . /root/.bashrc ; alias curl='/usr/local/http2-15/bin/curl'; /usr/local/http2-15/bin/curl --version; INSTALL_DIR=/opt; cd $INSTALL_DIR \u0026\u0026 git clone https://github.com/mozilla/cipherscan \u0026\u0026 cd cipherscan \u0026\u0026 chmod 0700 cipherscan \u0026\u0026 ln -s ${INSTALL_DIR}/cipherscan/cipherscan /usr/bin/cipherscan; ln -s ${INSTALL_DIR}/cipherscan/cscan.sh /usr/bin/cscan.sh; ln -s ${INSTALL_DIR}/cipherscan/cscan.py /usr/bin/cscan.py; ln -s ${INSTALL_DIR}/cipherscan/analyze.py /usr/bin/analyze.py; cd $INSTALL_DIR; git clone https://github.com/drwetter/testssl.sh;  ln -s $INSTALL_DIR/testssl.sh/testssl.sh /usr/bin/testssl; popd; export OPENSSL=/usr/local/http2-15/bin/openssl; echo \"export OPENSSL=/usr/local/http2-15/bin/openssl\" \u003e\u003e /root/.bashrc \u0026\u0026 cd /opt; git clone https://github.com/ssllabs/ssllabs-scan.git; wget --no-check-certificate -c https://dl.google.com/go/go1.12.1.linux-amd64.tar.gz \u0026\u0026 tar -C /usr/local -xzf go1.12.1.linux-amd64.tar.gz; echo \"alias cipherscan='cipherscan -o /usr/local/http2-15/bin/openssl'\" \u003e\u003e /root/.bashrc; echo \"alias testssl='testssl --openssl=/usr//bin/openssl'\" \u003e\u003e /root/.bashrc; echo \"alias h2load-cf='h2load --ciphers=ECDHE-ECDSA-AES128-GCM-SHA256'\" \u003e\u003e /root/.bashrc; wget  --no-check-certificate -O /usr/local/bin/curltest https://github.com/centminmod/docker-ubuntu-nghttp2/raw/master/curltest.sh; chmod +x /usr/local/bin/curltest;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "/usr/local/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$GOROOT/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export GOROOT=/usr/local/go; export PATH=$PATH:$GOROOT/bin; echo \"export GOROOT=/usr/local/go\" \u003e\u003e /root/.bashrc; echo \"export PATH=$PATH:$GOROOT/bin\" \u003e\u003e /root/.bashrc; go env; export GOPATH=/go; export PATH=$PATH:$GOPATH/bin; mkdir -p $GOPATH/src/github.com/summerwind; mkdir -p $GOROOT/src/github.com/summerwind; echo \"/go/bin/h2spec --help\"; echo \"/go/bin/h2spec -h localhost -p 8081 -t\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd ~; wget --no-check-certificate https://github.com/summerwind/h2spec/releases/download/v2.2.1/h2spec_linux_amd64.tar.gz; tar xvzf h2spec_linux_amd64.tar.gz; rm -rf h2spec_linux_amd64.tar.gz; cp -a h2spec /usr/bin/h2spec; cd ~; go get github.com/bradfitz/http2/h2i; ln -s /go/bin/h2i /usr/bin/h2i; cd ~; go get github.com/mozilla/tls-observatory/tlsobs; ln -s /go/bin/tlsobs /usr/bin/tlsobs; cd ~; #npm install -g is-http2-cli; ln -s /usr/bin/nodejs /usr/bin/node; ls -lah /usr/local/bin/ | egrep 'nghttp|h2load' \u0026\u0026 echo \"/usr/local/http2-15/bin/openssl version\"; echo \u0026\u0026 echo \"check if your HTTP/2 enabled web host supports ALPN \u0026 NPN TLS extensions\" \u0026\u0026 echo \"if testing a HTTP/2 server on non-standard port other than 443, ensure\" \u0026\u0026 echo \"target HTTP/2 server's firewall has allowed your docker image's host system\" \u0026\u0026 echo \"ip address to connect to that non-standard port e.g. 8081 for h2o server\" \u0026\u0026 echo \u0026\u0026 echo \"/usr/local/http2-15/bin/openssl s_client -alpn h2-14 -host yourhttp2_enabledhostname -port 8081\" \u0026\u0026 echo \"/usr/local/http2-15/bin/openssl s_client -nextprotoneg h2-14 -host yourhttp2_enabledhostname -port 8081\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "curl-http3.sh",
            "/tmp/curl-http3.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "lsquic.sh",
            "/tmp/lsquic.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tmp/curl-http3.sh; /tmp/curl-http3.sh; chmod +x /tmp/lsquic.sh; /tmp/lsquic.sh"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}