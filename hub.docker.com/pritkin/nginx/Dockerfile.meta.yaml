MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Simon Jaeger <simon.jaeger@magierjones.de>"'
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: 1.15.3
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/
    - /
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_flv_module \t\t--with-http_mp4_module
      \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module \t\t--with-http_secure_link_module
      \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic
      \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module
      \t\t--with-stream_realip_module \t\t--with-stream_geoip_module=dynamic \t\t--with-http_slice_module
      \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module \t\" \t&& addgroup
      -S nginx \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx
      \t&& apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake
      \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg
      \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found='';
      \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz
      \t&& rm nginx.tar.gz \t&& cd /usr/src/nginx-$NGINX_VERSION \t&& ./configure
      $CONFIG \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf
      /etc/nginx/html/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install -m644 html/index.html
      /usr/share/nginx/html/ \t&& install -m644 html/50x.html /usr/share/nginx/html/
      \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx*
      \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf /usr/src/nginx-$NGINX_VERSION
      \t\t&& apk add --no-cache --virtual .gettext gettext \t&& mv /usr/bin/envsubst
      /tmp/ \t    && runDeps=\"$(       scanelf --needed --nobanner /usr/sbin/nginx
      /usr/lib/nginx/modules/*.so /tmp/envsubst         | awk '{ gsub(/,/, \"\\nso:\",
      $2); print \"so:\" $2 }'         | sort -u         | xargs -r apk info --installed
      \        | sort -u     )\" \t&& apk add --no-cache --virtual .nginx-rundeps
      $runDeps \t&& apk del .build-deps \t&& apk del .gettext \t&& mv /tmp/envsubst
      /usr/local/bin/ \t\t&& apk add --no-cache tzdata \t\t&& ln -sf /dev/stdout /var/log/nginx/access.log
      \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - Health:
      Interval: 5000000000
      Retries: 2
      Test:
      - CMD-SHELL
      - wget -q -O - localhost/health-check || exit 1
      Timeout: 3000000000
    Name: healthcheck
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
