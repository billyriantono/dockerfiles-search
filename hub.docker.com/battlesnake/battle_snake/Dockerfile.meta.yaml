MetaArgs: null
Stages:
- As: builder
  BaseName: frolvlad/alpine-glibc
  Commands:
  - Env:
    - Key: OTP_VERSION
      Value: '"20.2.2"'
    Name: env
  - CmdLine:
    - set -xe     && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz"     &&
      OTP_DOWNLOAD_SHA256="7614a06964fc5022ea4922603ca4bf1d2cc241f9bd6b7321314f510fd74c7304"     &&
      apk add --no-cache --virtual .fetch-deps curl ca-certificates     && curl -fSL
      -o otp-src.tar.gz "$OTP_DOWNLOAD_URL"     && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz"
      | sha256sum -c -     && apk add --no-cache --virtual .build-deps     dpkg-dev
      dpkg     gcc     g++     libc-dev     linux-headers     make     autoconf     ncurses-dev     openssl-dev     unixodbc-dev     lksctp-tools-dev     tar     &&
      export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}"     && mkdir -vp $ERL_TOP     &&
      tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1     && rm otp-src.tar.gz     &&
      ( cd $ERL_TOP     && ./otp_build autoconf     && gnuArch="$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)"     && ./configure --build="$gnuArch"     && make
      -j$(getconf _NPROCESSORS_ONLN)     && make install )     && rm -rf $ERL_TOP     &&
      find /usr/local -regex '/usr/local/lib/erlang/\(lib/\|erts-\).*/\(man\|doc\|obj\|c_src\|emacs\|info\|examples\)'
      | xargs rm -rf     && find /usr/local -name src | xargs -r find | grep -v '\.hrl$'
      | xargs rm -v || true     && find /usr/local -name src | xargs -r find | xargs
      rmdir -vp || true     && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive
      /usr/local | xargs -r strip --strip-all     && scanelf --nobanner -E ET_DYN
      -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded     && runDeps="$(     scanelf
      --needed --nobanner --format '%n#p' --recursive /usr/local     | tr ',' '\n'     |
      sort -u     | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print
      "so:" $1 }'     )"     && apk add --virtual .erlang-rundeps $runDeps lksctp-tools     &&
      apk del .fetch-deps .build-deps
    Name: run
    PrependShell: true
  - Env:
    - Key: ELIXIR_VERSION
      Value: '"v1.6.0"'
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - set -xe     && ELIXIR_DOWNLOAD_URL="https://github.com/elixir-lang/elixir/releases/download/${ELIXIR_VERSION}/Precompiled.zip"     &&
      ELIXIR_DOWNLOAD_SHA256="f848bc7f88f9c252b3610a9995679889ce18073d0f0a061533c12e622b2ac9e7"     &&
      buildDeps='     ca-certificates     curl     unzip     '     && apk --no-cache  add
      --virtual .build-deps $buildDeps     && curl -fSL -o elixir-precompiled.zip
      $ELIXIR_DOWNLOAD_URL     && echo "$ELIXIR_DOWNLOAD_SHA256  elixir-precompiled.zip"
      | sha256sum -c -     && unzip -d /usr/local elixir-precompiled.zip     && rm
      elixir-precompiled.zip     && apk del .build-deps
    Name: run
    PrependShell: true
  - Env:
    - Key: MIX_ENV
      Value: prod
    - Key: VERBOSE
      Value: "1"
    Name: env
  - Name: workdir
    Path: /app
  - CmdLine:
    - apk update && apk --no-cache add nodejs git yarn gmp-dev gmp
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - .
  - CmdLine:
    - mix do local.hex --force,     local.rebar,     deps.get,     deps.compile,     compile
    Name: run
    PrependShell: true
  - CmdLine:
    - 'yarn install && yarn webpack:production || : && mix phx.digest'
    Name: run
    PrependShell: true
  - CmdLine:
    - mix release --env=prod --verbose
    Name: run
    PrependShell: true
  From:
    Image: frolvlad/alpine-glibc
  Name: builder
  Platform: ""
  SourceCode: FROM frolvlad/alpine-glibc as builder
- BaseName: elixir:1.6.0-alpine
  Commands:
  - Name: workdir
    Path: /root
  - Chown: ""
    From: builder
    Name: copy
    SourcesAndDest:
    - /app/_build/
    - .
  - CmdLine:
    - apk update && apk --no-cache add bash
    Name: run
    PrependShell: true
  - Env:
    - Key: HOST
      Value: localhost
    - Key: MNESIA_HOST
      Value: bs@127.0.0.1
    - Key: MNESIA_STORAGE_TYPE
      Value: ram_copies
    - Key: PORT
      Value: "3000"
    - Key: SECRET_KEY_BASE
      Value: tbFePEIYrMaNfKmTHZZT9IrdebmVbS3FnCTOp/AAWklO9Jxnhua1YlGaMLzYz2yy
    Name: env
  - Name: expose
    Ports:
    - "3000"
  - CmdLine:
    - /root/prod/rel/bs/bin/bs foreground
    Name: cmd
    PrependShell: true
  From:
    Image: elixir:1.6.0-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM elixir:1.6.0-alpine
