{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:buster",
      "SourceCode": "FROM debian:buster",
      "Platform": "",
      "From": {
        "Image": "debian:buster"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Jeroen Beerstra \u003cjeroen@beerstra.org\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.17.5-1~buster"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "php_conf",
              "Value": "/etc/php/7.3/fpm/php.ini"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "fpm_conf",
              "Value": "/etc/php/7.3/fpm/pool.d/www.conf"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_VERSION",
              "Value": "1.9.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "buildDeps='curl gcc make autoconf libc-dev zlib1g-dev pkg-config'     \u0026\u0026 set -x     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install --no-install-recommends $buildDeps --no-install-suggests -q -y gnupg2 dirmngr wget apt-transport-https lsb-release ca-certificates     \u0026\u0026     NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \t  found=''; \t  for server in \t\t  ha.pool.sks-keyservers.net \t\t  hkp://keyserver.ubuntu.com:80 \t\t  hkp://p80.pool.sks-keyservers.net:80 \t\t  pgp.mit.edu \t  ; do \t\t  echo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \t\t  apt-key adv --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \u0026\u0026 found=yes \u0026\u0026 break; \t  done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $NGINX_GPGKEY\" \u0026\u0026 exit 1;     echo \"deb http://nginx.org/packages/mainline/debian/ buster nginx\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg     \u0026\u0026 echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" \u003e /etc/apt/sources.list.d/php.list     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install --no-install-recommends --no-install-suggests -q -y             apt-utils             nano             zip             unzip             python-pip             python-setuptools             git             libmemcached-dev             libmemcached11             libmagickwand-dev             nginx=${NGINX_VERSION}             php7.3-fpm             php7.3-cli             php7.3-bcmath             php7.3-dev             php7.3-common             php7.3-json             php7.3-opcache             php7.3-readline             php7.3-mbstring             php7.3-curl             php7.3-gd             php7.3-mysql             php7.3-zip             php7.3-pgsql             php7.3-intl             php7.3-xml             php-pear     \u0026\u0026 pecl -d php_suffix=7.3 install -o -f redis memcached imagick     \u0026\u0026 mkdir -p /run/php     \u0026\u0026 pip install wheel     \u0026\u0026 pip install supervisor supervisor-stdout     \u0026\u0026 echo \"#!/bin/sh\\nexit 0\" \u003e /usr/sbin/policy-rc.d     \u0026\u0026 rm -rf /etc/nginx/conf.d/default.conf     \u0026\u0026 sed -i -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" ${php_conf}     \u0026\u0026 sed -i -e \"s/memory_limit\\s*=\\s*.*/memory_limit = 256M/g\" ${php_conf}     \u0026\u0026 sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g\" ${php_conf}     \u0026\u0026 sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" ${php_conf}     \u0026\u0026 sed -i -e \"s/variables_order = \\\"GPCS\\\"/variables_order = \\\"EGPCS\\\"/g\" ${php_conf}     \u0026\u0026 sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php/7.3/fpm/php-fpm.conf     \u0026\u0026 sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/pm.max_children = 5/pm.max_children = 4/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/pm.max_requests = 500/pm.max_requests = 200/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/www-data/nginx/g\" ${fpm_conf}     \u0026\u0026 sed -i -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}     \u0026\u0026 echo \"extension=redis.so\" \u003e /etc/php/7.3/mods-available/redis.ini     \u0026\u0026 echo \"extension=memcached.so\" \u003e /etc/php/7.3/mods-available/memcached.ini     \u0026\u0026 echo \"extension=imagick.so\" \u003e /etc/php/7.3/mods-available/imagick.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/redis.ini /etc/php/7.3/fpm/conf.d/20-redis.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/redis.ini /etc/php/7.3/cli/conf.d/20-redis.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/memcached.ini /etc/php/7.3/fpm/conf.d/20-memcached.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/memcached.ini /etc/php/7.3/cli/conf.d/20-memcached.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/imagick.ini /etc/php/7.3/fpm/conf.d/20-imagick.ini     \u0026\u0026 ln -sf /etc/php/7.3/mods-available/imagick.ini /etc/php/7.3/cli/conf.d/20-imagick.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o /tmp/composer-setup.php https://getcomposer.org/installer   \u0026\u0026 curl -o /tmp/composer-setup.sig https://composer.github.io/installer.sig   \u0026\u0026 php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }\"   \u0026\u0026 php /tmp/composer-setup.php --no-ansi --install-dir=/usr/local/bin --filename=composer --version=${COMPOSER_VERSION} \u0026\u0026 rm -rf /tmp/composer-setup.php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /tmp/pear     \u0026\u0026 apt-get purge -y --auto-remove $buildDeps     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./supervisord.conf",
            "/etc/supervisord.conf"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "CmdLine": [
            "mkdir /app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "app",
            "/app"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./start.sh",
            "/start.sh"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "CmdLine": [
            "/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}