MetaArgs: null
Stages:
- BaseName: ubuntu:xenial-20190515
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/files/neurodebian.gpg
    - /usr/local/etc/neurodebian.gpg
  - CmdLine:
    - rm /bin/sh && ln -s /bin/bash /bin/sh
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"C.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - "apt-get update -qq && apt-get install -yq --no-install-recommends      \tapt-utils
      bzip2 ca-certificates curl locales unzip     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && localedef --force --inputfile=en_US
      --charmap=UTF-8 C.UTF-8     && chmod 777 /opt && chmod a+s /opt     && mkdir
      -p /neurodocker     && if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env
      bash' >> $ND_ENTRYPOINT          && echo 'set +x' >> $ND_ENTRYPOINT          &&
      echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT;
      \       fi     && chmod -R 777 /neurodocker && chmod a+s /neurodocker"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends git                                                      gcc                                                      pigz                                                      wget                                                      curl                                                      lsb-core     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: NVM_DIR
      Value: /usr/local/nvm
    Name: env
  - Env:
    - Key: NODE_VERSION
      Value: 10.16.3
    Name: env
  - CmdLine:
    - curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh
      | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - source $NVM_DIR/nvm.sh     && nvm install $NODE_VERSION     && nvm alias default
      $NODE_VERSION     && nvm use default
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_PATH
      Value: $NVM_DIR/v$NODE_VERSION/lib/node_modules
    Name: env
  - Env:
    - Key: PATH
      Value: $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH
    Name: env
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - deps='cmake g++ gcc git make pigz zlib1g-dev'     && apt-get update -qq && apt-get
      install -yq --no-install-recommends $deps     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && mkdir dcm2niix     && curl -sSL
      https://github.com/rordenlab/dcm2niix/tarball/v1.0.20190410 | tar xz -C dcm2niix
      --strip-components 1     && mkdir dcm2niix/build && cd dcm2niix/build     &&
      cmake .. && make     && make install     && rm -rf /tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "Downloading Miniconda installer ..."     && miniconda_installer=/tmp/miniconda.sh     &&
      curl -sSL --retry 5 -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      /bin/bash $miniconda_installer -b -p $CONDA_DIR     && rm -f $miniconda_installer     &&
      conda config --system --prepend channels conda-forge     && conda config --system
      --set auto_update_conda false     && conda config --system --set show_channel_urls
      true     && conda clean -tipsy && sync
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL "http://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ).us-ca.full"
      >> /etc/apt/sources.list.d/neurodebian.sources.list &&     apt-key add /usr/local/etc/neurodebian.gpg
      &&     (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net
      0xA5D32F012649A5A9 || true)
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz
      | tar zxv --no-same-owner -C /opt         --exclude='freesurfer/diffusion'         --exclude='freesurfer/docs'         --exclude='freesurfer/fsfast'         --exclude='freesurfer/lib/cuda'         --exclude='freesurfer/lib/qt'         --exclude='freesurfer/matlab'         --exclude='freesurfer/mni/share/man'         --exclude='freesurfer/subjects/fsaverage_sym'         --exclude='freesurfer/subjects/fsaverage3'         --exclude='freesurfer/subjects/fsaverage4'         --exclude='freesurfer/subjects/cvs_avg35'         --exclude='freesurfer/subjects/cvs_avg35_inMNI152'         --exclude='freesurfer/subjects/bert'         --exclude='freesurfer/subjects/lh.EC_average'         --exclude='freesurfer/subjects/rh.EC_average'         --exclude='freesurfer/subjects/sample-*.mgz'         --exclude='freesurfer/subjects/V1_average'         --exclude='freesurfer/trctrain'
    Name: run
    PrependShell: true
  - Env:
    - Key: FSL_DIR
      Value: '"/usr/share/fsl/5.0"'
    - Key: OS
      Value: '"Linux"'
    - Key: FS_OVERRIDE
      Value: "0"
    - Key: FIX_VERTEX_AREA
      Value: '""'
    - Key: FSF_OUTPUT_FORMAT
      Value: '"nii.gz"'
    - Key: FREESURFER_HOME
      Value: '"/opt/freesurfer"'
    Name: env
  - Env:
    - Key: SUBJECTS_DIR
      Value: '"$FREESURFER_HOME/subjects"'
    - Key: FUNCTIONALS_DIR
      Value: '"$FREESURFER_HOME/sessions"'
    - Key: MNI_DIR
      Value: '"$FREESURFER_HOME/mni"'
    - Key: LOCAL_DIR
      Value: '"$FREESURFER_HOME/local"'
    - Key: MINC_BIN_DIR
      Value: '"$FREESURFER_HOME/mni/bin"'
    - Key: MINC_LIB_DIR
      Value: '"$FREESURFER_HOME/mni/lib"'
    - Key: MNI_DATAPATH
      Value: '"$FREESURFER_HOME/mni/data"'
    Name: env
  - Env:
    - Key: PERL5LIB
      Value: '"$MINC_LIB_DIR/perl5/5.8.5"'
    - Key: MNI_PERL5LIB
      Value: '"$MINC_LIB_DIR/perl5/5.8.5"'
    - Key: PATH
      Value: '"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends                     fsl-core=5.0.9-5~nd16.04+1                     fsl-mni152-templates=5.0.7-2                     afni=16.2.07~dfsg.1-5~nd16.04+1                     convert3d                     git-annex-standalone
      &&     apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: FSLDIR
      Value: '"/usr/share/fsl/5.0"'
    - Key: FSLOUTPUTTYPE
      Value: '"NIFTI_GZ"'
    - Key: FSLMULTIFILEQUIT
      Value: '"TRUE"'
    - Key: POSSUMDIR
      Value: '"/usr/share/fsl/5.0"'
    - Key: LD_LIBRARY_PATH
      Value: '"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH"'
    - Key: FSLTCLSH
      Value: '"/usr/bin/tclsh"'
    - Key: FSLWISH
      Value: '"/usr/bin/wish"'
    - Key: AFNI_MODELPATH
      Value: '"/usr/lib/afni/models"'
    - Key: AFNI_IMSAVE_WARNINGS
      Value: '"NO"'
    - Key: AFNI_TTATLAS_DATASET
      Value: '"/usr/share/afni/atlases"'
    - Key: AFNI_PLUGINPATH
      Value: '"/usr/lib/afni/plugins"'
    Name: env
  - Env:
    - Key: PATH
      Value: '"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH"'
    Name: env
  - Env:
    - Key: ANTSPATH
      Value: /usr/lib/ants
    Name: env
  - CmdLine:
    - mkdir -p $ANTSPATH &&     curl -sSL "https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz"     |
      tar -xzC $ANTSPATH --strip-components 1
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $ANTSPATH:$PATH
    Name: env
  - CmdLine:
    - conda create -y -q --name neuro python=3                                     traits=4.6.0     &&
      sync && conda clean -tipsy && sync     && /bin/bash -c "source activate neuro       &&
      pip install git+git://github.com/FIU-Neuro/dcmstack       && pip install numpy
      pandas pybids==0.9.4 nibabel pydicom python-dateutil niworkflows nipype==1.3.1       &&
      pip install git+git://github.com/nipy/heudiconv@202f9434819318055e5293486f6bdac489989c52       &&
      pip install git+git://github.com/adamkimbler/funcworks"     && sync     && sed
      -i '$isource activate neuro' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g bids-validator@1.3.0
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends dirmngr gnupg     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && curl
      -sSL http://neuro.debian.net/lists/stretch.us-nh.full     > /etc/apt/sources.list.d/neurodebian.sources.list     &&
      curl -sSL https://dl.dropbox.com/s/zxs209o955q6vkg/neurodebian.gpg     | apt-key
      add -     && (apt-key adv --refresh-keys --keyserver hkp://pool.sks-keyservers.net:80
      0xA5D32F012649A5A9 || true)     && apt-get update
    Name: run
    PrependShell: true
  - Env:
    - Key: DEFACE_DIR
      Value: /src/deface
    Name: env
  - CmdLine:
    - mkdir -p ${DEFACE_DIR}
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -N -qO- -O ${DEFACE_DIR}/mri_deface.gz   ftp://surfer.nmr.mgh.harvard.edu/pub/dist/mri_deface/mri_deface-v1.22-Linux64.gz
      &&   gunzip ${DEFACE_DIR}/mri_deface.gz &&   chmod +x ${DEFACE_DIR}/mri_deface
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -N -qO- -O ${DEFACE_DIR}/face.gca.gz   ftp://surfer.nmr.mgh.harvard.edu/pub/dist/mri_deface/face.gca.gz
      &&   gunzip ${DEFACE_DIR}/face.gca.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -N -qO- -O ${DEFACE_DIR}/talairach_mixed_with_skull.gca.gz   ftp://surfer.nmr.mgh.harvard.edu/pub/dist/mri_deface/talairach_mixed_with_skull.gca.gz
      &&   gunzip ${DEFACE_DIR}/talairach_mixed_with_skull.gca.gz
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:${DEFACE_DIR}
    Name: env
  - CmdLine:
    - useradd --no-user-group --create-home --shell /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Name: workdir
    Path: /home/neuro
  - Env:
    - Key: SINGULARITY_CACHEDIR
      Value: /scratch
    Name: env
  - Env:
    - Key: SINGULARITY_TMPDIR
      Value: /scratch
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./
    - /scripts/
  - Name: user
    User: root
  - CmdLine:
    - chmod 755 -R /scripts/
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - CmdLine:
    - /neurodocker/startup.sh
    - funcworks
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:xenial-20190515
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:xenial-20190515
