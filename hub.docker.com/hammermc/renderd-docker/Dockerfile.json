{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "buildstage",
      "BaseName": "postgres:10",
      "SourceCode": "FROM postgres:10 as buildstage",
      "Platform": "",
      "As": "buildstage",
      "From": {
        "Image": "postgres:10"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "BUMP",
              "Value": "2019011101"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026     apt -y install         apache2-dev         autoconf         build-essential         curl         gdal-bin         git         libboost-all-dev         libbz2-dev         libcairo2-dev         libcairomm-1.0-dev         libfreetype6-dev         libgdal-dev         libharfbuzz-dev         libicu-dev         libjpeg-dev         libltdl-dev         libpng-dev         libpq-dev         libproj-dev         libsqlite3-dev         libtiff5-dev         libwebp-dev         libxml2-dev         pktools         pktools-dev         postgresql-10-pgrouting         postgresql-10-pgrouting-scripts         postgresql-10-postgis         postgresql-10-postgis-scripts         postgresql-contrib         postgresql-server-dev-10         python-cairo-dev         python-dev         python-gdal         python-nose         python-pip         python3-pip         ttf-dejavu         ttf-dejavu-core         ttf-dejavu-extra         ttf-unifont"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install osmium"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install osmium"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MAPNIK_VERSION",
              "Value": "v3.0.22"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone --depth 1 --branch $MAPNIK_VERSION --single-branch http://github.com/mapnik/mapnik"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /mapnik \u0026\u0026     git submodule update --init"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /mapnik \u0026\u0026     ./configure \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_8.x | bash - \u0026\u0026     apt update \u0026\u0026     apt install -y nodejs \u0026\u0026     npm --unsafe-perm -g install millstone carto mapnik"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/openstreetmap/mod_tile/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd mod_tile \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     make install-mod_tile \u0026\u0026     ldconfig \u0026\u0026     cp debian/tileserver_site.conf /usr/local/etc \u0026\u0026     cp debian/tile.load /usr/local/etc \u0026\u0026     cp /usr/lib/apache2/modules/mod_tile.so /usr/local/lib/mod_tile.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/share/ \u0026\u0026     cd /usr/local/share \u0026\u0026     git clone --depth 1 http://github.com/mapbox/osm-bright.git \u0026\u0026     git clone --depth 1 https://github.com/gravitystorm/openstreetmap-carto.git"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "runstage",
      "BaseName": "postgres:10",
      "SourceCode": "FROM postgres:10 as runstage",
      "Platform": "",
      "As": "runstage",
      "From": {
        "Image": "postgres:10"
      },
      "Commands": [
        {
          "Chown": "",
          "From": "buildstage",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/",
            "/usr/local/"
          ]
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026     apt -y install         apache2         curl         fonts-dejavu-core         fonts-hanazono         fonts-noto-cjk         fonts-noto-hinted         fonts-noto-unhinted         gosu         netcat-traditional         libboost-python1.62.0         libboost-regex1.62.0         osm2pgsql         osmosis         postgresql-10-pgrouting         postgresql-10-pgrouting-scripts         postgresql-10-postgis         postgresql-10-postgis-scripts         postgresql-contrib         ttf-dejavu         ttf-dejavu-core         ttf-dejavu-extra         ttf-unifont \u0026\u0026     apt clean \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_8.x | bash - \u0026\u0026     apt update \u0026\u0026     apt install -y nodejs \u0026\u0026     npm --unsafe-perm -g install carto mapnik \u0026\u0026     apt clean \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /usr/local/lib/mod_tile.so /usr/lib/apache2/modules/mod_tile.so \u0026\u0026     mv /usr/local/etc/tile.load /etc/apache2/mods-available \u0026\u0026     cd /etc/apache2/mods-enabled \u0026\u0026     ln -sf ../mods-available/tile.load \u0026\u0026     mv /usr/local/etc/tileserver_site.conf /etc/apache2/sites-available \u0026\u0026     cd /etc/apache2/sites-enabled \u0026\u0026     rm * \u0026\u0026     ln -s ../sites-available/tileserver_site.conf \u0026\u0026     useradd -ms /bin/bash osm \u0026\u0026     ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "renderd-docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "osm-config.sh",
            "/usr/local/etc/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "7653"
          ]
        },
        {
          "CmdLine": [
            "renderd-docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}