MetaArgs: null
Stages:
- BaseName: debian:stretch
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"C.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - "apt-get update -qq && apt-get install -yq --no-install-recommends      \tapt-utils
      bzip2 ca-certificates curl locales unzip     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && localedef --force --inputfile=en_US
      --charmap=UTF-8 C.UTF-8     && chmod 777 /opt && chmod a+s /opt     && mkdir
      -p /neurodocker     && if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env
      bash' >> $ND_ENTRYPOINT          && echo 'set +x' >> $ND_ENTRYPOINT          &&
      echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT;
      \       fi     && chmod -R 777 /neurodocker && chmod a+s /neurodocker"
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends git                                                      vim                                                      graphviz                                                      nano                                                      bc                                                      bzip2
      parallel sudo    && apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/*
      /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd --no-user-group --create-home --shell /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "Downloading Miniconda installer ..."     && miniconda_installer=/tmp/miniconda.sh     &&
      curl -sSL -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      /bin/bash $miniconda_installer -b -p $CONDA_DIR     && rm -f $miniconda_installer     &&
      conda config --system --prepend channels conda-forge     && conda config --system
      --set auto_update_conda false     && conda config --system --set show_channel_urls
      true     && conda update -y -q --all && sync     && conda clean -tipsy && sync
    Name: run
    PrependShell: true
  - CmdLine:
    - conda create -y -q --name default numpy                                       pandas                                       traits     &&
      sync && conda clean -tipsy && sync     && /bin/bash -c "source activate default       &&
      pip install -q --no-cache-dir ipython                                        nipype                                        h5py"     &&
      sync
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/envs/default/bin:$PATH
    Name: env
  - Name: user
    User: root
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends libgl1-mesa-dev
      libice6 libsm6 libx11-6 libxext6 libxi6 libxmu6 libgomp1 libjpeg62     && apt-get
      clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && echo " Downloading
      MINC, BEASTLIB, and MODELS..."     && curl -sSL --retry 5 https://dl.dropbox.com/s/40hjzizaqi91373/minc-toolkit-1.9.15-20170529-CentOS_6.9-x86_64.tar.gz     |
      tar zx -C /opt     && curl -sSL --retry 5 http://packages.bic.mni.mcgill.ca/tgz/beast-library-1.1.tar.gz     |
      tar zx -C /opt/minc/share     && curl -sSL --retry 5 -o /tmp/mni_90a.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09a_minc2.zip     &&
      unzip /tmp/mni_90a.zip -d /opt/minc/share/icbm152_model_09a     && curl -sSL
      --retry 5 -o /tmp/mni_90c.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09c_minc2.zip     &&
      unzip /tmp/mni_90c.zip -d /opt/minc/share/icbm152_model_09c     && rm -r /tmp/mni_90*      &&
      sed -i '$isource /opt/minc/minc-toolkit-config.sh' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "Downloading ANTs ..."     && curl -sSL --retry 5 https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz     |
      tar zx -C /opt
    Name: run
    PrependShell: true
  - Env:
    - Key: ANTSPATH
      Value: /opt/ants
    - Key: PATH
      Value: /opt/ants:$PATH
    Name: env
  - CmdLine:
    - echo "Downloading PETPVC..."     && mkdir /opt/petpvc     && curl --retry 5
      -sSL https://github.com/UCL/PETPVC/releases/download/v1.2.0-b/PETPVC-1.2.0-b-Linux.tar.gz|
      tar zx --strip-components=1 -C /opt/petpvc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/petpvc/bin:$PATH
    Name: env
  - Name: user
    User: neuro
  - Env:
    - Key: KEY_A
      Value: '"VAL_A"'
    - Key: KEY_B
      Value: '"VAL_B"'
    Name: env
  - Env:
    - Key: KEY_C
      Value: '"based on $KEY_A"'
    Name: env
  - CmdLine:
    - 'echo ''{     \n  "pkg_manager": "apt",     \n  "check_urls": false,     \n  "instructions":
      [     \n    [     \n      "base",     \n      "debian:stretch"     \n    ],     \n    [     \n      "install",     \n      [     \n        "git",     \n        "vim",     \n        "graphviz",     \n        "nano",     \n        "bc",     \n        "bzip2"     \n      ]     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "env_name":
      "default",     \n        "conda_install": "numpy pandas traits",     \n        "pip_install":
      "ipython nipype h5py",     \n        "add_to_path": true     \n      }     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "minc",     \n      {     \n        "version":
      "1.9.15"     \n      }     \n    ],     \n    [     \n      "ants",     \n      {     \n        "version":
      "2.2.0"     \n      }     \n    ],     \n    [     \n      "petpvc",     \n      {     \n        "version":
      "1.2.0-b"     \n      }     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "env",     \n      {     \n        "KEY_A":
      "VAL_A",     \n        "KEY_B": "VAL_B"     \n      }     \n    ],     \n    [     \n      "env",     \n      {     \n        "KEY_C":
      "based on $KEY_A"     \n      }     \n    ]     \n  ],     \n  "generation_timestamp":
      "2017-09-18 16:37:53",     \n  "neurodocker_version": "0.3.0"     \n}'' > /neurodocker/neurodocker_specs.json'
    Name: run
    PrependShell: true
  From:
    Image: debian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch
