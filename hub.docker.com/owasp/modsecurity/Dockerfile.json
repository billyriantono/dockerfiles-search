{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "build",
      "BaseName": "nginx:1",
      "SourceCode": "FROM nginx:1 as build",
      "Platform": "",
      "As": "build",
      "From": {
        "Image": "nginx:1"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "version",
              "Value": "\"3.0.3\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Chaim Sanders \u003cchaim.sanders@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y       automake       cmake       doxygen       g++       git       libcurl4-gnutls-dev       libgeoip-dev       liblua5.3-dev       libpcre++-dev       libtool       libxml2-dev       make       ruby       wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/LMDB/lmdb --branch LMDB_0.9.23 --depth 1  \u0026\u0026 cd lmdb/libraries/liblmdb  \u0026\u0026 make  \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/lloyd/yajl --branch 2.1.0 --depth 1  \u0026\u0026 cd yajl  \u0026\u0026 ./configure  \u0026\u0026 make  \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://github.com/ssdeep-project/ssdeep/releases/download/release-2.14.1/ssdeep-2.14.1.tar.gz  \u0026\u0026 tar -xvzf ssdeep-2.14.1.tar.gz  \u0026\u0026 cd ssdeep-2.14.1  \u0026\u0026 ./configure  \u0026\u0026 make  \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/SpiderLabs/ModSecurity --branch v3.0.3 --depth 1  \u0026\u0026 cd ModSecurity  \u0026\u0026 ./build.sh  \u0026\u0026 git submodule init  \u0026\u0026 git submodule update  \u0026\u0026 ./configure  \u0026\u0026 make  \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/share/TLS"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "openssl.conf",
            "/usr/share/TLS"
          ]
        },
        {
          "CmdLine": [
            "openssl req -x509 -days 365 -new       -config /usr/share/TLS/openssl.conf       -keyout /usr/share/TLS/server.key       -out /usr/share/TLS/server.crt"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "nginx:1",
      "SourceCode": "FROM nginx:1",
      "Platform": "",
      "From": {
        "Image": "nginx:1"
      },
      "Commands": [
        {
          "Key": "SERVERNAME",
          "Name": "arg",
          "Value": "localhost"
        },
        {
          "Key": "SETPROXY",
          "Name": "arg",
          "Value": "False"
        },
        {
          "Key": "SETTLS",
          "Name": "arg",
          "Value": "False"
        },
        {
          "Key": "PROXYLOCATION",
          "Name": "arg",
          "Value": "www.example.com"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y       gcc       git       libcurl4-gnutls-dev       liblua5.3-dev       libpcre++-dev       libxml2-dev       make       wget       zlib1g-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/SpiderLabs/ModSecurity-nginx --branch v1.0.1 --depth 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/nginx/ssl/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/modsecurity/",
            "/usr/local/modsecurity/"
          ]
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/lib/",
            "/usr/local/lib/"
          ]
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/share/TLS/server.key",
            "/etc/nginx/conf/server.key"
          ]
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/share/TLS/server.crt",
            "/etc/nginx/conf/server.crt"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./tls.conf",
            "/etc/nginx/conf.d/tls.conf.disabled"
          ]
        },
        {
          "CmdLine": [
            "export version=$(echo `/usr/sbin/nginx -v 2\u003e\u00261` | cut -d '/' -f 2) \u0026\u0026     wget --quiet http://nginx.org/download/nginx-$version.tar.gz \u0026\u0026     tar -xvzf nginx-$version.tar.gz \u0026\u0026     cd /nginx-$version \u0026\u0026     ./configure --with-compat --add-dynamic-module=../ModSecurity-nginx \u0026\u0026     make modules \u0026\u0026     cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/modsecurity.d \u0026\u0026     cd /etc/modsecurity.d \u0026\u0026     echo \"include \\\"/etc/modsecurity.d/modsecurity.conf\\\"\" \u003e include.conf \u0026\u0026     wget --quiet https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended \u0026\u0026     mv modsecurity.conf-recommended modsecurity.conf \u0026\u0026     wget --quiet https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i '1iload_module modules/ngx_http_modsecurity_module.so;' /etc/nginx/nginx.conf \u0026\u0026     sed -i -e 's/http {/http {\\n    modsecurity on;\\n    modsecurity_rules_file \\/etc\\/modsecurity.d\\/include.conf;\\n/g' /etc/nginx/nginx.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/lib:/usr/lib:/usr/local/lib"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get install -y vim"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo $SERVERNAME"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i -E \"s/server_name .*;/server_name $SERVERNAME;/g\" /etc/nginx/conf.d/default.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"$SETTLS\" = \"True\" ]; then       echo \"setting TLS\";       mv /etc/nginx/conf.d/tls.conf.disabled /etc/nginx/conf.d/tls.conf;       sed -i -E 's/server_name .*;/server_name $SERVERNAME;/g' /etc/nginx/conf.d/tls.conf;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ \"$SETPROXY\" = \"True\" ]; then       echo \"setting Proxy\";       sed -i -e \"s/location \\/ {/resolver 8.8.8.8 valid=5s;\\n    set \\$upstream $PROXYLOCATION;\\n    location \\/ {\\n        proxy_set_header Host \\$upstream;\\n        proxy_set_header X-Forwarded-Proto \\$scheme;\\n        proxy_pass_header Authorization;\\n        proxy_pass http:\\/\\/\\$upstream;\\n        proxy_set_header X-Real-IP \\$remote_addr;\\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\\n        proxy_http_version 1.1;\\n        proxy_set_header Connection \\\"\\\";\\n        proxy_buffering off;\\n        client_max_body_size 0;\\n        proxy_read_timeout 36000s;\\n        proxy_redirect off;       \t/g\" /etc/nginx/conf.d/default.conf;         if [ \"$SETTLS\" = \"True\" ]; then           sed -i -e \"s/location \\/ {/resolver 8.8.8.8 valid=5s;\\n    set \\$upstream $PROXYLOCATION;\\n    location \\/ {\\n            proxy_set_header Host \\$upstream;\\n            proxy_set_header X-Forwarded-Proto \\$scheme;\\n            proxy_pass_header Authorization;\\n            proxy_pass https:\\/\\/\\$upstream;\\n            proxy_set_header X-Real-IP \\$remote_addr;\\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\\n            proxy_http_version 1.1;\\n            proxy_set_header Connection \\\"\\\";\\n            proxy_buffering off;\\n            client_max_body_size 0;\\n            proxy_read_timeout 36000s;\\n            proxy_redirect off;           \t/g\" /etc/nginx/conf.d/tls.conf;         fi   fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}