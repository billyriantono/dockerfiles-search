{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "Anurag Goel \u003cdeeprig@anur.ag\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "PYTHON_VERSION",
          "Name": "arg",
          "Value": "2.7"
        },
        {
          "Key": "CONDA_PYTHON_VERSION",
          "Name": "arg",
          "Value": "2"
        },
        {
          "Key": "CONDA_VERSION",
          "Name": "arg",
          "Value": "4.2.12"
        },
        {
          "Key": "CONDA_DIR",
          "Name": "arg",
          "Value": "/opt/conda"
        },
        {
          "Key": "TINI_VERSION",
          "Name": "arg",
          "Value": "v0.13.2"
        },
        {
          "Key": "USERNAME",
          "Name": "arg",
          "Value": "docker"
        },
        {
          "Key": "USERID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026   apt-get install -y --no-install-recommends git wget ffmpeg unzip sudo \u0026\u0026   apt-get clean \u0026\u0026   rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends ca-certificates \u0026\u0026   wget --quiet https://repo.continuum.io/miniconda/Miniconda$CONDA_PYTHON_VERSION-$CONDA_VERSION-Linux-x86_64.sh -O /tmp/miniconda.sh \u0026\u0026   echo 'export PATH=$CONDA_DIR/bin:$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026   /bin/bash /tmp/miniconda.sh -b -p $CONDA_DIR \u0026\u0026   rm -rf /tmp/* \u0026\u0026   apt-get clean \u0026\u0026   rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini",
            "/tini"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd --create-home -s /bin/bash --no-user-group -u $USERID $USERNAME \u0026\u0026   chown $USERNAME $CONDA_DIR -R \u0026\u0026   adduser $USERNAME sudo \u0026\u0026   echo \"$USERNAME ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$USERNAME"
        },
        {
          "Name": "workdir",
          "Path": "/home/$USERNAME"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".theanorc",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "keras.json",
            ".keras/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            ".jupyter/"
          ]
        },
        {
          "CmdLine": [
            "conda install -y --quiet python=$PYTHON_VERSION \u0026\u0026   conda install -y --quiet notebook h5py Pillow ipywidgets scikit-learn   matplotlib pandas bcolz sympy scikit-image mkl-service \u0026\u0026   pip install --upgrade pip \u0026\u0026   pip install tensorflow-gpu kaggle-cli \u0026\u0026   pip install git+git://github.com/fchollet/keras.git@1.1.2 \u0026\u0026   conda clean -tipsy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CUDA_HOME",
              "Value": "/usr/local/cuda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDA_ROOT",
              "Value": "$CUDA_HOME"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$CUDA_ROOT/bin:$HOME/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$CUDA_ROOT/lib64"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "git clone -q https://github.com/fastai/courses.git fastai-courses"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/$USERNAME/fastai-courses/deeplearning1/nbs"
        },
        {
          "CmdLine": [
            "/tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "jupyter notebook --ip=0.0.0.0 --port=8888"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}