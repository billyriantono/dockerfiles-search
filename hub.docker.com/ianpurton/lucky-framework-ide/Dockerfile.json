{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "crystallang/crystal:0.27.0",
      "SourceCode": "FROM crystallang/crystal:0.27.0",
      "Platform": "",
      "From": {
        "Image": "crystallang/crystal:0.27.0"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026   apt-get install -y libgconf-2-4 build-essential curl libreadline-dev libevent-dev libssl-dev libxml2-dev libyaml-dev libgmp-dev git  \u0026\u0026   apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "builddir",
              "Value": "/build"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $builddir \u0026\u0026 cd $builddir   \u0026\u0026 apt-get update -qq   \u0026\u0026 apt-get install -y curl   \u0026\u0026 curl https://cli-assets.heroku.com/install.sh | sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_11.x | bash -  \u0026\u0026 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -  \u0026\u0026 echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list  \u0026\u0026 apt-get update -y   \u0026\u0026 apt-get install -y nodejs yarn wget zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/luckyframework/lucky_cli $builddir/lucky_cli   \u0026\u0026 cd $builddir/lucky_cli   \u0026\u0026 git checkout v0.13.2   \u0026\u0026 shards install   \u0026\u0026 crystal build src/lucky.cr --release --no-debug   \u0026\u0026 mv lucky /usr/local/bin/lucky   \u0026\u0026 cd / \u0026\u0026 rm -rf $builddir"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /chrome.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg -i /chrome.deb || apt-get install -yf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm /chrome.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip -o /usr/local/bin/chromedriver.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "unzip /usr/local/bin/chromedriver.zip -d /usr/local/bin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/chromedriver"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm /usr/local/bin/chromedriver.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install --no-install-recommends -y     bsdtar     openssl     locales     net-tools     sudo     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.utf8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CODE_VERSION",
              "Value": "\"1.792-vsc1.33.1\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -sL https://github.com/codercom/code-server/releases/download/${CODE_VERSION}/code-server${CODE_VERSION}-linux-x64.tar.gz | tar --strip-components=1 -zx -C /usr/local/bin code-server${CODE_VERSION}-linux-x64/code-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026 apt-get install -y --no-install-recommends postgresql postgresql-client"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -r coder     \u0026\u0026 useradd -m -r coder -g coder -s /bin/bash     \u0026\u0026 echo \"coder ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "coder"
        },
        {
          "CmdLine": [
            "mkdir -p /home/coder/project"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/coder/project"
        },
        {
          "CmdLine": [
            "code-server"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}