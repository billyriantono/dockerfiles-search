MetaArgs: null
Stages:
- BaseName: ubuntu:16.10
  Commands:
  - Maintainer: gyao
    Name: maintainer
  - Env:
    - Key: SPARK_PROFILE
      Value: "2.1"
    Name: env
  - Env:
    - Key: SPARK_VERSION
      Value: 2.1.1
    Name: env
  - Env:
    - Key: HADOOP_PROFILE
      Value: "2.7"
    Name: env
  - Env:
    - Key: HADOOP_VERSION
      Value: 2.7.0
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LOG_TAG
      Value: '"[GYAO_DS_BOX]:"'
    Name: env
  - CmdLine:
    - echo "$LOG_TAG update and install basic packages"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y locales
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen $LANG
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - apt -y autoclean
    Name: run
    PrependShell: true
  - CmdLine:
    - apt -y dist-upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y build-essential rsync curl grep sed dpkg openssh-server openssh-client
      vim nfs-common
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG install tini related packages"     && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest
      | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'`     && curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb"
      > tini.deb     && dpkg -i tini.deb     && rm tini.deb
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-oracle
    Name: env
  - CmdLine:
    - echo "$LOG_TAG Install java8"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true
      | debconf-set-selections
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository -y ppa:webupd8team/java
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y oracle-java8-installer
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/cache/oracle-jdk8-installer
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /data/hdfs-nfs/
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /opt
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - CmdLine:
    - curl -L -s https://archive.apache.org/dist/hadoop/core/hadoop-$HADOOP_VERSION/hadoop-$HADOOP_VERSION.tar.gz
      -s -o - | tar -xzf -
    Name: run
    PrependShell: true
  - CmdLine:
    - mv hadoop-$HADOOP_VERSION hadoop
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/hadoop
  - Env:
    - Key: PATH
      Value: /opt/hadoop/bin:/opt/hadoop/sbin:$PATH
    Name: env
  - CmdLine:
    - sed --in-place='.ori' -e "s/\${JAVA_HOME}/\/usr\/lib\/jvm\/java-8-oracle/" etc/hadoop/hadoop-env.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ssh-keygen -q -N "" -t rsa -f /root/.ssh/id_rsa
    Name: run
    PrependShell: true
  - CmdLine:
    - cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 0600 /root/.ssh/authorized_keys
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "\nHost *\n" >> /root/.ssh/config &&     echo "   StrictHostKeyChecking
      no\n" >> /root/.ssh/config &&     echo "   UserKnownHostsFile=/dev/null\n" >>
      /root/.ssh/config
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "root:root" | chpasswd
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - CmdLine:
    - sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g'
      -i /etc/pam.d/sshd
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/hadoop/core-site.xml
    - etc/hadoop/core-site.xml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/hadoop/hdfs-site.xml
    - etc/hadoop/hdfs-site.xml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/hadoop/mapred-site.xml
    - etc/hadoop/mapred-site.xml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/hadoop/yarn-site.xml
    - etc/hadoop/yarn-site.xml
  - CmdLine:
    - hdfs namenode -format
    Name: run
    PrependShell: true
  - Env:
    - Key: HADOOP_PREFIX
      Value: /opt/hadoop
    Name: env
  - Env:
    - Key: HADOOP_COMMON_HOME
      Value: /opt/hadoop
    Name: env
  - Env:
    - Key: HADOOP_HDFS_HOME
      Value: /opt/hadoop
    Name: env
  - Env:
    - Key: HADOOP_MAPRED_HOME
      Value: /opt/hadoop
    Name: env
  - Env:
    - Key: HADOOP_YARN_HOME
      Value: /opt/hadoop
    Name: env
  - Env:
    - Key: HADOOP_CONF_DIR
      Value: /opt/hadoop/etc/hadoop
    Name: env
  - CmdLine:
    - curl -s http://archive.apache.org/dist/spark/spark-$SPARK_VERSION/spark-$SPARK_VERSION-bin-hadoop$HADOOP_PROFILE.tgz
      | tar -xz -C /opt/
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /opt && ln -s spark-$SPARK_VERSION-bin-hadoop$HADOOP_PROFILE spark
    Name: run
    PrependShell: true
  - Env:
    - Key: SPARK_HOME
      Value: /opt/spark
    Name: env
  - Env:
    - Key: YARN_CONF_DIR
      Value: $HADOOP_PREFIX/etc/hadoop
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:$SPARK_HOME/bin:$HADOOP_PREFIX/bin
    Name: env
  - CmdLine:
    - echo "$LOG_TAG Install miniconda2 related packages" &&     apt-get -y update
      &&     apt-get install -y bzip2 ca-certificates     libglib2.0-0 libxext6 libsm6
      libxrender1     git mercurial subversion &&     echo 'export PATH=/opt/conda/bin:$PATH'
      > /etc/profile.d/conda.sh &&     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.11-Linux-x86_64.sh
      -O ~/miniconda.sh &&     /bin/bash ~/miniconda.sh -b -p /opt/conda &&     rm
      ~/miniconda.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "$LOG_TAG Install python related packages" &&     apt-get -y update &&     apt-get
      install -y python-dev python-pip &&     apt-get install -y gfortran &&     apt-get
      install -y libblas-dev libatlas-dev liblapack-dev &&     apt-get install -y
      libpng-dev libfreetype6-dev libxft-dev &&     apt-get install -y python-tk libxml2-dev
      libxslt-dev zlib1g-dev &&     pip install numpy &&     pip install matplotlib
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$LOG_TAG Install R related packages" &&     echo "deb http://cran.rstudio.com/bin/linux/ubuntu
      yakkety/" | tee -a /etc/apt/sources.list &&     gpg --keyserver keyserver.ubuntu.com
      --recv-key E084DAB9 &&     gpg -a --export E084DAB9 | apt-key add - &&     apt-get
      -y update &&     apt-get -y install r-base r-base-dev &&     R -e "install.packages('dpylr',
      repos='http://cran.us.r-project.org')" &&     R -e "install.packages('knitr',
      repos='http://cran.us.r-project.org')" &&     R -e "install.packages('ggplot2',
      repos='http://cran.us.r-project.org')" &&     R -e "install.packages('googleVis',
      repos='http://cran.us.r-project.org')" &&     R -e "install.packages('data.table',
      repos='http://cran.us.r-project.org')" &&     apt-get -y install libcurl4-gnutls-dev
      libssl-dev &&     R -e "install.packages('devtools', repos='http://cran.us.r-project.org')"
      &&     R -e "install.packages('Rcpp', repos='http://cran.us.r-project.org')"
      &&     Rscript -e "library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install gdebi-core
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt
  - CmdLine:
    - wget https://download2.rstudio.org/rstudio-server-1.0.153-amd64.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - yes | gdebi rstudio-server-1.0.153-amd64.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "server-app-armor-enabled=0" >> /etc/rstudio/rserver.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "auth-minimum-user-id=0" >> /etc/rstudio/rserver.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install apparmor
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /etc/apparmor.d/disable/
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /etc/apparmor.d/rstudio-server /etc/apparmor.d/disable/
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "22"
  - Name: expose
    Ports:
    - "8020"
  - Name: expose
    Ports:
    - "50020"
  - Name: expose
    Ports:
    - "50070"
  - Name: expose
    Ports:
    - "50075"
  - Name: expose
    Ports:
    - "50090"
  - Name: expose
    Ports:
    - "9001"
  - Name: expose
    Ports:
    - "8030"
    - "8031"
    - "8032"
    - "8033"
    - "8040"
    - "8042"
    - "8088"
  - Name: expose
    Ports:
    - "18080"
    - "7077"
    - "8080"
    - "8081"
    - "8888"
  - Name: expose
    Ports:
    - "8787"
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /etc/entrypoint.sh
  - CmdLine:
    - chown root.root /etc/entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 700 /etc/entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /etc/entrypoint.sh
    - /usr/bin/tini
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - bash
    Name: cmd
    PrependShell: true
  From:
    Image: ubuntu:16.10
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.10
