MetaArgs: null
Stages:
- BaseName: jenkins/jenkins:lts
  Commands:
  - Maintainer: eactisgrosso
    Name: maintainer
  - Key: GOSU_VERSION
    Name: arg
    Value: "1.10"
  - Name: user
    User: root
  - CmdLine:
    - "apt-get update && apt-get -y install \tpython \tcurl \tunzip \tzip \tapt-transport-https
      \    \tca-certificates     \tgnupg2     \tsoftware-properties-common \tlibunwind8
      \tgettext \tjq \txvfb \tlibgtk2.0-0 \tlibnotify-dev \tlibgconf-2-4 \tlibnss3
      \tlibxss1 \tlibasound2 \tlibappindicator1 \tlibindicator7"
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - dpkg -i google-chrome-stable_current_amd64.deb; apt-get -fy install
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update  \t&& DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends
      \     vim      wget     && dpkgArch=\"$(dpkg --print-architecture | awk -F-
      '{ print $NF }')\"  \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"
      \ \t&& chmod +x /usr/local/bin/gosu  \t&& gosu nobody true  \t&& curl -sSL https://get.docker.com/
      | sh  \t&& apt-get clean  \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "curl -sL https://deb.nodesource.com/setup_8.x | bash - \t&& apt-get install
      -yq nodejs build-essential \t&& npm install -g npm"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg     &&
      mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg     && sh -c 'echo "deb
      [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod
      stretch main" > /etc/apt/sources.list.d/dotnetdev.list'     && apt-get update     &&
      apt-get -y install dotnet-sdk-2.0.0     && apt-get -y install dotnet-sdk-2.1     &&
      dotnet new -i Amazon.Lambda.Templates::*
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp     && curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o
      "awscli-bundle.zip"     && unzip awscli-bundle.zip     && ./awscli-bundle/install
      -i /usr/local/aws -b /usr/local/bin/aws     && rm awscli-bundle.zip && rm -rf
      awscli-bundle
    Name: run
    PrependShell: true
  - CmdLine:
    - "curl -L >hugo.tar.gz https://github.com/gohugoio/hugo/releases/download/v0.40.2/hugo_0.40.2_Linux-64bit.tar.gz
      \ \t&& tar -xzvf hugo.tar.gz -C /usr/bin  \t&& rm hugo.tar.gz"
    Name: run
    PrependShell: true
  - Env:
    - Key: DOTNET_CLI_TELEMETRY_OPTOUT
      Value: "1"
    Name: env
  - Env:
    - Key: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
      Value: "1"
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - plugins.txt
    - /usr/share/jenkins/ref/plugins.txt
  - CmdLine:
    - /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /entrypoint.sh
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: jenkins/jenkins:lts
  Name: ""
  Platform: ""
  SourceCode: FROM jenkins/jenkins:lts
