{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.4",
      "SourceCode": "FROM alpine:3.4",
      "Platform": "",
      "From": {
        "Image": "alpine:3.4"
      },
      "Commands": [
        {
          "CmdLine": [
            "echo 'http://dl-cdn.alpinelinux.org/alpine/v3.1/main' \u003e\u003e /etc/apk/repositories   \u0026\u0026 apk add --no-cache     build-base     ca-certificates     postgresql-dev     python3     python3-dev     libpq     libxslt-dev     'libxml2\u003c2.9.4'     'libxml2-dev\u003c2.9.4'     wget   \u0026\u0026 apk add --no-cache     --repository http://dl-3.alpinelinux.org/alpine/edge/testing/     --allow-untrusted     geos     geos-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "adduser -D -u 1000 pycsw"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/tmp/pycsw"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements-standalone.txt",
            "requirements-pg.txt",
            "requirements-dev.txt",
            "requirements.txt",
            "./"
          ]
        },
        {
          "CmdLine": [
            "pip3 install --upgrade pip setuptools   \u0026\u0026 pip3 install --requirement requirements.txt   \u0026\u0026 pip3 install --requirement requirements-standalone.txt   \u0026\u0026 pip3 install --requirement requirements-pg.txt   \u0026\u0026 pip3 install gunicorn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache     --repository http://dl-cdn.alpinelinux.org/alpine/edge/main/     libcrypto1.1     \u0026\u0026 apk add --no-cache     geos     geos-dev     curl-dev \t  giflib-dev \t  jpeg-dev \t  libjpeg-turbo-dev \t  libpng-dev \t  linux-headers \t  postgresql-dev \t  python3-dev \t  sqlite-dev \t  swig \t  tiff-dev \t  zlib-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "pkgname",
              "Value": "gdal"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "pkgver",
              "Value": "2.4.0"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/gdal"
        },
        {
          "CmdLine": [
            "wget http://download.osgeo.org/$pkgname/$pkgver/$pkgname-$pkgver.tar.xz   \u0026\u0026 unxz $pkgname-$pkgver.tar.xz   \u0026\u0026 tar xf $pkgname-$pkgver.tar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/gdal/$pkgname-$pkgver"
        },
        {
          "CmdLine": [
            "./configure --prefix=/usr   --with-curl=/usr/bin/curl-config   --with-geos=/usr/bin/geos-config   \u0026\u0026 make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install pygdal"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/tmp/pycsw"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "pycsw",
            "pycsw/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "bin",
            "bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "setup.py",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "MANIFEST.in",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "VERSION.txt",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "README.rst",
            "."
          ]
        },
        {
          "CmdLine": [
            "pip3 install ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tests",
            "tests/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker",
            "docker/"
          ]
        },
        {
          "Env": [
            {
              "Key": "PYCSW_CONFIG",
              "Value": "/etc/pycsw/aahll.cfg"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /etc/pycsw   \u0026\u0026 mv docker/aahll.cfg ${PYCSW_CONFIG}   \u0026\u0026 mkdir /var/lib/pycsw   \u0026\u0026 chown pycsw:pycsw /var/lib/pycsw   \u0026\u0026 cp docker/entrypoint.py /usr/local/bin/entrypoint.py   \u0026\u0026 chmod a+x /usr/local/bin/entrypoint.py   \u0026\u0026 cp -r tests /home/pycsw   \u0026\u0026 cp requirements.txt /home/pycsw   \u0026\u0026 cp requirements-standalone.txt /home/pycsw   \u0026\u0026 cp requirements-pg.txt /home/pycsw   \u0026\u0026 cp requirements-dev.txt /home/pycsw   \u0026\u0026 chown -R pycsw:pycsw /home/pycsw/*   \u0026\u0026 rm -rf *"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/pycsw"
        },
        {
          "Name": "user",
          "User": "pycsw"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "db-data",
            "db-data/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8000"
          ]
        },
        {
          "CmdLine": [
            "python3",
            "/usr/local/bin/entrypoint.py"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}