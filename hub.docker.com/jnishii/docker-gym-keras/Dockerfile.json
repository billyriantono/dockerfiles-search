{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/home"
        },
        {
          "CmdLine": [
            "mkdir src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update      \u0026\u0026 apt-get install -y --no-install-recommends         apt-utils         build-essential         sudo         less         vim         jed         g++          git          curl          cmake         zlib1g-dev         libjpeg-dev         xvfb         libav-tools         xorg-dev         libboost-all-dev         libsdl2-dev         dbus         swig         python3          python3-dev          python3-future          python3-pip          python3-setuptools          python3-wheel          python3-tk         python3-opengl         libopenblas-base          libatlas-dev          lxterminal      \u0026\u0026 apt-get upgrade -y      \u0026\u0026 apt-get clean      \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo update-alternatives --config python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python3 -m pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements_py.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "python3 -m pip install -r /tmp/requirements_py.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements_dl.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "python3 -m pip install -r /tmp/requirements_dl.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements_gym.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "python3 -m pip install -r /tmp/requirements_gym.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GYMDIR",
              "Value": "/usr/local/lib/python3.5/dist-packages/gym/envs/"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gridworld-gym/env_register.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "cat /tmp/env_register.txt \u003e\u003e ${GYMDIR}/__init__.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gridworld-gym/envs/mdp_gridworld.py",
            "${GYMDIR}/toy_text/"
          ]
        },
        {
          "CmdLine": [
            "echo \"from gym.envs.toy_text.mdp_gridworld import MDPGridworldEnv\" \u003e\u003e ${GYMDIR}/toy_text/__init__.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y       pkg-config       qtbase5-dev       libqt5opengl5-dev       libassimp-dev       libpython3.5-dev       libboost-python-dev       libtinyxml-dev     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt"
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/olegklimov/bullet3 -b roboschool_self_collision     \u0026\u0026 git clone --depth 1 https://github.com/openai/roboschool"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ROBOSCHOOL_PATH",
              "Value": "/opt/roboschool"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /opt/bullet3/build     \u0026\u0026 cd /opt/bullet3/build     \u0026\u0026 cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1        -DCMAKE_INSTALL_PREFIX:PATH=${ROBOSCHOOL_PATH}/roboschool/cpp-household/bullet_local_install        -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF        -DBUILD_EXTRAS=OFF  -DBUILD_UNIT_TESTS=OFF        -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF        -DBUILD_OPENGL3_DEMOS=OFF ..     \u0026\u0026 make -j4     \u0026\u0026 make install     \u0026\u0026 pip3 install -e ${ROBOSCHOOL_PATH}     \u0026\u0026 ldconfig     \u0026\u0026 make clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libgl1-mesa-dri libgl1-mesa-glx --no-install-recommends"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dbus-uuidgen \u003e /etc/machine-id"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y mlocate     \u0026\u0026 updatedb     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "jovyan"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/${USER}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export uid=1000 gid=1000 \u0026\u0026    echo \"${USER}:x:${uid}:${gid}:Developer,,,:${HOME}:/bin/bash\" \u003e\u003e /etc/passwd \u0026\u0026    echo \"${USER}:x:${uid}:\" \u003e\u003e /etc/group \u0026\u0026    echo \"${USER} ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers \u0026\u0026    install -d -m 0755 -o ${uid} -g ${gid} ${HOME}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "${HOME}"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter.sh",
            "/usr/bin"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "aliases.sh",
            "/etc/profile.d"
          ]
        },
        {
          "CmdLine": [
            "python3 -m pip install jupyter-emacskeys"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python3 -m pip install jupyter_contrib_nbextensions"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter contrib nbextension install --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python3 -m pip install RISE"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter-nbextension install rise --py --sys-prefix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable init_cell/main --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable highlighter/highlighter --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable toggle_all_line_numbers/main --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable hide_header/main --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter nbextension enable hide_input/main --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "teletype"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DISPLAY",
              "Value": ":0.0"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/tmp/.X11-unix"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${HOME}"
          ]
        },
        {
          "Name": "user",
          "User": "${USER}"
        },
        {
          "CmdLine": [
            "cd ${HOME}     \u0026\u0026 xvfb-run -s \"-screen 0 1024x768x24\"     /usr/local/bin/jupyter notebook     --port=8888 --ip=0.0.0.0 --allow-root"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}