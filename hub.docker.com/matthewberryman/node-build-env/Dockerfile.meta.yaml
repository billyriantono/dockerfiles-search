MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - CmdLine:
    - echo "deb mirror://mirrors.ubuntu.com/mirrors.txt bionic main restricted universe
      multiverse" > /etc/apt/sources.list &&     echo "deb mirror://mirrors.ubuntu.com/mirrors.txt
      bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
      &&     echo "deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-security main
      restricted universe multiverse" >> /etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get -y upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
      curl
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-12
      postgresql-client-12 postgresql-contrib-12 postgresql-12-postgis-3 postgresql-12-postgis-3-scripts
      postgresql-12-pgrouting
    Name: run
    PrependShell: true
  - Name: user
    User: postgres
  - CmdLine:
    - service postgresql start &&    psql --command "CREATE USER docker WITH SUPERUSER
      PASSWORD 'docker';" &&    createdb -O docker docker
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/12/main/pg_hba.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "listen_addresses='*'" >> /etc/postgresql/12/main/postgresql.conf
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - DEBIAN_FRONTEND=noninteractive apt-get install -y curl gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir ~/.gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod -R go-rwx ~/.gnupg
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd --gid 1000 node   && useradd --uid 1000 --gid node --shell /bin/bash
      --create-home node
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex   && for key in     4ED778F539E3634C779C87C6D7062848A1AB005C     94AE36675C464D64BAFA68DD7434390BDBE9B9C5     B9AE9905FFD7803F25714661B63B535A4C206CA9     77984A986EBC2AA786BC0F66B01FBB92821C587A     71DCFD284A79C3B38668286BC97EC7A07EDE3FC1     FD3A5288F042B6850C66B31F09FE44734EB7990E     8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600     C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     DD8F2338BAE7501E3DD5AC78C273792F7D83545D     A48C2BEE680E841632CD4E44F07496B3EB3C1762     B9E2F5981AA6E0CD28160D9FF13993A75599653C   ;
      do     gpg --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys "$key" ||     gpg
      --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ;   done
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_VERSION
      Value: 12.14.0
    Name: env
  - CmdLine:
    - ARCH= && dpkgArch="$(dpkg --print-architecture)"   && case "${dpkgArch##*-}"
      in     amd64) ARCH='x64';;     ppc64el) ARCH='ppc64le';;     s390x) ARCH='s390x';;     arm64)
      ARCH='arm64';;     armhf) ARCH='armv7l';;     i386) ARCH='x86';;     *) echo
      "unsupported architecture"; exit 1 ;;   esac   && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz"   &&
      curl -SLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"   &&
      gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc   && grep "
      node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c -   &&
      tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1
      --no-same-owner   && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc
      SHASUMS256.txt   && ln -s /usr/local/bin/node /usr/local/bin/nodejs   && /usr/local/bin/npm
      i -g npm
    Name: run
    PrependShell: true
  - Env:
    - Key: YARN_VERSION
      Value: 1.21.1
    Name: env
  - CmdLine:
    - set -ex   && for key in   6A010C5166006599AA17F08146C2130DFD2497F5   ; do   gpg
      --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys "$key" ||   gpg --keyserver
      hkp://pgp.mit.edu:80 --recv-keys "$key" ;   done   && curl -fSLO --compressed
      "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"   &&
      curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc"   &&
      gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz   &&
      mkdir -p /opt   && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/   && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn
      /usr/local/bin/yarn   && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg   &&
      rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - DEBIAN_FRONTEND=noninteractive apt-get install -y     python-dev     python-pip     zip     jq     git
      git-lfs build-essential g++
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install awscli
    Name: run
    PrependShell: true
  - Env:
    - Key: PGUSER
      Value: docker
    Name: env
  - Env:
    - Key: PGPASSWORD
      Value: docker
    Name: env
  - CmdLine:
    - node
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
