{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Maintainer": "Geoffrey Tran \u003cgeoffrey.tran@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROJECT_DIR",
              "Value": "/srv"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NODE_ENV",
              "Value": "production"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -q \u0026\u0026     apt-get install --no-install-recommends -qy wget ca-certificates python-setuptools         supervisor sendmail-bin htop curl nano git mysql-client netcat redis-tools         php5-fpm php5-cli php5-curl php5-gd php5-json php5-ldap php5-mysql         php5-odbc php5-pgsql php5-pspell php5-readline php5-sqlite php5-tidy         php5-xmlrpc php5-xsl php5-intl php5-apcu php5-mcrypt php5-memcache         php5-memcached php5-redis php5-mongo php5-twig php5-xdebug phpunit \u0026\u0026     apt-get install --no-install-recommends -qy cron \u0026\u0026     apt-get install --no-install-recommends -qy nginx \u0026\u0026     echo \"\\ndaemon off;\" \u003e\u003e /etc/nginx/nginx.conf \u0026\u0026     chown -R www-data:www-data /var/lib/nginx \u0026\u0026     sh -c 'echo deb http://apt.newrelic.com/debian/ newrelic non-free \u003e\u003e /etc/apt/sources.list.d/newrelic.list' \u0026\u0026     wget -O- https://download.newrelic.com/548C16BF.gpg | apt-key add - \u0026\u0026     apt-get update -q \u0026\u0026     apt-get install --no-install-recommends -qy newrelic-php5  \u0026\u0026     apt-get install --no-install-recommends -qy nodejs npm \u0026\u0026     npm install --loglevel warn -g less \u0026\u0026     npm install --loglevel warn -g uglify-js \u0026\u0026     npm install --loglevel warn -g uglifycss \u0026\u0026     npm install --loglevel warn -g autoprefixer@5.2 \u0026\u0026     npm install --loglevel warn -g bower \u0026\u0026     ln -s /usr/local/bin/autoprefixer /usr/bin/autoprefixer \u0026\u0026     ln -s /usr/local/bin/uglifycss /usr/bin/uglifycss \u0026\u0026     ln -s /usr/local/bin/uglifyjs /usr/bin/uglifyjs \u0026\u0026     ln -s /usr/bin/nodejs /usr/bin/node \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/cron/cron.d/",
            "/etc/cron.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/php.ini",
            "/etc/php5/cli/php.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/php.ini",
            "/etc/php5/fpm/php.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/php5/mods-available/newrelic.ini.dist",
            "/etc/php5/mods-available/newrelic.ini.dist"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/php-fpm.conf",
            "/etc/php5/fpm/php-fpm.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/nginx/nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/nginx/conf.d/default.conf.dist",
            "/etc/nginx/conf.d/default.conf.dist"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/nginx/html",
            "/usr/share/nginx/html"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/supervisor/conf.d",
            "/etc/supervisor/conf.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "${PROJECT_DIR}"
          ]
        },
        {
          "Name": "workdir",
          "Path": "${PROJECT_DIR}"
        },
        {
          "CmdLine": [
            "GITHASH=`git rev-parse --short HEAD` sh -c  'sed -i \"s/assets.version\\(.*\\)=\\(.*\\)/assets.version\\1= $GITHASH/\" config/parameters.ini.dist'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "composer install -o --no-interaction --prefer-dist     \u0026\u0026 find . -type d -name .git -exec rm -rf {} +"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "php app/console assets:install --env=prod --no-debug \u0026\u0026 php app/console assetic:dump --env=prod --no-debug"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -fr var/cache/* \u0026\u0026 rm -fr var/log/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf /dev/stdout /var/log/nginx/access.log     \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log     \u0026\u0026 rm -fr /etc/nginx/sites-enabled/default"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80",
            "9000"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${PROJECT_DIR}"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "var/docker/entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "supervisord"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}