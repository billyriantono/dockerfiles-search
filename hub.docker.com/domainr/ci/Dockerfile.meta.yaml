MetaArgs:
- DefaultValue: 1.13.5
  Key: GOLANG_VERSION
  ProvidedValue: null
  Value: 1.13.5
- DefaultValue: domainr
  Key: RUNTIME_USER
  ProvidedValue: null
  Value: domainr
- DefaultValue: "1001"
  Key: RUNTIME_UID
  ProvidedValue: null
  Value: "1001"
- DefaultValue: "1001"
  Key: RUNTIME_GID
  ProvidedValue: null
  Value: "1001"
- DefaultValue: circleci/golang:${GOLANG_VERSION}-stretch-node-browsers
  Key: GOLANG_BASE_IMAGE
  ProvidedValue: null
  Value: circleci/golang:${GOLANG_VERSION}-stretch-node-browsers
- DefaultValue: "100"
  Key: RUNTIME_SUPGIDS
  ProvidedValue: null
  Value: "100"
Stages:
- As: rootstage
  BaseName: ${GOLANG_BASE_IMAGE}
  Commands:
  - Name: user
    User: root
  - Key: GOLANG_BASE_IMAGE
    Name: arg
    Value: null
  - Key: GOLANG_VERSION
    Name: arg
    Value: null
  - Key: DEP_VERSION
    Name: arg
    Value: null
  - Key: RUNTIME_USER
    Name: arg
    Value: null
  - Key: RUNTIME_UID
    Name: arg
    Value: null
  - Key: RUNTIME_GID
    Name: arg
    Value: null
  - Key: RUNTIME_SUPGIDS
    Name: arg
    Value: null
  - Env:
    - Key: RUNTIME_USER
      Value: ${RUNTIME_USER}
    Name: env
  - CmdLine:
    - "export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true; \tapt-get
      update \t&& apt-get -q -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confnew\"
      upgrade \t&& apt-get install -q -y --no-install-recommends \t\tapt-transport-https
      \t\tsoftware-properties-common \t\tnetcat-traditional netcat zip \t\tgit-hub
      less \t&& ln -s /usr/bin/git-hub /usr/local/bin/hub"
    Name: run
    PrependShell: true
  - CmdLine:
    - "export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true; \techo
      \"Adding docker repositories and installing Docker\" \t&& mkdir -pv /etc/apt/keys
      /etc/apt/preferences.d \t&& curl -fsSL https://download.docker.com/linux/$(.
      /etc/os-release; echo \"$ID\")/gpg | gpg --dearmor > /etc/apt/keys/docker.gpg
      \t&& printf > /etc/apt/preferences.d/docker.pref 'Package: *\\nPin: origin download.docker.com\\nPin-Priority:
      100\\n' \t&& echo \t\t\"deb [arch=amd64 signed-by=/etc/apt/keys/docker.gpg]
      https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")\" \t\t$(lsb_release
      -cs) \t\tstable \t\t> /etc/apt/sources.list.d/docker.list \t&& apt-get update
      \t&& apt-get -q -y install docker-ce \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -g "${RUNTIME_GID}" "${RUNTIME_USER}" &&     useradd -p '*' -u "${RUNTIME_UID}"
      -g "${RUNTIME_USER}" -G "${RUNTIME_SUPGIDS}" -m "${RUNTIME_USER}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /tmp \t&& curl -fsSL \"https://cli-assets.heroku.com/heroku-cli/channels/stable/heroku-cli-linux-x64.tar.gz\"
      -o heroku.tar.gz \t&& tar -zxf heroku.tar.gz \t&& mv heroku-cli-*-linux-x64
      /usr/local/lib/heroku \t&& ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku
      \t&& rm heroku.tar.gz \t&& heroku version"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cmd/*
    - /usr/local/bin/
  - CmdLine:
    - chmod -v +x /usr/local/bin/*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - rm -rf /go
    Name: run
    PrependShell: true
  - Labels:
    - Key: maintainer
      Value: '"ops+docker+ci@domainr.com"'
    Name: label
  - Labels:
    - Key: com.domainr.name
      Value: '"Domainr Continuous Integration (root-stage)"'
    Name: label
  - Labels:
    - Key: com.domainr.baseimage
      Value: '"${GOLANG_BASE_IMAGE}"'
    Name: label
  - Labels:
    - Key: com.domainr.versions.go
      Value: '"${GOLANG_VERSION}"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.username
      Value: '"root"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.uid
      Value: '"0"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.gid
      Value: '"0"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.unprivileged
      Value: '"${RUNTIME_USER}"'
    Name: label
  From:
    Image: ${GOLANG_BASE_IMAGE}
  Name: rootstage
  Platform: ""
  SourceCode: FROM ${GOLANG_BASE_IMAGE} AS rootstage
- BaseName: rootstage
  Commands:
  - Name: workdir
    Path: /home/${RUNTIME_USER}
  - Name: user
    User: ${RUNTIME_USER}
  - Env:
    - Key: GOPATH
      Value: /home/${RUNTIME_USER}/go
    Name: env
  - Env:
    - Key: PATH
      Value: ${GOPATH}/bin:/usr/local/go/bin:$PATH
    Name: env
  - CmdLine:
    - "go version && \tgo get -u -v github.com/jstemmer/go-junit-report && \tgo get
      -u -v github.com/nbio/slugger && \tgo get -u -v github.com/nbio/cart && \ttrue"
    Name: run
    PrependShell: true
  - Key: RUNTIME_UID
    Name: arg
    Value: null
  - Key: RUNTIME_GID
    Name: arg
    Value: null
  - Key: RUNTIME_SUPGIDS
    Name: arg
    Value: null
  - Labels:
    - Key: com.domainr.name
      Value: '"Domainr Continuous Integration"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.username
      Value: '"${RUNTIME_USER}"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.uid
      Value: '"${RUNTIME_UID}"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.gid
      Value: '"${RUNTIME_GID}"'
    Name: label
  - Labels:
    - Key: com.domainr.runtime.supgids
      Value: '"${RUNTIME_SUPGIDS}"'
    Name: label
  From:
    Stage:
      Index: 0
      Named: rootstage
  Name: ""
  Platform: ""
  SourceCode: FROM rootstage
