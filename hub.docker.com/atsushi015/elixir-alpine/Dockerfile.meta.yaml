MetaArgs: null
Stages:
- BaseName: alpine:3.7
  Commands:
  - Maintainer: mpneuried
    Name: maintainer
  - Env:
    - Key: ELIXIR_V
      Value: 1.7.4
    Name: env
  - Env:
    - Key: OTP_VERSION
      Value: '"20.2.2"'
    Name: env
  - CmdLine:
    - "set -xe \t&& OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\"
      \t&& OTP_DOWNLOAD_SHA256=\"7614a06964fc5022ea4922603ca4bf1d2cc241f9bd6b7321314f510fd74c7304\"
      \t&& apk add --no-cache --virtual .fetch-deps \t\tcurl \t\tca-certificates \t&&
      curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \t&& echo \"$OTP_DOWNLOAD_SHA256
      \ otp-src.tar.gz\" | sha256sum -c - \t&& apk add --no-cache --virtual .build-deps
      \t\tgcc \t\tlibc-dev \t\tmake \t\tautoconf \t\tncurses-dev \t\topenssl-dev \t\ttar
      \t&& export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\" \t&& mkdir -vp $ERL_TOP
      \t&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \t&& rm otp-src.tar.gz
      \t&& ( cd $ERL_TOP \t  && ./otp_build autoconf \t  && ./configure \t  && make
      -j$(getconf _NPROCESSORS_ONLN) \t  && make install ) \t&& rm -rf $ERL_TOP \t&&
      find /usr/local -regex '/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|src\\|obj\\|c_src\\|emacs\\|info\\|examples\\)'
      | xargs rm -rf \t&& rm -rf \t\t/usr/local/lib/erlang/erts*/lib/lib*.a \t\t/usr/local/lib/erlang/usr/lib/lib*.a
      \t\t/usr/local/lib/erlang/lib/*/lib/lib*.a \t&& scanelf --nobanner -E ET_EXEC
      -BF '%F' --recursive /usr/local | xargs strip --strip-all \t&& scanelf --nobanner
      -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded
      \t&& runDeps=$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t|
      awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t|
      xargs -r apk info --installed \t\t\t| sort -u \t) \t&& apk add --virtual .erlang-rundeps
      $runDeps \t&& apk del .fetch-deps .build-deps"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apk --update add --virtual build-dependencies wget ca-certificates && \twget
      https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_V}/Precompiled.zip
      && \tmkdir -p /opt/elixir-${ELIXIR_V}/ && \tunzip Precompiled.zip -d /opt/elixir-${ELIXIR_V}/
      && \trm Precompiled.zip && \tapk del build-dependencies && \trm -rf /etc/ssl"
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/opt/elixir-${ELIXIR_V}/bin
    Name: env
  - CmdLine:
    - erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell
    Name: run
    PrependShell: true
  - CmdLine:
    - elixir -v
    Name: run
    PrependShell: true
  - CmdLine:
    - mix local.hex --force
    Name: run
    PrependShell: true
  - CmdLine:
    - mix local.rebar --force
    Name: run
    PrependShell: true
  From:
    Image: alpine:3.7
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.7
