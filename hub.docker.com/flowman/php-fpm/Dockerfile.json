{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.9",
      "SourceCode": "FROM alpine:3.9",
      "Platform": "",
      "From": {
        "Image": "alpine:3.9"
      },
      "Commands": [
        {
          "Maintainer": "Peter Szalatnay \u003ctheotherland@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "7.3.2"
            },
            {
              "Key": "PHPREDIS_FILENAME",
              "Value": "4.2.0.tar.gz"
            },
            {
              "Key": "PHP_FILENAME",
              "Value": "php-7.3.2.tar.xz"
            },
            {
              "Key": "NEWRELIC_FILENAME",
              "Value": "newrelic-php5-8.5.0.235-linux-musl.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup -S nginx     \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx     \u0026\u0026 apk add --update         curl         tar         xz         libxml2         readline         freetype         libjpeg-turbo         libpng         libwebp         libedit         libmcrypt         libbz2         libzip     \u0026\u0026 apk add --no-cache --virtual .build-deps         git         autoconf         file         g++         gcc         libc-dev         make         pkgconf         re2c         curl-dev         libedit-dev         libxml2-dev         readline-dev         freetype-dev         libjpeg-turbo-dev         libpng-dev         libwebp-dev         libmcrypt-dev         libedit-dev         libssh2-dev         libzip-dev     \u0026\u0026 cd /tmp     \u0026\u0026 curl -fSL \"http://php.net/get/$PHP_FILENAME/from/this/mirror\" -o \"$PHP_FILENAME\"     \u0026\u0026 mkdir -p /tmp/php     \u0026\u0026 tar -Jxf \"$PHP_FILENAME\" -C /tmp/php --strip-components=1     \u0026\u0026 rm \"$PHP_FILENAME\"     \u0026\u0026 cd /tmp/php     \u0026\u0026 ./configure         --prefix=/usr         --libdir=/usr/lib/php         --datadir=/usr/share/php         --sysconfdir=/etc/php         --localstatedir=/etc/php/var         --with-pear=/usr/share/php         --with-config-file-scan-dir=/etc/php/conf.d         --with-config-file-path=/etc/php         --disable-debug         --disable-cgi         --disable-gd-jis-conv         --disable-short-tags         --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx         --enable-mysqlnd         --enable-mbstring         --enable-opcache         --enable-zip         --enable-libxml --with-libxml-dir         --with-mysqli         --with-curl         --with-libedit         --with-openssl         --with-gd         --with-jpeg-dir         --with-png-dir         --with-webp-dir         --with-xpm-dir=no         --with-freetype-dir         --with-zlib         --without-readline         --without-sqlite3         --without-pdo-sqlite     \u0026\u0026 make     \u0026\u0026 make install     \u0026\u0026 { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }     \u0026\u0026 make clean     \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner --recursive /usr/local             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )\"     \u0026\u0026 apk add --virtual .php-rundeps $runDeps     \u0026\u0026 mkdir /etc/php/conf.d/     \u0026\u0026 echo \"zend_extension=opcache.so\" \u003e\u003e \"/etc/php/conf.d/docker-php-ext-opcache.ini\"     \u0026\u0026 cd /tmp     \u0026\u0026 curl -fSL \"https://github.com/phpredis/phpredis/archive/$PHPREDIS_FILENAME\" -o \"$PHPREDIS_FILENAME\"     \u0026\u0026 mkdir -p /tmp/phpredis     \u0026\u0026 tar -xzf \"$PHPREDIS_FILENAME\" -C /tmp/phpredis --strip-components=1     \u0026\u0026 cd /tmp/phpredis     \u0026\u0026 phpize \u0026\u0026 ./configure \u0026\u0026 make install     \u0026\u0026 echo \"extension=redis.so\" \u003e\u003e \"/etc/php/conf.d/docker-php-ext-redis.ini\"     \u0026\u0026 cd /tmp     \u0026\u0026 git clone https://github.com/xdebug/xdebug.git     \u0026\u0026 cd /tmp/xdebug     \u0026\u0026 git checkout master     \u0026\u0026 phpize \u0026\u0026 ./configure --enable-xdebug \u0026\u0026 make install     \u0026\u0026 echo \";zend_extension=xdebug.so\" \u003e\u003e \"/etc/php/conf.d/docker-php-ext-xdebug.ini\"     \u0026\u0026 cd /tmp     \u0026\u0026 curl -fSL \"https://download.newrelic.com/php_agent/release/$NEWRELIC_FILENAME\" -o \"$NEWRELIC_FILENAME\"     \u0026\u0026 mkdir -p /tmp/newrelic /var/log/newrelic     \u0026\u0026 tar -xzf \"$NEWRELIC_FILENAME\" -C /tmp/newrelic --strip-components=1     \u0026\u0026 rm \"$NEWRELIC_FILENAME\"     \u0026\u0026 cd /tmp/newrelic     \u0026\u0026 cp agent/x64/newrelic-20180731.so /usr/lib/php/extensions/no-debug-non-zts-20180731/newrelic.so     \u0026\u0026 cp daemon/newrelic-daemon.x64 /usr/bin/newrelic-daemon     \u0026\u0026 cp scripts/newrelic.ini.template /etc/php/conf.d/newrelic.ini     \u0026\u0026 apk del .build-deps     \u0026\u0026 rm -rf /tmp/*     \u0026\u0026 cd /etc/php     \u0026\u0026 if [ -d php-fpm.d ]; then         sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf \u003e /dev/null;     fi     \u0026\u0026 {         echo '[global]';         echo 'error_log = /proc/self/fd/2';         echo 'daemonize = no';         echo;         echo '[www]';         echo '; if we send this to /proc/self/fd/1, it never appears';         echo ';access.log = /proc/self/fd/2';         echo;         echo 'clear_env = no';         echo;         echo '; Ensure worker stdout and stderr are sent to the main error log.';         echo 'catch_workers_output = yes';     } | tee php-fpm.d/docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./www.conf",
            "/etc/php/php-fpm.d/www.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./opcache.ini",
            "./xdebug.ini",
            "/etc/php/conf.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        },
        {
          "CmdLine": [
            "php-fpm"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}