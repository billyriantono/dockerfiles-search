MetaArgs:
- DefaultValue: "16.04"
  Key: UBUNTU_VERSION
  ProvidedValue: null
  Value: "16.04"
- DefaultValue: "10.1"
  Key: CUDA
  ProvidedValue: null
  Value: "10.1"
Stages:
- As: base
  BaseName: nvidia/cuda:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Commands:
  - Key: UBUNTU_VERSION
    Name: arg
    Value: null
  - Key: CUDA
    Name: arg
    Value: null
  - Key: CUDNN
    Name: arg
    Value: 7.6.4.38
  - Key: NCCL
    Name: arg
    Value: 2.4.8
  - Key: LIBNVINFER
    Name: arg
    Value: 6.0.1-1
  - Key: LIBNVINFER_MAJOR_VERSION
    Name: arg
    Value: "6"
  - Name: shell
    Shell:
    - /bin/bash
    - -c
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends apt-utils
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         build-essential         cuda-command-line-tools-${CUDA/./-}         libcublas10=10.1.0.105-1         cuda-cufft-${CUDA/./-}         cuda-curand-${CUDA/./-}         cuda-cusolver-${CUDA/./-}         cuda-cusparse-${CUDA/./-}         curl         libcudnn7=${CUDNN}-1+cuda${CUDA}         libnccl2=${NCCL}-1+cuda${CUDA}         libfreetype6-dev         libhdf5-serial-dev         libzmq3-dev         pkg-config         software-properties-common         unzip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update         && apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA}         libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA}         &&
      apt-get clean         && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - touch /usr/bin/nvidia-smi /usr/bin/nvidia-persistenced /usr/bin/nvidia-debugdump
      /usr/bin/nvidia-cuda-mps-server /usr/bin/nvidia-cuda-mps-control
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /extra /xdisk /rsgrps /cm/shared /cm/local
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    Name: env
  - CmdLine:
    - ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1     &&
      echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf     &&
      ldconfig
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update  && apt-get install -y --no-install-recommends         build-essential         curl         software-properties-common         python3-pip  &&
      add-apt-repository -y ppa:deadsnakes/ppa  && apt-get update  && apt-get install
      -y python3.6 python3.6-dev  && apt-get clean  && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - touch /usr/bin/python3 && rm /usr/bin/python3
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /usr/bin/python3.6 /usr/bin/python3
    Name: run
    PrependShell: true
  - Key: USE_PYTHON_3_NOT_2
    Name: arg
    Value: "1"
  - Key: _PY_SUFFIX
    Name: arg
    Value: ${USE_PYTHON_3_NOT_2:+3}
  - Key: PYTHON
    Name: arg
    Value: python${_PY_SUFFIX}
  - Key: PIP
    Name: arg
    Value: pip${_PY_SUFFIX}
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     ${PYTHON}     ${PYTHON}-pip
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} --no-cache-dir install --upgrade     pip     setuptools
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s $(which ${PYTHON}) /usr/local/bin/python
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} --no-cache-dir install --upgrade         Pillow         h5py         ipykernel         jupyter         jupyter_http_over_ws         ipdb         pudb         spyder-kernels         Keras         Keras-Applications         Keras-Preprocessing         matplotlib         numpy         pandas         scipy         sklearn         python-dateutil         hyperopt         lifelines         gensim         tensorflow-gpu         torch         torchvision         transformers
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter serverextension enable --py jupyter_http_over_ws
    Name: run
    PrependShell: true
  From:
    Image: nvidia/cuda:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Name: base
  Platform: ""
  SourceCode: FROM nvidia/cuda:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base
