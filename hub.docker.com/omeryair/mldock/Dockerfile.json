{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get upgrade -y \u0026\u0026     apt-get install -y software-properties-common \u0026\u0026     add-apt-repository ppa:neovim-ppa/stable \u0026\u0026     apt-get update -y \u0026\u0026     apt-get install -y         build-essential         bzip2         ca-certificates         locales         fonts-liberation         man         cmake         sudo         openssh-server         python3         python3-dev         python3-pip         python         python-dev         python-pip         sshfs         wget         curl         rsync         ssh         bc         nano         vim         emacs         git         tig         tmux         zsh         unzip         htop         tree         silversearcher-ag         ctags         cscope         jq         libblas-dev         liblapack-dev         gfortran         libfreetype6-dev         libpng-dev         ffmpeg         python-qt4         python3-pyqt5         imagemagick         inkscape         jed         libsm6         libxext-dev         libxrender1         lmodern         netcat         pandoc         texlive-fonts-extra         texlive-fonts-recommended         texlive-generic-recommended         texlive-latex-base         texlive-latex-extra         texlive-xetex         graphviz         \u0026\u0026     apt-get install -y neovim \u0026\u0026     pip install pynvim==0.3.2 \u0026\u0026     apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /var/run/sshd \u0026\u0026     sed 's/^#\\?PasswordAuthentication .*$/PasswordAuthentication yes/g' -i /etc/ssh/sshd_config \u0026\u0026     sed 's/^Port .*$/Port 9022/g' -i /etc/ssh/sshd_config \u0026\u0026     sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor \u003e microsoft.gpg \u0026\u0026     install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/ \u0026\u0026     echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" \u003e /etc/apt/sources.list.d/vscode.list \u0026\u0026     apt-get install apt-transport-https \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y code \u0026\u0026     rm microsoft.gpg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PYCHARM_SOURCE",
          "Name": "arg",
          "Value": "\"https://download.jetbrains.com/python/pycharm-community-2018.3.3.tar.gz\""
        },
        {
          "CmdLine": [
            "mkdir /opt/pycharm \u0026\u0026     cd /opt/pycharm \u0026\u0026     curl -L $PYCHARM_SOURCE -o installer.tgz \u0026\u0026     tar --strip-components=1 -xzf installer.tgz \u0026\u0026     rm installer.tgz \u0026\u0026     /usr/bin/python2 /opt/pycharm/helpers/pydev/setup_cython.py build_ext --inplace \u0026\u0026     /usr/bin/python3 /opt/pycharm/helpers/pydev/setup_cython.py build_ext --inplace"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./resources/pycharm.bin",
            "/usr/local/bin/pycharm"
          ]
        },
        {
          "CmdLine": [
            "mkdir /app \u0026\u0026     chmod 777 /app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install pip==18.1 \u0026\u0026     hash -r pip \u0026\u0026     pip3 install -U         virtualenv==16.2.0         ipython==7.0.1         numpy==1.15.2         scipy==1.1.0         matplotlib==3.0.0         PyQt5==5.11.3         seaborn==0.9.0         plotly==3.5.0         bokeh==1.0.4         ggplot==0.11.5         altair==2.3.0         pandas==0.23.4         pyyaml==3.13         protobuf==3.6.1         ipdb==0.11         flake8==3.5.0         cython==0.28.5         sympy==1.3         nose==1.3.7         sphinx==1.8.1         tqdm==4.27.0         opencv-contrib-python==3.4.3.18         scikit-image==0.14.1         scikit-learn==0.20.0         imageio==2.4.1         torchvision==0.2.1         tensorflow-gpu==1.12.0         tensorboardX==1.4         jupyter==1.0.0         jupyterthemes==0.19.6         jupyter_contrib_nbextensions==0.5.0         jupyterlab==0.4.0         ipywidgets==7.4.2         \u0026\u0026         rm -r /root/.cache/pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MPLBACKEND",
              "Value": "Agg"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "python3 -c \"import matplotlib.pyplot\" \u0026\u0026     cp -r /root/.cache /etc/skel/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install six==1.11 \u0026\u0026     jupyter nbextension enable --py widgetsnbextension \u0026\u0026     jupyter contrib nbextension install --system \u0026\u0026     jupyter nbextensions_configurator enable \u0026\u0026     jupyter serverextension enable --py jupyterlab --system \u0026\u0026     pip install RISE \u0026\u0026     jupyter-nbextension install rise --py --sys-prefix --system \u0026\u0026     cp -r /root/.jupyter /etc/skel/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /app/ \u0026\u0026     virtualenv --system-site-packages dockvenv \u0026\u0026     virtualenv --relocatable dockvenv \u0026\u0026     grep -rlnw --null /usr/local/bin/ -e '#!/usr/bin/python3' | xargs -0r cp -t /app/dockvenv/bin/ \u0026\u0026     sed -i \"s/#\"'!'\"\\/usr\\/bin\\/python3/#\"'!'\"\\/usr\\/bin\\/env python/g\" /app/dockvenv/bin/* \u0026\u0026     mv /app/dockvenv /root/ \u0026\u0026     ln -sfT /root/dockvenv /app/dockvenv \u0026\u0026     cp -rp /root/dockvenv /etc/skel/ \u0026\u0026     sed -i \"s/^\\(PATH=\\\"\\)\\(.*\\)$/\\1\\/app\\/dockvenv\\/bin\\/:\\2/g\" /etc/environment"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/app/dockvenv/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_10.x | bash - \u0026\u0026     apt-get install -y nodejs \u0026\u0026     npm install -g grunt-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     wget -O dumb-init.deb https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64.deb \u0026\u0026     dpkg -i dumb-init.deb \u0026\u0026     rm dumb-init.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /app/bin \u0026\u0026     chmod a=u -R /app/bin \u0026\u0026     sed -i \"s/^\\(PATH=\\\"\\)\\(.*\\)$/\\1\\/app\\/bin\\/:\\2/g\" /etc/environment"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/app/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/resources/entrypoint.sh",
            "/app/bin/run"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/resources/default_notebook.sh",
            "/app/bin/default_notebook"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/resources/default_jupyterlab.sh",
            "/app/bin/default_jupyterlab"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "/resources/run_server.sh",
            "/app/bin/run_server"
          ]
        },
        {
          "CmdLine": [
            "touch /etc/skel/.sudo_as_admin_successful"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "DOCKUSER_UID",
          "Name": "arg",
          "Value": "4283"
        },
        {
          "Key": "DOCKUSER_GID",
          "Name": "arg",
          "Value": "4283"
        },
        {
          "CmdLine": [
            "groupadd -g $DOCKUSER_GID dockuser \u0026\u0026     useradd --system --create-home --home /home/dockuser --shell /bin/bash -G sudo -g dockuser -u $DOCKUSER_UID dockuser \u0026\u0026     mkdir /tmp/runtime-dockuser \u0026\u0026     chown dockuser:dockuser /tmp/runtime-dockuser \u0026\u0026     echo \"dockuser ALL=(ALL:ALL) NOPASSWD: ALL\" \u003e /etc/sudoers.d/dockuser"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "/usr/bin/dumb-init",
            "--",
            "run"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}