{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "SourceCode": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04"
      },
      "Commands": [
        {
          "Maintainer": "Silentink (https://gitlab.com/david6686/aipr_dllab)",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "TENSORFLOW_VERSION",
              "Value": "1.15.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            },
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "0.18.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/usr/bin/fish"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NNG_URL",
              "Value": "\"https://github.com/google/fonts/raw/master/ofl/nanumgothic/NanumGothic-Regular.ttf\""
            },
            {
              "Key": "SCP_URL",
              "Value": "\"https://github.com/adobe-fonts/source-code-pro/archive/2.030R-ro/1.050R-it.tar.gz\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Taipei"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini",
            "/usr/bin/tini"
          ]
        },
        {
          "CmdLine": [
            "echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" \u003e /etc/apt/sources.list.d/nvidia-ml.list \u0026\u0026    APT_INSTALL=\"apt-get install -y --no-install-recommends\" \u0026\u0026     PIP_INSTALL=\"pip install  --no-cache-dir\" \u0026\u0026     GIT_CLONE=\"git clone --depth 1\" \u0026\u0026     CONDA=\"conda install -y\" \u0026\u0026     rm -rf  /var/lib/apt/lists/*             /etc/apt/sources.list.d/cuda.list             /etc/apt/sources.list.d/nvidia-ml.list \u0026\u0026     apt-get update  --fix-missing \u0026\u0026     DEBIAN_FRONTEND=noninteractive  $APT_INSTALL software-properties-common \u0026\u0026     add-apt-repository ppa:kelleyk/emacs \u0026\u0026    apt-get update --fix-missing     \u0026\u0026     DEBIAN_FRONTEND=noninteractive  $APT_INSTALL         autojump         bash         build-essential         bzip2         ca-certificates         cmake         curl         dbus-x11         doxygen         dpkg         emacs25         figlet         firefox         fish         fontconfig         git         grep         gzip         htop         language-pack-zh-hant         language-pack-zh-hant-base         libgl1-mesa-glx         libglib2.0-0         libjpeg-dev        libpng-dev         libprotoc-dev         libsm6         libxext6         libxrender1         mercurial         nano         protobuf-compiler         pv         rar         rlwrap         sed         silversearcher-ag         software-properties-common         subversion         sudo         tar         tmux         unrar         unzip         vim         wget         zip         \u0026\u0026     mkdir -p /usr/local/share/fonts     \u0026\u0026 wget -qO- \"${SCP_URL}\" | tar xz -C /usr/local/share/fonts     \u0026\u0026 wget -q \"${NNG_URL}\" -P /usr/local/share/fonts     \u0026\u0026 fc-cache -fv     \u0026\u0026     $GIT_CLONE  https://github.com/syl20bnr/spacemacs ~/.emacs.d         \u0026\u0026     echo 'source /usr/share/autojump/autojump.bash' \u003e\u003e~/.bash_profile         \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \u0026\u0026     /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026\u0026     rm ~/miniconda.sh \u0026\u0026     /opt/conda/bin/conda clean -tipsy \u0026\u0026     ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \u0026\u0026     echo \". /opt/conda/etc/profile.d/conda.sh\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"conda activate base\" \u003e\u003e ~/.bashrc     \u0026\u0026     $PIP_INSTALL     tensorflow-gpu==$TENSORFLOW_VERSION     keras     h5py     xmltodict     glances     nvidia-ml-py3     jupyter     thefuck     psrecord     torch     torchvision     imgaug     onnx     xgboost     \u0026\u0026     conda config --add channels intel     \u0026\u0026     DEBIAN_FRONTEND=noninteractive $CONDA      opencv     gensim     tqdm     dask     numpy     scikit-learn     matplotlib     Cython     scipy     theano     protobuf     libprotobuf     flask     \u0026\u0026     conda install -c conda-forge jupyterlab     \u0026\u0026     sed -i -e \"s/bin\\/ash/usr\\/bin\\/fish/\" /etc/passwd  \u0026\u0026     ldconfig \u0026\u0026     ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone \u0026\u0026     apt-get clean \u0026\u0026     apt-get autoremove \u0026\u0026     chmod +x /usr/bin/tini \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* ~/* \u0026\u0026     curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher \u0026\u0026    echo 'nvidia-smi' \u003e\u003e/root/.bashrc \u0026\u0026     echo 'figlet \"Wellcome\"' \u003e\u003e/root/.bashrc \u0026\u0026     echo 'source (conda info --root)/etc/fish/conf.d/conda.fish' \u003e\u003e~/.config/fish/config.fish \u0026\u0026     mkdir -p /root/.config/matplotlib \u0026\u0026     echo \"backend : Agg\" \u003e /root/.config/matplotlib/matplotlibrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "6006",
            "8888"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/usr/bin/fish"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}