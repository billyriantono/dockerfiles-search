MetaArgs: null
Stages:
- BaseName: nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04
  Commands:
  - Maintainer: Silentink (https://github.com/david6686/my_dllab)
    Name: maintainer
  - Env:
    - Key: TENSORFLOW_VERSION
      Value: 1.12.0
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - Env:
    - Key: TINI_VERSION
      Value: v0.16.1
    Name: env
  - Env:
    - Key: SHELL
      Value: /usr/bin/fish
    Name: env
  - Env:
    - Key: PATH
      Value: /opt/conda/envs/dllab/bin:$PATH
    Name: env
  - Env:
    - Key: CONDA_DEFAULT_ENV
      Value: dllab
    Name: env
  - Env:
    - Key: CONDA_PREFIX
      Value: /opt/conda/envs/dllab
    Name: env
  - Env:
    - Key: JAVA_HOME
      Value: /docker-java-home/jre
    Name: env
  - Env:
    - Key: BAZEL_VERSION
      Value: 0.18.0
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u191
    Name: env
  - Env:
    - Key: JAVA_DEBIAN_VERSION
      Value: 8u191-b12-2ubuntu0.18.04.1
    Name: env
  - Env:
    - Key: NNG_URL
      Value: '"https://github.com/google/fonts/raw/master/ofl/nanumgothic/NanumGothic-Regular.ttf"'
    - Key: SCP_URL
      Value: '"https://github.com/adobe-fonts/source-code-pro/archive/2.030R-ro/1.050R-it.tar.gz"'
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini
    - /usr/bin/tini
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - TF_CONFIG.txt
    - /TF_CONFIG.txt
  - Env:
    - Key: CATALINA_HOME
      Value: /usr/local/tomcat
    Name: env
  - Env:
    - Key: PATH
      Value: $CATALINA_HOME/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$CATALINA_HOME"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $CATALINA_HOME
  - Env:
    - Key: TOMCAT_NATIVE_LIBDIR
      Value: $CATALINA_HOME/native-jni-lib
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
    Name: env
  - Env:
    - Key: OPENSSL_VERSION
      Value: 1.1.0f-3+deb9u2
    Name: env
  - CmdLine:
    - echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64
      /" > /etc/apt/sources.list.d/nvidia-ml.list &&    APT_INSTALL="apt-get install
      -y --no-install-recommends" &&     PIP_INSTALL="pip3 install  --no-cache-dir"
      &&     GIT_CLONE="git clone --depth 1" &&     CONDA="conda install -y" &&     rm
      -rf  /var/lib/apt/lists/*             /etc/apt/sources.list.d/cuda.list             /etc/apt/sources.list.d/nvidia-ml.list
      &&     apt-get update  --fix-missing &&     DEBIAN_FRONTEND=noninteractive  $APT_INSTALL
      software-properties-common &&     add-apt-repository -y ppa:graphics-drivers/ppa
      &&     add-apt-repository ppa:deadsnakes/ppa &&     apt-get update     &&     DEBIAN_FRONTEND=noninteractive  $APT_INSTALL         language-pack-en-base         language-pack-zh-hant         language-pack-zh-hant-base         bash        build-essential         bzip2         ca-certificates         cmake         netbase         curl         gnupg         dirmngr         fontconfig         git         gzip         htop         libgl1-mesa-glx         libjpeg-dev        libpng-dev         libprotoc-dev         libcurl3-dev         libfreetype6-dev         libhdf5-serial-dev         libzmq3-dev         pkg-config         protobuf-compiler         rar         tmux         xz-utils         tar         sudo         unrar         unzip         vim         wget         zip         swig         openjdk-8-jdk         openjdk-8-jre         python3.6         python3.6-dev         python3-distutils-extra         python3-pip         python3-opencv         &&         apt-get
      clean &&         wget -O ~/get-pip.py             https://bootstrap.pypa.io/get-pip.py
      &&         python3.6 ~/get-pip.py &&         ln -s /usr/bin/python3.6 /usr/local/bin/python3
      &&         ln -s /usr/bin/python3.6 /usr/local/bin/python &&     java -version
      &&    $PIP_INSTALL     setuptools     h5py     xmltodict     glances     nvidia-ml-py3     scikit-learn     matplotlib     Cython     scipy     protobuf     tensorflow-gpu     keras     imgaug     onnx     &&     mkdir
      -p /usr/local/share/fonts     && wget -qO- "${SCP_URL}" | tar xz -C /usr/local/share/fonts     &&
      wget -q "${NNG_URL}" -P /usr/local/share/fonts     && fc-cache -fv     &&     add-apt-repository
      -y ppa:graphics-drivers/ppa     &&     apt-get update &&    DEBIAN_FRONTEND=noninteractive  $APT_INSTALL     nvidia-driver-410
      nvidia-settings
    Name: run
    PrependShell: true
  - CmdLine:
    - '{         echo ''#!/bin/sh'';         echo ''set -e'';         echo;         echo
      ''dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'';     }
      > /usr/local/bin/docker-java-home     && chmod +x /usr/local/bin/docker-java-home'
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -svT "/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)" /docker-java-home
    Name: run
    PrependShell: true
  - CmdLine:
    - 'set -ex;     currentVersion="$(dpkg-query --show --showformat ''${Version}\n''
      openssl)";     if dpkg --compare-versions "$currentVersion" ''<<'' "$OPENSSL_VERSION";
      then         if ! grep -q stretch /etc/apt/sources.list; then             {                 echo
      ''deb http://deb.debian.org/debian stretch main'';                 echo ''deb
      http://security.debian.org stretch/updates main'';                 echo ''deb
      http://deb.debian.org/debian stretch-updates main'';             } > /etc/apt/sources.list.d/stretch.list;             {                 echo
      ''Package: *'';                 echo ''Pin: release n=stretch*'';                 echo
      ''Pin-Priority: -10'';                 echo;                 echo ''Package:
      openssl libssl*'';                 echo "Pin: version $OPENSSL_VERSION";                 echo
      ''Pin-Priority: 990'';             } > /etc/apt/preferences.d/stretch-openssl;         fi;         apt-get
      update;         apt-get install -y --no-install-recommends openssl="$OPENSSL_VERSION";         rm
      -rf /var/lib/apt/lists/*;     fi'
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         libapr1     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEYS
      Value: 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42
        47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7
        61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7
        79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE
        A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7
        DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE
        F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
    Name: env
  - Env:
    - Key: TOMCAT_MAJOR
      Value: "8"
    Name: env
  - Env:
    - Key: TOMCAT_VERSION
      Value: 8.5.38
    Name: env
  - Env:
    - Key: TOMCAT_SHA512
      Value: 3a3e624014faf87091e6dbb8bad13c68240955d62301d22cf3d75a1766859dd97500d6850fbd5d3dc012f08f9301eb24c24fa7175bcca616767fa5c18875072d
    Name: env
  - Env:
    - Key: TOMCAT_TGZ_URLS
      Value: https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz     https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz     https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz     https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
    Name: env
  - Env:
    - Key: TOMCAT_ASC_URLS
      Value: https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc     https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc     https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc     https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
    Name: env
  - CmdLine:
    - set -eux;         savedAptMark="$(apt-mark showmanual)";     apt-get update;         apt-get
      install -y --no-install-recommends gnupg dirmngr;         export GNUPGHOME="$(mktemp
      -d)";     for key in $GPG_KEYS; do         gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$key";     done;         apt-get install -y --no-install-recommends
      wget ca-certificates;         success=;     for url in $TOMCAT_TGZ_URLS; do         if
      wget -O tomcat.tar.gz "$url"; then             success=1;             break;         fi;     done;     [
      -n "$success" ];         echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum -c
      -;         success=;     for url in $TOMCAT_ASC_URLS; do         if wget -O
      tomcat.tar.gz.asc "$url"; then             success=1;             break;         fi;     done;     [
      -n "$success" ];         gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;     tar
      -xvf tomcat.tar.gz --strip-components=1;     rm bin/*.bat;     rm tomcat.tar.gz*;     command
      -v gpgconf && gpgconf --kill all || :;     rm -rf "$GNUPGHOME";         nativeBuildDir="$(mktemp
      -d)";     tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;     apt-get
      install -y --no-install-recommends         dpkg-dev         gcc         libapr1-dev         libssl-dev         make         "openjdk-${JAVA_VERSION%%[.~bu-]*}-jdk=$JAVA_DEBIAN_VERSION"     ;     (         export
      CATALINA_HOME="$PWD";         cd "$nativeBuildDir/native";         gnuArch="$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)";         ./configure             --build="$gnuArch"             --libdir="$TOMCAT_NATIVE_LIBDIR"             --prefix="$CATALINA_HOME"             --with-apr="$(which
      apr-1-config)"             --with-java-home="$(docker-java-home)"             --with-ssl=yes;         make
      -j "$(nproc)";         make install;     );     rm -rf "$nativeBuildDir";     rm
      bin/tomcat-native.tar.gz;         apt-mark auto '.*' > /dev/null;     [ -z "$savedAptMark"
      ] || apt-mark manual $savedAptMark;     apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;     rm
      -rf /var/lib/apt/lists/*;         find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env
      bash|' '{}' +;         chmod -R +rX .;     chmod 777 logs work
    Name: run
    PrependShell: true
  - CmdLine:
    - 'set -e     && nativeLines="$(catalina.sh configtest 2>&1)"     && nativeLines="$(echo
      "$nativeLines" | grep ''Apache Tomcat Native'')"     && nativeLines="$(echo
      "$nativeLines" | sort -u)"     && if ! echo "$nativeLines" | grep ''INFO: Loaded
      APR based Apache Tomcat Native library'' >&2; then         echo >&2 "$nativeLines";         exit
      1;     fi'
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
  - CmdLine:
    - catalina.sh
    - run
    Name: cmd
    PrependShell: false
  From:
    Image: nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04
