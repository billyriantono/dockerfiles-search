MetaArgs: null
Stages:
- As: kernel-build
  BaseName: linuxkit/alpine:3fdc49366257e53276c6f363956a4353f95d9a81
  Commands:
  - CmdLine:
    - apk add     argp-standalone     automake     bash     bc     binutils-dev     bison     build-base     curl     diffutils     flex     git     gmp-dev     gnupg     installkernel     kmod     elfutils-dev     linux-headers     mpc1-dev     mpfr-dev     ncurses-dev     openssl-dev     patch     rsync     sed     squashfs-tools     tar     xz     xz-dev     zlib-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ $(uname -m) == x86_64 ] && apk add libunwind-dev || true'
    Name: run
    PrependShell: true
  - Key: KERNEL_VERSION
    Name: arg
    Value: null
  - Key: KERNEL_SERIES
    Name: arg
    Value: null
  - Key: EXTRA
    Name: arg
    Value: null
  - Key: DEBUG
    Name: arg
    Value: null
  - Env:
    - Key: WIREGUARD_VERSION
      Value: 0.0.20191226
    Name: env
  - Env:
    - Key: WIREGUARD_SHA256
      Value: '"7c0e576459c6337bcdea692bdbec561719a15da207dc739e0e3e60ff821a5491"'
    Name: env
  - Env:
    - Key: WIREGUARD_URL
      Value: https://git.zx2c4.com/wireguard-linux-compat/snapshot/wireguard-linux-compat-${WIREGUARD_VERSION}.tar.xz
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - /
    - /
  - CmdLine:
    - KERNEL_MAJOR=$(echo ${KERNEL_VERSION} | cut -d . -f 1) &&     KERNEL_MAJOR=v${KERNEL_MAJOR}.x
      &&     KERNEL_SOURCE=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${KERNEL_VERSION}.tar.xz
      &&     KERNEL_SHA256_SUMS=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/sha256sums.asc
      &&     KERNEL_PGP2_SIGN=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${KERNEL_VERSION}.tar.sign
      &&     curl -fsSLO ${KERNEL_SHA256_SUMS} &&     gpg2 -q --import keys.asc &&     gpg2
      --verify sha256sums.asc &&     KERNEL_SHA256=$(grep linux-${KERNEL_VERSION}.tar.xz
      sha256sums.asc | cut -d ' ' -f 1) &&     [ -f linux-${KERNEL_VERSION}.tar.xz
      ] || curl -fsSLO ${KERNEL_SOURCE} &&     echo "${KERNEL_SHA256}  linux-${KERNEL_VERSION}.tar.xz"
      | sha256sum -c - &&     xz -d linux-${KERNEL_VERSION}.tar.xz &&     curl -fsSLO
      ${KERNEL_PGP2_SIGN} &&     gpg2 --verify linux-${KERNEL_VERSION}.tar.sign linux-${KERNEL_VERSION}.tar
      &&     cat linux-${KERNEL_VERSION}.tar | tar --absolute-names -x && mv /linux-${KERNEL_VERSION}
      /linux
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /out/src
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp
  - Env:
    - Key: UCODE_REPO
      Value: https://github.com/intel/Intel-Linux-Processor-Microcode-Data-Files
    Name: env
  - Env:
    - Key: UCODE_COMMIT
      Value: microcode-20191115
    Name: env
  - CmdLine:
    - set -e &&     if [ $(uname -m) == x86_64 ]; then         git clone ${UCODE_REPO}
      ucode &&         cd ucode &&         git checkout ${UCODE_COMMIT} &&         iucode_tool
      --normal-earlyfw --write-earlyfw=/out/intel-ucode.cpio ./intel-ucode &&         cp
      license /out/intel-ucode-license.txt &&         mkdir -p /lib/firmware &&         cp
      -rav ./intel-ucode /lib/firmware;     fi
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /linux
  - CmdLine:
    - "set -e &&     if [ -n \"${EXTRA}\" ] && [ -d /patches-${KERNEL_SERIES}${EXTRA}
      ]; then \techo \"Patching ${EXTRA} kernel\"; \tfor patch in /patches-${KERNEL_SERIES}${EXTRA}/*.patch;
      do             echo \"Applying $patch\";             patch -t -F0 -N -u -p1
      < \"$patch\"; \tdone;     fi"
    Name: run
    PrependShell: true
  - CmdLine:
    - set -e &&     if [ -d /patches-${KERNEL_SERIES} ]; then         for patch in
      /patches-${KERNEL_SERIES}/*.patch; do             echo "Applying $patch";             patch
      -t -F0 -N -u -p1 < "$patch";         done;     fi
    Name: run
    PrependShell: true
  - CmdLine:
    - tar cJf /out/src/linux.tar.xz /linux
    Name: run
    PrependShell: true
  - CmdLine:
    - case $(uname -m) in     x86_64)         KERNEL_DEF_CONF=/linux/arch/x86/configs/x86_64_defconfig;         ;;     aarch64)         KERNEL_DEF_CONF=/linux/arch/arm64/configs/defconfig;         ;;     s390x)         if
      [ -f /linux/arch/s390/defconfig ]; then             KERNEL_DEF_CONF=/linux/arch/s390/defconfig;         else             KERNEL_DEF_CONF=/linux/arch/s390/configs/defconfig;         fi;         ;;     esac  &&     cp
      /config-${KERNEL_SERIES}-$(uname -m) ${KERNEL_DEF_CONF};     if [ -n "${EXTRA}"
      ] && [ -f "/config-${KERNEL_SERIES}-$(uname -m)${EXTRA}" ]; then         cat
      /config-${KERNEL_SERIES}-$(uname -m)${EXTRA} >> ${KERNEL_DEF_CONF};     fi;     sed
      -i "s/CONFIG_LOCALVERSION=\"-linuxkit\"/CONFIG_LOCALVERSION=\"-linuxkit${EXTRA}${DEBUG}\"/"
      ${KERNEL_DEF_CONF};     if [ -n "${DEBUG}" ]; then         sed -i 's/CONFIG_PANIC_ON_OOPS=y/#
      CONFIG_PANIC_ON_OOPS is not set/' ${KERNEL_DEF_CONF};         cat /config${DEBUG}
      >> ${KERNEL_DEF_CONF};     fi &&     make defconfig &&     make oldconfig &&     if
      [ -z "${EXTRA}" ] && [ -z "${DEBUG}" ]; then diff -u .config ${KERNEL_DEF_CONF};
      fi
    Name: run
    PrependShell: true
  - CmdLine:
    - case $(uname -m) in     s390x)         KCFLAGS="-fno-pie -fPIC";         ;;     *)         KCFLAGS="-fno-pie";         ;;     esac
      &&     make -j "$(getconf _NPROCESSORS_ONLN)" KCFLAGS="$KCFLAGS" &&     case
      $(uname -m) in     x86_64)         cp arch/x86_64/boot/bzImage /out/kernel;         ;;     aarch64)         cp
      arch/arm64/boot/Image.gz /out/kernel;         ;;     s390x)         cp arch/s390/boot/bzImage
      /out/kernel;         ;;     esac &&     cp System.map /out &&     ([ -n "${DEBUG}"
      ] && cp vmlinux /out || true)
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fsSL -o /wireguard.tar.xz "${WIREGUARD_URL}" &&     echo "${WIREGUARD_SHA256}  /wireguard.tar.xz"
      | sha256sum -c - &&     cp /wireguard.tar.xz /out/src/ &&     tar -C / --one-top-level=wireguard
      --strip-components=2 -xJf /wireguard.tar.xz "wireguard-linux-compat-${WIREGUARD_VERSION}/src"
      &&     make -j "$(getconf _NPROCESSORS_ONLN)" M="/wireguard" modules
    Name: run
    PrependShell: true
  - CmdLine:
    - make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install &&     make INSTALL_MOD_PATH=/tmp/kernel-modules
      M="/wireguard" modules_install &&     ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/
      -mindepth 1 -maxdepth 1)) &&       cd /tmp/kernel-modules/lib/modules/$DVER
      &&       rm build source &&       ln -s /usr/src/linux-headers-$DVER build )
      &&     case $(uname -m) in     aarch64)         make INSTALL_DTBS_PATH=/tmp/kernel-modules/boot/dtb
      dtbs_install;         ;;     esac &&     ( cd /tmp/kernel-modules && tar cf
      /out/kernel.tar . )
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tmp/kernel-headers/usr &&     make INSTALL_HDR_PATH=/tmp/kernel-headers/usr
      headers_install &&     ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar
      usr )
    Name: run
    PrependShell: true
  - CmdLine:
    - DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth
      1)) &&     dir=/tmp/usr/src/linux-headers-$DVER &&     mkdir -p $dir &&     cp
      /linux/.config $dir &&     cp /linux/Module.symvers $dir &&     find . -path
      './include/*' -prune -o            -path './arch/*/include' -prune -o            -path
      './scripts/*' -prune -o            -type f \( -name 'Makefile*' -o -name 'Kconfig*'
      -o -name 'Kbuild*' -o                       -name '*.lds' -o -name '*.pl' -o
      -name '*.sh' -o                       -name 'objtool' -o -name 'fixdep' -o -name
      'randomize_layout_seed.h' \) |          tar cf - -T - | (cd $dir; tar xf -)
      &&     ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )
    Name: run
    PrependShell: true
  - CmdLine:
    - printf "KERNEL_SOURCE=${KERNEL_SOURCE}\n" > /out/kernel-source-info
    Name: run
    PrependShell: true
  From:
    Image: linuxkit/alpine:3fdc49366257e53276c6f363956a4353f95d9a81
  Name: kernel-build
  Platform: ""
  SourceCode: FROM linuxkit/alpine:3fdc49366257e53276c6f363956a4353f95d9a81 AS kernel-build
- BaseName: scratch
  Commands:
  - CmdLine: null
    Name: entrypoint
    PrependShell: false
  - CmdLine: []
    Name: cmd
    PrependShell: false
  - Name: workdir
    Path: /
  - Chown: ""
    From: kernel-build
    Name: copy
    SourcesAndDest:
    - /out/*
    - /
  From:
    Scratch: true
  Name: ""
  Platform: ""
  SourceCode: FROM scratch
