MetaArgs: null
Stages:
- BaseName: node:8.15.1-alpine
  Commands:
  - Key: CODIMD_REPOSITORY
    Name: arg
    Value: https://github.com/codimd/server.git
  - Key: VERSION
    Name: arg
    Value: master
  - Key: UID
    Name: arg
    Value: "10000"
  - Env:
    - Key: DOCKERIZE_VERSION
      Value: v0.6.1
    Name: env
  - Env:
    - Key: NODE_ENV
      Value: production
    Name: env
  - Env:
    - Key: CMD_ALLOW_PDF_EXPORT
      Value: "false"
    Name: env
  - CmdLine:
    - apk add --no-cache --virtual .download wget  ca-certificates &&     wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      &&     tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      &&     rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&     apk
      del .download
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.11"
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - resources/gosu-gpg.key
    - /tmp/gosu.key
  - CmdLine:
    - set -ex;         apk add --no-cache --virtual .gosu-deps         wget         ca-certificates         dpkg         gnupg         openssl     ;         dpkgArch="$(dpkg
      --print-architecture | awk -F- '{ print $NF }')";     wget -O /usr/local/bin/gosu
      "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";     wget
      -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";         export
      GNUPGHOME="$(mktemp -d)";     gpg --import /tmp/gosu.key;     gpg --batch --verify
      /usr/local/bin/gosu.asc /usr/local/bin/gosu;     rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;         chmod
      +x /usr/local/bin/gosu;     gosu nobody true;         apk del .gosu-deps
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - resources/config.json
    - resources/.sequelizerc
    - /files/
  - CmdLine:
    - apk add --no-cache --virtual .dep build-base openssl-dev python git jq bash
      &&     git clone --depth 1 --branch "$VERSION" "$CODIMD_REPOSITORY" /codimd
      &&     cd /codimd &&     git log --pretty=format:'%ad %h %d' --abbrev-commit
      --date=short -1 && echo &&     git rev-parse HEAD > /tmp/gitref &&     rm -rf
      /codimd/.git &&     mkdir /codimd/.git &&     mv /tmp/gitref /codimd/.git/HEAD
      &&     jq ".repository.url = \"${CODIMD_REPOSITORY}\"" /codimd/package.json
      > /codimd/package.new.json &&     mv /codimd/package.new.json /codimd/package.json
      &&     rm -f /codimd/config.json && ln -s /files/config.json /codimd/config.json
      &&     rm -f /codimd/.sequelizerc && ln -s /files/.sequelizerc /codimd/.sequelizerc
      &&     yarn install --pure-lockfile &&     yarn install --production=false --pure-lockfile
      &&     npm run build &&     yarn install &&     yarn cache clean &&     apk
      del .dep &&     adduser -u $UID -h /codimd/ -D -S codimd &&     chown -R codimd
      /codimd/
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /codimd
  - Name: expose
    Ports:
    - "3000"
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - resources/docker-entrypoint.sh
    - /usr/local/bin/docker-entrypoint.sh
  - CmdLine:
    - /usr/local/bin/docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - node
    - app.js
    Name: cmd
    PrependShell: false
  From:
    Image: node:8.15.1-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM node:8.15.1-alpine
