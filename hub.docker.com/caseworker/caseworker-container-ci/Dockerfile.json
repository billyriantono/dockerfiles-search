{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "openjdk:10",
      "SourceCode": "FROM openjdk:10",
      "Platform": "",
      "From": {
        "Image": "openjdk:10"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Paul Lam \u003cpaul@quantisan.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "LEIN_VERSION",
              "Value": "2.8.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LEIN_INSTALL",
              "Value": "/usr/local/bin/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "locale-gen C.UTF-8 || true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LEIN_JVM_OPTS",
              "Value": "-Xmx400m"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JVM_OPTS",
              "Value": "-Xmx3200m"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "lein.key",
            "lein.key"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p $LEIN_INSTALL   \u0026\u0026 wget -q https://raw.githubusercontent.com/technomancy/leiningen/$LEIN_VERSION/bin/lein-pkg   \u0026\u0026 echo \"Comparing lein-pkg checksum ...\"   \u0026\u0026 echo \"019faa5f91a463bf9742c3634ee32fb3db8c47f0 *lein-pkg\" | sha1sum -c -   \u0026\u0026 mv lein-pkg $LEIN_INSTALL/lein   \u0026\u0026 chmod 0755 $LEIN_INSTALL/lein   \u0026\u0026 wget -q https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip   \u0026\u0026 wget -q https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip.asc   \u0026\u0026 gpg --import lein.key   \u0026\u0026 rm -f lein.key   \u0026\u0026 echo \"Verifying Jar file signature ...\"   \u0026\u0026 gpg --verify leiningen-$LEIN_VERSION-standalone.zip.asc   \u0026\u0026 rm leiningen-$LEIN_VERSION-standalone.zip.asc   \u0026\u0026 mkdir -p /usr/share/java   \u0026\u0026 mv leiningen-$LEIN_VERSION-standalone.zip /usr/share/java/leiningen-$LEIN_VERSION-standalone.jar   \u0026\u0026 curl -sL https://deb.nodesource.com/setup_8.x | bash -   \u0026\u0026 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -   \u0026\u0026 echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list   \u0026\u0026 echo 'APT::Get::Assume-Yes \"true\";' \u003e /etc/apt/apt.conf.d/90circleci   \u0026\u0026 echo 'DPkg::Options \"--force-confnew\";' \u003e\u003e /etc/apt/apt.conf.d/90circleci   \u0026\u0026 curl -sL https://deb.nodesource.com/setup_8.x | bash -   \u0026\u0026 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -   \u0026\u0026 echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list   \u0026\u0026 apt-get update   \u0026\u0026 mkdir -p /usr/share/man/man1   \u0026\u0026 apt-get install -y   git mercurial xvfb   locales sudo openssh-client ca-certificates tar gzip parallel   net-tools netcat unzip zip bzip2 gnupg curl wget   nodejs make yarn chromium   \u0026\u0026 ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime   \u0026\u0026 JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\"   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL   \u0026\u0026 chmod +x /usr/bin/jq   \u0026\u0026 jq --version   \u0026\u0026 set -ex   \u0026\u0026 export DOCKER_VERSION=$(curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1)   \u0026\u0026 DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\"   \u0026\u0026 echo Docker URL: $DOCKER_URL   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\"   \u0026\u0026 ls -lha /tmp/docker.tgz   \u0026\u0026 tar -xz -C /tmp -f /tmp/docker.tgz   \u0026\u0026 mv /tmp/docker/* /usr/bin   \u0026\u0026 rm -rf /tmp/docker /tmp/docker.tgz   \u0026\u0026 which docker   \u0026\u0026 (docker version || true)   \u0026\u0026 COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\"   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL   \u0026\u0026 chmod +x /usr/bin/docker-compose   \u0026\u0026 docker-compose version   \u0026\u0026 DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\"   \u0026\u0026 curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL   \u0026\u0026 tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz   \u0026\u0026 rm -rf /tmp/dockerize-linux-amd64.tar.gz   \u0026\u0026 dockerize --version   \u0026\u0026 groupadd --gid 3434 circleci   \u0026\u0026 useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci   \u0026\u0026 echo 'circleci ALL=NOPASSWD: ALL' \u003e\u003e /etc/sudoers.d/50-circleci   \u0026\u0026 echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' \u003e\u003e /etc/sudoers.d/env_keep"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$LEIN_INSTALL"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LEIN_ROOT",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo '(defproject dummy \"\" :dependencies [[org.clojure/clojure \"1.9.0\"]])' \u003e project.clj   \u0026\u0026 lein deps \u0026\u0026 rm project.clj"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "circleci"
        },
        {
          "CmdLine": [
            "/bin/sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}