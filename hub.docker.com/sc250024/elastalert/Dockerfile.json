{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Scott Crooks \u003cscott.crooks@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "CONFIG_FOLDER",
              "Value": "/opt/elastalert/config"
            },
            {
              "Key": "CONTAINER_TIMEZONE",
              "Value": "Etc/UTC"
            },
            {
              "Key": "DOCKERIZE_VERSION",
              "Value": "0.6.1"
            },
            {
              "Key": "RULES_FOLDER",
              "Value": "/opt/elastalert/rules"
            },
            {
              "Key": "SET_CONTAINER_TIMEZONE",
              "Value": "True"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ELASTALERT_CONFIG",
              "Value": "\"${CONFIG_FOLDER}/elastalert_config.yaml\""
            },
            {
              "Key": "ELASTALERT_INDEX",
              "Value": "elastalert_status"
            },
            {
              "Key": "ELASTALERT_SYSTEM_GROUP",
              "Value": "elastalert"
            },
            {
              "Key": "ELASTALERT_SYSTEM_USER",
              "Value": "elastalert"
            },
            {
              "Key": "ELASTALERT_VERSION",
              "Value": "0.1.29"
            },
            {
              "Key": "ELASTICSEARCH_HOST",
              "Value": "elasticsearch"
            },
            {
              "Key": "ELASTICSEARCH_PORT",
              "Value": "9200"
            },
            {
              "Key": "ELASTICSEARCH_USE_SSL",
              "Value": "False"
            },
            {
              "Key": "ELASTICSEARCH_VERIFY_CERTS",
              "Value": "False"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk update     \u0026\u0026 apk upgrade     \u0026\u0026 apk add --no-cache         ca-certificates         dumb-init         openntpd         openssl         py2-pip         py2-yaml         python2         su-exec         tzdata         wget     \u0026\u0026 apk add --no-cache --virtual         .build-dependencies         gcc         libffi-dev         musl-dev         openssl-dev         python2-dev     \u0026\u0026 pip install --upgrade pip     \u0026\u0026 pip install elastalert==\"${ELASTALERT_VERSION}\"     \u0026\u0026 apk del --purge .build-dependencies     \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 wget -nv -O dockerize.tar.gz         \"https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz\"     \u0026\u0026 tar -C /usr/local/bin -xzvf dockerize.tar.gz     \u0026\u0026 chmod +x \"/usr/local/bin/dockerize\"     \u0026\u0026 rm dockerize.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p \"${CONFIG_FOLDER}\"     \u0026\u0026 mkdir -p \"${RULES_FOLDER}\"     \u0026\u0026 mkdir -p /var/empty     \u0026\u0026 addgroup \"${ELASTALERT_SYSTEM_GROUP}\"     \u0026\u0026 adduser -S -G \"${ELASTALERT_SYSTEM_GROUP}\" \"${ELASTALERT_SYSTEM_USER}\"     \u0026\u0026 chown -R \"${ELASTALERT_SYSTEM_USER}\":\"${ELASTALERT_SYSTEM_GROUP}\" \"${CONFIG_FOLDER}\" \"${RULES_FOLDER}\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/elastalert_config.yaml.tmpl",
            "\"${CONFIG_FOLDER}/elastalert_config.yaml.tmpl\""
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/docker-entrypoint.sh",
            "/docker-entrypoint.sh"
          ]
        },
        {
          "Health": {
            "Interval": 30000000000,
            "Retries": 3,
            "Test": [
              "CMD-SHELL",
              "ps -ef | grep \"[e]lastalert.elastalert\" \u003e/dev/null 2\u003e\u00261"
            ],
            "Timeout": 10000000000
          },
          "Name": "healthcheck"
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}