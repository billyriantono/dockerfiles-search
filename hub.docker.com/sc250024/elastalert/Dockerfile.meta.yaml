MetaArgs: null
Stages:
- BaseName: alpine:3.7
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Scott Crooks <scott.crooks@gmail.com>"'
    Name: label
  - Env:
    - Key: CONFIG_FOLDER
      Value: /opt/elastalert/config
    - Key: CONTAINER_TIMEZONE
      Value: Etc/UTC
    - Key: DOCKERIZE_VERSION
      Value: 0.6.1
    - Key: RULES_FOLDER
      Value: /opt/elastalert/rules
    - Key: SET_CONTAINER_TIMEZONE
      Value: "True"
    Name: env
  - Env:
    - Key: ELASTALERT_CONFIG
      Value: '"${CONFIG_FOLDER}/elastalert_config.yaml"'
    - Key: ELASTALERT_INDEX
      Value: elastalert_status
    - Key: ELASTALERT_SYSTEM_GROUP
      Value: elastalert
    - Key: ELASTALERT_SYSTEM_USER
      Value: elastalert
    - Key: ELASTALERT_VERSION
      Value: 0.1.29
    - Key: ELASTICSEARCH_HOST
      Value: elasticsearch
    - Key: ELASTICSEARCH_PORT
      Value: "9200"
    - Key: ELASTICSEARCH_USE_SSL
      Value: "False"
    - Key: ELASTICSEARCH_VERIFY_CERTS
      Value: "False"
    Name: env
  - CmdLine:
    - set -ex     && apk update     && apk upgrade     && apk add --no-cache         ca-certificates         dumb-init         openntpd         openssl         py2-pip         py2-yaml         python2         su-exec         tzdata         wget     &&
      apk add --no-cache --virtual         .build-dependencies         gcc         libffi-dev         musl-dev         openssl-dev         python2-dev     &&
      pip install --upgrade pip     && pip install elastalert=="${ELASTALERT_VERSION}"     &&
      apk del --purge .build-dependencies     && rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex     && wget -nv -O dockerize.tar.gz         "https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz"     &&
      tar -C /usr/local/bin -xzvf dockerize.tar.gz     && chmod +x "/usr/local/bin/dockerize"     &&
      rm dockerize.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p "${CONFIG_FOLDER}"     && mkdir -p "${RULES_FOLDER}"     && mkdir -p
      /var/empty     && addgroup "${ELASTALERT_SYSTEM_GROUP}"     && adduser -S -G
      "${ELASTALERT_SYSTEM_GROUP}" "${ELASTALERT_SYSTEM_USER}"     && chown -R "${ELASTALERT_SYSTEM_USER}":"${ELASTALERT_SYSTEM_GROUP}"
      "${CONFIG_FOLDER}" "${RULES_FOLDER}"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - src/elastalert_config.yaml.tmpl
    - '"${CONFIG_FOLDER}/elastalert_config.yaml.tmpl"'
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - src/docker-entrypoint.sh
    - /docker-entrypoint.sh
  - Health:
      Interval: 30000000000
      Retries: 3
      Test:
      - CMD-SHELL
      - ps -ef | grep "[e]lastalert.elastalert" >/dev/null 2>&1
      Timeout: 10000000000
    Name: healthcheck
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.7
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.7
