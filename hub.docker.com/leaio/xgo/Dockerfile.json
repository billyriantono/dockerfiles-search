{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Maintainer": "Péter Szilágyi \u003cpeterke@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "FETCH",
              "Value": "./fetch.sh"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo '#!/bin/bash'                   \u003e $FETCH \u0026\u0026   echo 'set -e'                       \u003e\u003e $FETCH \u0026\u0026   echo 'file=`basename $1`'           \u003e\u003e $FETCH \u0026\u0026   echo 'echo \"Downloading $1...\"'     \u003e\u003e $FETCH \u0026\u0026   echo 'wget -q $1'                   \u003e\u003e $FETCH \u0026\u0026   echo 'echo \"$2  $file\" \u003e $file.sum' \u003e\u003e $FETCH \u0026\u0026   echo 'sha1sum -c $file.sum'         \u003e\u003e $FETCH \u0026\u0026   echo 'rm $file.sum'                 \u003e\u003e $FETCH \u0026\u0026   chmod +x $FETCH"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026   apt-get install -y automake autogen build-essential ca-certificates     gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-multilib gcc-mingw-w64     clang llvm-dev  libtool libxml2-dev uuid-dev libssl-dev pkg-config     patch make xz-utils cpio wget unzip git mercurial --no-install-recommends"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "OSX_SDK_PATH",
              "Value": "http://lea.io/files/osxcross/MacOSX10.10.sdk.tar.xz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OSX_SDK",
              "Value": "MacOSX10.10.sdk"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/tpoechtrager/osxcross.git \u0026\u0026   sed -i.bak s/read/#read/g /osxcross/build.sh \u0026\u0026     $FETCH $OSX_SDK_PATH 5951292b462572607d82f3d7611101e71bb0a54c \u0026\u0026   mv `basename $OSX_SDK_PATH` /osxcross/tarballs/ \u0026\u0026     OSX_VERSION_MIN=10.6 /osxcross/build.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BOOTSTRAP",
              "Value": "./bootstrap.sh"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo '#!/bin/bash'                                                                                        \u003e $BOOTSTRAP \u0026\u0026   echo 'set -e'                                                                                            \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_LINUX_64  $DIST_LINUX_64_SHA1'                                                        \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_LINUX_32  $DIST_LINUX_32_SHA1'                                                        \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_LINUX_ARM $DIST_LINUX_ARM_SHA1'                                                       \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_OSX_64    $DIST_OSX_64_SHA1'                                                          \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_OSX_32    $DIST_OSX_32_SHA1'                                                          \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_WIN_64    $DIST_WIN_64_SHA1'                                                          \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '$FETCH $DIST_WIN_32    $DIST_WIN_32_SHA1'                                                          \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'tar -C /usr/local -xzf `basename $DIST_LINUX_64`'                                                  \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'tar -C /usr/local --wildcards -xzf `basename $DIST_LINUX_32` go/pkg/linux_386*'                    \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=linux GOARCH=386 /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                           \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'tar -C /usr/local --wildcards -xzf `basename $DIST_LINUX_ARM` go/pkg/linux_arm*'                   \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=linux GOARCH=arm /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                           \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'tar -C /usr/local --wildcards -xzf `basename $DIST_OSX_64` go/pkg/darwin_amd64*'                   \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=darwin GOARCH=amd64 /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                        \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'tar -C /usr/local --wildcards -xzf `basename $DIST_OSX_32` go/pkg/darwin_386*'                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=darwin GOARCH=386 /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                          \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'unzip -d /usr/local -q `basename $DIST_WIN_64` go/pkg/windows_amd64*'                              \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=windows GOARCH=amd64 /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                       \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'unzip -d /usr/local -q `basename $DIST_WIN_32` go/pkg/windows_386*'                                \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'GOOS=windows GOARCH=386 /usr/local/go/pkg/tool/linux_amd64/dist bootstrap'                         \u003e\u003e $BOOTSTRAP \u0026\u0026   echo                                                                                                     \u003e\u003e $BOOTSTRAP \u0026\u0026   echo 'rm -f `basename $DIST_LINUX_64` `basename $DIST_LINUX_32` `basename $DIST_LINUX_ARM` \\\\'           \u003e\u003e $BOOTSTRAP \u0026\u0026   echo '  `basename $DIST_OSX_64` `basename $DIST_OSX_32` `basename $DIST_WIN_64` `basename $DIST_WIN_32`' \u003e\u003e $BOOTSTRAP \u0026\u0026   chmod +x $BOOTSTRAP"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILD",
              "Value": "./build.sh"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo '#!/bin/bash'                                                                                                    \u003e $BUILD \u0026\u0026   echo 'set -e'                                                                                                        \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Fetching $1...'                                                                                           \u003e\u003e $BUILD \u0026\u0026   echo 'go get $1'                                                                                                     \u003e\u003e $BUILD \u0026\u0026   echo 'cd $GOPATH/src/$1'                                                                                             \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'NAME=`basename $1`'                                                                                            \u003e\u003e $BUILD \u0026\u0026   echo 'if [ \"$OUT\" != \"\" ]; then'                                                                                     \u003e\u003e $BUILD \u0026\u0026   echo '  NAME=$OUT'                                                                                                   \u003e\u003e $BUILD \u0026\u0026   echo 'fi'                                                                                                            \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'if [ \"$FLAG_V\" == \"true\" ]; then V=-v; fi'                                                                     \u003e\u003e $BUILD \u0026\u0026   echo 'if [ \"$FLAG_RACE\" == \"true\" ]; then R=-race; fi'                                                               \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for linux/amd64...'                                                                             \u003e\u003e $BUILD \u0026\u0026   echo 'GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go get'                                                                  \u003e\u003e $BUILD \u0026\u0026   echo 'GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build $V $R -o $NAME-linux-amd64$R'                                   \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for linux/386...'                                                                               \u003e\u003e $BUILD \u0026\u0026   echo 'GOOS=linux GOARCH=386 CGO_ENABLED=1 go get'                                                                    \u003e\u003e $BUILD \u0026\u0026   echo 'GOOS=linux GOARCH=386 CGO_ENABLED=1 go build $V -o $NAME-linux-386'                                            \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for linux/arm...'                                                                               \u003e\u003e $BUILD \u0026\u0026   echo 'CC=arm-linux-gnueabi-gcc GOOS=linux GOARCH=arm CGO_ENABLED=1 GOARM=5 go get'                                   \u003e\u003e $BUILD \u0026\u0026   echo 'CC=arm-linux-gnueabi-gcc GOOS=linux GOARCH=arm CGO_ENABLED=1 GOARM=5 go build $V -o $NAME-linux-arm'           \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for windows/amd64...'                                                                           \u003e\u003e $BUILD \u0026\u0026   echo 'CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go get'                                      \u003e\u003e $BUILD \u0026\u0026   echo 'CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build $V $R -o $NAME-windows-amd64$R.exe' \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for windows/386...'                                                                             \u003e\u003e $BUILD \u0026\u0026   echo 'CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 CGO_ENABLED=1 go get'                                          \u003e\u003e $BUILD \u0026\u0026   echo 'CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 CGO_ENABLED=1 go build $V -o $NAME-windows-386.exe'            \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for darwin/amd64...'                                                                            \u003e\u003e $BUILD \u0026\u0026   echo '`/osxcross/target/bin/osxcross-env`'                                                                           \u003e\u003e $BUILD \u0026\u0026   echo 'CC=o64-clang GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go get'                                                    \u003e\u003e $BUILD \u0026\u0026   echo 'CC=o64-clang GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build $V $R -o $NAME-darwin-amd64$R'                    \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Compiling for darwin/386...'                                                                              \u003e\u003e $BUILD \u0026\u0026   echo 'CC=o32-clang GOOS=darwin GOARCH=386 CGO_ENABLED=1 go get'                                                      \u003e\u003e $BUILD \u0026\u0026   echo 'CC=o32-clang GOOS=darwin GOARCH=386 CGO_ENABLED=1 go build $V -o $NAME-darwin-386'                             \u003e\u003e $BUILD \u0026\u0026   echo                                                                                                                 \u003e\u003e $BUILD \u0026\u0026   echo 'echo Moving binaries to host...'                                                                               \u003e\u003e $BUILD \u0026\u0026   echo 'cp `ls -t | head -n 7` /build'                                                                                 \u003e\u003e $BUILD \u0026\u0026   chmod +x $BUILD"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./build.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}