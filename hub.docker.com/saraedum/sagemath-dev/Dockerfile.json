{
  "MetaArgs": [
    {
      "Key": "ARTIFACT_BASE",
      "DefaultValue": "source-clean",
      "ProvidedValue": null,
      "Value": "source-clean"
    }
  ],
  "Stages": [
    {
      "Name": "run-time-dependencies",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial as run-time-dependencies",
      "Platform": "",
      "As": "run-time-dependencies",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Erik M. Bray \u003cerik.bray@lri.fr\u003e, Julian RÃ¼th \u003cjulian.rueth@fsfe.org\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "CmdLine": [
            "ln -s \"$SAGE_ROOT/sage\" /usr/bin/sage"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/bin/sage /usr/bin/sagemath"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -qq update     \u0026\u0026 apt-get -qq install -y --no-install-recommends gfortran gcc g++ libstdc++-5-dev sudo openssl     \u0026\u0026 apt-get -qq clean     \u0026\u0026 rm -r /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "HOME",
          "Name": "arg",
          "Value": "/home/sage"
        },
        {
          "CmdLine": [
            "adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password --home \"$HOME\" sage     \u0026\u0026 echo \"sage ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers.d/01-sage     \u0026\u0026 chmod 0440 /etc/sudoers.d/01-sage"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "sage"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "$HOME"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        }
      ]
    },
    {
      "Name": "build-time-dependencies",
      "BaseName": "run-time-dependencies",
      "SourceCode": "FROM run-time-dependencies as build-time-dependencies",
      "Platform": "",
      "As": "build-time-dependencies",
      "From": {
        "Stage": {
          "Named": "run-time-dependencies",
          "Index": 0
        }
      },
      "Commands": [
        {
          "CmdLine": [
            "sudo apt-get -qq update     \u0026\u0026 sudo apt-get -qq install -y wget build-essential automake m4 dpkg-dev python libssl-dev git rdfind     \u0026\u0026 sudo apt-get -qq clean     \u0026\u0026 sudo rm -r /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "source-clean",
      "BaseName": "build-time-dependencies",
      "SourceCode": "FROM build-time-dependencies as source-clean",
      "Platform": "",
      "As": "source-clean",
      "From": {
        "Stage": {
          "Named": "build-time-dependencies",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "CmdLine": [
            "mkdir -p \"$SAGE_ROOT\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$SAGE_ROOT"
        },
        {
          "CmdLine": [
            "git init"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git remote add trac git://trac.sagemath.org/sage.git"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "source-from-context",
      "BaseName": "$ARTIFACT_BASE",
      "SourceCode": "FROM $ARTIFACT_BASE as source-from-context",
      "Platform": "",
      "As": "source-from-context",
      "From": {
        "Image": "$ARTIFACT_BASE"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "Chown": "sage:sage",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "sage-context"
          ]
        },
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "Name": "workdir",
          "Path": "$SAGE_ROOT"
        },
        {
          "CmdLine": [
            "find . -type f \u003e $HOME/artifact-base.manifest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git fetch \"$HOME/sage-context\" HEAD     \u0026\u0026 if [ -e docker/.commit ]; then           git reset `cat docker/.commit`           || ( echo \"Could not find commit `cat docker/.commit` in your local Git history. Please merge in the latest built develop branch to fix this: git fetch trac \u0026\u0026 git merge `cat docker/.commit`.\" \u0026\u0026 exit 1 )        else           echo \"You are building from $ARTIFACT_BASE which has no docker/.commit file. That's a bug unless you are building from source-clean or something similar.\"           \u0026\u0026 git reset FETCH_HEAD           \u0026\u0026 git checkout -f FETCH_HEAD;        fi     \u0026\u0026 git merge --ff-only FETCH_HEAD     \u0026\u0026 git log -1 --format=%H \u003e docker/.commit     \u0026\u0026 rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$HOME/sage-context"
        },
        {
          "CmdLine": [
            "if git status --porcelain | read CHANGES; then         git -c user.name=docker-build -c user.email=docker-build@sage.invalid stash -u         \u0026\u0026 git stash show -p \u003e \"$HOME\"/sage-context.patch;     else         touch \"$HOME\"/sage-context.patch;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$SAGE_ROOT"
        },
        {
          "CmdLine": [
            "patch -p1 \u003c \"$HOME\"/sage-context.patch"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "make-build",
      "BaseName": "source-from-context",
      "SourceCode": "FROM source-from-context as make-build",
      "Platform": "",
      "As": "make-build",
      "From": {
        "Stage": {
          "Named": "source-from-context",
          "Index": 3
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "SAGE_FAT_BINARY",
              "Value": "yes"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SAGE_INSTALL_GCC",
              "Value": "no"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "MAKEOPTS",
          "Name": "arg",
          "Value": "\"-j2\""
        },
        {
          "Env": [
            {
              "Key": "MAKEOPTS",
              "Value": "$MAKEOPTS"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "SAGE_NUM_THREADS",
          "Name": "arg",
          "Value": "\"2\""
        },
        {
          "Env": [
            {
              "Key": "SAGE_NUM_THREADS",
              "Value": "$SAGE_NUM_THREADS"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "make build"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "make-all",
      "BaseName": "make-build",
      "SourceCode": "FROM make-build as make-all",
      "Platform": "",
      "As": "make-all",
      "From": {
        "Stage": {
          "Named": "make-build",
          "Index": 4
        }
      },
      "Commands": [
        {
          "Key": "MAKEOPTS_DOCBUILD",
          "Name": "arg",
          "Value": "$MAKEOPTS"
        },
        {
          "Env": [
            {
              "Key": "MAKEOPTS_DOCBUILD",
              "Value": "$MAKEOPTS_DOCBUILD"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "SAGE_NUM_THREADS_DOCBUILD",
          "Name": "arg",
          "Value": "$SAGE_NUM_THREADS"
        },
        {
          "Env": [
            {
              "Key": "SAGE_NUM_THREADS_DOCBUILD",
              "Value": "$SAGE_NUM_THREADS_DOCBUILD"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "make"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "make-release",
      "BaseName": "make-all",
      "SourceCode": "FROM make-all as make-release",
      "Platform": "",
      "As": "make-release",
      "From": {
        "Stage": {
          "Named": "make-all",
          "Index": 5
        }
      },
      "Commands": [
        {
          "CmdLine": [
            "sage -pip install terminado \"notebook\u003e=5\" \"ipykernel\u003e=4.6\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sage -i gap_jupyter singular_jupyter pari_jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make micro_release"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "sagemath",
      "BaseName": "run-time-dependencies",
      "SourceCode": "FROM run-time-dependencies as sagemath",
      "Platform": "",
      "As": "sagemath",
      "From": {
        "Stage": {
          "Named": "run-time-dependencies",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Key": "HOME",
          "Name": "arg",
          "Value": "/home/sage"
        },
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "Chown": "sage:sage",
          "From": "make-release",
          "Name": "copy",
          "SourcesAndDest": [
            "$SAGE_ROOT/",
            "$SAGE_ROOT/"
          ]
        },
        {
          "CmdLine": [
            "sudo $SAGE_ROOT/sage --nodotsage -c \"install_scripts('/usr/bin')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/entrypoint.sh",
            "/usr/local/bin/sage-entrypoint"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "/usr/local/bin/sage-entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "sage"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    },
    {
      "Name": "make-fast-rebuild-clean",
      "BaseName": "make-all",
      "SourceCode": "FROM make-all as make-fast-rebuild-clean",
      "Platform": "",
      "As": "make-fast-rebuild-clean",
      "From": {
        "Stage": {
          "Named": "make-all",
          "Index": 5
        }
      },
      "Commands": [
        {
          "CmdLine": [
            "make fast-rebuild-clean"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "sagemath-dev-patch",
      "BaseName": "make-fast-rebuild-clean",
      "SourceCode": "FROM make-fast-rebuild-clean as sagemath-dev-patch",
      "Platform": "",
      "As": "sagemath-dev-patch",
      "From": {
        "Stage": {
          "Named": "make-fast-rebuild-clean",
          "Index": 8
        }
      },
      "Commands": [
        {
          "Key": "ARTIFACT_BASE",
          "Name": "arg",
          "Value": "source-clean"
        },
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "CmdLine": [
            "if [ x\"$ARTIFACT_BASE\" != x\"source-clean\" ]; then         mkdir -p $HOME/patch         \u0026\u0026 find . -type f \u003e $HOME/make-fast-rebuild-clean.manifest         \u0026\u0026 cat $HOME/make-fast-rebuild-clean.manifest $HOME/artifact-base.manifest | sort | uniq -u \u003e $HOME/obsolete         \u0026\u0026 find . -type f -cnewer $HOME/artifact-base.manifest \u003e $HOME/modified         \u0026\u0026 tar -cJf $HOME/patch/modified.tar.xz -T $HOME/modified         \u0026\u0026 cat $HOME/obsolete $HOME/modified | xz \u003e $HOME/patch/modified.xz         \u0026\u0026 rm -rf $SAGE_ROOT         \u0026\u0026 mkdir -p $SAGE_ROOT         \u0026\u0026 mv $HOME/patch $SAGE_ROOT/;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "sagemath-dev",
      "BaseName": "$ARTIFACT_BASE",
      "SourceCode": "FROM $ARTIFACT_BASE as sagemath-dev",
      "Platform": "",
      "As": "sagemath-dev",
      "From": {
        "Image": "$ARTIFACT_BASE"
      },
      "Commands": [
        {
          "Key": "SAGE_ROOT",
          "Name": "arg",
          "Value": "/home/sage/sage"
        },
        {
          "Chown": "sage:sage",
          "From": "sagemath-dev-patch",
          "Name": "copy",
          "SourcesAndDest": [
            "$SAGE_ROOT",
            "$SAGE_ROOT"
          ]
        },
        {
          "Key": "ARTIFACT_BASE",
          "Name": "arg",
          "Value": "source-clean"
        },
        {
          "CmdLine": [
            "if [ x\"$ARTIFACT_BASE\" != x\"source-clean\" ]; then         echo \"Applying `du -hs patch/modified.tar.xz` patch\"         \u0026\u0026 xzcat patch/modified.xz | xargs rm -rvf         \u0026\u0026 tar -Jxf patch/modified.tar.xz         \u0026\u0026 rm -rf patch;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/entrypoint-dev.sh",
            "/usr/local/bin/sage-entrypoint"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/bin/sage-entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}