{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "SourceCode": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04"
      },
      "Commands": [
        {
          "Maintainer": "Steve Zheng \"stevezheng23@gmail.com\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         ca-certificates         curl         wget     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex;     if ! command -v gpg \u003e /dev/null; then         apt-get update;         apt-get install -y --no-install-recommends             gnupg             dirmngr         ;         rm -rf /var/lib/apt/lists/*;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         bzr         git         mercurial         openssh-client         subversion                 procps     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         tcl         tk         vim         gcc g++         build-essential checkinstall         libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev         zip unzip     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GPG_KEY",
              "Value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.6.4"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 buildDeps='         dpkg-dev         tcl-dev         tk-dev     '     \u0026\u0026 apt-get update \u0026\u0026 apt-get install -y $buildDeps --no-install-recommends \u0026\u0026 rm -rf /var/lib/apt/lists/*         \u0026\u0026 wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"     \u0026\u0026 wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\"     \u0026\u0026 gpg --batch --verify python.tar.xz.asc python.tar.xz     \u0026\u0026 rm -rf \"$GNUPGHOME\" python.tar.xz.asc     \u0026\u0026 mkdir -p /usr/src/python     \u0026\u0026 tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz     \u0026\u0026 rm python.tar.xz         \u0026\u0026 cd /usr/src/python     \u0026\u0026 gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"     \u0026\u0026 ./configure         --build=\"$gnuArch\"         --enable-loadable-sqlite-extensions         --enable-shared         --with-system-expat         --with-system-ffi         --without-ensurepip     \u0026\u0026 make -j \"$(nproc)\"     \u0026\u0026 make install     \u0026\u0026 ldconfig         \u0026\u0026 apt-get purge -y --auto-remove $buildDeps         \u0026\u0026 find /usr/local -depth         \\(             \\( -type d -a \\( -name test -o -name tests \\) \\)             -o             \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)         \\) -exec rm -rf '{}' +     \u0026\u0026 rm -rf /usr/src/python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/bin     \u0026\u0026 ln -s idle3 idle     \u0026\u0026 ln -s pydoc3 pydoc     \u0026\u0026 ln -s python3 python     \u0026\u0026 ln -s python3-config python-config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHON_PIP_VERSION",
              "Value": "19.0.3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex;         wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';         python get-pip.py         --disable-pip-version-check         --no-cache-dir         \"pip==$PYTHON_PIP_VERSION\"     ;     pip --version;         find /usr/local -depth         \\(             \\( -type d -a \\( -name test -o -name tests \\) \\)             -o             \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\)         \\) -exec rm -rf '{}' +;     rm -f get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.13.1-cp36-cp36m-linux_x86_64.whl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --upgrade nltk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m nltk.downloader all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --upgrade spacy"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m spacy download en"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --upgrade sentencepiece"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}