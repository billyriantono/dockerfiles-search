MetaArgs: null
Stages:
- BaseName: node:10-alpine
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"clement.schockaert@outlook.com"'
    Name: label
  - CmdLine:
    - "apk add --no-cache \t\tca-certificates"
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ ! -e /etc/nsswitch.conf ] && echo ''hosts: files dns'' > /etc/nsswitch.conf'
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_CHANNEL
      Value: stable
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: 18.06.0-ce
    Name: env
  - CmdLine:
    - "set -ex; \tapk add --no-cache --virtual .fetch-deps \t\tcurl \t\ttar \t; \t\tapkArch=\"$(apk
      --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf)
      dockerArch='armel' ;; \t\taarch64) dockerArch='aarch64' ;; \t\tppc64le) dockerArch='ppc64le'
      ;; \t\ts390x) dockerArch='s390x' ;; \t\t*) echo >&2 \"error: unsupported architecture
      ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\";
      then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from
      '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract
      \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/
      \t; \trm docker.tgz; \t\tapk del .fetch-deps; \t\tdockerd -v; \tdocker -v"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk update && apk upgrade &&     apk add --no-cache bash git openssh
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: fr_FR.UTF-8
    - Key: LANGUAGE
      Value: fr_FR.UTF-8
    - Key: LC_CTYPE
      Value: fr_FR.UTF-8
    - Key: LC_ALL
      Value: fr_FR.UTF-8
    Name: env
  - CmdLine:
    - apk add --update --no-cache socat curl tzdata findutils
    Name: run
    PrependShell: true
  - Env:
    - Key: TZ
      Value: Europe/Paris
    Name: env
  - CmdLine:
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    Name: run
    PrependShell: true
  - CmdLine:
    - "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-1.8-openjdk
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u171
    Name: env
  - Env:
    - Key: JAVA_ALPINE_VERSION
      Value: 8.171.11-r0
    Name: env
  - CmdLine:
    - "set -x \t&& apk add --no-cache \t\topenjdk8=\"$JAVA_ALPINE_VERSION\" \t&& [
      \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update     python     python-dev     py-pip     build-base && rm -rf
      /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apk update  && apk add jq  && rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apk update && apk upgrade &&   apk --no-cache add ruby ruby-dev ruby-bundler
      ruby-json ruby-irb ruby-rake ruby-bigdecimal ruby-rdoc &&   rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install danger &&     gem install danger-commit_lint &&     gem install
      danger-prose
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache curl tar bash procps
    Name: run
    PrependShell: true
  - Key: MAVEN_VERSION
    Name: arg
    Value: 3.5.4
  - Key: USER_HOME_DIR
    Name: arg
    Value: '"/root"'
  - Key: SHA
    Name: arg
    Value: ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d
  - Key: BASE_URL
    Name: arg
    Value: https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries
  - CmdLine:
    - mkdir -p /usr/share/maven /usr/share/maven/ref   && curl -fsSL -o /tmp/apache-maven.tar.gz
      ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz   && echo "${SHA}  /tmp/apache-maven.tar.gz"
      | sha256sum -c -   && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven
      --strip-components=1   && rm -f /tmp/apache-maven.tar.gz   && ln -s /usr/share/maven/bin/mvn
      /usr/bin/mvn
    Name: run
    PrependShell: true
  - Env:
    - Key: MAVEN_HOME
      Value: /usr/share/maven
    Name: env
  - Env:
    - Key: MAVEN_CONFIG
      Value: '"$USER_HOME_DIR/.m2"'
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - mvn-entrypoint.sh
    - /usr/local/bin/mvn-entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - settings-docker.xml
    - /usr/share/maven/ref/
  - CmdLine:
    - /usr/local/bin/mvn-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - mvn
    Name: cmd
    PrependShell: false
  From:
    Image: node:10-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM node:10-alpine
