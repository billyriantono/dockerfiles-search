{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "appcelerator/alpine:3.5.2",
      "SourceCode": "FROM appcelerator/alpine:3.5.2",
      "Platform": "",
      "From": {
        "Image": "appcelerator/alpine:3.5.2"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "INFLUXDB_VERSION",
              "Value": "1.2.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_VERSION",
              "Value": "1.8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_SRC_URL",
              "Value": "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_SRC_SHA256",
              "Value": "406865f587b44be7092f206d73fc1de252600b79b3cacc587b74b5ef5c623596"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026 apk upgrade \u0026\u0026     apk --virtual build-deps add go python openssl git gcc musl-dev make patch \u0026\u0026     export GOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \u0026\u0026     wget -q \"$GOLANG_SRC_URL\" -O golang.tar.gz \u0026\u0026     echo \"$GOLANG_SRC_SHA256  golang.tar.gz\" | sha256sum -c - \u0026\u0026     tar -C /usr/local -xzf golang.tar.gz \u0026\u0026     rm golang.tar.gz \u0026\u0026     cd /usr/local/go/src \u0026\u0026     ./make.bash \u0026\u0026     export GOPATH=/go \u0026\u0026     export PATH=/usr/local/go/bin:$PATH \u0026\u0026     go version \u0026\u0026     go get -v github.com/influxdata/influxdb \u0026\u0026     cd $GOPATH/src/github.com/influxdata/influxdb \u0026\u0026     git checkout -q --detach \"v${INFLUXDB_VERSION}\" \u0026\u0026     python ./build.py \u0026\u0026     chmod +x ./build/influx* \u0026\u0026     mv ./build/influx* /bin/ \u0026\u0026     mkdir -p /etc/influxdb /data/influxdb /data/influxdb/meta /data/influxdb/data /var/tmp/influxdb/wal /var/log/influxdb \u0026\u0026     apk del build-deps \u0026\u0026 cd / \u0026\u0026 rm -rf $GOPATH/ /var/cache/apk/* /usr/local/go"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026 apk add util-linux \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ADMIN_USER",
              "Value": "root"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "INFLUXDB_INIT_PWD",
              "Value": "root"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "types.db",
            "/usr/share/collectd/types.db"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "config.toml",
            "/etc/influxdb/config.toml.tpl"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "run.sh",
            "/run.sh"
          ]
        },
        {
          "Env": [
            {
              "Key": "PRE_CREATE_DB",
              "Value": "**None**"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "8083"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8086"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "CmdLine": [
            "/bin/sh",
            "-c"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/run.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Health": {
            "Interval": 5000000000,
            "Retries": 24,
            "Test": [
              "CMD-SHELL",
              "curl -sI 127.0.0.1:8086/ping | grep -q \"204 No Content\""
            ],
            "Timeout": 1000000000
          },
          "Name": "healthcheck"
        }
      ]
    }
  ]
}