{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "adduser --disabled-password --gecos \"\" app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /home/app/static;     mkdir -p /home/app/logs;     mkdir -p /home/app/media;     mkdir -p /home/app/src;     mkdir -p /home/app/conf;     mkdir -p /home/app/scripts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y nginx supervisor vim-nox libncurses5-dev curl wget htop build-essential"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y python3 python3-dev python3-pip \u0026\u0026     pip3 install --upgrade pip \u0026\u0026     pip3 install gunicorn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "conf",
            "/home/app/conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts",
            "/home/app/scripts"
          ]
        },
        {
          "CmdLine": [
            "chmod 755 -R /home/app/scripts"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /home/app/conf/supervisord.conf /etc/supervisor/conf.d/supervisord.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"daemon off;\" \u003e\u003e /etc/nginx/nginx.conf ;     rm /etc/nginx/sites-enabled/* ;     ln -s /home/app/conf/django-nginx /etc/nginx/sites-enabled/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libpq-dev \u0026\u0026     pip3 install psycopg2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libxslt1-dev libxml2-dev lib32z1-dev zlib1g-dev python3-lxml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y git nodejs-legacy npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g grunt grunt-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Expression": "COPY . /home/app/src/",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY start.sh /home/app/scripts/",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN pip3 install -r /home/app/src/requirements.txt",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN chown -R app:app /home/app",
          "Name": "onbuild"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/home/app/scripts/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}