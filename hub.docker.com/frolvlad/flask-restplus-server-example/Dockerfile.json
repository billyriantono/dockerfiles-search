{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "frolvlad/alpine-python3",
      "SourceCode": "FROM frolvlad/alpine-python3",
      "Platform": "",
      "From": {
        "Image": "frolvlad/alpine-python3"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "API_SERVER_HOME",
              "Value": "/opt/www"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "\"$API_SERVER_HOME\""
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"./requirements.txt\"",
            "\"./\""
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"./app/requirements.txt\"",
            "\"./app/\""
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"./config.py\"",
            "\"./\""
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"./tasks\"",
            "\"./tasks\""
          ]
        },
        {
          "Key": "INCLUDE_POSTGRESQL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Key": "INCLUDE_UWSGI",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual=.build_dependencies musl-dev gcc python3-dev libffi-dev linux-headers \u0026\u0026     cd /opt/www \u0026\u0026     pip install -r tasks/requirements.txt \u0026\u0026     invoke app.dependencies.install \u0026\u0026     (         if [ \"$INCLUDE_POSTGRESQL\" = 'true' ]; then             apk add --no-cache libpq \u0026\u0026             apk add --no-cache --virtual=.build_dependencies postgresql-dev \u0026\u0026             pip install psycopg2 ;         fi     ) \u0026\u0026     ( if [ \"$INCLUDE_UWSGI\" = 'true' ]; then pip install uwsgi ; fi ) \u0026\u0026     rm -rf ~/.cache/pip \u0026\u0026     apk del .build_dependencies"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"./\"",
            "\"./\""
          ]
        },
        {
          "CmdLine": [
            "chown -R nobody \".\" \u0026\u0026     if [ ! -e \"./local_config.py\" ]; then         cp \"./local_config.py.template\" \"./local_config.py\" ;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "nobody"
        },
        {
          "CmdLine": [
            "invoke",
            "app.run",
            "--no-install-dependencies",
            "--host",
            "0.0.0.0"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}