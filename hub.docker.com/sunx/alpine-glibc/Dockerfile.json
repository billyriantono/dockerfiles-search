{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "glibc-base",
      "BaseName": "debian:stable-slim",
      "SourceCode": "FROM debian:stable-slim as glibc-base",
      "Platform": "",
      "As": "glibc-base",
      "From": {
        "Image": "debian:stable-slim"
      },
      "Commands": [
        {
          "Key": "GLIBC_VERSION",
          "Name": "arg",
          "Value": "2.28"
        },
        {
          "Key": "GLIBC_PREFIX",
          "Name": "arg",
          "Value": "/usr/glibc"
        },
        {
          "Env": [
            {
              "Key": "GLIBC_INSTALL_PATH",
              "Value": "/root/glibc"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y   curl build-essential gawk bison python3 texinfo gettext   \u0026\u0026 rm -rf /var/cache/apt /var/lib/apt   \u0026\u0026   cd /root \u0026\u0026   curl -SL http://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERSION}.tar.gz | tar xzf -   \u0026\u0026   mkdir -p /root/build \u0026\u0026 cd /root/build \u0026\u0026   ../glibc-${GLIBC_VERSION}/configure     --prefix=${GLIBC_PREFIX}     --libdir=\"${GLIBC_PREFIX}/lib\"     --libexecdir=\"${GLIBC_PREFIX}/lib\"     --enable-multi-arch     --enable-stack-protector=strong   \u0026\u0026   make -j`nproc` \u0026\u0026 make DESTDIR=${GLIBC_INSTALL_PATH} install \u0026\u0026   cd /root \u0026\u0026 rm -rf build glibc-${GLIBC_VERSION} \u0026\u0026   cd ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX} \u0026\u0026   ( strip bin/* sbin/* lib/* || true )"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"/usr/local/lib\" \u003e ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX}/etc/ld.so.conf \u0026\u0026   echo \"${GLIBC_PREFIX}/lib\" \u003e\u003e ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX}/etc/ld.so.conf \u0026\u0026   echo \"/usr/lib\" \u003e\u003e ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX}/etc/ld.so.conf \u0026\u0026   echo \"/lib\" \u003e\u003e ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX}/etc/ld.so.conf \u0026\u0026     cd ${GLIBC_INSTALL_PATH}${GLIBC_PREFIX} \u0026\u0026   rm -rf etc/rpc var include share bin/* sbin/[^l]*  \tlib/*.o lib/*.a lib/audit lib/gconv lib/getconf"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "alpine-glibx",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8 as alpine-glibx",
      "Platform": "",
      "As": "alpine-glibx",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Key": "GLIBC_PREFIX",
          "Name": "arg",
          "Value": "/usr/glibc"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "glibc-base",
          "Name": "copy",
          "SourcesAndDest": [
            "/root/glibc/",
            "/"
          ]
        },
        {
          "CmdLine": [
            "ln -s ${GLIBC_PREFIX}/lib/ld-linux-*.so.* /lib \u0026\u0026   ln -s ${GLIBC_PREFIX}/etc/ld.so.cache /etc \u0026\u0026   if [ `uname -m` = \"x86_64\" ]; then ln -s /lib /lib64; fi \u0026\u0026   ${GLIBC_PREFIX}/sbin/ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}