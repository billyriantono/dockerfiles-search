MetaArgs:
- DefaultValue: 8.12.0-slim
  Key: NODE_VERSION
  ProvidedValue: null
  Value: 8.12.0-slim
Stages:
- BaseName: node:${NODE_VERSION}
  Commands:
  - Key: GITHUB_ACCOUNT
    Name: arg
    Value: ging
  - Key: GITHUB_REPOSITORY
    Name: arg
    Value: fiware-idm
  - Key: DOWNLOAD_TYPE
    Name: arg
    Value: latest
  - Env:
    - Key: GITHUB_ACCOUNT
      Value: ${GITHUB_ACCOUNT}
    Name: env
  - Env:
    - Key: GITHUB_REPOSITORY
      Value: ${GITHUB_REPOSITORY}
    Name: env
  - Env:
    - Key: DOWNLOAD_TYPE
      Value: ${DOWNLOAD_TYPE}
    Name: env
  - Maintainer: FIWARE Identity Manager Team. DIT-UPM
    Name: maintainer
  - Name: workdir
    Path: /opt
  - Env:
    - Key: IDM_HOST
      Value: '"http://localhost:3000"     IDM_PORT "3000"     IDM_PDP_LEVEL "basic"     DATABASE_HOST
        "localhost"     IDM_DB_NAME "idm"     IDM_DIALECT "mysql"     IDM_EMAIL_HOST
        "localhost"     IDM_EMAIL_PORT "25"     IDM_EMAIL_ADDRESS "noreply@localhost"'
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends build-essential
      python debconf-utils curl git netcat  &&     echo "postfix postfix/mailname
      string ${IDM_EMAIL_ADDRESS}" | debconf-set-selections &&     echo "postfix postfix/main_mailer_type
      string 'Internet Site'" | debconf-set-selections &&     apt-get install -y --no-install-recommends
      postfix mailutils &&     apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/*
      /var/tmp/* &&     sed -i 's/inet_interfaces = all/inet_interfaces = loopback-only/g'
      /etc/postfix/main.cf
    Name: run
    PrependShell: true
  - CmdLine:
    - 'if [ ${DOWNLOAD_TYPE} = "latest" ] ; then RELEASE="master"; else RELEASE=$(curl
      -s https://api.github.com/repos/${GITHUB_ACCOUNT}/${GITHUB_REPOSITORY}/releases/latest
      | grep ''tag_name'' | cut -d\" -f4); fi &&     if [ ${DOWNLOAD_TYPE} = "latest"
      ] ; then echo "INFO: Building Latest Development"; else echo "INFO: Building
      Release: ${RELEASE}"; fi &&     apt-get update &&     apt-get install -y  --no-install-recommends
      unzip &&     wget --no-check-certificate -O source.zip https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPOSITORY}/archive/${RELEASE}.zip
      &&     unzip source.zip &&     mv ${GITHUB_REPOSITORY}-${RELEASE} /opt/fiware-idm
      &&     apt-get clean &&     apt-get remove -y unzip &&     apt-get -y autoremove'
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/fiware-idm
  - CmdLine:
    - rm -rf doc extras  &&     npm cache clean -f   &&     npm install --production  &&     rm
      -rf /root/.npm/cache/* &&     mkdir certs &&     openssl genrsa -out idm-2018-key.pem
      2048 &&     openssl req -new -sha256 -key idm-2018-key.pem -out idm-2018-csr.pem
      -batch &&     openssl x509 -req -in idm-2018-csr.pem -signkey idm-2018-key.pem
      -out idm-2018-cert.pem &&     mv idm-2018-key.pem idm-2018-cert.pem idm-2018-csr.pem
      certs/
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config_database.js
    - extras/docker/config_database.js
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config.js.template
    - config.js
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /opt/fiware-idm/docker-entrypoint.sh
  - CmdLine:
    - chmod 755 docker-entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/fiware-idm/docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: expose
    Ports:
    - ${IDM_PORT}
  From:
    Image: node:${NODE_VERSION}
  Name: ""
  Platform: ""
  SourceCode: FROM node:${NODE_VERSION}
