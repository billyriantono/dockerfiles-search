{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:17.10",
      "SourceCode": "FROM ubuntu:17.10",
      "Platform": "",
      "From": {
        "Image": "ubuntu:17.10"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "base.image",
              "Value": "\"ubuntu:17.10\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "pipeline",
              "Value": "\"tuxedo2\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "name",
              "Value": "\"tuxedo2_pipeline_worker\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"Docker image containing all required packages to run new Tuxedo differential expression analysis protocol\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "website",
              "Value": "\"https://ccb.jhu.edu/software/hisat2/index.shtml\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "documentation",
              "Value": "\"https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual#de\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "license",
              "Value": "\"GPL-2.0\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "tags",
              "Value": "\"Genomics\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Ilya Vasilyev \u003cu0412u0418u042e@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get clean all \u0026\u0026     apt-get -y update \u0026\u0026     apt-get -y upgrade"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install     curl     python     python-pip     wget     tar     zip     bzip2     ca-certificates     libglib2.0-0     libxext6     libsm6     libxrender1     git     mercurial     subversion"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` \u0026\u0026     curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" \u003e tini.deb \u0026\u0026     dpkg -i tini.deb \u0026\u0026     rm tini.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026     apt-get purge \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=/opt/conda/bin:$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     wget --quiet 'https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh' -O ~/miniconda.sh \u0026\u0026     /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026\u0026     rm ~/miniconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for p in numpy scipy pandas redis; do pip install ${p}; done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd fuse \u0026\u0026     useradd --create-home --shell /bin/bash --user-group --uid 1000 --groups sudo,fuse docker \u0026\u0026     echo `echo \"docker\\ndocker\\n\" | passwd docker` \u0026\u0026     mkdir /data /config ${REF_DIR} \u0026\u0026     chown docker:docker /data /config ${REF_DIR} \u0026\u0026     chmod -R 755 /data /config ${REF_DIR}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod 777 -R /opt/conda"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "docker"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/conda/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/home/docker/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/docker"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "conda config --add channels r \u0026\u0026     conda config --add channels bioconda \u0026\u0026     conda config --add channels biobuilds \u0026\u0026     conda config --add channels intel \u0026\u0026     conda upgrade -y conda"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for c in \"intel tbb\" \"biobuilds ncbi-ngs-sdk\" \"bioconda sra-tools\" \"bioconda hisat2\" \"bioconda samtools\" \"bioconda stringtie\" \"bioconda gffcompare\"; do conda install -y -c ${c} \u0026\u0026 conda upgrade -y -c ${c}; done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir ~/scripts \u0026\u0026     cd ~/scripts \u0026\u0026     git clone https://github.com/ivasilyev/biopipelines-docker.git \u0026\u0026     mv biopipelines-docker/tuxedo2_pipeline/worker/pipeline_wrapper.py . \u0026\u0026     rm -rf bowtie-tools biopipelines-docker \u0026\u0026     chmod -R +x ~/scripts \u0026\u0026     echo \"export PATH=$PATH:${PWD}\" | tee -a ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data",
            "/config",
            "/reference"
          ]
        },
        {
          "CmdLine": [
            "python",
            "/home/docker/scripts/pipeline_wrapper.py"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "workdir",
          "Path": "/home/docker"
        }
      ]
    }
  ]
}