MetaArgs: null
Stages:
- BaseName: ubuntu:17.10
  Commands:
  - Labels:
    - Key: base.image
      Value: '"ubuntu:17.10"'
    Name: label
  - Labels:
    - Key: pipeline
      Value: '"tuxedo2"'
    Name: label
  - Labels:
    - Key: name
      Value: '"tuxedo2_pipeline_worker"'
    Name: label
  - Labels:
    - Key: description
      Value: '"Docker image containing all required packages to run new Tuxedo differential
        expression analysis protocol"'
    Name: label
  - Labels:
    - Key: website
      Value: '"https://ccb.jhu.edu/software/hisat2/index.shtml"'
    Name: label
  - Labels:
    - Key: documentation
      Value: '"https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual#de"'
    Name: label
  - Labels:
    - Key: license
      Value: '"GPL-2.0"'
    Name: label
  - Labels:
    - Key: tags
      Value: '"Genomics"'
    Name: label
  - Labels:
    - Key: maintainer
      Value: '"Ilya Vasilyev <u0412u0418u042e@gmail.com>"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get clean all &&     apt-get -y update &&     apt-get -y upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install     curl     python     python-pip     wget     tar     zip     bzip2     ca-certificates     libglib2.0-0     libxext6     libsm6     libxrender1     git     mercurial     subversion
    Name: run
    PrependShell: true
  - CmdLine:
    - TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o
      "/v.*\"" | sed 's:^..\(.*\).$:\1:'` &&     curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb"
      > tini.deb &&     dpkg -i tini.deb &&     rm tini.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean &&     apt-get purge &&     rm -rf /var/lib/apt/lists/* /tmp/*
      /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh &&     wget
      --quiet 'https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh'
      -O ~/miniconda.sh &&     /bin/bash ~/miniconda.sh -b -p /opt/conda &&     rm
      ~/miniconda.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - for p in numpy scipy pandas redis; do pip install ${p}; done
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd fuse &&     useradd --create-home --shell /bin/bash --user-group --uid
      1000 --groups sudo,fuse docker &&     echo `echo "docker\ndocker\n" | passwd
      docker` &&     mkdir /data /config ${REF_DIR} &&     chown docker:docker /data
      /config ${REF_DIR} &&     chmod -R 755 /data /config ${REF_DIR}
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 777 -R /opt/conda
    Name: run
    PrependShell: true
  - Name: user
    User: docker
  - Env:
    - Key: PATH
      Value: $PATH:/opt/conda/bin
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/home/docker/bin
    Name: env
  - Env:
    - Key: HOME
      Value: /home/docker
    Name: env
  - CmdLine:
    - conda config --add channels r &&     conda config --add channels bioconda &&     conda
      config --add channels biobuilds &&     conda config --add channels intel &&     conda
      upgrade -y conda
    Name: run
    PrependShell: true
  - CmdLine:
    - for c in "intel tbb" "biobuilds ncbi-ngs-sdk" "bioconda sra-tools" "bioconda
      hisat2" "bioconda samtools" "bioconda stringtie" "bioconda gffcompare"; do conda
      install -y -c ${c} && conda upgrade -y -c ${c}; done
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir ~/scripts &&     cd ~/scripts &&     git clone https://github.com/ivasilyev/biopipelines-docker.git
      &&     mv biopipelines-docker/tuxedo2_pipeline/worker/pipeline_wrapper.py .
      &&     rm -rf bowtie-tools biopipelines-docker &&     chmod -R +x ~/scripts
      &&     echo "export PATH=$PATH:${PWD}" | tee -a ~/.bashrc
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /data
    - /config
    - /reference
  - CmdLine:
    - python
    - /home/docker/scripts/pipeline_wrapper.py
    Name: cmd
    PrependShell: false
  - Name: workdir
    Path: /home/docker
  From:
    Image: ubuntu:17.10
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:17.10
