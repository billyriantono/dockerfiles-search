{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get -y upgrade \u0026\u0026     apt-get -y autoremove \u0026\u0026     apt-get -y install             ca-certificates             curl             git             nano             python3-dev             python3-pip             libxml2-dev             libxslt1-dev             zlib1g-dev             python3-tk             nodejs             npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` \u0026\u0026     curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" \u003e tini.deb \u0026\u0026     dpkg -i tini.deb \u0026\u0026     rm tini.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y autoremove \u0026\u0026     apt-get clean \u0026\u0026     apt-get purge \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install setuptools     pandas statsmodels scipy xlrd     biopython     requests bs4 lxml jinja2 pyyaml     matplotlib seaborn     ipython jupyter jupyterlab     scikit-learn tensorflow"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "31522",
            "443",
            "80"
          ]
        },
        {
          "CmdLine": [
            "groupadd fuse \u0026\u0026     useradd --create-home --shell /bin/bash --user-group --uid 1000 --groups sudo,fuse docker \u0026\u0026     echo `echo \"docker\\ndocker\\n\" | passwd docker` \u0026\u0026     mkdir -p /data /config /home/docker/bin \u0026\u0026     chown docker:docker /data /config /home/docker/bin \u0026\u0026     chmod -R 755 /data /config /home/docker/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "docker"
        },
        {
          "CmdLine": [
            "mkdir -p /home/docker/scripts \u0026\u0026     curl -fsSL \"https://raw.githubusercontent.com/ivasilyev/biopipelines-docker/master/jupyter-deploy/jupyter-deploy.sh\" -o /home/docker/scripts/jupyter-deploy.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/home/docker/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/docker"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/home/docker"
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}