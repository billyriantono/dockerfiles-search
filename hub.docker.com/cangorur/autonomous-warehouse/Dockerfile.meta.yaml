MetaArgs: null
Stages:
- BaseName: nvidia/cuda:9.0-devel-ubuntu16.04
  Commands:
  - Maintainer: Shreyas Gokhale, Orhan Can Gorur <orhan-can.goeruer@dai-labor.de>
    Name: maintainer
  - CmdLine:
    - apt-get update && apt-get install -q -y     dirmngr     gnupg2     wget     build-essential     cmake
      git     zlib1g-dev     libssl-dev     curl     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y python3 python3-venv python3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y build-essential     checkinstall     libreadline-gplv2-dev     libncursesw5-dev     libssl-dev     libsqlite3-dev     tk-dev     libgdbm-dev     libc6-dev     libbz2-dev     zlib1g-dev     openssl     libffi-dev     python     python-pip     python3-dev    python3-pip     python3-setuptools     wget     blender     mesa-utils    curl    &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install websocket
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros1-latest.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install --no-install-recommends -y     python-rosdep     python-rosinstall     python-vcstools     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - rosdep init     && rosdep update
    Name: run
    PrependShell: true
  - Env:
    - Key: ROS_DISTRO
      Value: kinetic
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     ros-kinetic-ros-core=1.3.2-0*     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y nano     tmux wget git sudo libglu1    git
      xterm curl     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: MORSE_BLENDER
      Value: /usr/bin/blender
    Name: env
  - CmdLine:
    - git clone --progress https://github.com/cangorur/morse.git -b 1.3.1_STABLE
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /morse/build
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /morse/build
  - CmdLine:
    - apt-get update &&  apt-get install -y ros-kinetic-rviz     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - cmake -DBUILD_ROS_SUPPORT=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_INSTALL_PREFIX=/opt ..
    Name: run
    PrependShell: true
  - CmdLine:
    - make install
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export PATH=${PATH}:/opt/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - export PATH=${PATH}:/opt/bin
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz &&    tar xvf PyYAML-3.10.tar.gz
      &&    cd PyYAML-3.10 &&     python3 setup.py install
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://bootstrap.pypa.io/ez_setup.py &&    python3 ez_setup.py
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/ros/rospkg.git &&    cd rospkg &&    python3 setup.py
      install
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/ros-infrastructure/catkin_pkg.git     && cd catkin_pkg     &&
      python3 setup.py install
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/ros/catkin.git     && cd catkin     && python3
      setup.py install
    Name: run
    PrependShell: true
  - Labels:
    - Key: io.k8s.description
      Value: '"Headless VNC Container with Xfce window manager, firefox and chromium"'
    - Key: io.k8s.display-name
      Value: '"Headless VNC Container based on Ubuntu"'
    - Key: io.openshift.expose-services
      Value: '"6901:http,5901:xvnc"'
    - Key: io.openshift.tags
      Value: '"vnc, ubuntu, xfce"'
    - Key: io.openshift.non-scalable
      Value: "true"
    Name: label
  - Env:
    - Key: DISPLAY
      Value: :1
    - Key: VNC_PORT
      Value: "5901"
    - Key: NO_VNC_PORT
      Value: "6901"
    Name: env
  - Name: expose
    Ports:
    - $NO_VNC_PORT
    - $VNC_PORT
  - Env:
    - Key: HOME
      Value: /headless
    - Key: TERM
      Value: xterm
    - Key: STARTUPDIR
      Value: /dockerstartup
    - Key: INST_SCRIPTS
      Value: /headless/install
    - Key: NO_VNC_HOME
      Value: /headless/noVNC
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    - Key: VNC_COL_DEPTH
      Value: "24"
    - Key: VNC_RESOLUTION
      Value: 1920x1024
    - Key: VNC_PW
      Value: vncpassword
    - Key: VNC_VIEW_ONLY
      Value: "false"
    Name: env
  - Name: workdir
    Path: $HOME
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./vncsetup/src/common/install/
    - $INST_SCRIPTS/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./vncsetup/src/ubuntu/install/
    - $INST_SCRIPTS/
  - CmdLine:
    - find $INST_SCRIPTS -name '*.sh' -exec chmod a+x {} +
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/tools.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '''en_US.UTF-8'''
    - Key: LANGUAGE
      Value: '''en_US:en'''
    - Key: LC_ALL
      Value: '''en_US.UTF-8'''
    Name: env
  - CmdLine:
    - $INST_SCRIPTS/install_custom_fonts.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/tigervnc.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/no_vnc.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/chrome.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/xfce_ui.sh
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./vncsetup/src/common/xfce/
    - $HOME/
  - CmdLine:
    - curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
      &&     install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
      &&     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode
      stable main" > /etc/apt/sources.list.d/vscode.list'
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y apt-transport-https &&     apt-get update &&     apt-get
      install -y code    && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - $INST_SCRIPTS/libnss_wrapper.sh
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./vncsetup/src/common/scripts
    - $STARTUPDIR
  - CmdLine:
    - $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: MORSE_BLENDER
      Value: /usr/bin/blender
    Name: env
  - Env:
    - Key: NVIDIA_VISIBLE_DEVICES
      Value: all
    Name: env
  - CmdLine:
    - /dockerstartup/vnc_startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - --wait
    Name: cmd
    PrependShell: false
  From:
    Image: nvidia/cuda:9.0-devel-ubuntu16.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:9.0-devel-ubuntu16.04
