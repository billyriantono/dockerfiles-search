MetaArgs: null
Stages:
- BaseName: ubuntu:trusty
  Commands:
  - Env:
    - Key: PYTHON_VERSION
      Value: 2.7.11
    Name: env
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 8.0.2
    Name: env
  - CmdLine:
    - locale-gen en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - apt-get purge -y python.*
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF
    Name: env
  - CmdLine:
    - echo 'deb http://archive.ubuntu.com/ubuntu trusty main' >/etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'deb http://archive.ubuntu.com/ubuntu trusty-security main' >>/etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'deb http://archive.ubuntu.com/ubuntu trusty-updates main' >>/etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'deb http://archive.ubuntu.com/ubuntu trusty universe' >>/etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --force-yes autoconf automake build-essential curl checkinstall
      cmake f2c gfortran git g++ libsqlite3-dev gfortran libffi6 python-matplotlib
      libfreetype6-dev openssl libssl-dev libbz2-dev pkg-config postgresql-client
      supervisor wget python-numpy python-scipy python-matplotlib ipython ipython-notebook
      python-pandas python-sympy python-nose zlib1g-dev xz-utils unzip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\"
      \t&& curl -fSL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\"
      -o python.tar.xz \t&& curl -fSL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc\"
      -o python.tar.xz.asc \t&& gpg --verify python.tar.xz.asc \t&& mkdir -p /usr/src/python
      \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm
      python.tar.xz* \t&& cd /usr/src/python \t&& ./configure --enable-shared --enable-unicode=ucs4
      \t&& make -j$(nproc) \t&& make install \t&& ldconfig \t&& curl -fSL 'https://bootstrap.pypa.io/get-pip.py'
      | python2 \t&& pip install --no-cache-dir --upgrade pip==$PYTHON_PIP_VERSION
      \t&& find /usr/local \t\t\\( -type d -a -name test -o -name tests \\) \t\t-o
      \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \t\t-exec rm -rf '{}' + \t&&
      rm -rf /usr/src/python"
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .
    - /opt/app
  - Name: workdir
    Path: /opt/app
  - CmdLine:
    - pip install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0-cp27-none-linux_x86_64.whl
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install -r requirements.txt
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8888"
  - Name: user
    User: root
  - CmdLine:
    - jupyter notebook --no-browser --ip=0.0.0.0
    Name: cmd
    PrependShell: true
  From:
    Image: ubuntu:trusty
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:trusty
