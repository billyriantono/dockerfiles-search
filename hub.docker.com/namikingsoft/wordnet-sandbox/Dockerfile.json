{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:8.11.1-stretch",
      "SourceCode": "FROM node:8.11.1-stretch",
      "Platform": "",
      "From": {
        "Image": "node:8.11.1-stretch"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DOCKER",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "APP_ROOT",
              "Value": "/app"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends mecab libmecab-dev sqlite3 \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "mkdir /resources"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget http://compling.hss.ntu.edu.sg/wnja/data/1.1/wnjpn.db.gz \u0026\u0026 gzip -d wnjpn.db.gz \u0026\u0026 mv wnjpn.db /resources/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \u0026\u0026 cd mecab-ipadic-neologd \u0026\u0026 mkdir -p \"$(mecab-config --dicdir)\" \u0026\u0026 ./bin/install-mecab-ipadic-neologd -n -y \u0026\u0026 mv /usr/lib/x86_64-linux-gnu/mecab/dic/mecab-ipadic-neologd /resources/ \u0026\u0026 sed -i \"s/^dicdir = /; dicdir = /g\" /etc/mecabrc \u0026\u0026 echo \"dicdir = /resources/mecab-ipadic-neologd\" \u003e\u003e /etc/mecabrc \u0026\u0026 cd .. \u0026\u0026 rm -rf mecab-ipadic-neologd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "package.json",
            "$APP_ROOT/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "yarn.lock",
            "$APP_ROOT/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$APP_ROOT"
        },
        {
          "CmdLine": [
            "yarn install \u0026\u0026 yarn cache clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "$APP_ROOT"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "yarn server:build \u0026\u0026 yarn front:build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "server"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "3000"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        }
      ]
    }
  ]
}