MetaArgs:
- DefaultValue: "7.2"
  Key: LARADOCK_PHP_VERSION
  ProvidedValue: null
  Value: "7.2"
Stages:
- BaseName: php:${LARADOCK_PHP_VERSION}-fpm
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Thouen <admin@anviod.com>"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update -y && apt-get upgrade -y && apt-get install -y --no-install-recommends
      curl libmemcached-dev libz-dev libpq-dev libjpeg-dev libfreetype6-dev libssl-dev
      libmcrypt-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install pdo_mysql
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib
      --with-freetype-dir=/usr/include/freetype2 && docker-php-ext-install gd
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -yqq &&     apt-get install -y apt-utils &&     pecl channel-update
      pecl.php.net
    Name: run
    PrependShell: true
  - Key: INSTALL_SSH2
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SSH2} = true ]; then     apt-get -y install libssh2-1-dev &&     if
      [ $(php -r "echo PHP_MAJOR_VERSION;") = "5" ]; then         pecl install -a
      ssh2-0.13;     else         pecl install -a ssh2-1.1.2;     fi &&     docker-php-ext-enable
      ssh2 ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_FAKETIME
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_FAKETIME} = true ]; then     apt-get install -y libfaketime ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_SOAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SOAP} = true ]; then     rm /etc/apt/preferences.d/no-debian-php
      &&     apt-get -y install libxml2-dev php-soap &&     docker-php-ext-install
      soap ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PGSQL
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PGSQL} = true ]; then     docker-php-ext-install pgsql ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PG_CLIENT
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PG_CLIENT} = true ]; then     mkdir -p /usr/share/man/man1 &&     mkdir
      -p /usr/share/man/man7 &&     apt-get install -y postgresql-client ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_XDEBUG
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_XDEBUG} = true ]; then   if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then     pecl install xdebug-2.5.5;   else     pecl install xdebug;   fi
      &&   docker-php-ext-enable xdebug ;fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./xdebug.ini
    - /usr/local/etc/php/conf.d/xdebug.ini
  - CmdLine:
    - sed -i "s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/" /usr/local/etc/php/conf.d/xdebug.ini
      &&     sed -i "s/xdebug.remote_enable=0/xdebug.remote_enable=1/" /usr/local/etc/php/conf.d/xdebug.ini
      &&     sed -i "s/xdebug.cli_color=0/xdebug.cli_color=1/" /usr/local/etc/php/conf.d/xdebug.ini
    Name: run
    PrependShell: true
  - Key: INSTALL_PHPDBG
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PHPDBG} = true ]; then     apt-get install -y --force-yes php${LARADOCK_PHP_VERSION}-phpdbg
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_BLACKFIRE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then     version=$(php
      -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;")     && curl -A "Docker" -o /tmp/blackfire-probe.tar.gz
      -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version     &&
      tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp     && mv /tmp/blackfire-*.so $(php
      -r "echo ini_get('extension_dir');")/blackfire.so     && printf "extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n"
      > $PHP_INI_DIR/conf.d/blackfire.ini ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PHPREDIS
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PHPREDIS} = true ]; then     printf "\n" | pecl install -o -f
      redis     &&  rm -rf /tmp/pear     &&  docker-php-ext-enable redis ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_SWOOLE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SWOOLE} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       pecl install swoole-2.0.11;     else       if [ $(php -r
      "echo PHP_MINOR_VERSION;") = "0" ]; then         pecl install swoole-2.2.0;       else         pecl
      install swoole;       fi     fi &&     docker-php-ext-enable swoole ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_MONGO
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MONGO} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       pecl install mongo &&       docker-php-ext-enable mongo     ;fi
      &&     pecl install mongodb &&     docker-php-ext-enable mongodb ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_AMQP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_AMQP} = true ]; then     apt-get install librabbitmq-dev -y &&     pecl
      install amqp &&     docker-php-ext-enable amqp ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_ZIP_ARCHIVE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then     apt-get install libzip-dev -y
      &&     docker-php-ext-configure zip --with-libzip &&     docker-php-ext-install
      zip ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PCNTL
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PCNTL} = true ]; then     docker-php-ext-install pcntl ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_BCMATH
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_BCMATH} = true ]; then     docker-php-ext-install bcmath ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_GMP
    Name: arg
    Value: "false"
  - CmdLine:
    - "if [ ${INSTALL_GMP} = true ]; then \t  apt-get install -y libgmp-dev &&     if
      [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then       ln -s /usr/include/x86_64-linux-gnu/gmp.h
      /usr/include/gmp.h     ;fi &&     docker-php-ext-install gmp ;fi"
    Name: run
    PrependShell: true
  - Key: INSTALL_MEMCACHED
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MEMCACHED} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       curl -L -o /tmp/memcached.tar.gz "https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz";     else       curl
      -L -o /tmp/memcached.tar.gz "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz";     fi     &&
      mkdir -p memcached     && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip
      1     && (         cd memcached         && phpize         && ./configure         &&
      make -j$(nproc)         && make install     )     && rm -r memcached     &&
      rm /tmp/memcached.tar.gz     && docker-php-ext-enable memcached ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_EXIF
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_EXIF} = true ]; then     docker-php-ext-install exif ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_AEROSPIKE
    Name: arg
    Value: "false"
  - Key: AEROSPIKE_PHP_REPOSITORY
    Name: arg
    Value: null
  - CmdLine:
    - if [ ${INSTALL_AEROSPIKE} = true ]; then     apt-get -y install sudo wget &&     if
      [ $(php -r "echo PHP_MAJOR_VERSION;") = "5" ]; then       curl -L -o /tmp/aerospike-client-php.tar.gz
      https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz;     else       curl
      -L -o /tmp/aerospike-client-php.tar.gz ${AEROSPIKE_PHP_REPOSITORY};     fi     &&
      mkdir -p aerospike-client-php     && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz
      --strip 1     &&     if [ $(php -r "echo PHP_MAJOR_VERSION;") = "5" ]; then       (           cd
      aerospike-client-php/src/aerospike           && phpize           && ./build.sh           &&
      make install       )     else       (           cd aerospike-client-php/src           &&
      phpize           && ./build.sh           && make install       )     fi     &&
      rm /tmp/aerospike-client-php.tar.gz     && docker-php-ext-enable aerospike ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_IONCUBE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IONCUBE} = true ]; then     curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz
      https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz     &&
      tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp     && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so
      $(php -r "echo ini_get('extension_dir');")/ioncube_loader.so     && printf "zend_extension=ioncube_loader.so\n"
      > $PHP_INI_DIR/conf.d/0ioncube.ini     && rm -rf /tmp/ioncube* ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_OPCACHE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_OPCACHE} = true ]; then     docker-php-ext-install opcache ;fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./opcache.ini
    - /usr/local/etc/php/conf.d/opcache.ini
  - Key: INSTALL_MYSQLI
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MYSQLI} = true ]; then     docker-php-ext-install mysqli ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_INTL
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_INTL} = true ]; then     apt-get install -y zlib1g-dev libicu-dev
      g++ &&     docker-php-ext-configure intl &&     docker-php-ext-install intl
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_GHOSTSCRIPT
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_GHOSTSCRIPT} = true ]; then     apt-get install -y     poppler-utils     ghostscript
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_LDAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_LDAP} = true ]; then     apt-get install -y libldap2-dev &&     docker-php-ext-configure
      ldap --with-libdir=lib/x86_64-linux-gnu/ &&     docker-php-ext-install ldap
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_MSSQL
    Name: arg
    Value: "false"
  - CmdLine:
    - set -eux; if [ ${INSTALL_MSSQL} = true ]; then     if [ $(php -r "echo PHP_MAJOR_VERSION;")
      = "5" ]; then       apt-get -y install freetds-dev libsybdb5       && ln -s
      /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so       && docker-php-ext-install
      mssql pdo_dblib       && php -m | grep -q 'mssql'       && php -m | grep -q
      'pdo_dblib'     ;else       apt-get install -y apt-transport-https gnupg       &&
      curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -       &&
      curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list       &&
      apt-get update -yqq       && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev
      libgss3 odbcinst msodbcsql17 locales       && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen       &&
      ln -sfn /etc/locale.alias /usr/share/locale/locale.alias       && locale-gen       &&
      pecl install pdo_sqlsrv sqlsrv       && docker-php-ext-enable pdo_sqlsrv sqlsrv       &&
      php -m | grep -q 'pdo_sqlsrv'       && php -m | grep -q 'sqlsrv'     ;fi ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_IMAGE_OPTIMIZERS
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then     apt-get install -y jpegoptim
      optipng pngquant gifsicle ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_IMAGEMAGICK
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAGEMAGICK} = true ]; then     apt-get install -y libmagickwand-dev
      imagemagick &&     pecl install imagick &&     docker-php-ext-enable imagick
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_IMAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAP} = true ]; then     apt-get install -y libc-client-dev libkrb5-dev
      &&     rm -r /var/lib/apt/lists/* &&     docker-php-ext-configure imap --with-kerberos
      --with-imap-ssl &&     docker-php-ext-install imap ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_CALENDAR
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_CALENDAR} = true ]; then     docker-php-ext-configure calendar
      &&     docker-php-ext-install calendar ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PHALCON
    Name: arg
    Value: "false"
  - Key: LARADOCK_PHALCON_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: LARADOCK_PHALCON_VERSION
      Value: ${LARADOCK_PHALCON_VERSION}
    Name: env
  - CmdLine:
    - if [ $INSTALL_PHALCON = true ]; then     apt-get update && apt-get install -y
      unzip libpcre3-dev gcc make re2c     && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip     &&
      unzip -d /tmp/ /tmp/cphalcon.zip     && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build     &&
      ./install     && echo "extension=phalcon.so" >> /etc/php/${LARADOCK_PHP_VERSION}/mods-available/phalcon.ini     &&
      ln -s /etc/php/${LARADOCK_PHP_VERSION}/mods-available/phalcon.ini /etc/php/${LARADOCK_PHP_VERSION}/cli/conf.d/30-phalcon.ini     &&
      rm -rf /tmp/cphalcon* ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_YAML
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_YAML} = true ]; then     apt-get install libyaml-dev -y ;     pecl
      install yaml ;     docker-php-ext-enable yaml ;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - php -v | head -n 1 | grep -q "PHP ${LARADOCK_PHP_VERSION}."
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./laravel.ini
    - /usr/local/etc/php/conf.d
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./xlaravel.pool.conf
    - /usr/local/etc/php-fpm.d/
  - Name: user
    User: root
  - CmdLine:
    - apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&     rm
      /var/log/lastlog /var/log/faillog
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -u 1000 www-data
    Name: run
    PrependShell: true
  - CmdLine:
    - if [ ${INSTALL_FAKETIME} = true ]; then     echo "/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1"
      > /etc/ld.so.preload ;fi
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www
  - CmdLine:
    - php-fpm
    Name: cmd
    PrependShell: false
  - Name: expose
    Ports:
    - "9000"
  From:
    Image: php:${LARADOCK_PHP_VERSION}-fpm
  Name: ""
  Platform: ""
  SourceCode: FROM php:${LARADOCK_PHP_VERSION}-fpm
