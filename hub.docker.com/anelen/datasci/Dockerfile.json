{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Maintainer": "Daigo Tanaka \u003cdaigo.tanaka@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_CTYPE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_MESSAGES",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 buildDeps='         python-dev         python3-dev         libkrb5-dev         libsasl2-dev         libssl-dev         libffi-dev         build-essential         libblas-dev         liblapack-dev         libpq-dev     '     \u0026\u0026 apt-get update -yqq     \u0026\u0026 apt-get install -yqq --no-install-recommends         $buildDeps         sudo         apparmor-utils         python-setuptools         python-pip         python3-requests         python3-setuptools         python3-pip         mysql-client         mysql-server         libmysqlclient-dev         apt-utils         curl         rsync         netcat         locales         wget         git         openssh-server         postgresql postgresql-contrib         vim         gdebi-core     \u0026\u0026 sed -i 's/^# en_US.UTF-8 UTF-8$/en_US.UTF-8 UTF-8/g' /etc/locale.gen     \u0026\u0026 locale-gen     \u0026\u0026 update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/run/sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y r-base         libzmq3-dev         libcurl4-gnutls-dev         libxml2-dev \u0026\u0026     apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y openjdk-8-jdk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/lib/jvm/java-8-openjdk-amd64 /usr/lib/jvm/default-java"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/default-java"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:$JAVA_HOME/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libcairo2-dev libxt-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y curl grep sed dpkg \u0026\u0026     TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` \u0026\u0026     curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" \u003e tini.deb \u0026\u0026     dpkg -i tini.deb \u0026\u0026     rm tini.deb \u0026\u0026     apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install dbt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "AIRFLOW_VERSION",
          "Name": "arg",
          "Value": "1.9.0"
        },
        {
          "Key": "AIRFLOW_HOME",
          "Name": "arg",
          "Value": "/usr/local/airflow"
        },
        {
          "CmdLine": [
            "pip3 install setuptools wheel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -ms /bin/bash -d ${AIRFLOW_HOME} airflow     \u0026\u0026 pip3 install Cython     \u0026\u0026 pip3 install pytz     \u0026\u0026 pip3 install pyOpenSSL     \u0026\u0026 pip3 install ndg-httpsclient     \u0026\u0026 pip3 install pyasn1     \u0026\u0026 pip3 install apache-airflow[crypto,celery,postgres,hive,jdbc,mysql]==${AIRFLOW_VERSION}     \u0026\u0026 pip3 install celery[redis]==4.1.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "RSTUDIO_SERVER_VERSION",
          "Name": "arg",
          "Value": "1.1.453"
        },
        {
          "CmdLine": [
            "apt-get install -y r-base psmisc     \u0026\u0026 wget https://download2.rstudio.org/rstudio-server-${RSTUDIO_SERVER_VERSION}-amd64.deb     \u0026\u0026 gdebi --non-interactive rstudio-server-${RSTUDIO_SERVER_VERSION}-amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "ANACONDA_PYTHON_VERSION",
          "Name": "arg",
          "Value": "3"
        },
        {
          "Key": "ANACONDA_VERSION",
          "Name": "arg",
          "Value": "5.2.0"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:/opt/conda/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update --fix-missing \u0026\u0026     apt-get install -y bzip2 ca-certificates     libglib2.0-0 libxext6 libsm6 libxrender1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://repo.anaconda.com/archive/Anaconda${ANACONDA_PYTHON_VERSION}-${ANACONDA_VERSION}-Linux-x86_64.sh -O ~/anaconda.sh \u0026\u0026     /bin/bash ~/anaconda.sh -b -p /opt/conda \u0026\u0026     rm ~/anaconda.sh \u0026\u0026     ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \u0026\u0026     echo \". /opt/conda/etc/profile.d/conda.sh\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"conda activate base\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/opt/conda/bin/conda install -y -c conda-forge jupyterhub"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get purge --auto-remove -yqq $buildDeps     \u0026\u0026 apt-get autoremove -yqq --purge     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf         /var/lib/apt/lists/*         /tmp/*         /var/tmp/*         /usr/share/man         /usr/share/doc         /usr/share/doc-base"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install software-properties-common python-software-properties"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository -y \"ppa:marutter/rrutter\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository -y \"ppa:marutter/c2d4u\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install r-cran-rstan"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"r \u003c- getOption('repos'); r['CRAN'] \u003c- 'http://cran.us.r-project.org'; options(repos = r);\" \u003e ~/.Rprofile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('rJava', 'RJDBC', 'RCurl', 'bigrquery'), dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('dplyr', 'tidyr', 'stringr', 'dummies'), dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('knitr', 'ggplot2', 'ggthemes', 'gridExtra', 'rCharts'), dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('randomForest', 'xgboost'), dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages('prophet', dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages(c('caret', 'pmml'), dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"install.packages('devtools', dependencies=TRUE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "Rscript -e \"devtools::install_github('rstudio/bookdown')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install -y -c conda-forge tensorflow keras google-cloud-bigquery"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "script/entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "script/start_airflow.sh",
            "/start_airflow.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/rserver.conf",
            "/etc/rstudio/rserver.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/jupyterhub",
            "/etc/init.d/jupyterhub"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "script/setup_git.sh",
            "/setup_git.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "script/add_user.sh",
            "/add_user.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/airflow.cfg",
            "${AIRFLOW_HOME}/airflow.cfg"
          ]
        },
        {
          "CmdLine": [
            "chown -R airflow: ${AIRFLOW_HOME}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "AIRFLOW_LOG_DIR",
          "Name": "arg",
          "Value": "/usr/local/airflow"
        },
        {
          "CmdLine": [
            "mkdir -p ${AIRFLOW_LOG_DIR}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R airflow: ${AIRFLOW_LOG_DIR}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "5555",
            "8000",
            "8080",
            "8787",
            "8793"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "worker"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}