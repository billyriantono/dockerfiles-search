{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ddtry/jdk_min:latest",
      "SourceCode": "FROM ddtry/jdk_min:latest",
      "Platform": "",
      "From": {
        "Image": "ddtry/jdk_min:latest"
      },
      "Commands": [
        {
          "Maintainer": "jenkins_zap",
          "Name": "maintainer"
        },
        {
          "Key": "mvn3VERSION",
          "Name": "arg",
          "Value": "3.3.9"
        },
        {
          "Key": "gitVERSION",
          "Name": "arg",
          "Value": "2.20.1-r0"
        },
        {
          "Key": "nodejsVERSION",
          "Name": "arg",
          "Value": "10.14.2-r0"
        },
        {
          "Key": "kubectlVERSION",
          "Name": "arg",
          "Value": "v1.10.4"
        },
        {
          "Key": "helmVERSION",
          "Name": "arg",
          "Value": "v2.11.0"
        },
        {
          "CmdLine": [
            "apk add --update --no-cache --update-cache curl wget \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -LO https://storage.googleapis.com/kubernetes-release/release/${kubectlVERSION}/bin/linux/amd64/kubectl \u0026\u0026     chmod +x ./kubectl \u0026\u0026     mv ./kubectl /usr/local/bin/kubectl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -LO https://storage.googleapis.com/kubernetes-helm/helm-${helmVERSION}-linux-amd64.tar.gz \u0026\u0026     tar -zxf helm-${helmVERSION}-linux-amd64.tar.gz \u0026\u0026     mv ./linux-amd64/helm /usr/local/bin/helm \u0026\u0026     rm -rf linux-amd64 \u0026\u0026     rm -rf helm-${helmVERSION}-linux-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".helm",
            "/root/.helm"
          ]
        },
        {
          "CmdLine": [
            "apk add --no-cache --update-cache git=${gitVERSION} nodejs=${nodejsVERSION} npm yarn libltdl sudo \u0026\u0026     wget http://mirrors.sonic.net/apache/maven/maven-3/${mvn3VERSION}/binaries/apache-maven-${mvn3VERSION}-bin.tar.gz \u0026\u0026     tar -zxf apache-maven-${mvn3VERSION}-bin.tar.gz \u0026\u0026     mv apache-maven-${mvn3VERSION} /usr/local \u0026\u0026     rm -f apache-maven-${mvn3VERSION}-bin.tar.gz \u0026\u0026     ln -s /usr/local/apache-maven-${mvn3VERSION}/bin/mvn /usr/bin/mvn \u0026\u0026     ln -s /usr/local/apache-maven-${mvn3VERSION} /usr/local/apache-maven \u0026\u0026     echo \"${user} ALL=NOPASSWD: ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/usr/bin/docker"
          ]
        },
        {
          "CmdLine": [
            "apk add --no-cache xmlstarlet unzip netcat-openbsd python python-dev py-pip ruby net-tools ruby-dev xvfb x11vnc openbox xterm \u0026\u0026     rm -rf /var/cache/apk/* \u0026\u0026     mkdir /zap \u0026\u0026     cd /zap \u0026\u0026     curl -s https://raw.githubusercontent.com/zaproxy/zap-admin/master/ZapVersions.xml | xmlstarlet sel -t -v //url |grep -i Linux | wget --content-disposition -i - -O - | tar zxv \u0026\u0026     mv ZAP*/* . \u0026\u0026     rm -R ZAP* \u0026\u0026     curl -s -L https://bitbucket.org/meszarv/webswing/downloads/webswing-2.5.10.zip \u003e webswing.zip \u0026\u0026     unzip webswing.zip \u0026\u0026     rm webswing.zip \u0026\u0026     mv webswing-* webswing \u0026\u0026     rm -R webswing/demo/ \u0026\u0026     touch AcceptedLicense"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "zap*",
            "/zap/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "webswing.config",
            "/zap/webswing/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "policies",
            "/root/.ZAP/policies/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".xinitrc",
            "/root/"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /root/.xinitrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade zapcli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/zap/:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZAP_PATH",
              "Value": "/zap/zap.sh"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/root/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZAP_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "$ZAP_PORT"
          ]
        },
        {
          "Health": {
            "Interval": 5000000000,
            "Retries": 5,
            "Test": [
              "CMD-SHELL",
              "zap-cli status"
            ]
          },
          "Name": "healthcheck"
        }
      ]
    }
  ]
}