MetaArgs:
- DefaultValue: "7.2"
  Key: PHP_VERSION
  ProvidedValue: null
  Value: "7.2"
Stages:
- BaseName: laradock/php-fpm:2.2-7.2
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Mahmoud Zalt <mahmoud@zalt.me>"'
    Name: label
  - CmdLine:
    - apt-get update     && apt-get install -y poppler-utils
    Name: run
    PrependShell: true
  - Key: INSTALL_SOAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SOAP} = true ]; then     apt-get update -yqq &&     apt-get -y
      install libxml2-dev php-soap &&     docker-php-ext-install soap ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PGSQL
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PGSQL} = true ]; then     docker-php-ext-install pgsql ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PG_CLIENT
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PG_CLIENT} = true ]; then     mkdir -p /usr/share/man/man1 &&     mkdir
      -p /usr/share/man/man7 &&     apt-get install -y postgresql-client ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_XDEBUG
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_XDEBUG} = true ]; then     pecl install xdebug &&     docker-php-ext-enable
      xdebug ;fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./xdebug.ini
    - /usr/local/etc/php/conf.d/xdebug.ini
  - Key: INSTALL_BLACKFIRE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then     version=$(php
      -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;")     && curl -A "Docker" -o /tmp/blackfire-probe.tar.gz
      -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version     &&
      tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp     && mv /tmp/blackfire-*.so $(php
      -r "echo ini_get('extension_dir');")/blackfire.so     && printf "extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n"
      > $PHP_INI_DIR/conf.d/blackfire.ini ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_PHPREDIS
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_PHPREDIS} = true ]; then     printf "\n" | pecl install -o -f
      redis     &&  rm -rf /tmp/pear     &&  docker-php-ext-enable redis ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_SWOOLE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_SWOOLE} = true ]; then     pecl install swoole     &&  docker-php-ext-enable
      swoole ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_MONGO
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MONGO} = true ]; then     pecl install mongodb &&     docker-php-ext-enable
      mongodb ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_AMQP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_AMQP} = true ]; then     apt-get install librabbitmq-dev -y &&     pecl
      install amqp &&     docker-php-ext-enable amqp ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_ZIP_ARCHIVE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then     docker-php-ext-install zip ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_BCMATH
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_BCMATH} = true ]; then     docker-php-ext-install bcmath ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_GMP
    Name: arg
    Value: "false"
  - CmdLine:
    - "if [ ${INSTALL_GMP} = true ]; then \tapt-get install -y libgmp-dev &&     docker-php-ext-install
      gmp ;fi"
    Name: run
    PrependShell: true
  - Key: INSTALL_MEMCACHED
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MEMCACHED} = true ]; then     curl -L -o /tmp/memcached.tar.gz
      "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz"     &&
      mkdir -p memcached     && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip
      1     && (         cd memcached         && phpize         && ./configure         &&
      make -j$(nproc)         && make install     )     && rm -r memcached     &&
      rm /tmp/memcached.tar.gz     && docker-php-ext-enable memcached ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_EXIF
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_EXIF} = true ]; then     docker-php-ext-install exif ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_OPCACHE
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_OPCACHE} = true ]; then     docker-php-ext-install opcache ;fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./opcache.ini
    - /usr/local/etc/php/conf.d/opcache.ini
  - Key: INSTALL_MYSQLI
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_MYSQLI} = true ]; then     docker-php-ext-install mysqli ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_TOKENIZER
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_TOKENIZER} = true ]; then     docker-php-ext-install tokenizer
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_INTL
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_INTL} = true ]; then     apt-get update -yqq &&     apt-get install
      -y zlib1g-dev libicu-dev g++ &&     docker-php-ext-configure intl &&     docker-php-ext-install
      intl ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_GHOSTSCRIPT
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_GHOSTSCRIPT} = true ]; then     apt-get install -y     poppler-utils     ghostscript
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_LDAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_LDAP} = true ]; then     apt-get install -y libldap2-dev &&     docker-php-ext-configure
      ldap --with-libdir=lib/x86_64-linux-gnu/ &&     docker-php-ext-install ldap
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_MSSQL
    Name: arg
    Value: "false"
  - CmdLine:
    - set -eux; if [ ${INSTALL_MSSQL} = true ]; then     apt-get install -y apt-transport-https
      gnupg     && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key
      add -     && curl https://packages.microsoft.com/config/debian/8/prod.list >
      /etc/apt/sources.list.d/mssql-release.list     && apt-get update -yqq     &&
      ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql
      locales     && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen     && locale-gen     &&
      pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview     && docker-php-ext-enable
      pdo_sqlsrv sqlsrv     && php -m | grep -q 'pdo_sqlsrv'     && php -m | grep
      -q 'sqlsrv' ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_IMAGE_OPTIMIZERS
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then     apt-get install -y --force-yes
      jpegoptim optipng pngquant gifsicle ;fi
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: INSTALL_IMAGEMAGICK
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAGEMAGICK} = true ]; then     apt-get install -y libmagickwand-dev
      imagemagick &&     pecl install imagick &&     docker-php-ext-enable imagick
      ;fi
    Name: run
    PrependShell: true
  - Key: INSTALL_IMAP
    Name: arg
    Value: "false"
  - CmdLine:
    - if [ ${INSTALL_IMAP} = true ]; then     apt-get install -y libc-client-dev libkrb5-dev
      &&     rm -r /var/lib/apt/lists/* &&     docker-php-ext-configure imap --with-kerberos
      --with-imap-ssl &&     docker-php-ext-install imap ;fi
    Name: run
    PrependShell: true
  - Key: PHP_VERSION
    Name: arg
    Value: "7.2"
  - CmdLine:
    - php -v | head -n 1 | grep -q "PHP 7.2."
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./laravel.ini
    - /usr/local/etc/php/conf.d
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./xlaravel.pool.conf
    - /usr/local/etc/php-fpm.d/
  - Name: user
    User: root
  - CmdLine:
    - apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&     rm
      /var/log/lastlog /var/log/faillog
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -u 1000 www-data
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www
  - CmdLine:
    - php-fpm
    Name: cmd
    PrependShell: false
  - Name: expose
    Ports:
    - "9000"
  From:
    Image: laradock/php-fpm:2.2-7.2
  Name: ""
  Platform: ""
  SourceCode: FROM laradock/php-fpm:2.2-7.2
