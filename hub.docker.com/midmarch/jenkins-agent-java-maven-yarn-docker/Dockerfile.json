{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jenkins/jnlp-slave:latest",
      "SourceCode": "FROM jenkins/jnlp-slave:latest",
      "Platform": "",
      "From": {
        "Image": "jenkins/jnlp-slave:latest"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DOCKER_CHANNEL",
              "Value": "edge"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "18.05.0-ce"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_ARG",
              "Value": "\"x86_64\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAVEN_VERSION",
              "Value": "3.5.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "10.15.3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "YARN_VERSION",
              "Value": "1.15.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "M2_HOME",
              "Value": "\"/opt/apache-maven-${MAVEN_VERSION}\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NODE_HOME",
              "Value": "\"/opt/node-v${NODE_VERSION}-linux-x64\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "YARN_HOME",
              "Value": "\"/opt/yarn-v${YARN_VERSION}\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:${JAVA_HOME}/bin:${M2_HOME}/bin:${NODE_HOME}/bin:${YARN_HOME}/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"/usr/glibc-compat/lib/libc.so.6\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "sed -i \"s#deb http://deb.debian.org/debian stretch main#deb http://deb.debian.org/debian stretch main contrib non-free#g\" /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \t\u0026\u0026 apt-get install -y \t\tbash \t\tcurl \t\ttar \t\tfontconfig \t\tminizip \t\tlibzip4 \t\topenssl \t\tpython-pip \t\tgit \t\thtmldoc \t\tapt-transport-https \t\tlsb-release \t\trpm \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "AZ_REPO=$(lsb_release -cs) \u0026\u0026     echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main\" |     tee /etc/apt/sources.list.d/azure-cli.list \u0026\u0026     curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \u0026\u0026     apt-get update \u0026\u0026 apt-get install azure-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'hosts: files dns mdns4_minimal mdns4' \u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex; \tif ! curl -fL -o docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${DOCKER_ARG}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo \u003e\u00262 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${DOCKER_ARG}'\"; \t\texit 1; \tfi; \ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \tdockerd -v; \tdocker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "modprobe.sh",
            "/usr/local/bin/modprobe"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "pip install docker-compose"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 curl -o- http://apache.mirror.serversaustralia.com.au/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz | tar xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 curl -o- https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz | tar xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 curl -L -o- https://github.com/yarnpkg/yarn/releases/download/v${YARN_VERSION}/yarn-v${YARN_VERSION}.tar.gz | tar xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \u0026\u0026     apt install -y ./google-chrome-stable_current_amd64.deb fonts-liberation libappindicator3-1 libxss1 xdg-utils libdbusmenu-glib4 libdbusmenu-gtk3-4 libindicator3-7 \u0026\u0026     rm google-chrome-stable_current_amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y unoconv"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "(echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections) \u0026\u0026 apt-get install ttf-mscorefonts-installer -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install apt-transport-https \u0026\u0026     apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-keys 023EDB0B \u0026\u0026     echo deb https://dl.bintray.com/gauge/gauge-deb stable main | tee -a /etc/apt/sources.list \u0026\u0026     apt-get update \u0026\u0026     apt-get install gauge"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /root/.m2 \u0026\u0026     echo \"export JAVA_HOME=${JAVA_HOME}\" \u003e\u003e /root/.bashrc \u0026\u0026     echo \"export M2_HOME=/opt/apache-maven-${MAVEN_VERSION}\" \u003e\u003e /root/.bashrc \u0026\u0026     echo \"export NODE_HOME=/opt/node-v${NODE_VERSION}-linux-x64\" \u003e\u003e /root/.bashrc \u0026\u0026     echo \"export YARN_HOME=/opt/yarn-v${YARN_VERSION}\" \u003e\u003e /root/.bashrc \u0026\u0026     echo \"export PATH=$PATH\" \u003e\u003e /root/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/data"
        },
        {
          "Name": "user",
          "User": "jenkins"
        },
        {
          "CmdLine": [
            "jenkins-slave"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}