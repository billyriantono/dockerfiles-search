{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:trusty",
      "SourceCode": "FROM ubuntu:trusty",
      "Platform": "",
      "From": {
        "Image": "ubuntu:trusty"
      },
      "Commands": [
        {
          "Maintainer": "Qiang Li",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install     apt-utils     build-essential     ca-certificates     curl     dnsutils    gtk2-engines-pixbuf     imagemagick     libblas3gf     libcurl4-openssl-dev     libfftw3-dev     libgconf-2-4     libgtk2.0-0     libicu52     liblapack3gf     libnss3     libxml2-dev     libxpm4     libxrender1     git     psmisc     unzip     wget     x11-apps     xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable     xvfb     zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu $(lsb_release -sc) main\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys EEA14886     \u0026\u0026 echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends         oracle-java8-installer         oracle-java8-set-default"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -q -O - http://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -     \u0026\u0026 echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends         google-chrome-stable"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://deb.nodesource.com/node_6.x $(lsb_release -sc) main\" \u003e\u003e /etc/apt/sources.list \t\u0026\u0026 apt-key adv --keyserver keyserver.ubuntu.com --recv 68576280 \t\u0026\u0026 apt-get update     \u0026\u0026 apt-get install -y --no-install-recommends         nodejs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install --prefix /usr/local --unsafe-perm -g     protractor     protractor-flake         child_process     express     multer     url     \u0026\u0026 npm update     \u0026\u0026 webdriver-manager clean     \u0026\u0026 webdriver-manager update --versions.standalone=3.5.0 --versions.chrome=2.31 --ignore_ssl --chrome true --gecko false --verbose"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl --insecure -L \"https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz\" | tar -C /usr/local -xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl --insecure -L \"https://cli.run.pivotal.io/stable?release=linux64-binary\u0026source=github\" | tar -C /usr/local/bin -xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/asperitus/R.git /opt/R"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g  n     \u0026\u0026 n 6.10.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "v0.18.0"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini",
            "/tini"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install     sshpass"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y openssh-server     \u0026\u0026 mkdir /var/run/sshd     \u0026\u0026 echo 'root:nosecret' | chpasswd     \u0026\u0026 sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config     \u0026\u0026 sed -i 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get clean     \u0026\u0026 rm -rf         /var/lib/apt/lists/*         /tmp/*         /var/tmp/*         /usr/share/man         /usr/share/doc         /usr/share/doc-base"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"echo never \u003e /sys/kernel/mm/transparent_hugepage/enabled\" \u003e /etc/rc.local     \u0026\u0026 chmod a+x /etc/rc.local"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -m -b /home -s /bin/bash vcap     \u0026\u0026 echo \"$LOGIN ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers     \u0026\u0026 mkdir -p /home/vcap/app     \u0026\u0026 mkdir -p /home/vcap/tmp     \u0026\u0026 chown -R vcap:vcap /home/vcap     \u0026\u0026 ln -s /home/vcap/app /app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /home/vcap/app/vendor     \u0026\u0026 chown vcap:vcap /home/vcap/app/vendor     \u0026\u0026 ln -s /opt/R /home/vcap/app/vendor"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "Name": "user",
          "User": "vcap"
        },
        {
          "Env": [
            {
              "Key": "PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "vcap"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/vcap/app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/app/bin:/usr/local/go/bin:/app/vendor/R/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TMPDIR",
              "Value": "/home/vcap/tmp"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}