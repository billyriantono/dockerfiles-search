{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "download-python",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04 as download-python",
      "Platform": "",
      "As": "download-python",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.6.7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get upgrade -y \u0026\u0026     apt-get install -y     git     build-essential     make     build-essential     libssl-dev     zlib1g-dev     libbz2-dev     libreadline-dev     libsqlite3-dev     wget     curl     llvm     libncurses5-dev     libncursesw5-dev     xz-utils     tk-dev     libffi-dev \u0026\u0026     apt-get autoremove -y \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/src"
        },
        {
          "CmdLine": [
            "wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \u0026\u0026     tar xf Python-${PYTHON_VERSION}.tar.xz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/src/Python-${PYTHON_VERSION}"
        },
        {
          "CmdLine": [
            "./configure --with-ensurepip --enable-optimizations \u0026\u0026     make"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "geotaru",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.6.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get upgrade -y \u0026\u0026     apt-get install -y     git     build-essential     libssl-dev     zlib1g-dev     libbz2-dev     libreadline-dev     libsqlite3-dev     wget     llvm     libncurses5-dev     libncursesw5-dev     xz-utils     tk-dev     libffi-dev     graphviz     gfortran     libopenblas-dev     liblapack-dev  \u0026\u0026     apt-get autoremove -y \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "download-python",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/src/Python-${PYTHON_VERSION}",
            "/opt/python"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/python"
        },
        {
          "CmdLine": [
            "make install \u0026\u0026     rm -rf /opt/python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 --no-cache-dir install --upgrade pip \u0026\u0026     pip3 --no-cache-dir install         numpy         scipy         pandas         h5py         joblib         cupy         scikit-learn         imbalanced-learn         nose         xgboost         tensorflow-gpu         keras         seaborn         matplotlib         plotly         jupyter         yapf         tqdm         cython         jupyter_contrib_nbextensions         bayesian-optimization         pydot         graphviz         pydot3         pydot-ng         pillow         folium         autopep8         line_profiler         memory_profiler         rise"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "jupyter contrib nbextension install --user \u0026\u0026     : \"Jupyter NotebookのキーバインドをVim風に設定\" \u0026\u0026     mkdir -p $(jupyter --data-dir)/nbextensions \u0026\u0026     cd $(jupyter --data-dir)/nbextensions \u0026\u0026     git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding \u0026\u0026      jupyter nbextension enable vim_binding/vim_binding \u0026\u0026     : \"Jupyter Notebookでプレゼンをするためのライブラリ\" \u0026\u0026     jupyter-nbextension install rise --py --sys-prefix \u0026\u0026     jupyter-nbextension enable rise --py --sys-prefix \u0026\u0026     : \"セルごとに実行時間を測定\" \u0026\u0026     jupyter-nbextension enable execute_time/ExecuteTime  \u0026\u0026     jupyter nbextension enable move_selected_cells/main \u0026\u0026     jupyter nbextension enable toggle_all_line_numbers/main \u0026\u0026     jupyter nbextension enable code_prettify/code_prettify \u0026\u0026     jupyter nbextension enable scratchpad/main"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/notebooks"
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "jupyter",
            "notebook",
            "--no-browser",
            "--ip=0.0.0.0",
            "--allow-root"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}