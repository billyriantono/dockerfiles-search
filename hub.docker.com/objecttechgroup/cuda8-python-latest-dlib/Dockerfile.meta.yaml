MetaArgs: null
Stages:
- BaseName: nvidia/cuda:8.0-cudnn5-devel
  Commands:
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt update && apt install -y wget libffi-dev libreadline-gplv2-dev libncursesw5-dev
      libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t\tuuid-dev
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.7.3
    Name: env
  - CmdLine:
    - "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local
      -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o
      \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec
      rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; rm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i 's#archive.ubuntu.com/ubuntu#mirror.as29550.net/archive.ubuntu.com#g'
      /etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository ppa:ubuntu-toolchain-r/test
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update -y; apt install -y gcc-6 g++-6
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update -y; apt install -y git cmake libsm6 libxext6 libxrender-dev libopenblas-dev
      liblapack-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 50
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 50
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone -b 'v19.17' --single-branch --depth=1 https://github.com/davisking/dlib.git
      /dlib &&     cd /dlib && mkdir build &&     cd /dlib/build &&     cmake .. -DDLIB_USE_CUDA=1
      -DUSE_AVX_INSTRUCTIONS=1 -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda &&     cmake
      --build . && cd /dlib && python setup.py install
    Name: run
    PrependShell: true
  From:
    Image: nvidia/cuda:8.0-cudnn5-devel
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:8.0-cudnn5-devel
