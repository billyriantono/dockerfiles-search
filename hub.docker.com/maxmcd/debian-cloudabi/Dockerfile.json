{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:testing",
      "SourceCode": "FROM debian:testing",
      "Platform": "",
      "From": {
        "Image": "debian:testing"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/root/.cargo/bin:${PATH}\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get dist-upgrade -y \u0026\u0026     apt-get install -y         apt-transport-https build-essential clang-7 cmake curl git         libjsoncpp-dev libyaml-cpp-dev lld-7 pkg-config python3 python3-pip         wget \u0026\u0026     pip3 install pypeg2 toposort \u0026\u0026         for target in aarch64-unknown-cloudabi armv6-unknown-cloudabi-eabihf                   armv7-unknown-cloudabi-eabihf i686-unknown-cloudabi                   x86_64-unknown-cloudabi; do       for tool in ar nm objdump ranlib size; do         ln -s ../lib/llvm-7/bin/llvm-${tool} /usr/bin/${target}-${tool};       done \u0026\u0026       ln -s ../lib/llvm-7/bin/clang /usr/bin/${target}-cc \u0026\u0026       ln -s ../lib/llvm-7/bin/clang /usr/bin/${target}-c++ \u0026\u0026       ln -s ../lib/llvm-7/bin/lld /usr/bin/${target}-ld \u0026\u0026       ln -s ../../${target} /usr/lib/llvm-7/${target};     done \u0026\u0026         echo deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi \u003e /etc/apt/sources.list.d/cloudabi.list \u0026\u0026     wget -qO - 'https://pgp.mit.edu/pks/lookup?op=get\u0026search=0x0DA51B8531344B15' | apt-key add - \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y x86-64-unknown-cloudabi-cxx-runtime \u0026\u0026         git clone https://github.com/NuxiNL/argdata.git \u0026\u0026     cd argdata \u0026\u0026     cmake . \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -Rf argdata/ \u0026\u0026         git clone https://github.com/NuxiNL/arpc.git \u0026\u0026     cd arpc \u0026\u0026     cmake . \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -Rf arpc/ \u0026\u0026         git clone https://github.com/NuxiNL/cloudabi.git \u0026\u0026     install -m 444 cloudabi/headers/* /usr/include/ \u0026\u0026     rm -Rf cloudabi/ \u0026\u0026         git clone https://github.com/NuxiNL/flower.git \u0026\u0026     cd flower \u0026\u0026     cmake . \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -Rf flower/ \u0026\u0026         git clone https://github.com/NuxiNL/yaml2argdata.git \u0026\u0026     mkdir /usr/include/yaml2argdata/ \u0026\u0026     install -m 444 yaml2argdata/yaml2argdata/* /usr/include/yaml2argdata/ \u0026\u0026     rm -Rf yaml2argdata/ \u0026\u0026         git clone https://github.com/NuxiNL/cloudabi-utils.git \u0026\u0026     cd cloudabi-utils \u0026\u0026     cmake . \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -Rf cloudabi-utils/ \u0026\u0026         curl https://sh.rustup.rs -sSf | sh -s -- -y \u0026\u0026     rustup toolchain install nightly \u0026\u0026     rustup default nightly \u0026\u0026     rustup target add x86_64-unknown-cloudabi \u0026\u0026         ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}