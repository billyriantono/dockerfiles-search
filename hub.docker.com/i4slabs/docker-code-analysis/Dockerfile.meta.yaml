MetaArgs: null
Stages:
- BaseName: ruby:2.4-alpine
  Commands:
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - apk add --no-cache ca-certificates
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.6.2
    Name: env
  - CmdLine:
    - "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\topenssl
      \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&&
      tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils
      \t\tdpkg-dev dpkg \t\texpat-dev \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev
      \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tpax-utils
      \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev
      \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf
      --needed --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\",
      $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed
      \t\t\t| sort -u \t)\" \t&& apk add --virtual .python-rundeps $runDeps \t&& apk
      del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\(
      -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc'
      -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 9.0.1
    Name: env
  - CmdLine:
    - "set -ex; \t\tapk add --no-cache --virtual .fetch-deps openssl; \t\twget -O
      get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapk del .fetch-deps;
      \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-1.8-openjdk
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u111
    Name: env
  - Env:
    - Key: JAVA_ALPINE_VERSION
      Value: 8.111.14-r0
    Name: env
  - CmdLine:
    - "set -x \t&& apk add --no-cache \t\topenjdk8=\"$JAVA_ALPINE_VERSION\" \t&& [
      \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
    Name: run
    PrependShell: true
  - Env:
    - Key: FINDBUGS_VERSION
      Value: 3.0.1
    Name: env
  - Name: workdir
    Path: /usr/workdir
  - CmdLine:
    - apk add --update       curl       && rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL         https://sourceforge.net/projects/findbugs/files/findbugs/${FINDBUGS_VERSION}/findbugs-${FINDBUGS_VERSION}.tar.gz/download
      |       tar -xz  &&       mv findbugs-* /usr/bin/findbugs
    Name: run
    PrependShell: true
  - Env:
    - Key: PMD_VERSION
      Value: 5.8.1
    Name: env
  - CmdLine:
    - curl -sLO       https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-bin-${PMD_VERSION}.zip
      &&     unzip pmd-bin-*.zip &&     rm pmd-bin-*.zip &&     mv pmd-bin-* /usr/bin/pmd-bin
    Name: run
    PrependShell: true
  - Env:
    - Key: CHECKSTYLE_VERSION
      Value: 7.6.1
    Name: env
  - CmdLine:
    - curl -sLO       https://sourceforge.net/projects/checkstyle/files/checkstyle/${CHECKSTYLE_VERSION}/checkstyle-${CHECKSTYLE_VERSION}-all.jar
      &&     mv checkstyle-*.jar /usr/bin/checkstyle.jar
    Name: run
    PrependShell: true
  - Env:
    - Key: BRAKEMAN_VERSION
      Value: 3.6.1
    Name: env
  - CmdLine:
    - gem install brakeman --version ${BRAKEMAN_VERSION} --no-format-exec
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache bash nodejs &&   apk add --no-cache bash git openssh &&   npm
      install -g bower &&   npm install -g jshint &&   npm install -g jshint-html-reporter
      --save
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g retire
    Name: run
    PrependShell: true
  - Key: user
    Name: arg
    Value: bandit
  - Key: group
    Name: arg
    Value: bandit
  - Key: uid
    Name: arg
    Value: "1000"
  - Key: gid
    Name: arg
    Value: "1001"
  - CmdLine:
    - addgroup -g ${gid} ${group} &&     adduser -u ${uid} -G ${group} -D -s /bin/bash
      ${user}
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install bandit
    Name: run
    PrependShell: true
  - Name: user
    User: $user
  - Name: workdir
    Path: /workdir
  From:
    Image: ruby:2.4-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM ruby:2.4-alpine
