{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "AGENT_DIR",
              "Value": "/opt/buildAgent"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \t\u0026\u0026 apt-get install -y --no-install-recommends \t\tlxc iptables aufs-tools ca-certificates curl wget software-properties-common language-pack-en \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_CTYPE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "locale-gen en_US \u0026\u0026 update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOSU_VERSION",
              "Value": "1.7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\"     \u0026\u0026 wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\"     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4     \u0026\u0026 gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu     \u0026\u0026 rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc     \u0026\u0026 chmod +x /usr/local/bin/gosu     \u0026\u0026 gosu nobody true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \t\u0026\u0026 echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \t\u0026\u0026 add-apt-repository -y ppa:webupd8team/java \t\u0026\u0026 apt-get update   \t\u0026\u0026 apt-get install -y --no-install-recommends       oracle-java8-installer ca-certificates-java         \u0026\u0026 apt-get install -y --no-install-recommends       oracle-java7-installer ca-certificates-java   \t\u0026\u0026 rm -rf /var/lib/apt/lists/* /var/cache/oracle-*-installer/*.tar.gz /usr/lib/jvm/java-*-oracle/src.zip /usr/lib/jvm/java-*-oracle/javafx-src.zip       /usr/lib/jvm/java-*-oracle/jre/lib/security/cacerts   \t\u0026\u0026 ln -s /etc/ssl/certs/java/cacerts /usr/lib/jvm/java-7-oracle/jre/lib/security/cacerts   \t\u0026\u0026 ln -s /etc/ssl/certs/java/cacerts /usr/lib/jvm/java-8-oracle/jre/lib/security/cacerts   \t\u0026\u0026 update-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_BUCKET",
              "Value": "get.docker.com"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "1.11.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_SHA256",
              "Value": "893e3c6e89c0cd2c5f1e51ea41bc2dd97f5e791fcfa3cee28445df277836339d"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 curl -fSL \"https://${DOCKER_BUCKET}/builds/Linux/x86_64/docker-$DOCKER_VERSION.tgz\" -o docker.tgz   \u0026\u0026 echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c -   \u0026\u0026 tar -xzvf docker.tgz   \u0026\u0026 mv docker/* /usr/local/bin/   \u0026\u0026 rmdir docker   \u0026\u0026 rm docker.tgz   \u0026\u0026 docker -v"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd docker \u0026\u0026 adduser --disabled-password --gecos \"\" teamcity \t\u0026\u0026 sed -i -e \"s/%sudo.*$/%sudo ALL=(ALL:ALL) NOPASSWD:ALL/\" /etc/sudoers \t\u0026\u0026 usermod -a -G docker,sudo teamcity"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o /usr/local/bin/jq -SL https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \t\u0026\u0026 chmod +x /usr/local/bin/jq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 for key in     9554F04D7259F04124DE6B476D5A82AC7E37093B     94AE36675C464D64BAFA68DD7434390BDBE9B9C5     0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93     FD3A5288F042B6850C66B31F09FE44734EB7990E     71DCFD284A79C3B38668286BC97EC7A07EDE3FC1     DD8F2338BAE7501E3DD5AC78C273792F7D83545D     B9AE9905FFD7803F25714661B63B535A4C206CA9     C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8   ; do     gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\";   done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "4.2.6"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NPM_VERSION",
              "Value": "3.5.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\"   \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"   \u0026\u0026 gpg --verify SHASUMS256.txt.asc   \u0026\u0026 grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c -   \u0026\u0026 tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1   \u0026\u0026 rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc   \u0026\u0026 npm install -g \"npm@$NPM_VERSION\"   \u0026\u0026 npm cache clear"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-add-repository ppa:brightbox/ruby-ng \t\u0026\u0026 apt-get update     \u0026\u0026 apt-get upgrade -y \t\u0026\u0026 apt-get install -y ruby2.1 ruby2.1-dev ruby ruby-switch unzip \tiptables lxc fontconfig libffi-dev build-essential git python-dev libssl-dev python-pip \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pyopenssl pyasn1 ndg-httpsclient httpie awscli docker-compose==1.6.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ruby-switch --set ruby2.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g bower grunt-cli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gem install rake bundler compass --no-ri --no-rdoc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "wrapdocker",
            "/usr/local/bin/wrapdocker"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/docker-entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/docker"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/opt/buildAgent"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "9090"
          ]
        }
      ]
    }
  ]
}