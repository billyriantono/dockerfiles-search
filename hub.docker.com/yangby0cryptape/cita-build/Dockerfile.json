{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:bionic",
      "SourceCode": "FROM ubuntu:bionic",
      "Platform": "",
      "From": {
        "Image": "ubuntu:bionic"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "RUST_VERSION",
              "Value": "\"stable\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SOLIDITY_VERSION",
              "Value": "\"0.4.24\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYETHEREUM_VERSION",
              "Value": "\"3d5ec14032cc471f4dcfc7cc5c947294daf85fe0\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOSU_VERSION",
              "Value": "\"1.10\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "KCOV_VERSION",
              "Value": "\"35\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_PREFIX",
              "Value": "\"/opt\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"${PATH}:${INSTALL_PREFIX}/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux;     mkdir -p \"${INSTALL_PREFIX}/bin\";"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux;     apt-get update;     apt-get install -y         sudo         software-properties-common         build-essential         automake         cmake         clang         pkg-config         binutils-dev         libtool         libiberty-dev         libdw-dev         libffi-dev         libgmp-dev         zlib1g-dev         libsnappy-dev         libssl-dev         libsodium*         libsecp256k1-dev         libgoogle-perftools-dev         libcurl4-openssl-dev         libyaml-cpp-dev         libzmq3-dev         python3-pip         curl         unzip         git         vim         google-perftools         jq         rabbitmq-server         proxychains;     rm -rf /var/lib/apt/lists/*;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "RUSTUP_HOME",
              "Value": "\"${INSTALL_PREFIX}/local/rustup\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CARGO_HOME",
              "Value": "\"${INSTALL_PREFIX}/local/cargo\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"${PATH}:${CARGO_HOME}/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux;     curl https://sh.rustup.rs -sSf         | sh -s -- -y --no-modify-path --default-toolchain \"${RUST_VERSION}\";     rustup component add rustfmt --toolchain \"${RUST_VERSION}\";     rustup component add clippy --toolchain \"${RUST_VERSION}\";     rustup self update;     chmod -R a+w \"${RUSTUP_HOME}\" \"${CARGO_HOME}\";     rustup --version;     cargo --version;     rustc --version;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux;     pip3 install -U pip;     hash pip3;     pip3 install         pysodium         toml         jsonschema         secp256k1         jsonrpcclient[requests]==2.4.2;     pip3 install         https://github.com/ethereum/pyethereum/archive/${PYETHEREUM_VERSION}.zip;     rm -rf ~/.cache/pip;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux;     curl -o \"${INSTALL_PREFIX}/bin/solc\"         -L \"https://github.com/ethereum/solidity/releases/download/v${SOLIDITY_VERSION}/solc-static-linux\";     chmod +x \"${INSTALL_PREFIX}/bin/solc\";"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex;         dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\";     curl -o \"${INSTALL_PREFIX}/bin/gosu\"         -L \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\";     curl -o \"${INSTALL_PREFIX}/bin/gosu.asc\"         -L \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\";         export GNUPGHOME=\"$(mktemp -d)\";     for server in $(shuf -e ha.pool.sks-keyservers.net                             hkp://p80.pool.sks-keyservers.net:80                             keyserver.ubuntu.com                             hkp://keyserver.ubuntu.com:80                             pgp.mit.edu) ; do         gpg --keyserver \"${server}\"             --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \u0026\u0026 break || : ;     done;     gpg --batch --verify \"${INSTALL_PREFIX}/bin/gosu.asc\"         \"${INSTALL_PREFIX}/bin/gosu\";     rm -rf \"$GNUPGHOME\" \"${INSTALL_PREFIX}/bin/gosu.asc\";         chmod +x \"${INSTALL_PREFIX}/bin/gosu\";     gosu nobody true;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex;     curl -o kcov-${KCOV_VERSION}.tar.gz         -L https://github.com/SimonKagstrom/kcov/archive/v${KCOV_VERSION}.tar.gz;     tar -xf kcov-${KCOV_VERSION}.tar.gz \u0026\u0026 cd kcov-${KCOV_VERSION};     mkdir build \u0026\u0026 cd build;     cmake         -DCMAKE_BUILD_TYPE=Release         -DCMAKE_INSTALL_PREFIX=\"${INSTALL_PREFIX}\"         .. \u0026\u0026 make \u0026\u0026 make install;     cd ../..;     rm -rf kcov-${KCOV_VERSION}.tar.gz kcov-${KCOV_VERSION};"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "\"${INSTALL_PREFIX}/bin/\""
          ]
        },
        {
          "CmdLine": [
            "set -ex;     chmod +x \"${INSTALL_PREFIX}/bin/entrypoint.sh\";     mkdir -p /cita         \"${CARGO_HOME}/registry\" \"${CARGO_HOME}/git\";     chmod 777 /cita         \"${CARGO_HOME}/registry\" \"${CARGO_HOME}/git\";     echo \"ALL ALL=(ALL) NOPASSWD:ALL\" \u003e\u003e /etc/sudoers;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/cita"
        },
        {
          "CmdLine": [
            "entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}