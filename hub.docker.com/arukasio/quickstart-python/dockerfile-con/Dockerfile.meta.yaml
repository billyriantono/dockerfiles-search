MetaArgs: null
Stages:
- BaseName: php:7.1-fpm-alpine
  Commands:
  - Name: expose
    Ports:
    - "443"
    - "80"
  - CmdLine:
    - /start.sh
    Name: cmd
    PrependShell: false
  - Labels:
    - Key: description
      Value: '"The image is used for development in a common LAMP stack"'
    - Key: maintainer
      Value: '"Artur Safin <treilor@gmail.com>"'
    - Key: version
      Value: '"1.0"'
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: 1.13.7
    Name: env
  - Env:
    - Key: DEVEL_KIT_MODULE_VERSION
      Value: 0.3.0
    Name: env
  - Env:
    - Key: LD_PRELOAD
      Value: /usr/lib/preloadable_libiconv.so php
    Name: env
  - CmdLine:
    - apk update
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing
      gnu-libiconv
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8   && CONFIG="    --prefix=/etc/nginx     --sbin-path=/usr/sbin/nginx     --modules-path=/usr/lib/nginx/modules     --conf-path=/etc/nginx/nginx.conf     --error-log-path=/var/log/nginx/error.log     --http-log-path=/var/log/nginx/access.log     --pid-path=/var/run/nginx.pid     --lock-path=/var/run/nginx.lock     --http-client-body-temp-path=/var/cache/nginx/client_temp     --http-proxy-temp-path=/var/cache/nginx/proxy_temp     --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp     --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp     --http-scgi-temp-path=/var/cache/nginx/scgi_temp     --user=nginx     --group=nginx     --with-http_ssl_module     --with-http_realip_module     --with-http_addition_module     --with-http_sub_module     --with-http_dav_module     --with-http_flv_module     --with-http_mp4_module     --with-http_gunzip_module     --with-http_gzip_static_module     --with-http_random_index_module     --with-http_secure_link_module     --with-http_stub_status_module     --with-http_auth_request_module     --with-http_xslt_module=dynamic     --with-http_image_filter_module=dynamic     --with-http_geoip_module=dynamic     --with-http_perl_module=dynamic     --with-threads     --with-stream     --with-stream_ssl_module     --with-stream_ssl_preread_module     --with-stream_realip_module     --with-stream_geoip_module=dynamic     --with-http_slice_module     --with-mail     --with-mail_ssl_module     --with-compat     --with-file-aio     --with-http_v2_module     --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION   "   &&
      addgroup -S nginx   && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G
      nginx nginx   && apk add --virtual .build-deps     autoconf     gcc     libc-dev     make     openssl-dev     pcre-dev     zlib-dev     linux-headers     curl     gnupg     libxslt-dev     gd-dev     geoip-dev     perl-dev   &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz   &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc   &&
      curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz
      -o ndk.tar.gz   && export GNUPGHOME="$(mktemp -d)"   && found='''';   for server
      in     ha.pool.sks-keyservers.net     hkp://keyserver.ubuntu.com:80     hkp://p80.pool.sks-keyservers.net:80     pgp.mit.edu   ;
      do     echo "Fetching GPG key $GPG_KEYS from $server";     gpg --keyserver "$server"
      --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break;   done;   test
      -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1;   gpg
      --batch --verify nginx.tar.gz.asc nginx.tar.gz   && rm -rfv "$GNUPGHOME" nginx.tar.gz.asc;   mkdir
      -p /usr/src   && tar -zxC /usr/src -f nginx.tar.gz   && tar -zxC /usr/src -f
      ndk.tar.gz   && rm -fv nginx.tar.gz ndk.tar.gz   && cd /usr/src/nginx-$NGINX_VERSION   &&
      ./configure $CONFIG --with-debug   && make -j$(getconf _NPROCESSORS_ONLN)   &&
      mv objs/nginx objs/nginx-debug   && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so   &&
      mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so   &&
      mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so   && mv
      objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so   && mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so   && ./configure $CONFIG   && make -j$(getconf
      _NPROCESSORS_ONLN)   && make install   && rm -rf /etc/nginx/html/   && mkdir
      /etc/nginx/conf.d/   && mkdir -p /usr/share/nginx/html/   && install -m644 html/index.html
      /usr/share/nginx/html/   && install -m644 html/50x.html /usr/share/nginx/html/   &&
      install -m755 objs/nginx-debug /usr/sbin/nginx-debug   && install -m755 objs/ngx_http_xslt_filter_module-debug.so
      /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so   && install -m755
      objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so   &&
      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so   &&
      install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so   &&
      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so   &&
      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules   && strip /usr/sbin/nginx*   &&
      strip /usr/lib/nginx/modules/*.so   && rm -rf /usr/src/nginx-$NGINX_VERSION     &&
      apk add --no-cache --virtual .gettext gettext   && mv /usr/bin/envsubst /tmp/     &&
      runDeps="$(     scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst       | awk ''{ gsub(/,/, "\nso:", $2); print "so:" $2 }''       |
      sort -u       | xargs -r apk info --installed       | sort -u   )"   && apk
      add --no-cache --virtual .nginx-rundeps $runDeps   && apk del .build-deps   &&
      apk del .gettext   && mv /tmp/envsubst /usr/local/bin/'
    Name: run
    PrependShell: true
  - Env:
    - Key: php_exts
      Value: pdo_mysql pdo_sqlite mysqli mcrypt gd exif intl xsl json soap dom zip
        opcache bcmath sockets
    Name: env
  - Env:
    - Key: CONF_NGINX_SITE
      Value: /etc/nginx/conf.d/default-site.conf
    Name: env
  - Env:
    - Key: CONF_NGINX_SSL_INCL
      Value: /etc/nginx/conf.d/ssl.conf.include
    Name: env
  - Env:
    - Key: CONF_SUPERVISORD
      Value: /etc/supervisord.conf
    Name: env
  - CmdLine:
    - echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
      &&     echo /etc/apk/respositories &&     apk update &&     apk add --virtual
      .php-build-deps       bison       openssh-client       wget       curl       libcurl       git       augeas-dev       openssl-dev       dialog       autoconf       make       gcc       musl-dev       linux-headers       freetype-dev       sqlite-dev
      &&     apk add       libpng-dev       libjpeg-turbo-dev       libxslt-dev       libffi-dev       libmcrypt-dev       libmemcached       libmemcached-dev       libsasl       cyrus-sasl-dev       icu-dev       bash       supervisor       ca-certificates       libpq
      &&     docker-php-ext-configure gd       --with-gd       --with-freetype-dir=/usr/include/       --with-png-dir=/usr/include/       --with-jpeg-dir=/usr/include/
      &&     docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) $php_exts &&     pecl
      install xdebug &&     pecl install memcached &&     mkdir -p /tmp/websupport-sk-pecl-memcache
      &&     git clone https://github.com/websupport-sk/pecl-memcache.git /tmp/websupport-sk-pecl-memcache
      &&     cd /tmp/websupport-sk-pecl-memcache &&     phpize && ./configure && make
      -j$(getconf _NPROCESSORS_ONLN) && make install &&     cd - &&     rm -rf /tmp/websupport-sk-pecl-memcache
      &&     apk add --no-cache wget &&     EXPECTED_COMPOSER_SIGNATURE=$(wget -q
      -O - https://composer.github.io/installer.sig) &&     php -r "copy('https://getcomposer.org/installer',
      'composer-setup.php');" &&     php -r "if (hash_file('SHA384', 'composer-setup.php')
      === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified';
      } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php');
      } echo PHP_EOL;" &&     php composer-setup.php --install-dir=/usr/bin --filename=composer
      &&     php -r "unlink('composer-setup.php');"  &&     composer global require
      hirak/prestissimo &&     apk del .php-build-deps &&     docker-php-source delete
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /etc/nginx &&     mkdir -p /run/nginx &&     mkdir -p /var/log/supervisor
      &&     mkdir -p /etc/nginx/conf.d/ &&     mkdir -p /etc/nginx/ssl/ &&     mkdir
      /app/
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/php-docker-vars.ini
    - /usr/local/etc/php/conf.d/aa-php-docker-vars.ini
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/php-fpm-pool.conf
    - /usr/local/etc/php-fpm.d/www.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/supervisord.conf
    - $CONF_SUPERVISORD
  - CmdLine:
    - rm -Rf /etc/nginx/nginx.conf
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/nginx/nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/nginx/default-site.conf
    - ${CONF_NGINX_SITE}
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/nginx/common-server.conf.include
    - /etc/nginx/conf.d/common-server.conf.include
  - Chown: ""
    Name: add
    SourcesAndDest:
    - conf/nginx/ssl.conf.include
    - /etc/nginx/conf.d/ssl.conf.include
  - Chown: ""
    Name: add
    SourcesAndDest:
    - scripts/start.sh
    - /start.sh
  - CmdLine:
    - chmod 755 /start.sh
    Name: run
    PrependShell: true
  From:
    Image: php:7.1-fpm-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM php:7.1-fpm-alpine
