MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Maintainer: Makoto Kato <m_kato@ga2.so-net.ne.jp>
    Name: maintainer
  - Env:
    - Key: CLANG_VERSION
      Value: "8"
    Name: env
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository ppa:git-core/ppa
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get remove -y unattended-upgrades
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y gdb python-dbg
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y jq git curl
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y dos2unix
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y unzip openjdk-8-jdk libssl-dev
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work/bazel
  - CmdLine:
    - curl -sSfL -O https://github.com/bazelbuild/bazel/releases/download/0.22.0/bazel-0.22.0-installer-linux-x86_64.sh
      &&     chmod +x bazel-0.22.0-installer-linux-x86_64.sh &&     ./bazel-0.22.0-installer-linux-x86_64.sh
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - apt-get install -y wget
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${CLANG_VERSION}
      main"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y clang-${CLANG_VERSION} libclang-${CLANG_VERSION}-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y parallel python-virtualenv python-pip
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O bootstrap.py https://hg.mozilla.org/mozilla-central/raw-file/default/python/mozboot/bin/bootstrap.py
    Name: run
    PrependShell: true
  - CmdLine:
    - python bootstrap.py --application-choice=browser --no-interactive || true
    Name: run
    PrependShell: true
  - CmdLine:
    - rm bootstrap.py
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y python-dev libffi-dev cmake
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-${CLANG_VERSION}
      410
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION}
      410
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION}
      410
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/root/.cargo/bin
    Name: env
  - CmdLine:
    - rustup install nightly
    Name: run
    PrependShell: true
  - CmdLine:
    - rustup default nightly
    Name: run
    PrependShell: true
  - CmdLine:
    - rustup uninstall stable
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - rm -rf livegrep
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone -b mozsearch-version4 https://github.com/mozsearch/livegrep
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work/livegrep
  - CmdLine:
    - bazel build //src/tools:codesearch &&     install bazel-bin/src/tools/codesearch
      /usr/local/bin
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - rm -rf .cache/bazel
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install boto3
    Name: run
    PrependShell: true
  - Env:
    - Key: LIBGIT2_VERSION
      Value: 0.28.4
    Name: env
  - Env:
    - Key: LIBGIT2_TARBALL
      Value: v${LIBGIT2_VERSION}.tar.gz
    Name: env
  - Env:
    - Key: PYGIT2_VERSION
      Value: 0.28.2
    Name: env
  - CmdLine:
    - rm -rf libgit2-*
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -nv https://github.com/libgit2/libgit2/archive/v0.28.4.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar xf v0.28.4.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf v0.28.4.tar.gz
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work/libgit2-${LIBGIT2_VERSION}
  - CmdLine:
    - cmake . &&     make &&     make install
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install pygit2==${PYGIT2_VERSION}
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y pandoc
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSfL https://deb.nodesource.com/setup_8.x | bash
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y nodejs
    Name: run
    PrependShell: true
  - Env:
    - Key: CINNABAR_REVISION
      Value: cb546ebfa6e2e4fbfa2b96f17f82e3883ae28ea2
    Name: env
  - CmdLine:
    - rm -rf git-cinnabar
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/glandium/git-cinnabar
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work/git-cinnabar
  - CmdLine:
    - git checkout ${CINNABAR_REVISION}
    Name: run
    PrependShell: true
  - CmdLine:
    - ./git-cinnabar download
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - wget -nv https://index.taskcluster.net/v1/task/gecko.v2.mozilla-central.nightly.latest.firefox.linux64-opt/artifacts/public/build/target.jsshell.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir js
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work/js
  - CmdLine:
    - unzip ../target.jsshell.zip &&     install js /usr/local/bin &&     install
      *.so /usr/local/lib &&     ldconfig
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /work
  - CmdLine:
    - apt-get clean
    Name: run
    PrependShell: true
  - Env:
    - Key: SHELL
      Value: /bin/bash
    Name: env
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
