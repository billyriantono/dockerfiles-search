{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:buster-slim",
      "SourceCode": "FROM debian:buster-slim",
      "Platform": "",
      "From": {
        "Image": "debian:buster-slim"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"tobycheese https://github.com/tobycheese/\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "user",
          "Name": "arg",
          "Value": "johndoe"
        },
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "--login",
            "-c"
          ]
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y apt-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y curl git mmv vim-tiny wget unzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install make cmake gcc g++ gfortran"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libopenblas-dev liblapack-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd --create-home $user"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y python3 python3-dev python3-pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install jupyter jupyter_contrib_nbextensions RISE"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install numpy scipy pandas scikit-learn mlxtend ml_metrics h5py Pillow joblib                  more_itertools matplotlib seaborn plotly bokeh folium ggplot"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://packages.cloud.google.com/apt cloud-sdk-stretch main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y google-cloud-sdk google-cloud-sdk-app-engine-python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y libboost-all-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/davisking/dlib.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "dlib"
        },
        {
          "CmdLine": [
            "mkdir build \u0026\u0026 cd build \u0026\u0026 cmake .. \u0026\u0026 cmake --build . --config Release"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python3 setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": ".."
        },
        {
          "CmdLine": [
            "rm -r dlib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install flickrapi google-cloud-vision face_recognition monkeylearn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$user"
        },
        {
          "CmdLine": [
            "mkdir /home/$user/.jupyter/ \u0026\u0026 jupyter notebook --generate-config \u0026\u0026     jupyter contrib nbextension install --user \u0026\u0026     jupyter nbextension install rise --py --user \u0026\u0026     jupyter nbextension enable rise --py --user \u0026\u0026     jupyter nbextension enable exercise2/main"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/$user/.jupyter/"
        },
        {
          "CmdLine": [
            "echo \"c.NotebookApp.open_browser = False\" \u003e\u003e jupyter_notebook_config.py \u0026\u0026     echo \"c.JupyterApp.answer_yes = True\" \u003e\u003e jupyter_notebook_config.py \u0026\u0026     echo \"c.NotebookApp.ip = '*'\" \u003e\u003e jupyter_notebook_config.py \u0026\u0026     echo \"c.NotebookApp.allow_origin = '*'\" \u003e\u003e jupyter_notebook_config.py \u0026\u0026     echo \"c.NotebookApp.token = ''\" \u003e\u003e jupyter_notebook_config.py \u0026\u0026     echo \"c.NotebookApp.password = ''\" \u003e\u003e jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /data /home/$user/toyprojects"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get autoremove -y \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -r /root/.cache/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/$user/toyprojects/"
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "user",
          "User": "$user"
        },
        {
          "CmdLine": [
            "/usr/local/bin/jupyter-notebook -y $user"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}