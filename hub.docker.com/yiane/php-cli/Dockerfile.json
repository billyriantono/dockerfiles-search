{
  "MetaArgs": [
    {
      "Key": "PHP_VERSION",
      "DefaultValue": "7.3",
      "ProvidedValue": null,
      "Value": "7.3"
    }
  ],
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:${PHP_VERSION}-cli-stretch",
      "SourceCode": "FROM php:${PHP_VERSION}-cli-stretch",
      "Platform": "",
      "From": {
        "Image": "php:${PHP_VERSION}-cli-stretch"
      },
      "Commands": [
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "PUID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "PUID",
              "Value": "${PUID}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "PGID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "PGID",
              "Value": "${PGID}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "TZ",
          "Name": "arg",
          "Value": "Asia/Shanghai"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "${TZ}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone \u0026\u0026     groupadd -g ${PGID} www \u0026\u0026     useradd -u ${PUID} -g www -m www -s /bin/bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "CHANGE_SOURCE",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${CHANGE_SOURCE} = true ]; then echo \"deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib\\ndeb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main\\ndeb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib\\ndeb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib\\ndeb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib\\ndeb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib\\n\" \u003e /etc/apt/sources.list       \u0026\u0026 cat /etc/apt/sources.list ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -xe \u0026\u0026 apt-get update -yqq   \u0026\u0026 apt-get install -y --no-install-recommends     curl     libz-dev     libpq-dev     libjpeg-dev     libpng-dev     libfreetype6-dev     libssl-dev     libmcrypt-dev     wget     vim     apt-utils     inetutils-ping     libzip-dev zip unzip     librdkafka-dev     git subversion mercurial bash patch make coreutils   \u0026\u0026 pecl channel-update pecl.php.net   \u0026\u0026 docker-php-ext-configure zip --with-libzip   \u0026\u0026  docker-php-ext-install zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-configure gd     --with-jpeg-dir=/usr/lib     --with-freetype-dir=/usr/include/freetype2 \u0026\u0026 docker-php-ext-install gd \u0026\u0026 docker-php-ext-install pdo_mysql"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PGSQL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PGSQL} = true ]; then     docker-php-ext-install pgsql     \u0026\u0026 docker-php-ext-install pdo_pgsql ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PG_CLIENT",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PG_CLIENT} = true ]; then     mkdir -p /usr/share/man/man1 \u0026\u0026     mkdir -p /usr/share/man/man7 \u0026\u0026     apt-get install -y postgresql-client ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PHPREDIS",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PHPREDIS} = true ]; then     printf \"\\n\" | pecl install -o -f redis     \u0026\u0026  rm -rf /tmp/pear     \u0026\u0026  docker-php-ext-enable redis ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_MONGO",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MONGO} = true ]; then     if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then       pecl install mongo \u0026\u0026       docker-php-ext-enable mongo     ;fi \u0026\u0026     pecl install mongodb \u0026\u0026     docker-php-ext-enable mongodb ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_AMQP",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_AMQP} = true ]; then     apt-get update \u0026\u0026 apt-get -y install cmake \u0026\u0026     curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz \u0026\u0026     mkdir -p rabbitmq-c \u0026\u0026     tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 \u0026\u0026     cd rabbitmq-c/ \u0026\u0026     mkdir _build \u0026\u0026 cd _build/ \u0026\u0026     cmake .. \u0026\u0026     cmake --build . --target install \u0026\u0026     pecl install amqp \u0026\u0026     docker-php-ext-enable amqp \u0026\u0026     docker-php-ext-install sockets ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_BCMATH",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_BCMATH} = true ]; then     docker-php-ext-install bcmath ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_OPCACHE",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_OPCACHE} = true ]; then     docker-php-ext-install opcache ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./opcache.ini",
            "/usr/local/etc/php/conf.d/opcache.ini"
          ]
        },
        {
          "Key": "INSTALL_MYSQLI",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MYSQLI} = true ]; then     docker-php-ext-install mysqli ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_TOKENIZER",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_TOKENIZER} = true ]; then     docker-php-ext-install tokenizer ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_INTL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_INTL} = true ]; then     apt-get install -y zlib1g-dev libicu-dev g++ \u0026\u0026     docker-php-ext-configure intl \u0026\u0026     docker-php-ext-install intl ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_GHOSTSCRIPT",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_GHOSTSCRIPT} = true ]; then     apt-get install -y     poppler-utils     ghostscript ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_LDAP",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_LDAP} = true ]; then     apt-get install -y libldap2-dev \u0026\u0026     docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \u0026\u0026     docker-php-ext-install ldap ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_IMAGE_OPTIMIZERS",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then     apt-get install -y --force-yes jpegoptim optipng pngquant gifsicle ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_IMAGEMAGICK",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_IMAGEMAGICK} = true ]; then     apt-get install -y libmagickwand-dev imagemagick \u0026\u0026     pecl install imagick \u0026\u0026     docker-php-ext-enable imagick ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_IMAP",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_IMAP} = true ]; then     apt-get install -y libc-client-dev libkrb5-dev \u0026\u0026     docker-php-ext-configure imap --with-kerberos --with-imap-ssl \u0026\u0026     docker-php-ext-install imap ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_SWOOLE",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_SWOOLE} = true ]; then     if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then       pecl install swoole-2.0.10;     else       if [ $(php -r \"echo PHP_MINOR_VERSION;\") = \"0\" ]; then         pecl install swoole-2.2.0;       else         pecl install swoole;       fi     fi \u0026\u0026     docker-php-ext-enable swoole     \u0026\u0026 pecl install inotify     \u0026\u0026 docker-php-ext-enable inotify     \u0026\u0026 php -m | grep -q 'swoole' ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_RDKAFKA",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_RDKAFKA} = true ]; then         pecl install rdkafka \u0026\u0026         docker-php-ext-enable rdkafka ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_YAR",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_YAR} = true ]; then         pecl install yar-2.0.5 \u0026\u0026         docker-php-ext-enable yar ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PHP_VERSION",
          "Name": "arg",
          "Value": "${PHP_VERSION}"
        },
        {
          "CmdLine": [
            "php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PHP_COMPOSER_VERSION",
          "Name": "arg",
          "Value": "1.9.0"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://getcomposer.org/download/${PHP_COMPOSER_VERSION}/composer.phar",
            "/usr/local/bin/"
          ]
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_ALLOW_SUPERUSER",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_HOME",
              "Value": "/tmp"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./laravel.ini",
            "/usr/local/etc/php/conf.d"
          ]
        },
        {
          "CmdLine": [
            "chmod +rx /usr/local/bin/composer.phar \u0026\u0026     ln -s /usr/local/bin/composer.phar /usr/local/bin/composer \u0026\u0026     apt-get clean \u0026\u0026         rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \u0026\u0026         rm /var/log/lastlog /var/log/faillog \u0026\u0026         echo \"fs.inotify.max_user_watches=1048576\" \u003e\u003e /etc/sysctl.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        },
        {
          "Name": "user",
          "User": "www"
        },
        {
          "CmdLine": [
            "php",
            "-m"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www/html"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        }
      ]
    }
  ]
}