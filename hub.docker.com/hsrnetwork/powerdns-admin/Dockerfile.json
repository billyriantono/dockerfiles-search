{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "builder",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get install -y git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/ngoduykhanh/PowerDNS-Admin.git /powerdns-admin/"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Philip Schmid \u003cdocker@ins.hsr.ch\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "workdir",
          "Path": "/powerdns-admin"
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/config_template.py",
            "./config.py"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/app/",
            "./app/"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/migrations/",
            "./migrations/"
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/LICENSE",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/package.json",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/requirements.txt",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/run.py",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/.yarnrc",
            "."
          ]
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/powerdns-admin/init_data.py",
            "."
          ]
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get install -y       curl       apt-transport-https       gnupg2     \u0026\u0026 apt-get clean -y   \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_10.x | bash -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb https://dl.yarnpkg.com/debian/ stable main\" \u003e /etc/apt/sources.list.d/yarn.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get install -y       locales       locales-all       python3-pip       python3-dev       mysql-client       netcat       yarn       nodejs       libmysqlclient-dev       libsasl2-dev       libldap2-dev       libssl-dev       libxml2-dev       libxslt1-dev       libxmlsec1-dev       libffi-dev       pkg-config     \u0026\u0026 apt-get clean -y   \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /powerdns-admin/node_modules   /powerdns-admin/logs   /powerdns-admin/upload/avatar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install -r requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yarn install --pure-lockfile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "flask assets build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R www-data:www-data /powerdns-admin/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i \"s|SECRET_KEY =.*|SECRET_KEY = os.environ.get('SECRET_KEY', 'MyAwesomeSecretKey')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|BIND_ADDRESS =.*|BIND_ADDRESS = os.environ.get('BIND_ADDRESS', '0.0.0.0')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|PORT =.*|PORT = os.environ.get('PORT', '9191')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|LOG_LEVEL =.*|LOG_LEVEL = os.environ.get('LOG_LEVEL', 'info')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SQLA_DB_USER =.*|SQLA_DB_USER = os.environ.get('SQLA_DB_USER', 'powerdns-svc-user')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SQLA_DB_PASSWORD =.*|SQLA_DB_PASSWORD = os.environ.get('SQLA_DB_PASSWORD', 'powerdns-svc-user-pw')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SQLA_DB_HOST =.*|SQLA_DB_HOST = os.environ.get('SQLA_DB_HOST', 'powerdns-admin-mysql')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SQLA_DB_PORT =.*|SQLA_DB_PORT = os.environ.get('SQLA_DB_PORT', '3306')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SQLA_DB_NAME =.*|SQLA_DB_NAME = os.environ.get('SQLA_DB_NAME', 'powerdns-admin')|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|LOG_FILE =.*|LOG_FILE = ''|g\" /powerdns-admin/config.py \u0026\u0026   sed -i \"s|SALT =.*|SALT = '$2b$12$yLUMTIfl21FKJQpTkRQXCu'|g\" /powerdns-admin/config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/powerdns-admin/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod 755 /powerdns-admin/entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "www-data"
        },
        {
          "Env": [
            {
              "Key": "FLASK_APP",
              "Value": "app/__init__.py"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "9191/tcp"
          ]
        },
        {
          "CmdLine": [
            "/powerdns-admin/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "gunicorn",
            "app:app"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}