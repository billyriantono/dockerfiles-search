{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "KIM WANSEOK \"carpe4me@gmail.com\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "sed -i 's/archive.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Seoul"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg --add-architecture i386     \u0026\u0026 apt-get update -y     \u0026\u0026 apt-get install -y --no-install-recommends         libncurses5:i386 libc6:i386 libstdc++6:i386 zlib1g:i386 lib32z1 lib32ncurses5 lib32stdc++6 lib32gcc1         git wget zip unzip vim sudo curl gnupg2 openssh-server         openjdk-8-jdk         qt5-default         locales language-pack-ko fonts-nanum fonts-nanum-coding         uim im-config         gdebi-core     \u0026\u0026 apt-get -y autoremove     \u0026\u0026 apt-get clean     \u0026\u0026 apt-get -y autoclean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "proxy.crt",
            "/root"
          ]
        },
        {
          "CmdLine": [
            "cp /root/proxy.crt /usr/local/share/ca-certificates/ \u0026\u0026 \tupdate-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PROXY",
          "Name": "arg",
          "Value": "168.219.61.252"
        },
        {
          "Key": "PROXY_PORT",
          "Name": "arg",
          "Value": "8080"
        },
        {
          "Key": "NOPROXY",
          "Name": "arg",
          "Value": "localhost,127.0.0.1,sec.samsung.net,165.213.180.100"
        },
        {
          "CmdLine": [
            "echo 'http_proxy=\"http://'\"$PROXY:$PROXY_PORT\"'\"' \u003e\u003e /etc/environment \u0026\u0026     echo 'https_proxy=\"http://'\"$PROXY:$PROXY_PORT\"'\"' \u003e\u003e /etc/environment \u0026\u0026     echo 'ftp_proxy=\"ftp://'\"$PROXY:$PROXY_PORT\"'\"' \u003e\u003e /etc/environment \u0026\u0026     echo 'socks_proxy=\"socks://'\"$PROXY:$PROXY_PORT\"'\"' \u003e\u003e /etc/environment \u0026\u0026    echo 'no_proxy=\"'\"$NOPROXY\"'\"' \u003e\u003e /etc/environment \u0026\u0026    echo 'fs.inotify.max_user_watches = 524288' \u003e\u003e /etc/sysctl.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -q https://github.com/naver/d2codingfont/releases/download/VER1.3.2/D2Coding-Ver1.3.2-20180524.zip \u0026\u0026     mkdir -p /usr/share/fonts/truetype/D2Coding \u0026\u0026     unzip -qq D2Coding-*.zip -d /usr/share/fonts/truetype/D2Coding \u0026\u0026     wget -q http://ftp.gnome.org/pub/GNOME/sources/ttf-bitstream-vera/1.10/ttf-bitstream-vera-1.10.zip \u0026\u0026    mkdir -p /usr/share/fonts/truetype/ttf-bitstream-vera \u0026\u0026     unzip -qq ttf-bitstream-vera*.zip -d /usr/share/fonts/truetype/ttf-bitstream-vera \u0026\u0026    fc-cache -f -v \u0026\u0026    rm -f /tmp/D2Coding-Ver*.zip \u0026\u0026    rm -f /tmp/ttf-bitstream-vera-*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "user",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "group",
          "Name": "arg",
          "Value": "jenkins"
        },
        {
          "Key": "uid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "gid",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "http_port",
          "Name": "arg",
          "Value": "8080"
        },
        {
          "Key": "agent_port",
          "Name": "arg",
          "Value": "50000"
        },
        {
          "Key": "JENKINS_HOME",
          "Name": "arg",
          "Value": "/home/jenkins"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_HOME",
              "Value": "$JENKINS_HOME"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_SLAVE_AGENT_PORT",
              "Value": "${agent_port}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $JENKINS_HOME   \u0026\u0026 chown ${uid}:${gid} $JENKINS_HOME   \u0026\u0026 groupadd -g ${gid} ${group}   \u0026\u0026 useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}   \u0026\u0026 echo \"${user} ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "$JENKINS_HOME"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /usr/share/jenkins/ref/init.groovy.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "TINI_VERSION",
          "Name": "arg",
          "Value": "v0.16.1"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tini_pub.gpg",
            "${JENKINS_HOME}/tini_pub.gpg"
          ]
        },
        {
          "CmdLine": [
            "curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture) -o /sbin/tini   \u0026\u0026 curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture).asc -o /sbin/tini.asc   \u0026\u0026 gpg --no-tty --import ${JENKINS_HOME}/tini_pub.gpg   \u0026\u0026 gpg --verify /sbin/tini.asc   \u0026\u0026 rm -rf /sbin/tini.asc /root/.gnupg   \u0026\u0026 chmod +x /sbin/tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "init.groovy",
            "/usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy"
          ]
        },
        {
          "Key": "JENKINS_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "JENKINS_VERSION",
              "Value": "${JENKINS_VERSION:-2.150.1}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "JENKINS_SHA",
          "Name": "arg",
          "Value": "7a38586d5a3a1a83498809a83715728bb2f01b58a7dd3a88366f076efdaf6669"
        },
        {
          "Key": "JENKINS_URL",
          "Name": "arg",
          "Value": "https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war"
        },
        {
          "CmdLine": [
            "curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war   \u0026\u0026 echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JENKINS_UC",
              "Value": "https://updates.jenkins.io"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_UC_EXPERIMENTAL",
              "Value": "https://updates.jenkins.io/experimental"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_INCREMENTALS_REPO_MIRROR",
              "Value": "https://repo.jenkins-ci.org/incrementals"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "${http_port}"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "${agent_port}"
          ]
        },
        {
          "Env": [
            {
              "Key": "COPY_REFERENCE_FILE_LOG",
              "Value": "$JENKINS_HOME/copy_reference_file.log"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /var/log/${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R  ${user}:${group}  /var/log/${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /var/cache/${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R ${user}:${group} /var/cache/${user}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_OPTS",
              "Value": "\"-Xmx8192m\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_OPTS",
              "Value": "\"--handlerCountMax=300 --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME_DIR",
              "Value": "${JENKINS_HOME}"
            },
            {
              "Key": "TOOL_DIR",
              "Value": "/opt"
            },
            {
              "Key": "BUILD_CFG",
              "Value": "${JENKINS_HOME}/buildcfg"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "chown -R ${user}:${group} $TOOL_DIR \u0026\u0026     mkdir -p ${BUILD_CFG}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "${TOOL_DIR}"
        },
        {
          "Name": "user",
          "User": "${user}"
        },
        {
          "Env": [
            {
              "Key": "GRADLE_VERSION",
              "Value": "4.5.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GRADLE_HOME",
              "Value": "$TOOL_DIR/gradle/gradle-$GRADLE_VERSION"
            },
            {
              "Key": "GRADLE_USER_HOME",
              "Value": "${BUILD_CFG}/gradle"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:${GRADLE_HOME}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip \u0026\u0026     unzip -qq gradle*.zip -d $TOOL_DIR/gradle \u0026\u0026     mkdir -p $GRADLE_USER_HOME \u0026\u0026     rm gradle*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "1000:1000",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gradle.properties",
            "init.gradle",
            "$GRADLE_USER_HOME/"
          ]
        },
        {
          "Env": [
            {
              "Key": "KOTLIN_VERSION",
              "Value": "1.2.50"
            },
            {
              "Key": "KOTLIN_HOME",
              "Value": "$TOOL_DIR/kotlinc"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:${KOTLIN_HOME}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -q https://github.com/JetBrains/kotlin/releases/download/v${KOTLIN_VERSION}/kotlin-compiler-${KOTLIN_VERSION}.zip \u0026\u0026     unzip -qq *kotlin*.zip -d $TOOL_DIR/ \u0026\u0026     rm kotlin-compiler-*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ANDROID_SDK_VERSION",
              "Value": "4333796"
            },
            {
              "Key": "ANDROID_HOME",
              "Value": "$TOOL_DIR/android-sdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${PATH}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -q https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_VERSION}.zip \u0026\u0026     mkdir -p $ANDROID_HOME \u0026\u0026    unzip -qq *tools*linux*.zip -d $ANDROID_HOME \u0026\u0026     chmod -R a+w ${ANDROID_HOME} \u0026\u0026     rm *tools*linux*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "5037"
          ]
        },
        {
          "Env": [
            {
              "Key": "SDK_PROXY",
              "Value": "\"--no_https --proxy=http --proxy_host=${PROXY} --proxy_port=${PROXY_PORT}\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir ~/.android \u0026\u0026     echo '### User Sources for Android SDK Manager' \u003e ~/.android/repositories.cfg \u0026\u0026     sdkmanager --update \u0026\u0026 yes | sdkmanager --licenses"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sdkmanager   \"tools\"   \"platform-tools\"   \"emulator\"   \"extras;android;m2repository\"   \"extras;google;m2repository\"   \"extras;google;google_play_services\"   \"build-tools;26.0.1\"   \"build-tools;27.0.3\"   \"build-tools;28.0.0\"   \"build-tools;28.0.3\"   \"sources;android-28\"   \"platforms;android-28\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "\"/usr/lib/jvm/java-8-openjdk-amd64\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "bashrc",
            "gitconfig",
            "${BUILD_CFG}/"
          ]
        },
        {
          "CmdLine": [
            "sudo chown -R  ${user}:${group}  ${BUILD_CFG}/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "${HOME_DIR}"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins-support",
            "/usr/local/bin/jenkins-support"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jenkins.sh",
            "/usr/local/bin/jenkins.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "tini-shim.sh",
            "/bin/tini"
          ]
        },
        {
          "CmdLine": [
            "/sbin/tini",
            "--",
            "/usr/local/bin/jenkins.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "plugins.sh",
            "/usr/local/bin/plugins.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "install-plugins.sh",
            "/usr/local/bin/install-plugins.sh"
          ]
        }
      ]
    }
  ]
}