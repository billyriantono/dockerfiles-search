MetaArgs: null
Stages:
- BaseName: buildpack-deps:stretch-scm
  Commands:
  - Key: DOCKERFILE_PATH
    Name: arg
    Value: null
  - Key: SOURCE_COMMIT
    Name: arg
    Value: null
  - Key: SOURCE_TYPE
    Name: arg
    Value: null
  - Key: APT_PROXY
    Name: arg
    Value: null
  - Key: DOCKER_VERSION
    Name: arg
    Value: null
  - Key: HELM_VERSION
    Name: arg
    Value: null
  - Key: K3S_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: http_proxy
      Value: '"${APT_PROXY}"'
    - Key: https_proxy
      Value: '"${APT_PROXY}"'
    Name: env
  - Name: user
    User: root
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    - Key: container
      Value: docker
    Name: env
  - CmdLine:
    - "if [ -n \"${APT_PROXY}\" ]; then echo \"Acquire::HTTP::Proxy \\\"${APT_PROXY}\\\";\\nAcquire::HTTPS::Proxy
      false;\\n\" >> /etc/apt/apt.conf.d/01proxy; cat /etc/apt/apt.conf.d/01proxy;
      fi &&    apt-get update && apt-get install -yq --no-install-recommends \tapt-transport-https
      \tca-certificates \tcurl \tgnupg2 \tsoftware-properties-common \tbzip2 \tunzip
      \txz-utils \tbison \tlibgdbm-dev \truby \tautoconf \tautomake \tlibtool \tbuild-essential
      \tgcc \tmake \tzlib1g-dev \tlibssl-dev \ttcl \ttk \tdpkg-dev \ttcl-dev \ttk-dev
      \tlibssl-dev \tjq \tnetcat-openbsd \tcollectl colplot \te2fsprogs iptables xfsprogs
      kmod \txvfb fontconfig libxss1 libappindicator3-1 libindicator7 libpango1.0-0
      fonts-liberation xdg-utils gconf-service libasound2 libatk-bridge2.0-0 libgtk-3-0
      libnspr4 libnss3 lsb-release"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "{ \techo '#!/bin/sh'; \techo 'set -e'; \techo; \techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -svT "/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)" /docker-java-home
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /docker-java-home
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u181
    Name: env
  - Env:
    - Key: JAVA_DEBIAN_VERSION
      Value: 8u212-b01-1~deb9u1
    Name: env
  - Env:
    - Key: _JAVA_OPTIONS
      Value: '"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
    Name: env
  - CmdLine:
    - "set -ex; \t\tif [ ! -d /usr/share/man/man1 ]; then \tmkdir -p /usr/share/man/man1;
      \tfi; \t\tapt-get update; \tapt-get install -y --no-install-recommends \topenjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\"
      \t; \trm -rf /var/lib/apt/lists/*; \t\t[ \"$(readlink -f \"$JAVA_HOME\")\" =
      \"$(docker-java-home)\" ]; \t\tupdate-alternatives --get-selections | awk -v
      home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\";
      print | \"update-alternatives --set-selections\" }'; \tupdate-alternatives --query
      java | grep -q 'Status: manual'"
    Name: run
    PrependShell: true
  - Env:
    - Key: GRADLE_HOME
      Value: '"/opt/gradle"'
    - Key: GRADLE_VERSION
      Value: '"4.10.3"'
    Name: env
  - Key: GRADLE_DOWNLOAD_SHA256
    Name: arg
    Value: 8626cbf206b4e201ade7b87779090690447054bc93f052954c78480fa6ed186e
  - CmdLine:
    - "set -o errexit -o nounset \t&& echo \"Downloading Gradle\" \t&& wget --no-verbose
      --output-document=gradle.zip \"https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip\"
      \t&& echo \"Checking download hash\" \t&& echo \"${GRADLE_DOWNLOAD_SHA256} *gradle.zip\"
      | sha256sum --check - \t&& echo \"Installing Gradle\" \t&& unzip gradle.zip
      \t&& rm gradle.zip \t&& mv \"gradle-${GRADLE_VERSION}\" \"${GRADLE_HOME}/\"
      \t&& ln --symbolic \"${GRADLE_HOME}/bin/gradle\" /usr/bin/gradle \t&& echo \"Adding
      gradle user and group\" \t&& groupadd --system --gid 1000 gradle \t&& useradd
      --system --gid gradle --uid 1000 --shell /bin/bash --create-home gradle \t&&
      mkdir /home/gradle/.gradle \t&& chown --recursive gradle:gradle /home/gradle"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - '"/home/gradle/.gradle"'
  - Name: workdir
    Path: /home/gradle
  - CmdLine:
    - "set -o errexit -o nounset \t&& echo \"Testing Gradle installation\" \t&& gradle
      --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo
      'update: --no-document'; \t} >> /usr/local/etc/gemrc"
    Name: run
    PrependShell: true
  - Env:
    - Key: RUBY_MAJOR
      Value: '"2.4"'
    - Key: RUBY_VERSION
      Value: '"2.4.4"'
    - Key: RUBY_DOWNLOAD_SHA256
      Value: '"1d0034071d675193ca769f64c91827e5f54cb3a7962316a41d5217c7bc6949f0"'
    - Key: RUBYGEMS_VERSION
      Value: '"2.6.14.1"'
    - Key: BUNDLER_VERSION
      Value: '"1.16.2"'
    Name: env
  - CmdLine:
    - "set -ex \t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\"
      \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t&& mkdir
      -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1
      \t&& rm ruby.tar.xz \t&& cd /usr/src/ruby \t&& { \t\techo '#define ENABLE_PATH_CHECK
      0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t&&
      autoconf \t&& ./configure --disable-install-doc --enable-shared \t&& make -j\"$(nproc)\"
      \t&& make install \t&& cd / \t&& rm -r /usr/src/ruby \t&& gem update --system
      \"$RUBYGEMS_VERSION\""
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install bundler --version "$BUNDLER_VERSION"
    Name: run
    PrependShell: true
  - Env:
    - Key: GEM_HOME
      Value: '"/usr/local/bundle"'
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    - Key: BUNDLE_BIN
      Value: '"$GEM_HOME/bin"'
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    - Key: PATH
      Value: '"$BUNDLE_BIN:$PATH"'
    Name: env
  - CmdLine:
    - "mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \t&& chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\""
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"/usr/local/bin:$PATH"'
    - Key: LANG
      Value: '"C.UTF-8"'
    - Key: GPG_KEY
      Value: '"C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"'
    - Key: PYTHON_VERSION
      Value: '"2.7.15"'
    Name: env
  - CmdLine:
    - "set -ex \t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --no-tty --keyserver keyserver.ubuntu.com
      --recv-keys \"$GPG_KEY\" \t&& gpg --no-tty --batch --verify python.tar.xz.asc
      python.tar.xz \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python
      \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm
      python.tar.xz \t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query
      DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared
      \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig
      \t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name
      tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo'
      \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 10.0.1
    Name: env
  - CmdLine:
    - "set -ex; \twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\(
      -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc'
      -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --no-cache-dir virtualenv awscli azure-cli
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_BUCKET
      Value: '"download.docker.com"'
    - Key: DOCKER_VERSION
      Value: '"18.09.3"'
    - Key: DOCKER_CHANNEL
      Value: '"stable"'
    - Key: DIND_COMMIT
      Value: '"52379fa76dee07ca038624d639d9e14f4fb719ff"'
    - Key: DOCKER_COMPOSE_VERSION
      Value: '"1.23.2"'
    Name: env
  - CmdLine:
    - "set -x \t&& curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\"
      -o docker.tgz \t&& tar --extract --file docker.tgz --strip-components 1  --directory
      /usr/local/bin/ \t&& rm docker.tgz \t&& docker -v \t&& addgroup docker \t&&
      usermod -G docker gradle \t&& addgroup dockremap \t&& useradd -g dockremap dockremap
      \t&& echo 'dockremap:165536:65536' >> /etc/subuid \t&& echo 'dockremap:165536:65536'
      >> /etc/subgid \t&& wget \"https://raw.githubusercontent.com/moby/moby/${DIND_COMMIT}/hack/dind\"
      -O /usr/local/bin/dind \t&& curl -fkSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64
      > /usr/local/bin/docker-compose \t&& chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose
      \t&& docker-compose version \t&& rm -rf /var/lib/apt/lists/* \t&& apt-get clean
      \t&& rm -f /etc/apt/apt.conf.d/01proxy"
    Name: run
    PrependShell: true
  - CmdLine:
    - "export CHROME_VERSION=stable_current &&\tcurl --show-error --location --fail
      --retry 3 -o /tmp/google-chrome-${CHROME_VERSION}_amd64.deb https://dl.google.com/linux/direct/google-chrome-${CHROME_VERSION}_amd64.deb
      &&    dpkg -i /tmp/google-chrome-${CHROME_VERSION}_amd64.deb &&\trm /tmp/google-chrome-${CHROME_VERSION}_amd64.deb"
    Name: run
    PrependShell: true
  - Env:
    - Key: TERRAFORM_VERSION
      Value: '"0.11.11"'
    - Key: TERRAFORM_SHA256
      Value: '"94504f4a67bad612b5c8e3a4b7ce6ca2772b3c1559630dfd71e9c519e3d6149c"'
    Name: env
  - CmdLine:
    - "curl -fL -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      &&\techo \"${TERRAFORM_SHA256} /tmp/terraform.zip\" | sha256sum --check - &&
      \   cd /usr/bin &&\tunzip /tmp/terraform.zip &&\trm /tmp/terraform.zip &&\tchmod
      +x /usr/bin/terraform"
    Name: run
    PrependShell: true
  - CmdLine:
    - "curl -fL -o /usr/bin/k3s https://github.com/rancher/k3s/releases/download/v0.1.0/k3s
      &&    chmod +x /usr/bin/k3s &&\tcurl -fL -o /opt/local-path-storage.yaml https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
      &&\techo '#!/bin/sh\\nexec k3s kubectl $@' > /usr/bin/kubectl &&\tchmod +x /usr/bin/kubectl"
    Name: run
    PrependShell: true
  - CmdLine:
    - "curl -fL -o /tmp/helm.tgz https://storage.googleapis.com/kubernetes-helm/helm-v${HELM_VERSION}-linux-amd64.tar.gz
      &&\ttar -xzf /tmp/helm.tgz --strip-components=1 -C /usr/bin linux-amd64/helm
      linux-amd64/tiller &&\trm /tmp/helm.tgz &&\tchmod +x /usr/bin/helm /usr/bin/tiller"
    Name: run
    PrependShell: true
  - Env:
    - Key: HELM_VERSION
      Value: '"${HELM_VERSION}"'
    - Key: K3S_VERSION
      Value: '"${K3S_VERSION}"'
    - Key: KUBECONFIG
      Value: '"/etc/rancher/k3s/k3s.yaml"'
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - k3s-${K3S_VERSION}-${HELM_VERSION}.tar.gz
    - /opt/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - '*.sh'
    - /usr/local/bin/
  - Name: volume
    Volumes:
    - /var/lib/docker
  - Env:
    - Key: http_proxy
      Value: '""'
    - Key: https_proxy
      Value: '""'
    Name: env
  - CmdLine:
    - /usr/local/bin/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - gradle
    Name: cmd
    PrependShell: false
  - Labels:
    - Key: maintainer
      Value: '"Patrick Double <pat@patdouble.com>"'
    - Key: org.label-schema.docker.dockerfile
      Value: '"$DOCKERFILE_PATH/Dockerfile"'
    - Key: org.label-schema.license
      Value: '"GPLv2"'
    - Key: org.label-schema.name
      Value: '"Gradle build base with Gradle ${GRADLE_VERSION}, OpenJDK ${JAVA_VERSION},
        Docker (dind) ${DOCKER_VER}, Docker Compose ${DOCKER_COMPOSE_VER}, Kubernetes
        via K3S ${K3S_VERSION}, Ruby ${RUBY_VERSION}, Python ${PYTHON_VERSION}, Terraform
        ${TERRAFORM_VERSION} on Debian Jessie. Intended for building web applications
        based on the JVM and common frontend technologies."'
    - Key: org.label-schema.url
      Value: '"https://bitbucket.org/double16/gradle-webapp-build-base"'
    - Key: org.label-schema.vcs-ref
      Value: $SOURCE_COMMIT
    - Key: org.label-schema.vcs-type
      Value: '"$SOURCE_TYPE"'
    - Key: org.label-schema.vcs-url
      Value: '"https://bitbucket.org/double16/gradle-webapp-build-base.git"'
    Name: label
  From:
    Image: buildpack-deps:stretch-scm
  Name: ""
  Platform: ""
  SourceCode: FROM buildpack-deps:stretch-scm
