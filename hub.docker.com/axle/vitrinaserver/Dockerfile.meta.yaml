MetaArgs: null
Stages:
- BaseName: nvidia/cuda:9.2-cudnn7-runtime-ubuntu16.04
  Commands:
  - Env:
    - Key: PYTHONUNBUFFERED
      Value: "TRUE"
    Name: env
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev"
    Name: run
    PrependShell: true
  - CmdLine:
    - 'set -ex     && echo ''Acquire::CompressionTypes::Order:: "gz";'' > /etc/apt/apt.conf.d/99use-gzip-compression     &&
      apt-get update     && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends
      wget ca-certificates vim        autoconf automake less groff dpkg-dev         bzip2=1.0.*
      file g++ gcc imagemagick         libbz2-dev libc6-dev curl         libdb-dev
      libevent-dev libffi-dev         libgeoip-dev libglib2.0-dev libjpeg-dev         libkrb5-dev
      liblzma-dev libmagickcore-dev         libmagickwand-dev libmysqlclient-dev libncurses5-dev         libpng12-dev
      libpq-dev libreadline-dev libsqlite3-dev         libssl-dev libtool libwebp-dev
      libxml2-dev         libxslt1-dev libyaml-dev make patch xz-utils         zlib1g-dev
      tcl tk         e2fsprogs iptables xfsprogs xz-utils openjdk-8-jdk-headless fakeroot         mono-mcs
      libcurl4-openssl-dev liberror-perl unzip'
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.6.8
    Name: env
  - CmdLine:
    - "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local
      -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o
      \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec
      rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --no-cache-dir multi-model-server --pre
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /home/model-server/tmp
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dockerd-entrypoint.sh
    - /usr/local/bin/dockerd-entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config.properties
    - /home/model-server
  - CmdLine:
    - chmod +x /usr/local/bin/dockerd-entrypoint.sh
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
    - "8081"
  - Name: workdir
    Path: /home/model-server
  - Env:
    - Key: TEMP
      Value: /home/model-server/tmp
    Name: env
  - CmdLine:
    - /usr/local/bin/dockerd-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - serve
    Name: cmd
    PrependShell: false
  - Labels:
    - Key: maintainer
      Value: '"dantu@amazon.com, rakvas@amazon.com, lufen@amazon.com, dden@amazon.com"'
    Name: label
  From:
    Image: nvidia/cuda:9.2-cudnn7-runtime-ubuntu16.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:9.2-cudnn7-runtime-ubuntu16.04
