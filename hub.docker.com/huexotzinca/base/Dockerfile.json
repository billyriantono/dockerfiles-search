{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.10",
      "SourceCode": "FROM ubuntu:16.10",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.10"
      },
      "Commands": [
        {
          "Maintainer": "Neftali Bautista\u003cdev@neftalibautista.com\u003e",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "version",
              "Value": "\"0.1.4\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "ADMIN_GROUP_NAME",
          "Name": "arg",
          "Value": "\"admin\""
        },
        {
          "Key": "USER_NAME",
          "Name": "arg",
          "Value": "\"docker\""
        },
        {
          "Key": "USER_GROUP_NAME",
          "Name": "arg",
          "Value": "\"${USER_NAME}\""
        },
        {
          "Key": "USER_PATH",
          "Name": "arg",
          "Value": "\"/home/${USER_NAME}\""
        },
        {
          "Key": "TMP_PATH",
          "Name": "arg",
          "Value": "\"${USER_PATH}/tmp\""
        },
        {
          "Key": "REDIS_RELEASE",
          "Name": "arg",
          "Value": "\"redis-4.0.2\""
        },
        {
          "Key": "WATCHMAN_RELEASE",
          "Name": "arg",
          "Value": "\"4.9.0\""
        },
        {
          "Key": "OPENRESTY_RELEASE",
          "Name": "arg",
          "Value": "\"1.11.2.5\""
        },
        {
          "Key": "PHANTOMJS_RELEASE",
          "Name": "arg",
          "Value": "\"phantomjs-2.1.1\""
        },
        {
          "Key": "WATCHMAN_RELEASE_NAME",
          "Name": "arg",
          "Value": "\"v${WATCHMAN_RELEASE}\""
        },
        {
          "Key": "REDIS_TAR_NAME",
          "Name": "arg",
          "Value": "\"${REDIS_RELEASE}.tar.gz\""
        },
        {
          "Key": "PHANTOMJS_VER_NAME",
          "Name": "arg",
          "Value": "\"${PHANTOMJS_RELEASE}-linux-x86_64\""
        },
        {
          "Key": "PHANTOMJS_TAR_NAME",
          "Name": "arg",
          "Value": "\"${PHANTOMJS_VER_NAME}.tar.bz2\""
        },
        {
          "Key": "OPENRESTY_VER_NAME",
          "Name": "arg",
          "Value": "\"openresty-${OPENRESTY_RELEASE}\""
        },
        {
          "Key": "OPENRESTY_TAR_NAME",
          "Name": "arg",
          "Value": "\"${OPENRESTY_VER_NAME}.tar.gz\""
        },
        {
          "Key": "ROOT_USER_PASSWORD",
          "Name": "arg",
          "Value": "\"docker\""
        },
        {
          "Key": "DOCKER_USER_PASSWORD",
          "Name": "arg",
          "Value": "\"${ROOT_USER_PASSWORD}\""
        },
        {
          "Key": "BASH_RC_FILE",
          "Name": "arg",
          "Value": "\"bashrc\""
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026       apt-get -y install build-essential pkg-config autoconf automake bison \u0026\u0026       apt-get -y install apt-utils \u0026\u0026       apt-get -y install sudo \u0026\u0026       apt-get -y install curl \u0026\u0026       apt-get -y install wget \u0026\u0026       apt-get -y install git subversion bzr \u0026\u0026       apt-get -y install vim \u0026\u0026       apt-get -y install sqlite3 libsqlite3-dev \u0026\u0026       apt-get -y install openssl libcurl4-openssl-dev libtool zlib1g \u0026\u0026       apt-get -y install zlib1g-dev python-software-properties tcl8.6  \u0026\u0026       apt-get -y install tcl8.6-dev libssl-dev libreadline-dev libyaml-dev \u0026\u0026       apt-get -y install libxml2-dev libxslt1-dev libffi-dev libreadline6 \u0026\u0026       apt-get -y install libreadline6-dev libxslt-dev libc6-dev ncurses-dev \u0026\u0026       apt-get -y install python-dev python3 python3-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install build-essential g++ flex bison gperf ruby perl \u0026\u0026     apt-get -y install libsqlite3-dev libfontconfig1-dev libicu-dev \u0026\u0026     apt-get -y install libfreetype6 libssl-dev libpng-dev libjpeg-dev \u0026\u0026     apt-get -y install python libx11-dev libxext-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install openssh-server openssh-client"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 \u0026\u0026     echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list \u0026\u0026     apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd \"${ADMIN_GROUP_NAME}\" \u0026\u0026     groupadd \"${USER_GROUP_NAME}\" \u0026\u0026     useradd -m -g \"${USER_GROUP_NAME}\" -G \"${ADMIN_GROUP_NAME}\" -s /bin/bash \"${USER_NAME}\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"${USER_NAME} ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers \u0026\u0026     echo \"root:${ROOT_USER_PASSWORD}\" | chpasswd \u0026\u0026     echo \"docker:${ROOT_USER_PASSWORD}\" | chpasswd \u0026\u0026     mkdir \"${TMP_PATH}\" \u0026\u0026     chown $USER_NAME:$USER_GROUP_NAME \"${TMP_PATH}\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp \"${USER_PATH}/.bashrc\" \"${USER_PATH}/.bashrc.default\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"${BASH_RC_FILE}\"",
            "\"${USER_PATH}/.bashrc\""
          ]
        },
        {
          "CmdLine": [
            "mkdir /opt/phantomjs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp \"/root/.bashrc\" \"/root/.bashrc.default\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"${BASH_RC_FILE}\"",
            "\"/root/.bashrc\""
          ]
        },
        {
          "CmdLine": [
            "chown \"root:root\" \"/root/.bashrc\" \u0026\u0026     chown \"root:root\" \"/root/.bashrc.default\" \u0026\u0026     chown \"${USER_NAME}:${USER_GROUP_NAME}\" \"${USER_PATH}/.bashrc\" \u0026\u0026     chown \"${USER_NAME}:${USER_GROUP_NAME}\" \"${USER_PATH}/.bashrc.default\" \u0026\u0026     chown \"${USER_NAME}:${USER_GROUP_NAME}\" \"/opt/phantomjs\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/root/start.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /root/start.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$USER_NAME"
        },
        {
          "Name": "workdir",
          "Path": "$TMP_PATH"
        },
        {
          "CmdLine": [
            "git clone https://github.com/DhavalKapil/luaver.git ~/.luaver \u0026\u0026     echo \"[ -s ~/.luaver/luaver  ] \u0026\u0026 . ~/.luaver/luaver\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"[ -s ~/.luaver/completions/luaver.bash  ] \u0026\u0026 . ~/.luaver/completions/luaver.bash\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"curl -L https://get.rvm.io | bash -s stable\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c  \"echo 'Y' | luaver install 5.1.5 \u0026\u0026       echo 'Y' | luaver use 5.1.5 \u0026\u0026       echo 'Y' | luaver set-default 5.1.5\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c  \"echo 'Y' | luaver use-luarocks 2.4.3 \u0026\u0026       echo 'Y' | luaver set-default-luarocks 2.4.3\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt-get -y install libpcre3-dev     libssl-dev perl make build-essential curl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O \"https://openresty.org/download/${OPENRESTY_TAR_NAME}\" \u0026\u0026     tar -xvzf ${OPENRESTY_TAR_NAME} \u0026\u0026     cd \"${OPENRESTY_VER_NAME}\" \u0026\u0026     ./configure \u0026\u0026     make \u0026\u0026     sudo make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c  \"luarocks install moonscript \u0026\u0026       luarocks install lapis\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c  \"rvm install 2.4 \u0026\u0026       rvm install 2.0.0 \u0026\u0026       rvm --default use 2.4 \u0026\u0026       gem install bundler --pre \u0026\u0026       gem install guard \u0026\u0026       gem install guard-shell \u0026\u0026       gem install gemrat \u0026\u0026       gem install mongoid \u0026\u0026       gem install haml \u0026\u0026       gem install sass \u0026\u0026       gem install compass \u0026\u0026       gem install rails \u0026\u0026       gem install roda \u0026\u0026       gem install sinatra \u0026\u0026       rails new tmpblog \u0026\u0026 rm -rf tmpblog\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"source \\\"${USER_PATH}/.nvm/nvm.sh\\\" \u0026\u0026         nvm install 6.11.3 \u0026\u0026         nvm install 8.6.0 \u0026\u0026         nvm alias default 8.6.0 \u0026\u0026         npm install -g mitol  \u0026\u0026         npm install -g less  \u0026\u0026         npm install -g uglify-js \u0026\u0026         npm install -g socket.io \u0026\u0026         npm install -g coffee-script \u0026\u0026         npm install -g handlebars \u0026\u0026         npm install -g grunt \u0026\u0026         npm install -g brunch \u0026\u0026         npm install -g bower \u0026\u0026         npm install -g browserify  \u0026\u0026         npm install -g forever\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"source \\\"${USER_PATH}/.nvm/nvm.sh\\\" \u0026\u0026         npm install -g vows \u0026\u0026         npm install -g jasmine \u0026\u0026         npm install -g jasmine-node \u0026\u0026         npm install -g mocha \u0026\u0026         npm install -g --save-dev qunitjs \u0026\u0026         npm install -g blanket \u0026\u0026         npm install -g karma\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"source \\\"${USER_PATH}/.nvm/nvm.sh\\\" \u0026\u0026 npm install -g weinre\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -l -c \"source \\\"${USER_PATH}/.nvm/nvm.sh\\\" \u0026\u0026       npm install -g express \u0026\u0026       npm install -g express-generator  \u0026\u0026       npm install -g sails \u0026\u0026       npm install -g geddy \u0026\u0026       npm install -g ember-cli \u0026\u0026       npm install -g @angular/cli \u0026\u0026       npm install -g yo \u0026\u0026       npm install -g generator-webapp \u0026\u0026       npm install -g generator-jquery \u0026\u0026       npm install -g generator-jasmine \u0026\u0026       npm install -g generator-mocha \u0026\u0026       npm install -g generator-chrome-extension \u0026\u0026       npm install -g generator-chromeapp \u0026\u0026       npm install -g generator-bootstrap \u0026\u0026       npm install -g generator-polymer \u0026\u0026       npm install -g generator-backbone \u0026\u0026       npm install -g generator-angular \u0026\u0026       npm install -g generator-karma\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$TMP_PATH"
        },
        {
          "CmdLine": [
            "git clone https://github.com/facebook/watchman.git \u0026\u0026     cd watchman \u0026\u0026     git checkout \"${WATCHMAN_RELEASE_NAME}\" \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure \u0026\u0026     make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$TMP_PATH"
        },
        {
          "CmdLine": [
            "wget https://bitbucket.org/ariya/phantomjs/downloads/${PHANTOMJS_TAR_NAME} \u0026\u0026     tar -xjf \"${PHANTOMJS_TAR_NAME}\" \u0026\u0026     mv \"${PHANTOMJS_VER_NAME}\" /opt/phantomjs/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O \"http://download.redis.io/releases/${REDIS_TAR_NAME}\" \u0026\u0026     tar -xvzf \"${REDIS_TAR_NAME}\" \u0026\u0026     cd \"${REDIS_RELEASE}\" \u0026\u0026     make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Name": "workdir",
          "Path": "$TMP_PATH"
        },
        {
          "CmdLine": [
            "cd watchman \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$TMP_PATH"
        },
        {
          "CmdLine": [
            "cd \"${REDIS_RELEASE}\" \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y mongodb-org \u0026\u0026     mkdir -p /data/db \u0026\u0026     chown \"${USER_NAME}:${USER_GROUP_NAME}\" \"/data\" \u0026\u0026     chown \"${USER_NAME}:${USER_GROUP_NAME}\" \"/data/db\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /opt/phantomjs/${PHANTOMJS_VER_NAME}/bin/phantomjs /usr/bin/phantomjs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$USER_PATH"
        },
        {
          "CmdLine": [
            "rm -rf \"${TMP_PATH}\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "27017",
            "3000",
            "30820",
            "3200",
            "4200",
            "49153",
            "5000",
            "6379",
            "7357",
            "8080"
          ]
        },
        {
          "CmdLine": [
            "/root/start.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}