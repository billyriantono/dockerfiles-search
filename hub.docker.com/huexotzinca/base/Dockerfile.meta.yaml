MetaArgs: null
Stages:
- BaseName: ubuntu:16.10
  Commands:
  - Maintainer: Neftali Bautista<dev@neftalibautista.com>
    Name: maintainer
  - Labels:
    - Key: version
      Value: '"0.1.4"'
    Name: label
  - Key: ADMIN_GROUP_NAME
    Name: arg
    Value: '"admin"'
  - Key: USER_NAME
    Name: arg
    Value: '"docker"'
  - Key: USER_GROUP_NAME
    Name: arg
    Value: '"${USER_NAME}"'
  - Key: USER_PATH
    Name: arg
    Value: '"/home/${USER_NAME}"'
  - Key: TMP_PATH
    Name: arg
    Value: '"${USER_PATH}/tmp"'
  - Key: REDIS_RELEASE
    Name: arg
    Value: '"redis-4.0.2"'
  - Key: WATCHMAN_RELEASE
    Name: arg
    Value: '"4.9.0"'
  - Key: OPENRESTY_RELEASE
    Name: arg
    Value: '"1.11.2.5"'
  - Key: PHANTOMJS_RELEASE
    Name: arg
    Value: '"phantomjs-2.1.1"'
  - Key: WATCHMAN_RELEASE_NAME
    Name: arg
    Value: '"v${WATCHMAN_RELEASE}"'
  - Key: REDIS_TAR_NAME
    Name: arg
    Value: '"${REDIS_RELEASE}.tar.gz"'
  - Key: PHANTOMJS_VER_NAME
    Name: arg
    Value: '"${PHANTOMJS_RELEASE}-linux-x86_64"'
  - Key: PHANTOMJS_TAR_NAME
    Name: arg
    Value: '"${PHANTOMJS_VER_NAME}.tar.bz2"'
  - Key: OPENRESTY_VER_NAME
    Name: arg
    Value: '"openresty-${OPENRESTY_RELEASE}"'
  - Key: OPENRESTY_TAR_NAME
    Name: arg
    Value: '"${OPENRESTY_VER_NAME}.tar.gz"'
  - Key: ROOT_USER_PASSWORD
    Name: arg
    Value: '"docker"'
  - Key: DOCKER_USER_PASSWORD
    Name: arg
    Value: '"${ROOT_USER_PASSWORD}"'
  - Key: BASH_RC_FILE
    Name: arg
    Value: '"bashrc"'
  - CmdLine:
    - apt-get update &&       apt-get -y install build-essential pkg-config autoconf
      automake bison &&       apt-get -y install apt-utils &&       apt-get -y install
      sudo &&       apt-get -y install curl &&       apt-get -y install wget &&       apt-get
      -y install git subversion bzr &&       apt-get -y install vim &&       apt-get
      -y install sqlite3 libsqlite3-dev &&       apt-get -y install openssl libcurl4-openssl-dev
      libtool zlib1g &&       apt-get -y install zlib1g-dev python-software-properties
      tcl8.6  &&       apt-get -y install tcl8.6-dev libssl-dev libreadline-dev libyaml-dev
      &&       apt-get -y install libxml2-dev libxslt1-dev libffi-dev libreadline6
      &&       apt-get -y install libreadline6-dev libxslt-dev libc6-dev ncurses-dev
      &&       apt-get -y install python-dev python3 python3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install build-essential g++ flex bison gperf ruby perl &&     apt-get
      -y install libsqlite3-dev libfontconfig1-dev libicu-dev &&     apt-get -y install
      libfreetype6 libssl-dev libpng-dev libjpeg-dev &&     apt-get -y install python
      libx11-dev libxext-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install openssh-server openssh-client
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
      &&     echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4
      multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list &&     apt-get
      update
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd "${ADMIN_GROUP_NAME}" &&     groupadd "${USER_GROUP_NAME}" &&     useradd
      -m -g "${USER_GROUP_NAME}" -G "${ADMIN_GROUP_NAME}" -s /bin/bash "${USER_NAME}"
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers &&     echo "root:${ROOT_USER_PASSWORD}"
      | chpasswd &&     echo "docker:${ROOT_USER_PASSWORD}" | chpasswd &&     mkdir
      "${TMP_PATH}" &&     chown $USER_NAME:$USER_GROUP_NAME "${TMP_PATH}"'
    Name: run
    PrependShell: true
  - CmdLine:
    - cp "${USER_PATH}/.bashrc" "${USER_PATH}/.bashrc.default"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - '"${BASH_RC_FILE}"'
    - '"${USER_PATH}/.bashrc"'
  - CmdLine:
    - mkdir /opt/phantomjs
    Name: run
    PrependShell: true
  - CmdLine:
    - cp "/root/.bashrc" "/root/.bashrc.default"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - '"${BASH_RC_FILE}"'
    - '"/root/.bashrc"'
  - CmdLine:
    - chown "root:root" "/root/.bashrc" &&     chown "root:root" "/root/.bashrc.default"
      &&     chown "${USER_NAME}:${USER_GROUP_NAME}" "${USER_PATH}/.bashrc" &&     chown
      "${USER_NAME}:${USER_GROUP_NAME}" "${USER_PATH}/.bashrc.default" &&     chown
      "${USER_NAME}:${USER_GROUP_NAME}" "/opt/phantomjs"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - start.sh
    - /root/start.sh
  - CmdLine:
    - chmod +x /root/start.sh
    Name: run
    PrependShell: true
  - Name: user
    User: $USER_NAME
  - Name: workdir
    Path: $TMP_PATH
  - CmdLine:
    - git clone https://github.com/DhavalKapil/luaver.git ~/.luaver &&     echo "[
      -s ~/.luaver/luaver  ] && . ~/.luaver/luaver" >> ~/.bashrc &&     echo "[ -s
      ~/.luaver/completions/luaver.bash  ] && . ~/.luaver/completions/luaver.bash"
      >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "curl -L https://get.rvm.io | bash -s stable"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh
      | bash"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c  "echo 'Y' | luaver install 5.1.5 &&       echo 'Y' | luaver
      use 5.1.5 &&       echo 'Y' | luaver set-default 5.1.5"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c  "echo 'Y' | luaver use-luarocks 2.4.3 &&       echo 'Y' | luaver
      set-default-luarocks 2.4.3"
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt-get -y install libpcre3-dev     libssl-dev perl make build-essential
      curl
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -O "https://openresty.org/download/${OPENRESTY_TAR_NAME}" &&     tar -xvzf
      ${OPENRESTY_TAR_NAME} &&     cd "${OPENRESTY_VER_NAME}" &&     ./configure &&     make
      &&     sudo make install
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c  "luarocks install moonscript &&       luarocks install lapis"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c  "rvm install 2.4 &&       rvm install 2.0.0 &&       rvm --default
      use 2.4 &&       gem install bundler --pre &&       gem install guard &&       gem
      install guard-shell &&       gem install gemrat &&       gem install mongoid
      &&       gem install haml &&       gem install sass &&       gem install compass
      &&       gem install rails &&       gem install roda &&       gem install sinatra
      &&       rails new tmpblog && rm -rf tmpblog"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "source \"${USER_PATH}/.nvm/nvm.sh\" &&         nvm install
      6.11.3 &&         nvm install 8.6.0 &&         nvm alias default 8.6.0 &&         npm
      install -g mitol  &&         npm install -g less  &&         npm install -g
      uglify-js &&         npm install -g socket.io &&         npm install -g coffee-script
      &&         npm install -g handlebars &&         npm install -g grunt &&         npm
      install -g brunch &&         npm install -g bower &&         npm install -g
      browserify  &&         npm install -g forever"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "source \"${USER_PATH}/.nvm/nvm.sh\" &&         npm install
      -g vows &&         npm install -g jasmine &&         npm install -g jasmine-node
      &&         npm install -g mocha &&         npm install -g --save-dev qunitjs
      &&         npm install -g blanket &&         npm install -g karma"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "source \"${USER_PATH}/.nvm/nvm.sh\" && npm install -g weinre"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash -l -c "source \"${USER_PATH}/.nvm/nvm.sh\" &&       npm install -g
      express &&       npm install -g express-generator  &&       npm install -g sails
      &&       npm install -g geddy &&       npm install -g ember-cli &&       npm
      install -g @angular/cli &&       npm install -g yo &&       npm install -g generator-webapp
      &&       npm install -g generator-jquery &&       npm install -g generator-jasmine
      &&       npm install -g generator-mocha &&       npm install -g generator-chrome-extension
      &&       npm install -g generator-chromeapp &&       npm install -g generator-bootstrap
      &&       npm install -g generator-polymer &&       npm install -g generator-backbone
      &&       npm install -g generator-angular &&       npm install -g generator-karma"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $TMP_PATH
  - CmdLine:
    - git clone https://github.com/facebook/watchman.git &&     cd watchman &&     git
      checkout "${WATCHMAN_RELEASE_NAME}" &&     ./autogen.sh &&     ./configure &&     make
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $TMP_PATH
  - CmdLine:
    - wget https://bitbucket.org/ariya/phantomjs/downloads/${PHANTOMJS_TAR_NAME} &&     tar
      -xjf "${PHANTOMJS_TAR_NAME}" &&     mv "${PHANTOMJS_VER_NAME}" /opt/phantomjs/
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -O "http://download.redis.io/releases/${REDIS_TAR_NAME}" &&     tar -xvzf
      "${REDIS_TAR_NAME}" &&     cd "${REDIS_RELEASE}" &&     make
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: workdir
    Path: $TMP_PATH
  - CmdLine:
    - cd watchman &&     make install
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $TMP_PATH
  - CmdLine:
    - cd "${REDIS_RELEASE}" &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y mongodb-org &&     mkdir -p /data/db &&     chown "${USER_NAME}:${USER_GROUP_NAME}"
      "/data" &&     chown "${USER_NAME}:${USER_GROUP_NAME}" "/data/db"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /opt/phantomjs/${PHANTOMJS_VER_NAME}/bin/phantomjs /usr/bin/phantomjs
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $USER_PATH
  - CmdLine:
    - rm -rf "${TMP_PATH}"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "22"
    - "27017"
    - "3000"
    - "30820"
    - "3200"
    - "4200"
    - "49153"
    - "5000"
    - "6379"
    - "7357"
    - "8080"
  - CmdLine:
    - /root/start.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:16.10
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.10
