{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jenkins/jenkins:lts",
      "SourceCode": "FROM jenkins/jenkins:lts",
      "Platform": "",
      "From": {
        "Image": "jenkins/jenkins:lts"
      },
      "Commands": [
        {
          "Maintainer": "eactisgrosso",
          "Name": "maintainer"
        },
        {
          "Key": "GOSU_VERSION",
          "Name": "arg",
          "Value": "1.10"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install \tpython \tcurl \tunzip \tzip \tapt-transport-https     \tca-certificates     \tgnupg2     \tsoftware-properties-common \tlibunwind8 \tgettext \tjq \txvfb \tlibgtk2.0-0 \tlibnotify-dev \tlibgconf-2-4 \tlibnss3 \tlibxss1 \tlibasound2 \tlibappindicator1 \tlibindicator7"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "dpkg -i google-chrome-stable_current_amd64.deb; apt-get -fy install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update  \t\u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends      vim      wget     \u0026\u0026 dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"  \t\u0026\u0026 wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"  \t\u0026\u0026 chmod +x /usr/local/bin/gosu  \t\u0026\u0026 gosu nobody true  \t\u0026\u0026 curl -sSL https://get.docker.com/ | sh  \t\u0026\u0026 apt-get clean  \t\u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_8.x | bash - \t\u0026\u0026 apt-get install -yq nodejs build-essential \t\u0026\u0026 npm install -g npm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor \u003e microsoft.gpg     \u0026\u0026 mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg     \u0026\u0026 sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main\" \u003e /etc/apt/sources.list.d/dotnetdev.list'     \u0026\u0026 apt-get update     \u0026\u0026 apt-get -y install dotnet-sdk-2.0.0     \u0026\u0026 apt-get -y install dotnet-sdk-2.1     \u0026\u0026 dotnet new -i Amazon.Lambda.Templates::*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp     \u0026\u0026 curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"     \u0026\u0026 unzip awscli-bundle.zip     \u0026\u0026 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws     \u0026\u0026 rm awscli-bundle.zip \u0026\u0026 rm -rf awscli-bundle"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L \u003ehugo.tar.gz https://github.com/gohugoio/hugo/releases/download/v0.40.2/hugo_0.40.2_Linux-64bit.tar.gz  \t\u0026\u0026 tar -xzvf hugo.tar.gz -C /usr/bin  \t\u0026\u0026 rm hugo.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd var/lib   \u0026\u0026 mkdir android-sdk   \u0026\u0026 cd android-sdk   \u0026\u0026 curl https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -o android-sdk.zip   \u0026\u0026 apt-get install unzip   \u0026\u0026 unzip android-sdk.zip -d .   \u0026\u0026 rm android-sdk.zip   \u0026\u0026 export PATH=/var/lib/android-sdk/tools:/var/lib/android-sdk/tools/bin:$PATH   \u0026\u0026 sdkmanager \"build-tools;26.0.3\" \"platforms;android-26\" \"extras;android;m2repository\" \"extras;google;m2repository\"   \u0026\u0026 sdkmanager \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2\" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2\"   \u0026\u0026 chmod -R 777 /var/lib/android-sdk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOTNET_CLI_TELEMETRY_OPTOUT",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOTNET_SKIP_FIRST_TIME_EXPERIENCE",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_HOME",
              "Value": "/var/lib/android-sdk"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "plugins.txt",
            "/usr/share/jenkins/ref/plugins.txt"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/bin/install-plugins.sh \u003c /usr/share/jenkins/ref/plugins.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}