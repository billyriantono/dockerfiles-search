MetaArgs: null
Stages:
- BaseName: python:3.5-alpine
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./nginx_conf_build.sh
    - /nginx_conf_build.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./nginx.template
    - /etc/nginx/nginx.template
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - gunicorn_run
    - /etc/sv/gunicorn/run
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx_run
    - /etc/sv/nginx/run
  - Env:
    - Key: NGINX_VERSION
      Value: 1.12.1
    Name: env
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     && CONFIG="        --prefix=/etc/nginx         --sbin-path=/usr/sbin/nginx         --modules-path=/usr/lib/nginx/modules         --conf-path=/etc/nginx/nginx.conf         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --pid-path=/var/run/nginx.pid         --lock-path=/var/run/nginx.lock         --http-client-body-temp-path=/var/cache/nginx/client_temp         --http-proxy-temp-path=/var/cache/nginx/proxy_temp         --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp         --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp         --http-scgi-temp-path=/var/cache/nginx/scgi_temp         --user=nginx         --group=nginx         --with-http_ssl_module         --with-http_realip_module         --with-http_addition_module         --with-http_sub_module         --with-http_dav_module         --with-http_flv_module         --with-http_mp4_module         --with-http_gunzip_module         --with-http_gzip_static_module         --with-http_random_index_module         --with-http_secure_link_module         --with-http_stub_status_module         --with-http_auth_request_module         --with-http_xslt_module=dynamic         --with-http_image_filter_module=dynamic         --with-http_geoip_module=dynamic         --with-threads         --with-stream         --with-stream_ssl_module         --with-stream_ssl_preread_module         --with-stream_realip_module         --with-stream_geoip_module=dynamic         --with-http_slice_module         --with-mail         --with-mail_ssl_module         --with-compat         --with-file-aio         --with-http_v2_module     "     &&
      addgroup -S nginx     && adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx     && apk add --no-cache --virtual .build-deps         gcc         libc-dev         make         openssl-dev         pcre-dev         zlib-dev         linux-headers         curl         gnupg         libxslt-dev         gd-dev         geoip-dev     &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     &&
      curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     &&
      export GNUPGHOME="$(mktemp -d)"     && found='''';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ;
      do         echo "Fetching GPG key $GPG_KEYS from $server";         gpg --keyserver
      "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes
      && break;     done;     test -z "$found" && echo >&2 "error: failed to fetch
      GPG key $GPG_KEYS" && exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     &&
      rm -r "$GNUPGHOME" nginx.tar.gz.asc     && mkdir -p /usr/src     && tar -zxC
      /usr/src -f nginx.tar.gz     && rm nginx.tar.gz     && cd /usr/src/nginx-$NGINX_VERSION     &&
      ./configure $CONFIG --with-debug     && make -j$(getconf _NPROCESSORS_ONLN)     &&
      mv objs/nginx objs/nginx-debug     && mv objs/ngx_http_xslt_filter_module.so
      objs/ngx_http_xslt_filter_module-debug.so     && mv objs/ngx_http_image_filter_module.so
      objs/ngx_http_image_filter_module-debug.so     && mv objs/ngx_http_geoip_module.so
      objs/ngx_http_geoip_module-debug.so     && mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so     && ./configure $CONFIG     && make
      -j$(getconf _NPROCESSORS_ONLN)     && make install     && rm -rf /etc/nginx/html/     &&
      mkdir /etc/nginx/conf.d/     && mkdir -p /usr/share/nginx/html/     && install
      -m644 html/index.html /usr/share/nginx/html/     && install -m644 html/50x.html
      /usr/share/nginx/html/     && install -m755 objs/nginx-debug /usr/sbin/nginx-debug     &&
      install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so     &&
      install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so     &&
      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so     &&
      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so     &&
      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules     && strip /usr/sbin/nginx*     &&
      strip /usr/lib/nginx/modules/*.so     && rm -rf /usr/src/nginx-$NGINX_VERSION         &&
      apk add --no-cache --virtual .gettext gettext     && mv /usr/bin/envsubst /tmp/         &&
      runDeps="$(         scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst             | awk ''{ gsub(/,/, "\nso:", $2); print "so:" $2 }''             |
      sort -u             | xargs -r apk info --installed             | sort -u     )"     &&
      apk add --no-cache --virtual .nginx-rundeps $runDeps     && apk del .gettext     &&
      mv /tmp/envsubst /usr/local/bin/         && ln -sf /dev/stdout /var/log/nginx/access.log     &&
      ln -sf /dev/stderr /var/log/nginx/error.log     && echo "http://dl-cdn.alpinelinux.org/alpine/edge/community"
      >> /etc/apk/repositories     && apk --update upgrade && apk add runit     &&
      cd / && pip install flask greenlet eventlet gevent gunicorn     && chmod +x
      /etc/sv/gunicorn/run     && chmod +x /etc/sv/nginx/run     && ln -s /etc/sv/gunicorn
      /etc/service/gunicorn     && ln -s /etc/sv/nginx /etc/service/nginx     && chmod
      +x /nginx_conf_build.sh     && apk del .build-deps'
    Name: run
    PrependShell: true
  - Key: NGINX_WORKER_PROCESSES
    Name: arg
    Value: "4"
  - Key: NGINX_USER
    Name: arg
    Value: nobody
  - Key: NGINX_GROUP
    Name: arg
    Value: nogroup
  - Key: NGINX_WORKER_CONNECTIONS
    Name: arg
    Value: "1024"
  - Key: NGINX_PORT
    Name: arg
    Value: "80"
  - Key: NGINX_TIMEOUT
    Name: arg
    Value: "300"
  - Key: NGINX_ROOT_DIR
    Name: arg
    Value: /dev/null
  - Key: NGINX_ACCEPT_MUTEX
    Name: arg
    Value: "on"
  - Key: NGINX_SENDFILE
    Name: arg
    Value: "on"
  - Key: NGINX_CLIENT_MAX_BODY_SIZE
    Name: arg
    Value: 4G
  - Key: NGINX_SERVER_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_HTTP_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_EVENTS_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_ROOT_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_UPSTREAM_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_PROXY_EXTEND
    Name: arg
    Value: null
  - Key: NGINX_CLI_EXTEND
    Name: arg
    Value: null
  - Key: GUNICORN_WORKER_TYPE
    Name: arg
    Value: eventlet
  - Key: GUNICORN_WORKERS
    Name: arg
    Value: "4"
  - Key: GUNICORN_TIMEOUT
    Name: arg
    Value: "300"
  - Key: GUNICORN_CLI_EXTEND
    Name: arg
    Value: null
  - Key: APP_CALLABLE
    Name: arg
    Value: app
  - Env:
    - Key: NGINX_WORKER_PROCESSES
      Value: $NGINX_WORKER_PROCESSES
    - Key: NGINX_USER
      Value: $NGINX_USER
    - Key: NGINX_GROUP
      Value: $NGINX_GROUP
    - Key: NGINX_WORKER_CONNECTIONS
      Value: $NGINX_WORKER_CONNECTIONS
    - Key: NGINX_PORT
      Value: $NGINX_PORT
    - Key: NGINX_TIMEOUT
      Value: $NGINX_TIMEOUT
    - Key: NGINX_ROOT_DIR
      Value: $NGINX_ROOT_DIR
    - Key: NGINX_ACCEPT_MUTEX
      Value: $NGINX_ACCEPT_MUTEX
    - Key: NGINX_SENDFILE
      Value: $NGINX_SENDFILE
    - Key: NGINX_CLIENT_MAX_BODY_SIZE
      Value: $NGINX_CLIENT_MAX_BODY_SIZE
    - Key: NGINX_SERVER_EXTEND
      Value: $NGINX_SERVER_EXTEND
    - Key: NGINX_HTTP_EXTEND
      Value: $NGINX_HTTP_EXTEND
    - Key: NGINX_EVENTS_EXTEND
      Value: $NGINX_EVENTS_EXTEND
    - Key: NGINX_ROOT_EXTEND
      Value: $NGINX_ROOT_EXTEND
    - Key: NGINX_UPSTREAM_EXTEND
      Value: $NGINX_UPSTREAM_EXTEND
    - Key: NGINX_PROXY_EXTEND
      Value: $NGINX_PROXY_EXTEND
    - Key: NGINX_CLI_EXTEND
      Value: $NGINX_CLI_EXTEND
    - Key: GUNICORN_WORKER_TYPE
      Value: $GUNICORN_WORKER_TYPE
    - Key: GUNICORN_WORKERS
      Value: $GUNICORN_WORKERS
    - Key: GUNICORN_TIMEOUT
      Value: $GUNICORN_TIMEOUT
    - Key: GUNICORN_CLI_EXTEND
      Value: $GUNICORN_CLI_EXTEND
    - Key: APP_CALLABLE
      Value: $APP_CALLABLE
    Name: env
  - Expression: COPY . /code/
    Name: onbuild
  - Expression: WORKDIR /code
    Name: onbuild
  - Expression: RUN     apk add --no-cache --virtual .build-deps         alpine-sdk     &&
      if [ -e /code/apk_packages.txt ]; then while IFS='' read line; do apk add --no-cache
      $line; done < /code/apk_packages.txt; fi     && if [ -e /code/requirements.txt
      ]; then pip install -r /code/requirements.txt; fi     && python /code/setup.py
      install     && rm -rf /var/cache/apk/*     && apk del .build-deps
    Name: onbuild
  - CmdLine:
    - /nginx_conf_build.sh &&     test -n $APP_NAME  &&     runsvdir -P /etc/service
    Name: cmd
    PrependShell: true
  From:
    Image: python:3.5-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM python:3.5-alpine
