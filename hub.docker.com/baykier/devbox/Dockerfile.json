{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.4",
      "SourceCode": "FROM alpine:3.4",
      "Platform": "",
      "From": {
        "Image": "alpine:3.4"
      },
      "Commands": [
        {
          "Maintainer": "baykier \u003c1035666345@qq.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "WORKER_DIR",
              "Value": "\"/var/project\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOST_DIR",
              "Value": "\"$WORKER_DIR/htdocs\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LOG_DIR",
              "Value": "\"$WORKER_DIR/log\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DATA_DIR",
              "Value": "\"$WORKER_DIR/data\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONFIG_DIR",
              "Value": "\"$WORKER_DIR/conf\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BACKUP_DIR",
              "Value": "\"/var/backup\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $WORKER_DIR $LOG_DIR $DATA_DIR $CONFIG_DIR $HOST_DIR $BACKUP_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHPIZE_DEPS",
              "Value": "autoconf \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .persistent-deps \t\tca-certificates \t\tcurl \t\ttar \t\txz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 addgroup -g 82 -S www-data \t\u0026\u0026 adduser -u 82 -D -S -G www-data www-data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "$CONFIG_DIR/php"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $PHP_INI_DIR/conf.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_EXTRA_CONFIGURE_ARGS",
              "Value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CFLAGS",
              "Value": "\"-fstack-protector-strong -fpic -fpie -O2\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CPPFLAGS",
              "Value": "\"$PHP_CFLAGS\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_LDFLAGS",
              "Value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GPG_KEYS",
              "Value": "0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "5.6.29"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_URL",
              "Value": "\"https://secure.php.net/get/php-5.6.29.tar.xz/from/this/mirror\""
            },
            {
              "Key": "PHP_ASC_URL",
              "Value": "\"https://secure.php.net/get/php-5.6.29.tar.xz.asc/from/this/mirror\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_SHA256",
              "Value": "\"0ff352a433f73e2c82b0d5b283b600402518569bf72a74e247f356dacbf322a7\""
            },
            {
              "Key": "PHP_MD5",
              "Value": "\"190bf5b52d1fc68d5500a8cdc7e33164\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\topenssl \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\trm -r \"$GNUPGHOME\"; \tfi; \t\tapk del .fetch-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./php/docker-php-source",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod 777 /usr/local/bin/docker-php-source \t\u0026\u0026 chown root:root /usr/local/bin/docker-php-source"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -xe \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcurl-dev \t\tlibedit-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t\u0026\u0026 export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\u0026\u0026 docker-php-source extract \t\u0026\u0026 cd /usr/src/php \t\u0026\u0026 ./configure \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--disable-cgi \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t\u0026\u0026 make -j \"$(getconf _NPROCESSORS_ONLN)\" \t\u0026\u0026 make install \t\u0026\u0026 { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t\u0026\u0026 make clean \t\u0026\u0026 docker-php-source delete \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --no-cache --virtual .php-rundeps $runDeps \t\t\u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./php/docker-php-ext-*",
            "./php/docker-php-entrypoint",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod 777 /usr/local/bin/docker-php-ext-* \t\u0026\u0026 chown root:root /usr/local/bin/docker-php-ext-* \t\u0026\u0026 chmod 777 /usr/local/bin/docker-php-entrypoint \t\u0026\u0026 chown root:root /usr/local/bin/docker-php-entrypoint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 cd $PHP_INI_DIR \t\u0026\u0026 if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf \u003e /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo \"$PHP_INI_DIR/php-fpm.d/*.conf\"; \t\t} | tee php-fpm.conf; \tfi \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t\u0026\u0026 { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = [::]:9000'; \t} | tee php-fpm.d/zz-docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $LOG_DIR/php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./php/php.ini",
            "$PHP_INI_DIR/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./php/php-fpm.conf",
            "$PHP_INI_DIR/"
          ]
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 sed -i \"s:{LOG_DIR}:$LOG_DIR:g\" $PHP_INI_DIR/php.ini \t\u0026\u0026 sed -i \"s:{LOG_DIR}:$LOG_DIR:g\" $PHP_INI_DIR/php-fpm.conf \t\u0026\u0026 sed -i \"s:{PHP_INI_DIR}:$PHP_INI_DIR:g\" $PHP_INI_DIR/php-fpm.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/src/php-ext/sign"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./php/sign/*",
            "/var/src/php-ext/sign/"
          ]
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps      \t\t\t\t\t\tgit     \t\t\t\t\t\tautoconf     \t\t\t\t\t\tg++     \t\t\t\t\t\tlibtool     \t\t\t\t\t\tmake     \t\u0026\u0026 apk add --no-cache libmemcached-dev                                zlib-dev                               cyrus-sasl-dev     \t\u0026\u0026 docker-php-source extract     \t\u0026\u0026 pecl install memcache-2.2.7     \t\u0026\u0026 docker-php-ext-enable memcache         \u0026\u0026 pecl install memcached-2.2.0         \u0026\u0026 docker-php-ext-enable memcached         \u0026\u0026 apk add \t--no-cache            \t\t\tfreetype            \t\t\tlibpng            \t\t\tlibjpeg-turbo            \t\t\tfreetype-dev            \t\t\tlibpng-dev            \t\t\tlibjpeg-turbo-dev        \u0026\u0026 docker-php-ext-configure gd            \t\t\t--with-gd            \t\t\t--with-freetype-dir=/usr/include/            \t\t\t--with-png-dir=/usr/include/            \t\t\t--with-jpeg-dir=/usr/include/         \u0026\u0026 docker-php-ext-install gd         \u0026\u0026 docker-php-ext-enable gd         \u0026\u0026 apk del \t--no-cache            \t\t\tfreetype-dev            \t\t\tlibpng-dev            \t\t\tlibjpeg-turbo-dev         \u0026\u0026 pecl install xdebug-2.5.0         \u0026\u0026 docker-php-ext-enable xdebug         \u0026\u0026 docker-php-ext-install pdo_mysql         \u0026\u0026 docker-php-ext-install mysqli         \u0026\u0026 pecl install redis-3.1.0         \u0026\u0026 docker-php-ext-enable redis         \u0026\u0026 apk add --no-cache         \t\t\tlibmcrypt-dev         \t\t\tlibltdl         \u0026\u0026 docker-php-ext-configure mcrypt         \u0026\u0026 docker-php-ext-install mcrypt         \u0026\u0026 docker-php-ext-install calendar         \u0026\u0026 docker-php-ext-install zip         \u0026\u0026 docker-php-ext-install exif         \u0026\u0026 apk add --no-cache  \ticu-dev         \u0026\u0026 pecl install intl \t\u0026\u0026 docker-php-ext-enable intl \t\t\u0026\u0026 mkdir -p /usr/src/php/ext/sign \t\t\u0026\u0026 cp  /var/src/php-ext/sign/* /usr/src/php/ext/sign/ \t\t\u0026\u0026 docker-php-ext-install sign         \u0026\u0026 docker-php-source delete         \u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --update --no-cache \tlighttpd \tlighttpd-mod_auth   \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $CONFIG_DIR/lighttpd  $LOG_DIR/lighttpd \t\u0026\u0026 cp /etc/lighttpd/* $CONFIG_DIR/lighttpd/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./lighttpd/*",
            "$CONFIG_DIR/lighttpd/"
          ]
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 sed -i \"s:{LOG_DIR}:$LOG_DIR:g\" $CONFIG_DIR/lighttpd/lighttpd.conf     \u0026\u0026 sed -i \"s:{HOST_DIR}:$HOST_DIR:g\" $CONFIG_DIR/lighttpd/lighttpd.conf     \u0026\u0026 sed -i \"s:{CONF_DIR}:$CONFIG_DIR:g\" $CONFIG_DIR/lighttpd/lighttpd.conf     \u0026\u0026 mkdir -p $CONFIG_DIR/lighttpd/vhosts     \u0026\u0026 echo \"#vhost example.conf\" \u003e $CONFIG_DIR/lighttpd/vhosts/example.conf     \u0026\u0026 echo \"#\\$HTTP[\\\"host\\\"] == \\\"example.com\\\" {\" \u003e\u003e $CONFIG_DIR/lighttpd/vhosts/example.conf     \u0026\u0026 echo \"#server.name = \\\"example.com\\\" \" \u003e\u003e $CONFIG_DIR/lighttpd/vhosts/example.conf     \u0026\u0026 echo \"#server.document-root = \\\"example_path\\\" \" \u003e\u003e $CONFIG_DIR/lighttpd/vhosts/example.conf     \u0026\u0026 echo \"#}\" \u003e\u003e $CONFIG_DIR/lighttpd/vhosts/example.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MEMCACHED_VERSION",
              "Value": "1.4.34"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MEMCACHED_SHA1",
              "Value": "7c7214f5183c6e20c22b243e21ed1ffddb91497e"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MEMCACHED_PORT",
              "Value": "11211"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tlibevent-dev \t\tlinux-headers \t\tmake \t\tperl \t\ttar \t\u0026\u0026 wget -O memcached.tar.gz \"http://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz\" \t\u0026\u0026 echo \"$MEMCACHED_SHA1  memcached.tar.gz\" | sha1sum -c - \t\u0026\u0026 mkdir -p /usr/src/memcached \t\u0026\u0026 tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 \t\u0026\u0026 rm memcached.tar.gz \t\u0026\u0026 cd /usr/src/memcached \t\u0026\u0026 ./configure \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 make install \t\u0026\u0026 cd / \u0026\u0026 rm -rf /usr/src/memcached \t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --virtual .memcached-rundeps $runDeps \t\u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 apk add --update openssh \t\u0026\u0026 rm  -rf /tmp/* /var/cache/apk/* \t\u0026\u0026 rm -rf /etc/ssh/ssh_host_* \t\u0026\u0026 ssh-keygen -A \t\u0026\u0026 sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config \t\u0026\u0026 mkdir -p /var/run/sshd \t\u0026\u0026 echo '#allow root user login' \u003e\u003e /etc/ssh/sshd_config     \u0026\u0026 echo 'PermitRootLogin yes' \u003e\u003e /etc/ssh/sshd_config     \u0026\u0026 echo 'PermitEmptyPasswords yes' \u003e\u003e /etc/ssh/sshd_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "IDALLOCATOR_DIR",
              "Value": "/var/src/idallocator"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $IDALLOCATOR_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./idallocator/*",
            "$IDALLOCATOR_DIR/"
          ]
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\u0026\u0026 cd $IDALLOCATOR_DIR \t\u0026\u0026 gcc  idallocator.c \t\u0026\u0026 mv a.out /usr/local/bin/idallocator \t\u0026\u0026 mkdir -p $LOG_DIR/idallocator \t\u0026\u0026 mkdir -p $CONFIG_DIR/idallocator \t\u0026\u0026 mkdir -p $DATA_DIR/idallocator \t\u0026\u0026 mkdir -p /var/run/idallocator \t\u0026\u0026 cp $IDALLOCATOR_DIR/idallocator.conf $CONFIG_DIR/idallocator/ \t\u0026\u0026 echo '1' \u003e $DATA_DIR/idallocator/order.tb \t\u0026\u0026 echo '1' \u003e $DATA_DIR/idallocator/goods.tb \t\u0026\u0026 sed -i \"s:{LOG_DIR}:$LOG_DIR:g\" $CONFIG_DIR/idallocator/idallocator.conf     \u0026\u0026 sed -i \"s:{DATA_DIR}:$DATA_DIR:g\" $CONFIG_DIR/idallocator/idallocator.conf     \u0026\u0026 apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \t\u0026\u0026 apk add --no-cache samba samba-common-tools  \t\u0026\u0026 rm -rf /var/cache/apk/* \t\u0026\u0026 mkdir -p $CONFIG_DIR/samba \t\u0026\u0026 cp -a /etc/samba/* $CONFIG_DIR/samba/         \u0026\u0026 mkdir -p $LOG_DIR/samba"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./samba/*",
            "$CONFIG_DIR/samba/"
          ]
        },
        {
          "CmdLine": [
            "set -ex         \u0026\u0026 chown root:root $CONFIG_DIR/samba/smb.conf         \u0026\u0026 chmod 777 $CONFIG_DIR/samba/smb.conf \t\u0026\u0026 sed -i \"s:{LOG_DIR}:$LOG_DIR:g\" $CONFIG_DIR/samba/smb.conf        \u0026\u0026 sed -i \"s:{WORKER_DIR}:$WORKER_DIR:g\" $CONFIG_DIR/samba/smb.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -a $WORKER_DIR/* $BACKUP_DIR \t\u0026\u0026 chmod 777 -R $BACKUP_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./init.sh",
            "/usr/local/bin/init.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod 777 /usr/local/bin/init.sh \t\u0026\u0026 chown root:root /usr/local/bin/init.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$WORKER_DIR"
        },
        {
          "Name": "volume",
          "Volumes": [
            "$WORKER_DIR"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "137/udp",
            "138/udp",
            "139",
            "22",
            "443",
            "445",
            "80"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/bin/init.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}