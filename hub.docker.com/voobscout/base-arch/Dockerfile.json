{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "base/archlinux:latest",
      "SourceCode": "FROM base/archlinux:latest",
      "Platform": "",
      "From": {
        "Image": "base/archlinux:latest"
      },
      "Commands": [
        {
          "Maintainer": "Voobscout \u003cvoobscout@archlinux.info\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "screen"
            }
          ],
          "Name": "env"
        },
        {
          "Expression": "RUN bash -c \"export COUNTRY=$(curl http://country.io/names.json 2\u003e /dev/null | jq -r .$(curl ipinfo.io/$(dig +short myip.opendns.com @resolver1.opendns.com)/country 2\u003e /dev/null)); awk -v GG=\\${COUNTRY} '{if(match(\\$0,GG) != 0)AA=1;if(AA == 1){if( length(\\$2) != 0  )print substr(\\$0,2) ;else AA=0} }' \u003c(curl https://www.archlinux.org/mirrorlist/?country=all\u0026protocol=http\u0026protocol=https\u0026ip_version=4) \u003e $HOME/mirrors_\\${COUNTRY} \u0026\u0026 rankmirrors -n 0  $HOME/mirrors_\\${COUNTRY} \u003e /etc/pacman.d/mirrorlist\"",
          "Name": "onbuild"
        },
        {
          "CmdLine": [
            "pacman --noconfirm -Syy sed grep jq bind-tools pacman-contrib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c \"export COUNTRY=$(curl http://country.io/names.json 2\u003e /dev/null | jq -r .$(curl ipinfo.io/$(dig +short myip.opendns.com @resolver1.opendns.com)/country 2\u003e /dev/null)); awk -v GG=\\${COUNTRY} '{if(match(\\$0,GG) != 0)AA=1;if(AA == 1){if( length(\\$2) != 0  )print substr(\\$0,2) ;else AA=0} }' \u003c(curl https://www.archlinux.org/mirrorlist/?country=all\u0026protocol=http\u0026protocol=https\u0026ip_version=4) \u003e $HOME/mirrors_\\${COUNTRY} \u0026\u0026 rankmirrors -n 0  $HOME/mirrors_\\${COUNTRY} \u003e /etc/pacman.d/mirrorlist\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i '/#\\[multilib\\]/,/#Include = \\/etc\\/pacman.d\\/mirrorlist/ s/#//' /etc/pacman.conf \u0026\u0026     sed -i '/#\\[multilib\\]/,/#Include = \\/etc\\/pacman.d\\/mirrorlist/ s/#//' /etc/pacman.conf \u0026\u0026     sed -i 's/#\\[multilib\\]/\\[multilib\\]/g' /etc/pacman.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "container-boot.service",
            "/usr/lib/systemd/system/container-boot.service"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "shell.service",
            "/usr/lib/systemd/system/shell.service"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "journald.conf",
            "/etc/systemd/journald.conf"
          ]
        },
        {
          "CmdLine": [
            "pacman --noconfirm -Syy \u0026\u0026     pacman --noconfirm -S     pacman     archlinux-keyring     pacman-mirrorlist \u0026\u0026 \t  pacman-db-upgrade \u0026\u0026 \t  pacman --noconfirm -Suu \u0026\u0026 \t  pacman --noconfirm -S --asdeps $(pacman -Qq) \u0026\u0026     pacman --noconfirm -S --needed     base-devel     ruby     git     ncurses     openssh     systemd     run-parts     sudo \u0026\u0026     mkdir -p /etc/container-boot.d \u0026\u0026     pacman --noconfirm -Scc \u0026\u0026     useradd -m -u 1000 -G wheel,video,audio -s /bin/bash dev \u0026\u0026     echo \"%wheel ALL=(ALL) NOPASSWD: ALL\" \u003e /etc/sudoers.d/10-admins \u0026\u0026     runuser -l dev -c 'cd $HOME \u0026\u0026                          mkdir -p yaourt-src \u0026\u0026                          cd yaourt-src \u0026\u0026                          git clone https://aur.archlinux.org/package-query.git \u0026\u0026                          git clone https://aur.archlinux.org/yaourt.git \u0026\u0026                          cd package-query \u0026\u0026                          makepkg --noconfirm -si \u0026\u0026                          cd ../yaourt \u0026\u0026                          makepkg --noconfirm -si \u0026\u0026                          cd $HOME \u0026\u0026                          rm -rf $HOME/yaourt-src \u0026\u0026                          mkdir -p $HOME/tmp/yaourt \u0026\u0026                          echo \"TMPDIR=$HOME/tmp/yaourt\" \u003e ~/.yaourtrc \u0026\u0026                          echo \"UP_NOCONFIRM=1\" \u003e\u003e ~/.yaourtrc \u0026\u0026                          echo \"BUILD_NOCONFIRM=1\" \u003e\u003e ~/.yaourtrc \u0026\u0026                          echo \"PU_NOCONFIRM=1\" \u003e\u003e ~/.yaourtrc \u0026\u0026                          echo \"EDITFILES=0\" \u003e\u003e ~/.yaourtrc' \u0026\u0026     runuser -l dev -c 'yaourt --noconfirm -S localepurge' \u0026\u0026     sed -i \"s/NEEDSCONFIGFIRST/#NEEDSCONFIGFIRST/\" /etc/locale.nopurge \u0026\u0026     sed -i \"s/#DONTBOTHERNEWLOCALE/DONTBOTHERNEWLOCALE/\" /etc/locale.nopurge"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done);     rm -rf /lib/systemd/system/multi-user.target.wants/*;     rm -rf /etc/systemd/system/*.wants/*;     rm -rf /lib/systemd/system/local-fs.target.wants/*;     rm -rf /lib/systemd/system/sockets.target.wants/*udev*;     rm -rf /lib/systemd/system/sockets.target.wants/*initctl*;     rm -rf /lib/systemd/system/basic.target.wants/*;     rm -rf /usr/lib/tmpfiles.d/ceph.conf;     rm -rf /usr/lib/tmpfiles.d/systemd-nologin.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "systemctl enable container-boot.service"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i \"s/#Color/Color/\" /etc/pacman.conf \u0026\u0026     find /var/cache/pacman/pkg -mindepth 1 -delete \u0026\u0026     find /usr/share/info -mindepth 1 -delete \u0026\u0026     find /usr/share/man -mindepth 1 -delete \u0026\u0026     find /usr/share/doc -mindepth 1 -delete \u0026\u0026     find /usr/share/zoneinfo -mindepth 1 -delete \u0026\u0026     find /usr/share/i18n -mindepth 1 -delete \u0026\u0026     find /. -name \"*~\" -type f -delete \u0026\u0026     find /usr/share/terminfo/. ! -name \"*xterm*\" ! -name \"*screen*\" ! -name \"*screen*\" -type f -delete \u0026\u0026     find /tmp -mindepth 1 -delete"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/sys/fs/cgroup",
            "/run",
            "/run/lock",
            "/tmp"
          ]
        },
        {
          "CmdLine": [
            "/lib/systemd/systemd"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Expression": "RUN find /var/cache/pacman/pkg -mindepth 1 -delete \u0026\u0026     find /usr/share/info -mindepth 1 -delete \u0026\u0026     find /usr/share/man -mindepth 1 -delete \u0026\u0026     find /usr/share/doc -mindepth 1 -delete \u0026\u0026     find /usr/share/zoneinfo -mindepth 1 -delete \u0026\u0026     find /usr/share/i18n -mindepth 1 -delete \u0026\u0026     find /. -name \"*~\" -type f -delete \u0026\u0026     find /tmp -mindepth 1 -delete",
          "Name": "onbuild"
        }
      ]
    }
  ]
}