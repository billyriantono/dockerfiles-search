MetaArgs: null
Stages:
- BaseName: buildpack-deps:xenial
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Kenta Murata <mrkn@mrkn.jp>"'
    Name: label
  - Name: user
    User: root
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - "wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini
      \t&& echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0
      *tini\" | sha256sum -c - \t&& mv tini /usr/local/bin/tini \t&& chmod +x /usr/local/bin/tini"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& apt update \t&& apt install -y --no-install-recommends \t\tapt-transport-https
      \t\tlsb-release \t&& { \t\techo \"deb https://packages.red-data-tools.org/ubuntu/
      $(lsb_release --codename --short) universe\"; \t\techo \"deb-src https://packages.red-data-tools.org/ubuntu/
      $(lsb_release --codename --short) universe\"; \t} >> /etc/apt/sources.list.d/red-data-tools.list
      \t&& apt update --allow-insecure-repositories || apt update \t&& apt install
      -y --allow-unauthenticated red-data-tools-keyring \t&& apt update \t&& apt install
      -y --no-install-recommends \t\tlibarrow-glib-dev \t\tlibparquet-glib-dev"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo
      'update: --no-document'; \t} >> /usr/local/etc/gemrc"
    Name: run
    PrependShell: true
  - Env:
    - Key: RUBY_MAJOR
      Value: "2.5"
    Name: env
  - Env:
    - Key: RUBY_VERSION
      Value: 2.5.1
    Name: env
  - Env:
    - Key: RUBY_DOWNLOAD_SHA256
      Value: 886ac5eed41e3b5fc699be837b0087a6a5a3d10f464087560d2d21b3e71b754d
    Name: env
  - Env:
    - Key: RUBYGEMS_VERSION
      Value: 2.7.6
    Name: env
  - Env:
    - Key: BUNDLER_VERSION
      Value: 1.16.1
    Name: env
  - CmdLine:
    - "set -ex \t\t&& buildDeps=' \t\tbison \t\tlibgdbm-dev \t\truby \t' \t&& apt-get
      update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf
      /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\"
      \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir
      -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1
      \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK
      0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&&
      autoconf \t&& ./configure --disable-install-doc --enable-shared \t&& make -j\"$(nproc)\"
      \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd /
      \t&& rm -r /usr/src/ruby \t\t&& gem update --system \"$RUBYGEMS_VERSION\""
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install --force bundler --version "$BUNDLER_VERSION"
    Name: run
    PrependShell: true
  - Env:
    - Key: GEM_HOME
      Value: /usr/local/bundle
    Name: env
  - Env:
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    - Key: BUNDLE_BIN
      Value: '"$GEM_HOME/bin"'
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    Name: env
  - Env:
    - Key: PATH
      Value: $BUNDLE_BIN:$PATH
    Name: env
  - CmdLine:
    - "mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \t&& chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\""
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\ttcl \t\ttk
      \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.6.5
    Name: env
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 10.0.1
    Name: env
  - CmdLine:
    - "set -ex \t&& buildDeps=' \t\ttcl-dev \t\ttk-dev \t' \t&& apt-get update &&
      apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/*
      \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& rm -r \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&&
      tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& cd /usr/src/python \t&& ./configure \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t&& make -j$(nproc) \t&& make install \t&& ldconfig \t\t&&
      if [ ! -e /usr/local/bin/pip3 ]; then : \t\t&& wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py'
      \t\t&& python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \t\t&& rm /tmp/get-pip.py
      \t; fi \t&& pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\"
      \t&& [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit
      }')\" = \"$PYTHON_PIP_VERSION\" ] \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\(
      -type d -a -name test -o -name tests \\) \t\t\t-o \t\t\t\\( -type f -a -name
      '*.pyc' -o -name '*.pyo' \\) \t\t\\) -exec rm -rf '{}' + \t&& apt-get purge
      -y --auto-remove $buildDeps \t&& rm -rf /usr/src/python ~/.cache"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& { [ -e easy_install ] || ln -s easy_install-* easy_install;
      } \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&&
      ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& echo 'deb http://download.opensuse.org/repositories/home:/zeromq:/git-draft/xUbuntu_16.04/
      /' \t\t> /etc/apt/sources.list.d/zeromq.list \t&& curl -fsSL http://download.opensuse.org/repositories/home:zeromq:git-draft/xUbuntu_16.04/Release.key
      | apt-key add - \t&& apt-get update \t&& apt-get install -y --no-install-recommends
      \t\tlibopenblas-dev \t\tliblapacke-dev \t\tlibczmq-dev \t\tsqlite3 libsqlite3-dev
      \t\tmysql-client libmysqlclient-dev \t\tpostgresql-client libpq-dev \t\tlibczmq-dev"
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - requirements.txt
    - /tmp
  - CmdLine:
    - pip3 install -r /tmp/requirements.txt && rm -f /tmp/requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update \t&& apt-get install -y --no-install-recommends nodejs npm \t&&
      npm install -g n \t&& n latest \t&& apt-get purge -y nodejs npm \t&& apt-get
      autoremove -y"
    Name: run
    PrependShell: true
  - CmdLine:
    - "jupyter labextension install @jupyterlab/plotly-extension \t&& jupyter labextension
      install jupyterlab_bokeh \t&& jupyter lab build"
    Name: run
    PrependShell: true
  - CmdLine:
    - "gem install  \tcztop \tpry \tpry-doc \tawesome_print"
    Name: run
    PrependShell: true
  - CmdLine:
    - "gem install iruby \t&& gem install pycall -v '1.0.3' \t&& gem install numpy
      \t&& gem install pandas \t&& gem install matplotlib \t&& gem install numo-narray
      -v '0.9.1.2' \t&& gem install numo-linalg \t&& gem install nmatrix \t&& gem
      install nmatrix-lapacke \t&& gem install red-arrow \t&& gem install red-arrow-numo-narray
      \t&& gem install red-arrow-nmatrix \t&& gem install red-parquet \t&& gem install
      red-datasets \t&& gem install red-chainer \t&& gem install daru \t&& gem install
      spreadsheet \t&& gem install mechanize \t&& gem install rbplotly \t&& gem install
      activerecord \t&& gem install sqlite3 \t&& gem install mysql2 \t&& gem install
      pg"
    Name: run
    PrependShell: true
  - CmdLine:
    - tini
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  From:
    Image: buildpack-deps:xenial
  Name: ""
  Platform: ""
  SourceCode: FROM buildpack-deps:xenial
