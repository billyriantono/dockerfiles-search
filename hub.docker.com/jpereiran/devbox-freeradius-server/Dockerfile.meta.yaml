MetaArgs: null
Stages:
- BaseName: ubuntu:19.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Jorge Pereira <jpereira@freeradius.org>"'
    Name: label
  - Key: osname
    Name: arg
    Value: eoan
  - Key: gccver
    Name: arg
    Value: "4.9"
  - Key: clangver
    Name: arg
    Value: "9"
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: CC
      Value: clang
    Name: env
  - CmdLine:
    - echo 'Acquire::ForceIPv4 "true";' | tee /etc/apt/apt.conf.d/99force-ipv4
    Name: run
    PrependShell: true
  - CmdLine:
    - sed 's/archive.ubuntu.com/br.archive.ubuntu.com/g' -i /etc/apt/sources.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y software-properties-common aptitude
      &&     apt-get clean &&     rm -r /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy devscripts equivs git quilt build-essential
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy libnl-3-dev libnl-genl-3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales
      apt-utils
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen &&     dpkg-reconfigure
      --frontend=noninteractive locales &&     update-locale LANG=en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - aptitude install -fy screen vim wget ssl-cert gdb manpages-dev strace valgrind
      sysdig                         psmisc htop openssh-server tcpdump net-tools
      sysvbanner                         iputils-ping sudo
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y doxygen graphviz libjson-perl
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_8.x | bash -
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y nodejs npm
    Name: run
    PrependShell: true
  - CmdLine:
    - npm i -g @antora/cli@2.1 @antora/site-generator-default@2.1
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - curl -OL $(curl -s https://api.github.com/repos/jgm/pandoc/releases/latest |
      grep "browser_download_url.*deb" | cut -d '"' -f 4)
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y ./pandoc-*.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y ruby-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - gem install asciidoctor
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -4 -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "# Created at $(date)" > /etc/apt/sources.list.d/llvm${clangver}-org.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://apt.llvm.org/${osname}/ llvm-toolchain-${osname}-${clangver}
      main" >> /etc/apt/sources.list.d/llvm${clangver}-org.list
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb-src http://apt.llvm.org/${osname}/ llvm-toolchain-${osname}-${clangver}
      main" >> /etc/apt/sources.list.d/llvm${clangver}-org.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy install libllvm-${clangver}-ocaml-dev libllvm${clangver}
      llvm-${clangver} llvm-${clangver}-dev llvm-${clangver}-doc llvm-${clangver}-examples
      llvm-${clangver}-runtime
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy clang-${clangver} clang-tools-${clangver} clang-${clangver}-doc
      libclang-common-${clangver}-dev libclang-${clangver}-dev libclang1-${clangver}
      clang-format-${clangver} python-clang-${clangver}
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy libfuzzer-${clangver}-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy lldb-${clangver}
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy lld-${clangver}
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy libc++-${clangver}-dev libc++abi-${clangver}-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude install -fy libomp-${clangver}-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${clangver}
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-${clangver}
      1000
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -fs /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib64/libgcc_s.so.1
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -4 -O - http://packages.couchbase.com/ubuntu/couchbase.key | apt-key add
      -
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://packages.couchbase.com/ubuntu bionic bionic/main" | tee /etc/apt/sources.list.d/couchbase.list
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude update
    Name: run
    PrependShell: true
  - CmdLine:
    - aptitude -fy install libcouchbase-dev libcouchbase2-bin
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tmp/luajit
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp/luajit
  - CmdLine:
    - "for i in http://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-2_2.0.4%2Bdfsg-1_amd64.deb
      \thttp://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-common_2.0.4%2Bdfsg-1_all.deb
      \thttp://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-dev_2.0.4%2Bdfsg-1_amd64.deb
      \thttp://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/luajit_2.0.4%2Bdfsg-1_amd64.deb;
      do wget -4 $i; done"
    Name: run
    PrependShell: true
  - CmdLine:
    - dpkg -i /tmp/luajit/*.deb
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /opt/src
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/src
  - CmdLine:
    - curl -f -o cmake.sh https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ "$(cat cmake.sh | openssl sha256 | sed ''s/^.* //'')" = "bb26b1871f9e5c2fb73476186cc94d03b674608f704b48b94d617340b87b4d73"
      ]'
    Name: run
    PrependShell: true
  - CmdLine:
    - sh cmake.sh --skip-license --prefix=/usr/local
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/src
  - CmdLine:
    - git clone --branch master --depth=1 https://github.com/mheily/libkqueue.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: libkqueue
  - CmdLine:
    - cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib
      ./ &&     make &&     cpack -G DEB &&     dpkg -i --force-all ./libkqueue*.deb
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /opt/src
  - Key: source
    Name: arg
    Value: https://github.com/FreeRADIUS/freeradius-server.git
  - CmdLine:
    - git clone ${source}
    Name: run
    PrependShell: true
  - Name: workdir
    Path: freeradius-server
  - CmdLine:
    - "for i in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin
      2>/dev/null | sed -e 's#origin/##' | egrep \"^(v[3-9]*\\.[0-9x]*\\.x|master)$\");\tdo
      \t\tgit checkout $i; \t\tif [ -e ./debian/control.in ] ; then debian/rules debian/control
      ; fi ; echo 'y' | mk-build-deps -irt'apt-get -yV' debian/control ; \tdone"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update; true
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -fy dist-upgrade
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /root
  - CmdLine:
    - git clone https://github.com/jpereira/dotfiles/ dotfiles.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: dotfiles.git
  - CmdLine:
    - ./install.sh run
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - 1812/tcp
    - 1812/udp
    - 1813/tcp
    - 1813/udp
    - 3799/udp
  - CmdLine:
    - mkdir -p /opt/local/bin
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - bin/*
    - /usr/local/bin/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/bin2path.sh
    - /etc/profile.d
  - Name: volume
    Volumes:
    - /sandbox
  - Name: workdir
    Path: /root/Devel
  From:
    Image: ubuntu:19.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:19.04
