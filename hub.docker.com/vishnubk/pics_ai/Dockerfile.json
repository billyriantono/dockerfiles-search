{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": ": Vishnu Balakrishnan \"vishnu@mpifr-bonn.mpg.de\"",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "rm /bin/sh \u0026\u0026 ln -s /bin/bash /bin/sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "adduser --disabled-password --gecos 'unprivileged user' psr \u0026\u0026     echo \"psr:psr\" | chpasswd \u0026\u0026     mkdir -p /home/psr/.ssh \u0026\u0026     chown -R psr:psr /home/psr/.ssh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'deb http://us.archive.ubuntu.com/ubuntu trusty main multiverse' \u003e\u003e /etc/apt/sources.list \u0026\u0026     mkdir /var/run/sshd \u0026\u0026     apt-get -y check \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y apt-utils apt-transport-https software-properties-common python-software-properties \u0026\u0026     apt-get -y update --fix-missing \u0026\u0026     apt-get -y upgrade"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get --no-install-recommends -y install     build-essential     autoconf     autotools-dev     automake     pkg-config     csh     cmake     gcc     gfortran     wget     git     expect     cvs     libcfitsio-dev     pgplot5     swig2.0     python     python-dev     python-pip     python-tk     libfftw3-3     libfftw3-bin     libfftw3-dev     libfftw3-single3     libxml2     libxml2-dev     libx11-dev     libpng12-dev     libpng3     libpnglite-dev     libglib2.0-0     libglib2.0-dev     openssh-server     xorg     openbox     libhdf5-10     libhdf5-cpp-11     libhdf5-dev     libhdf5-serial-dev     libltdl-dev     gsl-bin     libgsl-dev     libgsl2     openssh-server     docker.io     vim     emacs     gedit     bc     sudo     curl     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/bin"
        },
        {
          "CmdLine": [
            "rm pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "pip",
            "/usr/bin/pip"
          ]
        },
        {
          "CmdLine": [
            "pip install pip -U \u0026\u0026     pip install setuptools -U \u0026\u0026     pip install numpy -U \u0026\u0026     pip install scipy==0.19.0 -U \u0026\u0026     pip install matplotlib -U \u0026\u0026     easy_install scikit-learn==0.12.1 \u0026\u0026     easy_install theano==0.7 \u0026\u0026     pip install bson \u0026\u0026     pip install pyKafka \u0026\u0026     pip install ipython \u0026\u0026     pip install scikit-image"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -y \u0026\u0026     apt-get --no-install-recommends -y install     autogen     libtool     libltdl-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y default-jdk \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install tcsh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "psr"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-8-openjdk-amd64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_DIR",
              "Value": "/usr/lib/pgplot5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_FONT",
              "Value": "/usr/lib/pgplot5/grfont.dat"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_INCLUDES",
              "Value": "/usr/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_BACKGROUND",
              "Value": "white"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_FOREGROUND",
              "Value": "black"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGPLOT_DEV",
              "Value": "/xs"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/psr"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PSRHOME",
              "Value": "/home/psr/software"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OSTYPE",
              "Value": "linux"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /home/psr/software"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME"
        },
        {
          "CmdLine": [
            "wget http://www.pulsarastronomy.net/psrsoft/psrsoft.tar.gz \u0026\u0026     tar -xvzf psrsoft.tar.gz \u0026\u0026     rm -rf psrsoft.tar.gz \u0026\u0026     git clone https://bitbucket.org/psrsoft/tempo2.git \u0026\u0026     git clone git://git.code.sf.net/p/psrchive/code psrchive \u0026\u0026     git clone git://git.code.sf.net/p/tempo/tempo \u0026\u0026     git clone https://github.com/SixByNine/psrxml.git \u0026\u0026     git clone git://git.code.sf.net/p/dspsr/code dspsr \u0026\u0026     git clone https://github.com/ewanbarr/sigpyproc.git \u0026\u0026     git clone https://github.com/scottransom/presto.git \u0026\u0026     git clone https://github.com/scottransom/pyslalib.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME/psrsoft/config"
        },
        {
          "CmdLine": [
            "mv profile.example profile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME/psrsoft"
        },
        {
          "CmdLine": [
            "/bin/echo -e \"y\" | ./bin/psrsoft sixproc pulsarhunter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PULSARHUNTER_HOME",
              "Value": "$PSRHOME/psrsoft/usr/share/pulsarhunter"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PSRXML",
              "Value": "$PSRHOME/psrxml"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRXML/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRXML/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRXML/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRXML"
        },
        {
          "CmdLine": [
            "autoreconf --install --warnings=none"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./configure --prefix=$PSRXML/install \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TEMPO2",
              "Value": "$PSRHOME/tempo2/T2runtime"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRHOME/tempo2/T2runtime/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRHOME/tempo2/T2runtime/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRHOME/tempo2/T2runtime/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRHOME/tempo2"
        },
        {
          "CmdLine": [
            "sync \u0026\u0026 perl -pi -e 's/chmod \\+x/#chmod +x/' bootstrap # Get rid of: returned a non-zero code: 126."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./bootstrap \u0026\u0026     ./configure --x-libraries=/usr/lib/x86_64-linux-gnu --enable-shared --enable-static --with-pic F77=gfortran \u0026\u0026     make -j $(nproc) \u0026\u0026     make install \u0026\u0026     make plugins-install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TEMPO",
              "Value": "$PSRHOME/tempo"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRHOME/tempo/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$TEMPO"
        },
        {
          "CmdLine": [
            "ls -lrt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "./prepare \u0026\u0026     ./configure --prefix=$PSRHOME/tempo \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PSRCHIVE",
              "Value": "$PSRHOME/psrchive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PSRCHIVE/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$PSRCHIVE/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$PSRCHIVE/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PSRCHIVE/install/lib/python2.7/site-packages"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PSRCHIVE"
        },
        {
          "CmdLine": [
            "./bootstrap \u0026\u0026     ./configure --prefix=$PSRCHIVE/install --x-libraries=/usr/lib/x86_64-linux-gnu --with-psrxml-dir=$PSRXML/install --enable-shared --enable-static F77=gfortran LDFLAGS=\"-L\"$PSRXML\"/install/lib\" LIBS=\"-lpsrxml -lxml2\" \u0026\u0026     make -j $(nproc) \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "echo \"Predictor::default = tempo2\" \u003e\u003e .psrchive.cfg \u0026\u0026     echo \"Predictor::policy = default\" \u003e\u003e .psrchive.cfg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DSPSR",
              "Value": "$PSRHOME/dspsr"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$DSPSR/install/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$DSPSR/install/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_INCLUDE_PATH",
              "Value": "$C_INCLUDE_PATH:$DSPSR/install/include"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$DSPSR"
        },
        {
          "CmdLine": [
            "./bootstrap \u0026\u0026     echo \"bpsr caspsr fits sigproc\" \u003e backends.list \u0026\u0026     ./configure --prefix=$DSPSR/install --x-libraries=/usr/lib/x86_64-linux-gnu \u0026\u0026     make -j $(nproc) \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SIGPYPROC_HOME",
              "Value": "$PSRHOME/sigpyproc"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$SIGPYPROC_HOME"
        },
        {
          "CmdLine": [
            "sudo python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$LD_LIBRARY_PATH:$SIGPYPROC_HOME/lib/c"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "env | awk '{print \"export \",$0}' \u003e $HOME/.profile \u0026\u0026     echo \"source $HOME/.profile\" \u003e\u003e $HOME/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYSLALIB",
              "Value": "$PSRHOME/pyslalib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "PYSLALIB/install"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PYSLALIB"
        },
        {
          "CmdLine": [
            "sudo python setup.py install --record list.txt --prefix=$PYSLALIB/install \u0026\u0026     sudo python setup.py clean --all \u0026\u0026     rm -rf .git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PRESTO",
              "Value": "$PSRHOME/presto"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$PRESTO/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "$PRESTO/lib"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$PYTHONPATH:$PRESTO/lib/python"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "$PRESTO/src"
        },
        {
          "CmdLine": [
            "rm -rf ../.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "make prep \u0026\u0026     make"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$PRESTO/python/ppgplot_src"
        },
        {
          "Name": "workdir",
          "Path": "$PRESTO/python"
        },
        {
          "CmdLine": [
            "make \u0026\u0026     echo \"export PYTHONPATH=$PYTHONPATH:$PRESTO/lib/python\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"export PYTHONPATH=$PYTHONPATH:$PSRHOME/psrchive/install/lib/python2.7/site-packages\" \u003e\u003e ~/.bashrc \u0026\u0026 RUN env | awk '{print \"export \",$0}' \u003e\u003e $HOME/.profile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "CmdLine": [
            "git clone https://github.com/zhuww/ubc_AI.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$HOME/ubc_AI"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./ar2_files",
            "$HOME/ubc_AI/ar2_files/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./pfd_files",
            "$HOME/ubc_AI/pfd_files/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./bson_send.py",
            "$HOME/ubc_AI"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./bson_receive.py",
            "$HOME/ubc_AI"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "ai_score.py",
            "$HOME/ubc_AI"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "Name": "user",
          "User": "root"
        }
      ]
    }
  ]
}