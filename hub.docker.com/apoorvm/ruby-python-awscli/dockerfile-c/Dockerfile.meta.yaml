MetaArgs: null
Stages:
- BaseName: alpine:3.4
  Commands:
  - Env:
    - Key: PHPIZE_DEPS
      Value: "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake
        \t\tpkgconf \t\tre2c"
    Name: env
  - CmdLine:
    - "apk add --no-cache --virtual .persistent-deps \t\tca-certificates \t\tcurl
      \t\ttar \t\txz \t\topenssl"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data
      www-data"
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - mkdir -p $PHP_INI_DIR/conf.d
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    Name: env
  - Env:
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: 1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.0.29
    Name: env
  - Env:
    - Key: PHP_URL
      Value: '"https://secure.php.net/get/php-7.0.29.tar.xz/from/this/mirror"'
    - Key: PHP_ASC_URL
      Value: '"https://secure.php.net/get/php-7.0.29.tar.xz.asc/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: '"ca79d3ecc123bff4b623d4a1bbf5ad53ad39f5f2f5912fecc0ea97e95eba21cc"'
    - Key: PHP_MD5
      Value: '""'
    Name: env
  - CmdLine:
    - "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tmkdir
      -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n
      \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c
      -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" |
      md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc
      \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS;
      do \t\t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone;
      \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\trm -rf \"$GNUPGHOME\";
      \tfi; \t\tapk del .fetch-deps"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils
      \t\tcurl-dev \t\tlibedit-dev \t\topenssl-dev \t\tlibxml2-dev \t\tsqlite-dev
      \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\"
      \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-ftp
      \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit
      \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu'
      && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j
      \"$(nproc)\" \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type
      f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t&&
      cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed
      --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t|
      sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next
      } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .php-rundeps
      $runDeps \t\t&& apk del .build-deps \t\t&& pecl update-channels \t&& rm -rf
      /tmp/pear ~/.pearrc"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-ext-*
    - docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - docker-php-entrypoint
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - php
    - -a
    Name: cmd
    PrependShell: false
  - Env:
    - Key: PHP_VERSION
      Value: "7.0"
    Name: env
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - apk --no-cache --update upgrade
    Name: run
    PrependShell: true
  - CmdLine:
    - '`# ------- fix missing libcrypto - bug --------------` &&     echo http://dl-cdn.alpinelinux.org/alpine/edge/main
      >> /etc/apk/repositories &&     apk add --update libressl2.9-libcrypto &&     `#
      ------- add usermod and groupmod tools -----------` &&     echo http://dl-2.alpinelinux.org/alpine/edge/community/
      >> /etc/apk/repositories &&     apk add --update shadow'
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add autoconf gcc g++ make git
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add fcgi
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-php-ext-install bcmath &&     docker-php-ext-install opcache &&     docker-php-ext-install
      mysqli &&     docker-php-ext-install pdo_mysql &&     docker-php-ext-install
      sockets
    Name: run
    PrependShell: true
  - CmdLine:
    - pecl install redis && docker-php-ext-enable redis &&     apk add libzip libzip-dev
      && pecl install zip && docker-php-ext-enable zip
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p setup_php && cd setup_php &&     curl -sSL https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz
      -o ioncube.tar.gz &&     tar -xf ioncube.tar.gz &&     mv ioncube/ioncube_loader_lin_${PHP_VERSION}.so
      `php-config --extension-dir` &&     docker-php-ext-enable ioncube_loader_lin_${PHP_VERSION}.so
      &&     cd .. && rm -rf setup_php &&     `# ------- install composer -------------------------`
      &&     mkdir -p setup_composer && cd setup_composer &&     curl -s https://getcomposer.org/installer
      -o composer-setup.php &&     /usr/local/bin/php composer-setup.php --install-dir=/usr/bin
      --filename=composer &&     cd .. && rm -rf setup_composer
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s /usr/bin/php7.0 /usr/bin/php     && ln -s /opt/remi/php7.0/root/bin/php-config
      /usr/bin/php-config     && ln -s /etc/opt/remi/php7.0 /etc/php
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /data
  - Name: volume
    Volumes:
    - /data
    - /cache
  From:
    Image: alpine:3.4
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.4
