MetaArgs:
- DefaultValue: alpine:edge
  Key: OSAFT_VM_FROM
  ProvidedValue: null
  Value: alpine:edge
Stages:
- BaseName: $OSAFT_VM_FROM
  Commands:
  - Maintainer: Achim <achim@owasp.org>
    Name: maintainer
  - Key: OSAFT_VM_FROM
    Name: arg
    Value: null
  - Key: OSAFT_VM_SRC_OSAFT
    Name: arg
    Value: '"https://github.com/OWASP/O-Saft/raw/master/o-saft.tgz"'
  - Key: OSAFT_VM_SHA_OSAFT
    Name: arg
    Value: '"a4d85953bdd1e08d20c6f31e9be7ea0af6ae8de3544bbfe823bd1e34ace26e7d"'
  - Key: OSAFT_VM_TAR_OSAFT
    Name: arg
    Value: '"o-saft.tgz"'
  - Key: OSAFT_VM_SRC_SSLEAY
    Name: arg
    Value: '"http://search.cpan.org/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.82.tar.gz"'
  - Key: OSAFT_VM_SHA_SSLEAY
    Name: arg
    Value: '"5895c519c9986a5e5af88e3b8884bbdc70e709ee829dc6abb9f53155c347c7e5"'
  - Key: OSAFT_VM_TAR_SSLEAY
    Name: arg
    Value: '"Net-SSLeay.tgz"'
  - Key: OSAFT_VM_SRC_SOCKET
    Name: arg
    Value: '"http://search.cpan.org/CPAN/authors/id/S/SU/SULLR/IO-Socket-SSL-2.052.tar.gz"'
  - Key: OSAFT_VM_SHA_SOCKET
    Name: arg
    Value: '"e4897a9b17cb18a3c44aa683980d52cef534cdfcb8063d6877c879bfa2f26673"'
  - Key: OSAFT_VM_TAR_SOCKET
    Name: arg
    Value: '"IO-Socket-SSL.tgz"'
  - Key: OSAFT_VM_SRC_OPENSSL
    Name: arg
    Value: '"https://github.com/PeterMosmans/openssl/archive/1.0.2-chacha.tar.gz"'
  - Key: OSAFT_VM_SHA_OPENSSL
    Name: arg
    Value: '"ad3d99ec091e403a3a7a678ddda38b392e3204515425827c53dc5baa92d61d67"'
  - Key: OSAFT_VM_TAR_OPENSSL
    Name: arg
    Value: '"openssl.tgz"'
  - Key: OSAFT_VM_DYN_OPENSSL
    Name: arg
    Value: '"--shared"'
  - Key: OSAFT_VM_APT_INSTALL
    Name: arg
    Value: null
  - Key: OSAFT_VERSION
    Name: arg
    Value: '"undefined"'
  - Labels:
    - Key: VERSION
      Value: '"$OSAFT_VERSION"'
    - Key: DESCRIPTION
      Value: '"Build O-Saft docker image (with Peter Mosman''s openssl)"'
    - Key: SYNOPSIS
      Value: '"docker build --force-rm --rm -f ./Dockerfile -t owasp/o-saft:$OSAFT_VERSION
        -t owasp/o-saft ."'
    - Key: DETAILS
      Value: '"Please see https://github.com/OWASP/O-Saft/raw/master/o-saft-docker"'
    - Key: SOURCE0
      Value: '"https://github.com/OWASP/O-Saft/raw/master/Dockerfile"'
    - Key: SOURCE1
      Value: '"$OSAFT_VM_SRC_OSAFT"'
    - Key: SOURCE2
      Value: '"$OSAFT_VM_SRC_OPENSSL"'
    - Key: SID
      Value: '"@(#) Dockerfile 1.18 17/11/20 23:45:57"'
    - Key: AUTHOR
      Value: '"Achim Hoffmann"'
    Name: label
  - Env:
    - Key: osaft_vm_build
      Value: '"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM"'
    Name: env
  - Env:
    - Key: OSAFT_DIR
      Value: /O-Saft
    Name: env
  - Env:
    - Key: OPENSSL_DIR
      Value: /openssl
    Name: env
  - Env:
    - Key: OPENSSL_VERSION
      Value: 1.0.2-chacha
    Name: env
  - Env:
    - Key: TERM
      Value: xterm
    Name: env
  - Env:
    - Key: LD_RUN_PATH
      Value: ${OPENSSL_DIR}/lib
    Name: env
  - Env:
    - Key: PATH
      Value: ${OSAFT_DIR}:${OSAFT_DIR}/contrib:${OPENSSL_DIR}/bin:$PATH
    Name: env
  - Env:
    - Key: BUILD_DIR
      Value: /tmp_src
    Name: env
  - CmdLine:
    - "apk add --no-cache wget ncurses $OSAFT_VM_APT_INSTALL \t\t gcc make musl-dev
      linux-headers \t\t krb5-dev zlib-dev perl perl-readonly perl-dev"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - "apk add --no-cache gmp-dev lksctp-tools-dev\t&& \tmkdir -p $BUILD_DIR $OPENSSL_DIR\t&&
      \twget --no-check-certificate $OSAFT_VM_SRC_OPENSSL -O $OSAFT_VM_TAR_OPENSSL
      && \t[ -n \"$OSAFT_VM_SHA_OPENSSL\" ]\t\t&& \t\techo \"$OSAFT_VM_SHA_OPENSSL
      \ $OSAFT_VM_TAR_OPENSSL\" | sha256sum -c ; \t\ttar   -xzf $OSAFT_VM_TAR_OPENSSL
      -C $BUILD_DIR --strip-components=1\t&& \tcd    $BUILD_DIR\t\t\t&& \tsed -i '/RANDFILE/a
      openssl_conf=openssl_def' apps/openssl.cnf\t&& \t(\t  echo 'openssl_conf=openssl_def';
      \t  echo '[openssl_def]';\t\t\t  echo 'engines=engine_section';\t  echo '[engine_section]';\t\t
      \ echo 'gost=gost_section';\t\t  echo '[gost_section]';\t\t  echo 'engine_id
      = gost';\t\t  echo 'default_algorithms=ALL';\t  echo 'CRYPT_PARAMS=id-Gost28147-89-CryptoPro-A-ParamSet';
      \t) >> apps/openssl.cnf\t\t\t&& \tLDFLAGS=\"-rpath=$LD_RUN_PATH\"   && export
      LDFLAGS\t&& \t./config --prefix=$OPENSSL_DIR --openssldir=$OPENSSL_DIR/ssl\t\t\t$OSAFT_VM_DYN_OPENSSL\t\t\t--with-krb5-flavor=MIT
      --with-krb5-dir=/usr/include/krb5/ \t\t-fPIC zlib zlib-dynamic enable-zlib enable-npn
      sctp\t\t\tenable-deprecated enable-weak-ssl-ciphers\t\t\tenable-heartbeats enable-unit-test
      \ enable-ssl-trace\t\t\tenable-ssl3    enable-ssl3-method   enable-ssl2\t\t\tenable-tls1
      \   enable-tls1-method   enable-tls\t\tenable-tls1-1  enable-tls1-1-method enable-tlsext\t\t\tenable-tls1-2
      \ enable-tls1-2-method enable-tls1-2-client \t\tenable-dtls1   enable-dtls1-method\t\t\tenable-dtls1-2
      enable-dtls1-2-method\t\t\tenable-md2     enable-md4   enable-mdc2\t\t\tenable-rc2
      \    enable-rc4   enable-rc5\t\t\tenable-sha0    enable-sha1  enable-sha256
      enable-sha512\t\t\tenable-aes     enable-cms   enable-dh     enable-egd\t\t\tenable-des
      \    enable-dsa   enable-rsa    enable-rsax\t\t\tenable-ec      enable-ec2m
      \ enable-ecdh   enable-ecdsa\t\t\tenable-blake2  enable-bf    enable-cast enable-camellia\t\t\tenable-gmp
      \    enable-gost  enable-GOST   enable-idea\t\t\tenable-poly1305 enable-krb5
      enable-rdrand enable-rmd160\t\t\tenable-seed    enable-srp   enable-whirlpool\t\t\tenable-rfc3779
      enable-ec_nistp_64_gcc_128 experimental-jpake \t\t-DOPENSSL_USE_BUILD_DATE -DTLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
      -DTEMP_GOST_TLS\t\t\t&& \tmake depend && make && make report -i && make install\t&&
      \techo -n \"# number of ciphers $OPENSSL_DIR/bin/openssl: \" && \t$OPENSSL_DIR/bin/openssl
      ciphers -V ALL:COMPLEMENTOFALL:aNULL|wc -l && \tapk  del --purge gmp-dev lksctp-tools-dev
      && \tcd   /\t\t\t\t\t&& \trm   -r $BUILD_DIR $OSAFT_VM_TAR_OPENSSL"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p $BUILD_DIR\t\t\t&& \twget --no-check-certificate $OSAFT_VM_SRC_SSLEAY
      -O $OSAFT_VM_TAR_SSLEAY && \t[ -n \"$OSAFT_VM_SHA_SSLEAY\" ]\t\t&& \t\techo
      \"$OSAFT_VM_SHA_SSLEAY  $OSAFT_VM_TAR_SSLEAY\" | sha256sum -c ; \t\ttar   -xzf
      $OSAFT_VM_TAR_SSLEAY -C $BUILD_DIR --strip-components=1\t&& \tapk add --no-cache
      perl-net-dns perl-net-libidn perl-mozilla-ca\t\t&& \tcd    $BUILD_DIR\t\t\t&&
      \tperl -i.orig -pe 'if (m/^#define\\s*REM_AUTOMATICALLY_GENERATED_1_09/){print
      \"const SSL_METHOD * SSLv2_method()\\n\\nconst SSL_METHOD * SSLv3_method()\\n\\n\";}'
      SSLeay.xs\t&& \techo \"n\" | env OPENSSL_PREFIX=$OPENSSL_DIR perl Makefile.PL
      \t\tINC=-I$OPENSSL_DIR/include DEFINE=-DOPENSSL_BUILD_UNSAFE=1\t&& \tmake &&
      make test && make install\t&& \tcd   /\t\t\t\t\t&& \trm   -r $BUILD_DIR $OSAFT_VM_TAR_SSLEAY"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p $BUILD_DIR\t\t\t&& \twget --no-check-certificate $OSAFT_VM_SRC_SOCKET
      -O $OSAFT_VM_TAR_SOCKET && \t[ -n \"$OSAFT_VM_SHA_SOCKET\" ]\t\t&& \t\techo
      \"$OSAFT_VM_SHA_SOCKET  $OSAFT_VM_TAR_SOCKET\" | sha256sum -c ; \t\ttar   -xzf
      $OSAFT_VM_TAR_SOCKET -C $BUILD_DIR --strip-components=1\t&& \tcd    $BUILD_DIR\t\t\t&&
      \techo \"n\" | perl Makefile.PL INC=-I$OPENSSL_DIR/include\t&& \tmake && make
      test && make install\t&& \tcd   /\t\t\t\t\t&& \trm   -r $BUILD_DIR $OSAFT_VM_TAR_SOCKET"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p $OSAFT_DIR\t\t\t&& \tadduser -D -h ${OSAFT_DIR} osaft\t&& \t\twget
      --no-check-certificate $OSAFT_VM_SRC_OSAFT -O $OSAFT_VM_TAR_OSAFT\t&& \t[ -n
      \"$OSAFT_VM_SHA_OSAFT\" ]\t\t&& \t\techo \"$OSAFT_VM_SHA_OSAFT  $OSAFT_VM_TAR_OSAFT\"
      | sha256sum -c ; \t\ttar   -xzf $OSAFT_VM_TAR_OSAFT\t\t&& \tchown -R root:root
      \  $OSAFT_DIR\t\t&& \tchown -R osaft:osaft $OSAFT_DIR/contrib\t&& \tchown    osaft:osaft
      $OSAFT_DIR/.o-saft.pl && \tmv       $OSAFT_DIR/.o-saft.pl $OSAFT_DIR/.o-saft.pl-orig\t&&
      \tsed -e \"s:^#--openssl=.*:--openssl=$OPENSSL_DIR/bin/openssl:\" \t\t< $OSAFT_DIR/.o-saft.pl-orig
      \t\t> $OSAFT_DIR/.o-saft.pl\t\t&& \tchmod 666 $OSAFT_DIR/.o-saft.pl\t\t&& \trm
      \   -f $OSAFT_VM_TAR_OSAFT"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk del --purge gcc make musl-dev linux-headers perl-dev
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $OSAFT_DIR
  - Name: user
    User: osaft
  - CmdLine:
    - o-saft-docker usage
    Name: run
    PrependShell: true
  - CmdLine:
    - perl
    - /O-Saft/o-saft.pl
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - --norc
    - --help=docker
    Name: cmd
    PrependShell: false
  From:
    Image: $OSAFT_VM_FROM
  Name: ""
  Platform: ""
  SourceCode: FROM    $OSAFT_VM_FROM
