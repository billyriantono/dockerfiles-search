MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: digilabs@philips.com
    Name: maintainer
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y locales &&     apt-get clean && rm
      -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&     localedef -i en_US -c -f UTF-8
      -A /usr/share/locale/locale.alias en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends git ca-certificates
      &&         git clone https://github.com/yyuu/pyenv.git .pyenv &&         (cd
      .pyenv && git checkout v1.0.6) &&     apt-get purge -y --auto-remove git ca-certificates
      &&     apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: PYENV_ROOT
      Value: '"/.pyenv"'
    - Key: PATH
      Value: '"/.pyenv/bin:/.pyenv/shims:$PATH"'
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends         make
      build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev
      llvm libncurses5-dev xz-utils         wget ca-certificates &&     apt-get clean
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - python-versions.txt
    - ./
  - CmdLine:
    - xargs -P 4 -n 1 pyenv install < python-versions.txt &&             pyenv global
      $(pyenv versions --bare) &&             find $PYENV_ROOT/versions -type d '('
      -name '__pycache__' -o -name 'test' -o -name 'tests' ')' -exec rm -rfv '{}'
      + &&             find $PYENV_ROOT/versions -type f '(' -name '*.py[co]' -o -name
      '*.exe' ')' -exec rm -fv '{}' +
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r tox --gid=999 &&     useradd -m -r -g tox --uid=999 tox
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.10"
    Name: env
  - CmdLine:
    - set -x &&     apt-get update && apt-get install -y --no-install-recommends ca-certificates
      wget && rm -rf /var/lib/apt/lists/* &&     dpkgArch="$(dpkg --print-architecture
      | awk -F- '{ print $NF }')" &&     wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"
      &&     wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"
      &&     export GNUPGHOME="$(mktemp -d)" &&     gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 &&     gpg --batch --verify
      /usr/local/bin/gosu.asc /usr/local/bin/gosu &&     rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc
      &&     chmod +x /usr/local/bin/gosu &&     gosu nobody true &&     apt-get clean
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pyenv local 2.7.13 &&     python -m pip install -U pip &&     python -m pip
      install tox==2.3.2 &&     pyenv local --unset &&     pyenv rehash
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /app
  - Name: volume
    Volumes:
    - /src
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get update &&   apt-get install software-properties-common python-software-properties
      -y &&   echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select
      true | debconf-set-selections &&   add-apt-repository -y ppa:webupd8team/java
      &&   apt-get update &&   apt-get install -y git curl wget oracle-java8-installer
      &&   rm -rf /var/lib/apt/lists/* &&   rm -rf /var/cache/oracle-jdk8-installer
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-oracle
    Name: env
  - CmdLine:
    - curl -sSL https://get.docker.com/ | sh &&     apt-get update &&     apt-get
      upgrade -y &&     apt-get install -y docker-engine &&     apt-get clean &&     rm
      -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./wrapdocker
    - /usr/local/bin/wrapdocker
  - CmdLine:
    - chmod +x /usr/local/bin/wrapdocker
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/lib/docker
  - CmdLine:
    - wrapdocker
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
