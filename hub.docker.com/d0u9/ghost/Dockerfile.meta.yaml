MetaArgs: null
Stages:
- BaseName: node:6-slim
  Commands:
  - Env:
    - Key: GOSU_VERSION
      Value: "1.10"
    Name: env
  - CmdLine:
    - "set -x \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg
      --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& rm
      -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu
      \t&& gosu nobody true"
    Name: run
    PrependShell: true
  - Env:
    - Key: GHOST_SOURCE
      Value: /usr/src/ghost
    Name: env
  - Name: workdir
    Path: $GHOST_SOURCE
  - CmdLine:
    - "buildDeps=' \t\tgcc \t\tmake \t\tpython \t\tunzip \t' \t&& set -x \t&& apt-get
      update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/*
      \t&& wget -O ghost.zip \"https://github.com/TryGhost/Ghost/releases/download/0.11.11/Ghost-0.11.11.zip\"
      \t&& unzip ghost.zip \t&& npm install --production \t&& apt-get purge -y --auto-remove
      -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false
      $buildDeps \t&& rm ghost.zip \t&& npm cache clean \t&& rm -rf /tmp/npm* \t&&
      apt-get purge -y --auto-remove ca-certificates wget \t&& rm -fr /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GHOST_CONTENT
      Value: /var/lib/ghost
    Name: env
  - CmdLine:
    - "mkdir -p \"$GHOST_CONTENT\" \t&& ln -s \"$GHOST_CONTENT/config.js\" \"$GHOST_SOURCE/config.js\""
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - $GHOST_CONTENT
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: expose
    Ports:
    - "2368"
  - CmdLine:
    - npm
    - start
    - --production
    Name: cmd
    PrependShell: false
  From:
    Image: node:6-slim
  Name: ""
  Platform: ""
  SourceCode: FROM node:6-slim
