{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "builder",
      "BaseName": "nvidia/cuda:9.2-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.2-devel-ubuntu16.04 AS builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "nvidia/cuda:9.2-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "Norbert Csibra \u003cnorbert.csibra@proemergotech.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_DRIVER_CAPABILITIES",
              "Value": "compute,utility,video"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENRESTY_VERSION",
              "Value": "1.13.6.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_RTMP_MODULE_VERSION",
              "Value": "1.2.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_OPENTRACING_MODULE_VERSION",
              "Value": "0.6.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENTRACING_VERSION",
              "Value": "1.5.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "FFMPEG_VERSION",
              "Value": "4.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NV_CODEC_HEADERS_VERSION",
              "Value": "8.2.15.6"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENRESTY",
              "Value": "openresty-${OPENRESTY_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_RTMP_MODULE",
              "Value": "nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_OPENTRACING_MODULE",
              "Value": "nginx-opentracing-${NGINX_OPENTRACING_MODULE_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENTRACING",
              "Value": "opentracing-cpp-${OPENTRACING_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILD_DEPS_OPENRESTY",
              "Value": "\"libpcre3-dev libssl-dev perl make cmake build-essential wget\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILD_DEPS_FFMPEG",
              "Value": "\"autoconf automake build-essential cmake git-core libass-dev libfdk-aac-dev libfreetype6-dev libgnutls-dev libmp3lame-dev libopus-dev librtmp-dev libsdl2-dev libtheora-dev libtool libc6 libc6-dev unzip libv4l-dev libvdpau-dev libvorbis-dev libvpx-dev libwebp-dev libx264-dev libx265-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libxvidcore-dev nasm yasm pkg-config texinfo wget zlib1g-dev libnuma1 libnuma-dev\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y checkinstall \u0026\u0026 mkdir /tmp/packages"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 apt-get install -y --no-install-recommends --no-install-suggests ${BUILD_DEPS_OPENRESTY}   \u0026\u0026 cd /tmp   \u0026\u0026 wget https://github.com/opentracing/opentracing-cpp/archive/v${OPENTRACING_VERSION}.tar.gz -O ${OPENTRACING}.tar.gz   \u0026\u0026 tar zxf ${OPENTRACING}.tar.gz   \u0026\u0026 cd ${OPENTRACING}   \u0026\u0026 mkdir .build \u0026\u0026 cd .build   \u0026\u0026 cmake -DCMAKE_BUILD_TYPE=Release            -DBUILD_TESTING=OFF ..   \u0026\u0026 make   \u0026\u0026 checkinstall   \t\t--default   \t\t--install=no   \t\t--nodoc   \t\t--pakdir=/tmp/packages   \t\t--pkgname=opentracing-cpp   \t\t--pkgversion=$OPENTRACING_VERSION   \t\t--type=debian   \t\t\tmake install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_MODULE_VERSION}.tar.gz -O ${NGINX_RTMP_MODULE}.tar.gz   \u0026\u0026 tar zxf ${NGINX_RTMP_MODULE}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget https://github.com/opentracing-contrib/nginx-opentracing/archive/v${NGINX_OPENTRACING_MODULE_VERSION}.tar.gz -O ${NGINX_OPENTRACING_MODULE}.tar.gz   \u0026\u0026 tar zxf ${NGINX_OPENTRACING_MODULE}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget http://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz -O ${OPENRESTY}.tar.gz   \u0026\u0026 tar zxf ${OPENRESTY}.tar.gz   \u0026\u0026 cd ${OPENRESTY}   \u0026\u0026 ./configure     --add-dynamic-module=/tmp/${NGINX_OPENTRACING_MODULE}/opentracing     --add-module=/tmp/${NGINX_RTMP_MODULE}     --with-http_auth_request_module     --without-http_echo_module     --without-http_xss_module     --without-http_coolkit_module     --without-http_set_misc_module     --without-http_form_input_module     --without-http_encrypted_session_module     --without-http_srcache_module     --without-http_lua_upstream_module     --without-http_headers_more_module     --without-http_array_var_module     --without-http_memc_module     --without-http_redis2_module     --without-http_redis_module     --without-http_rds_json_module     --without-http_rds_csv_module     --without-stream_lua_module     --without-http_ssl_module     --without-lua_cjson     --without-lua_redis_parser     --without-lua_rds_parser     --without-lua_resty_dns     --without-lua_resty_memcached     --without-lua_resty_redis     --without-lua_resty_mysql     --without-lua_resty_upload     --without-lua_resty_upstream_healthcheck     --without-lua_resty_string     --without-lua_resty_websocket     --without-lua_resty_limit_traffic     --without-lua_resty_lock     --without-lua_resty_lrucache     --without-mail_pop3_module     --without-mail_imap_module     --without-mail_smtp_module     --with-pcre     --with-debug     --with-compat     --with-luajit     --user=nginx     --group=nginx   \u0026\u0026 make   \u0026\u0026 checkinstall       --default       --install=no       --nodoc       --pakdir=/tmp/packages       --pkgname=openresty       --pkgversion=$OPENRESTY_VERSION       --type=debian         make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 wget https://github.com/FFmpeg/nv-codec-headers/releases/download/n${NV_CODEC_HEADERS_VERSION}/nv-codec-headers-${NV_CODEC_HEADERS_VERSION}.tar.gz   \u0026\u0026 tar zxf nv-codec-headers-${NV_CODEC_HEADERS_VERSION}.tar.gz   \u0026\u0026 cd nv-codec-headers-n${NV_CODEC_HEADERS_VERSION}   \u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 apt-get install -y --no-install-recommends --no-install-suggests ${BUILD_DEPS_FFMPEG}   \u0026\u0026 cd /tmp/   \u0026\u0026 wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz   \u0026\u0026 tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz   \u0026\u0026 cd /tmp/ffmpeg-${FFMPEG_VERSION}   \u0026\u0026 ./configure     --enable-version3     --enable-gpl     --enable-nonfree     --enable-small     --enable-libmp3lame     --enable-libx264     --enable-libx265     --enable-libvpx     --enable-libtheora     --enable-libvorbis     --enable-libopus     --enable-libfdk-aac     --enable-libass     --enable-libwebp     --enable-librtmp     --enable-postproc     --enable-avresample     --enable-libfreetype     --enable-gnutls     --enable-avfilter     --enable-libxvid     --enable-libv4l2     --enable-pic     --enable-shared     --enable-pthreads     --enable-shared     --enable-nvenc     --enable-cuda     --enable-cuvid     --enable-libnpp     --disable-stripping     --disable-static     --disable-debug     --extra-cflags=-I/usr/local/cuda/include     --extra-ldflags=-L/usr/local/cuda/lib64   \u0026\u0026 make   \u0026\u0026 checkinstall       --default       --install=no       --nodoc       --pakdir=/tmp/packages       --pkgname=ffmpeg       --pkgversion=$FFMPEG_VERSION       --type=debian         make install"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.2-runtime-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.2-runtime-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.2-runtime-ubuntu16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "NVIDIA_DRIVER_CAPABILITIES",
              "Value": "compute,utility,video"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAEGER_VERSION",
              "Value": "0.4.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends --no-install-suggests wget libxv1 x264 x265 libsdl2-2.0-0 libv4l-0 libxcb-shm0 libxcb-shape0 libass5 libfdk-aac0 libvdpau1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://github.com/jaegertracing/jaeger-client-cpp/releases/download/v${JAEGER_VERSION}/libjaegertracing_plugin.linux_amd64.so -O /usr/local/lib/libjaegertracing_plugin.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/packages",
            "/tmp/packages"
          ]
        },
        {
          "CmdLine": [
            "dpkg -i /tmp/packages/*.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/nginx/sbin:/usr/local/openresty/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "\"${LD_LIBRARY_PATH}:/usr/local/lib\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "nginx.conf",
            "/usr/local/openresty/nginx/conf/nginx.conf"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /data   \u0026\u0026 mkdir -p /data/hls   \u0026\u0026 mkdir -p /data/dash   \u0026\u0026 mkdir -p /www"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "addgroup --system nginx   \u0026\u0026 adduser --system --disabled-password --home /var/cache/nginx --shell /sbin/nologin --ingroup nginx nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "static",
            "/www/static"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "1935"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/openresty/nginx/sbin/nginx"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}