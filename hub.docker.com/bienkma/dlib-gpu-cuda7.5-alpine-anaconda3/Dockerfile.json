{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "frolvlad/alpine-glibc:alpine-3.9",
      "SourceCode": "FROM frolvlad/alpine-glibc:alpine-3.9",
      "Platform": "",
      "From": {
        "Image": "frolvlad/alpine-glibc:alpine-3.9"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "author",
              "Value": "\"bientd88@gmail.com\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "\"/opt/conda\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$CONDA_DIR/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "CmdLine": [
            "CONDA_VERSION=\"4.5.12\" \u0026\u0026     CONDA_MD5_CHECKSUM=\"866ae9dff53ad0874e1d1a60b1ad1ef8\" \u0026\u0026         apk add --no-cache --virtual=.build-dependencies wget ca-certificates bash tzdata git\u0026\u0026         mkdir -p \"$CONDA_DIR\" \u0026\u0026     wget \"http://repo.continuum.io/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh\" -O miniconda.sh \u0026\u0026     echo \"$CONDA_MD5_CHECKSUM  miniconda.sh\" | md5sum -c \u0026\u0026     bash miniconda.sh -f -b -p \"$CONDA_DIR\" \u0026\u0026     echo \"export PATH=$CONDA_DIR/bin:\\$PATH\" \u003e /etc/profile.d/conda.sh \u0026\u0026     rm miniconda.sh \u0026\u0026         conda update --all --yes \u0026\u0026     conda config --set auto_update_conda False \u0026\u0026     rm -r \"$CONDA_DIR/pkgs/\" \u0026\u0026         apk del --purge .build-dependencies \u0026\u0026         mkdir -p \"$CONDA_DIR/locks\" \u0026\u0026     chmod 777 \"$CONDA_DIR/locks\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache -U --virtual=build-dependencies ca-certificates tzdata git cmake gcc make g++ jpeg-dev openjpeg-dev openssl-dev zlib-dev freetype jpeg libjpeg openjpeg zlib libxml2-dev libxslt-dev build-base openblas-dev bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/davisking/dlib.git \u0026\u0026 cd dlib \u0026\u0026 git checkout tags/v19.14 -b v19.14"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add wget alpine-sdk perl \u0026\u0026     wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x cuda_*_linux.run \u0026\u0026     ./cuda_*_linux.run --tar mxvf \u0026\u0026     cp InstallUtils.pm /usr/share/perl5/core_perl/ \u0026\u0026     ./run_files/cuda-linux64-rel-*.run -noprompt \u0026\u0026     rm -rf cuda_*_linux.run            /run_files            InstallUtils.pm            cuda-installer.pl            uninstall_cuda.pl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "conda.yml",
            "."
          ]
        },
        {
          "CmdLine": [
            "conda env update -f conda.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/cuda-7.5/bin:$PATH"
            },
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/cuda-7.5/lib64:$LD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd dlib \u0026\u0026 python setup.py install --yes USE_AVX_INSTRUCTIONS --yes DLIB_USE_CUDA"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install -y -c akode face_recognition_models"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install face_recognition"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /app/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -r \"$CONDA_DIR/pkgs/\" \u0026\u0026     apk del build-dependencies \u0026\u0026     rm -rf ~/.pip \u0026\u0026     rm -rf ~/.conda \u0026\u0026     rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}