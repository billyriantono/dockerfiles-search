{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:5-apache",
      "SourceCode": "FROM php:5-apache",
      "Platform": "",
      "From": {
        "Image": "php:5-apache"
      },
      "Commands": [
        {
          "Maintainer": "Xinnian Liu \u003cliuxinnian@palmax.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "sed -i 's/docker-php-\\(ext-$ext.ini\\)/\\1/' /usr/local/bin/docker-php-ext-install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \t\tlibtool \t\tautomake \t\tapt-utils         g++ \t\tcurl \t\twget         git         unzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \t\tlibpq-dev         libsqlite3-dev         libmemcached-dev         libzip-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-install pdo_mysql pdo_pgsql pgsql pdo_sqlite zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y         libfreetype6-dev         libjpeg62-turbo-dev         libmcrypt-dev         libpng12-dev     \u0026\u0026 docker-php-ext-install -j$(nproc) iconv mcrypt     \u0026\u0026 docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/     \u0026\u0026 docker-php-ext-install -j$(nproc) gd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pecl install -o -f redis-2.2.8 \u0026\u0026 docker-php-ext-enable redis"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pecl install -o -f memcached-2.2.0 \u0026\u0026 docker-php-ext-enable memcached"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --recursive https://github.com/maxmind/libmaxminddb     \u0026\u0026 (         cd libmaxminddb         \u0026\u0026 ./bootstrap         \u0026\u0026 ./configure          \u0026\u0026 make install         \u0026\u0026 ldconfig     )     \u0026\u0026 rm -rf libmaxminddb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /usr/local/share/GeoIP/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz     \u0026\u0026 gunzip -f GeoLite2-Country.mmdb.gz     \u0026\u0026 (         mkdir -p /usr/local/share/GeoIP/         \u0026\u0026 cp -f GeoLite2-Country.mmdb /usr/local/share/GeoIP/     )     \u0026\u0026 rm -rf GeoLite2-Country.mmdb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz     \u0026\u0026 gunzip -f GeoLite2-City.mmdb.gz     \u0026\u0026 (         mkdir -p /usr/local/share/GeoIP/         \u0026\u0026 cp -f GeoLite2-City.mmdb /usr/local/share/GeoIP/     )     \u0026\u0026 rm -rf GeoLite2-City.mmdb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/maxmind/MaxMind-DB-Reader-php.git     \u0026\u0026 (         cd MaxMind-DB-Reader-php/ext         \u0026\u0026 phpize         \u0026\u0026 ./configure         \u0026\u0026 make         \u0026\u0026 make install     )     \u0026\u0026 rm -r MaxMind-DB-Reader-php     \u0026\u0026 docker-php-ext-enable maxminddb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "php -r \"readfile('http://getcomposer.org/installer');\" | php -- --install-dir=/usr/local/bin/ --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed 's/^;\\(date.timezone.*\\)/\\1 \\\"Etc\\/UTC\\\"/' \u003e /usr/local/etc/php/php.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/;\\(cgi\\.fix_pathinfo=\\)1/\\10/' /usr/local/etc/php/php.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y autoclean \u0026\u0026 apt-get -y autoremove \u0026\u0026 apt-get -y clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026 apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "a2enmod rewrite"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /var/www/html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R www-data:www-data /var/www/html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        },
        {
          "CmdLine": [
            "/usr/sbin/apache2ctl",
            "-D",
            "FOREGROUND"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}