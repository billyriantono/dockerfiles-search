{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "Mats Rynge \u003crynge@isi.edu\u003e",
          "Name": "maintainer"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "environment",
            "/environment"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "exec",
            "/.exec"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "run",
            "/.run"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "shell",
            "/.shell"
          ]
        },
        {
          "CmdLine": [
            "chmod 755 .exec .run .shell"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export DEBIAN_FRONTEND=noninteractive \u0026\u0026     apt-get update \u0026\u0026 apt-get upgrade -y --allow-unauthenticated \u0026\u0026     apt-get install -y --allow-unauthenticated         build-essential         cmake         cuda-drivers         curl         git         libfreetype6-dev         libpng12-dev         libssl-dev         libxpm-dev         libzmq3-dev         module-init-tools         openssh-client         openssh-server         pkg-config         python         python-dev         python-tk         python3         python3-dev         python3-tk         rsync         software-properties-common         unzip         zip         zlib1g-dev         openjdk-8-jdk         openjdk-8-jre-headless         vim         wget         \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" \u003e/etc/apt/sources.list.d/bazel.list \u0026\u0026     curl https://bazel.build/bazel-release.pub.gpg | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export DEBIAN_FRONTEND=noninteractive \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y --allow-unauthenticated         bazel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python get-pip.py \u0026\u0026     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install         h5py         ipykernel         jupyter         matplotlib         numpy         pandas         Pillow         scipy         sklearn         \u0026\u0026     python -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"/usr/local/cuda/lib64/\" \u003e/etc/ld.so.conf.d/cuda.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"/usr/local/cuda/extras/CUPTI/lib64/\" \u003e\u003e/etc/ld.so.conf.d/cuda.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip uninstall tensorflow-gpu || true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade tensorflow-gpu==1.10"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade keras"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python3 get-pip.py \u0026\u0026     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 --no-cache-dir install         h5py         ipykernel         jupyter         matplotlib         numpy         pandas         Pillow         scipy         sklearn         \u0026\u0026     python3 -m ipykernel.kernelspec"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 uninstall tensorflow-gpu || true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade tensorflow-gpu==1.10"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install --upgrade keras"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /host-libs /etc/OpenCL/vendors \u0026\u0026     echo \"/host-libs/\" \u003e/etc/ld.so.conf.d/000-host-libs.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /cvmfs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "touch /bin/nvidia-smi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /bin/nvidia-smi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /.singularity.d/libs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     wget -nv https://root.cern.ch/download/root_v6.10.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz \u0026\u0026     tar xzf root_v6.10.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz \u0026\u0026     rm -f root_v6.10.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     wget http://xrootd.org/download/v4.7.1/xrootd-4.7.1.tar.gz \u0026\u0026     tar xzf xrootd-4.7.1.tar.gz \u0026\u0026     cd xrootd-4.7.1 \u0026\u0026     mkdir build \u0026\u0026     cd  build \u0026\u0026     cmake /opt/xrootd-4.7.1 -DCMAKE_INSTALL_PREFIX=/opt/xrootd -DENABLE_PERL=FALSE \u0026\u0026     make \u0026\u0026     make install \u0026\u0026     cd /opt \u0026\u0026     rm -rf xrootd-4.7.1.tar.gz xrootd-4.7.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     git clone https://github.com/opensciencegrid/StashCache.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Timestamp:\" `date --utc` | tee /image-build-info.txt"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}