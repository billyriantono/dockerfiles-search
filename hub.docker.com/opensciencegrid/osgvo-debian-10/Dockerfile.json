{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:buster",
      "SourceCode": "FROM debian:buster",
      "Platform": "",
      "From": {
        "Image": "debian:buster"
      },
      "Commands": [
        {
          "CmdLine": [
            "export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         build-essential         cmake         curl         davix-dev         dcap-dev         fonts-freefont-ttf         g++         gcc         gfal2         gfortran         git         libafterimage-dev         libavahi-compat-libdnssd-dev         libcfitsio-dev         libfftw3-dev         libfreetype6-dev         libftgl-dev         libgfal2-dev         libgif-dev         libgl2ps-dev         libglew-dev         libglu-dev         libgraphviz-dev         libgsl-dev         libjemalloc-dev         libjpeg-dev         libkrb5-dev         libldap2-dev         liblz4-dev         liblzma-dev         libpcre++-dev         libpng-dev         libpq-dev         libqt4-dev         libreadline-dev         libsqlite3-dev         libssl-dev         libtbb-dev         libtiff-dev         libx11-dev         libxext-dev         libxft-dev         libxml2-dev         libxpm-dev         libz-dev         libzmq3-dev         locales         lsb-release         lsb-release         make         openjdk-11-jdk         pkg-config         python         python3         python3-pip         python3-tk         python-dev         python-numpy         python-pip         r-base         r-cran-rcpp         r-cran-rinside         rsync         srm-ifce-dev         unixodbc-dev         unzip         vim         wget         \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/grid-security \u0026\u0026     cd /etc/grid-security \u0026\u0026     wget -nv https://download.pegasus.isi.edu/containers/certificates.tar.gz \u0026\u0026     tar xzf certificates.tar.gz \u0026\u0026     rm -f certificates.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install setuptools \u0026\u0026     pip install stashcp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for MNTPOINT in         /cvmfs         /hadoop         /hdfs         /lizard         /mnt/hadoop         /mnt/hdfs         /xenon         /spt         /stash2     ; do         mkdir -p $MNTPOINT ;     done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".singularity.d",
            "/.singularity.d"
          ]
        },
        {
          "CmdLine": [
            "cd / \u0026\u0026     ln -s .singularity.d/actions/exec .exec \u0026\u0026     ln -s .singularity.d/actions/run .run \u0026\u0026     ln -s .singularity.d/actions/test .shell \u0026\u0026     ln -s .singularity.d/runscript singularity"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Timestamp:\" `date --utc` | tee /image-build-info.txt"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}