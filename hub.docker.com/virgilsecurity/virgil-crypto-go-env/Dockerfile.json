{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends     g++     gcc     libc6-dev     make     pkg-config     swig     doxygen     curl     ca-certificates     git     wget     libssl-dev     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CMAKE_VERSION",
              "Value": "3.10.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://cmake.org/files/v${CMAKE_VERSION%.*}/cmake-${CMAKE_VERSION}.tar.gz      \u0026\u0026 tar xvfz cmake-${CMAKE_VERSION}.tar.gz      \u0026\u0026 cd cmake-${CMAKE_VERSION}      \u0026\u0026 ./bootstrap      \u0026\u0026 make -j4      \u0026\u0026 make install      \u0026\u0026 cd -      \u0026\u0026 rm -rf ./cmake-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOLANG_VERSION",
              "Value": "1.12.5"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_DOWNLOAD_URL",
              "Value": "https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_DOWNLOAD_SHA256",
              "Value": "aea86e3c73495f205929cfebba0d63f1382c8ac59be081b6351681415f4063cf"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fsSL \"$GOLANG_DOWNLOAD_URL\" -o golang.tar.gz     \u0026\u0026 echo \"$GOLANG_DOWNLOAD_SHA256  golang.tar.gz\" | sha256sum -c -     \u0026\u0026 tar -C /usr/local -xzf golang.tar.gz     \u0026\u0026 rm golang.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \u0026\u0026 chmod -R 777 \"$GOPATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$GOPATH"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "virgil-crypto"
          ]
        },
        {
          "CmdLine": [
            "cd virgil-crypto     \u0026\u0026 cmake -H. -B_build -DCMAKE_INSTALL_PREFIX=_install -DLANG=go -DINSTALL_CORE_LIBS=ON -DVIRGIL_CRYPTO_FEATURE_PYTHIA=ON     \u0026\u0026 cmake --build _build --target install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -d gopkg.in/virgilsecurity/virgil-crypto-go.v4     \u0026\u0026 cp -r virgil-crypto/_install/* $GOPATH/src/gopkg.in/virgilsecurity/virgil-crypto-go.v4"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -d gopkg.in/virgilsecurity/virgil-crypto-go.v5     \u0026\u0026 cp -r virgil-crypto/_install/* $GOPATH/src/gopkg.in/virgilsecurity/virgil-crypto-go.v5"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf virgil-crypto"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}