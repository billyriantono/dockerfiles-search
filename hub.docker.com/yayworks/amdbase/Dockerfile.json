{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Nimbix, Inc.\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "SERIAL_NUMBER",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "SERIAL_NUMBER",
              "Value": "${SERIAL_NUMBER:-20180705.1900}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GIT_BRANCH",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "GIT_BRANCH",
              "Value": "${GIT_BRANCH:-master}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get -y install curl \u0026\u0026     curl -H 'Cache-Control: no-cache'         https://raw.githubusercontent.com/nimbix/image-common/master/install-nimbix.sh         | bash -s -- --setup-nimbix-desktop --image-common-branch $GIT_BRANCH"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install cuda-samples-9-1 \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod u+s /usr/lib/libdlfaker.so /usr/lib/libvglfaker.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get -y install software-properties-common python-software-properties \u0026\u0026     apt-get install -y     build-essential     awscli     curl     git     make     tcl     wget     libibverbs-dev     libibverbs1     librdmacm1     librdmacm-dev     rdmacm-utils     libibmad-dev     libibmad5     byacc     libibumad-dev     libibumad3     flex     gfortran \u0026\u0026     apt-get install -y python3.4 \u0026\u0026     apt-get install -y python3-pip \u0026\u0026     apt-get install -y python-qt4 \u0026\u0026     apt-get install -y nodejs-legacy \u0026\u0026     apt-get install -y npm \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O- -q http://s3tools.org/repo/deb-all/stable/s3tools.key | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O/etc/apt/sources.list.d/s3tools.list http://s3tools.org/repo/deb-all/stable/s3tools.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y s3cmd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MPI_VERSION",
              "Value": "2.0.1"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./install-ompi.sh",
            "/tmp/install-ompi.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -x /tmp/install-ompi.sh \u0026\u0026     rm -rf /tmp/install-ompi.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "OSU_VERSION",
              "Value": "5.3.2"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./install-osu.sh",
            "/tmp/install-osu.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -x /tmp/install-osu.sh \u0026\u0026 rm -rf /tmp/install-osu.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./yb-sw-config.NIMBIX.x8664.turbotensor.sh",
            "/tmp/yb-sw-config.NIMBIX.x8664.turbotensor.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -x /tmp/yb-sw-config.NIMBIX.x8664.turbotensor.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/nimbix"
        },
        {
          "CmdLine": [
            "/usr/bin/wget https://s3.amazonaws.com/yb-lab-cfg/admin/yb-admin.NIMBIX.x86_64.tar \u0026\u0026     tar xvf yb-admin.NIMBIX.x86_64.tar -C /usr/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./jupyterhub_config.py",
            "/usr/local"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./wetty.tar.gz",
            "/usr/local"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./config.sh",
            "/usr/local/config.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./start.sh",
            "/usr/local/start.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./setup.x",
            "/usr/local/setup.x"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./jpy_lab_start.sh",
            "/usr/local/jpy_lab_start.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/config.sh \u0026\u0026 chown nimbix.nimbix /usr/local/config.sh \u0026\u0026     chmod +x /usr/local/start.sh \u0026\u0026 chown nimbix.nimbix /usr/local/start.sh \u0026\u0026     chmod +x /usr/local/setup.x \u0026\u0026 chown nimbix.nimbix /usr/local/setup.x \u0026\u0026     chmod +x /usr/local/jpy_lab_start.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt-get install -y r-base \u0026\u0026     sudo apt-get install -y r-base-dev \u0026\u0026     sudo apt-get install -y gdebi-core"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/bin/wget https://download2.rstudio.org/rstudio-server-1.1.442-amd64.deb \u0026\u0026     echo \"y\" |sudo gdebi rstudio-server-1.1.442-amd64.deb \u0026\u0026     echo \"auth-minimum-user-id=500\" \u003e\u003e /etc/rstudio/rserver.conf \u0026\u0026     echo \"Y\" | /usr/local/anaconda3/bin/conda install -c r r-irkernel \u0026\u0026     rm rstudio-server-1.1.442-amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \" \" | sudo apt-add-repository ppa:octave/stable \u0026\u0026     sudo apt-get update \u0026\u0026     sudo apt-get install -y octave \u0026\u0026     sudo apt-get build-dep -y octave \u0026\u0026     echo \"Y\" | /usr/local/anaconda3/bin/conda install -c conda-forge octave_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt-get update \u0026\u0026     sudo apt-get install -y scilab \u0026\u0026     sudo /usr/local/anaconda3/bin/pip install msgpack \u0026\u0026     sudo /usr/local/anaconda3/bin/pip install scilab_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo /usr/local/anaconda3/bin/pip install jupyter_c_kernel \u0026\u0026     sudo /usr/local/anaconda3/bin/install_c_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \" \" | sudo apt-add-repository ppa:webupd8team/atom \u0026\u0026     sudo apt-get update \u0026\u0026     sudo apt-get install -y atom \u0026\u0026     apm install teletype \u0026\u0026     apm install hydrogen \u0026\u0026     apm install intentions \u0026\u0026     apm install busy-signal \u0026\u0026     apm install linter-ui-default \u0026\u0026     apm install linter \u0026\u0026     apm install linter-python \u0026\u0026     apm install language-opencl \u0026\u0026     apm install file-icons \u0026\u0026     apm install atom-live-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/images \u0026\u0026     mkdir -p /opt/icons"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local"
        },
        {
          "CmdLine": [
            "sudo wget https://s3.amazonaws.com/gen-purpose/AOCC-1.2-Fortran-Prerequisites.tar.xz \u0026\u0026     sudo wget https://s3.amazonaws.com/gen-purpose/AOCC-1.2-FortranPlugin.tar.xz \u0026\u0026     sudo wget https://s3.amazonaws.com/gen-purpose/AOCC-1.2-Compiler.tar.xz \u0026\u0026     sudo tar xf AOCC-1.2-Compiler.tar.xz \u0026\u0026     sudo wget https://s3.amazonaws.com/gen-purpose/AMDuProf_Linux_x64_1.2.275.tar.gz \u0026\u0026     sudo tar xvfz AMDuProf_Linux_x64_1.2.275.tar.gz \u0026\u0026     sudo wget https://s3.amazonaws.com/gen-purpose/AMD-LIBM-Linux-3.2.1.tar.gz \u0026\u0026     sudo tar xvfz AMD-LIBM-Linux-3.2.1.tar.gz \u0026\u0026     sudo wget https://s3.amazonaws.com/gen-purpose/AMD-BLIS-Linux-0.95-Beta.tar.gz \u0026\u0026     sudo tar xvfz AMD-BLIS-Linux-0.95-Beta.tar.gz \u0026\u0026     sudo rm -rf /usr/local/*tar* \u0026\u0026     cd AOCC-1.2-Compiler \u0026\u0026     sudo ./install.sh \u0026\u0026     sudo ln -s /usr/local/AOCC-1.2-Compiler/AOCC-1.2-FortranPlugin/dragonegg.so /usr/lib/dragonegg.so \u0026\u0026     sudo ln -s /usr/local/amdlibm-3.2.1/lib/dynamic/libamdlibm.so /usr/lib/libamdlibm.so \u0026\u0026     sudo ln -s /usr/local/amd-blis-0.95-beta/lib/libblis.so /usr/lib/libblis.so \u0026\u0026     sudo cp -r /usr/local/amd-blis-0.95-beta/include/blis /usr/include"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./scripts",
            "/usr/local/scripts"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./NAE/nvidia.cfg",
            "/etc/NAE/nvidia.cfg"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "NAE/AppDef.json",
            "/etc/NAE/AppDef.json"
          ]
        },
        {
          "CmdLine": [
            "curl --fail -X POST -d @/etc/NAE/AppDef.json https://api.jarvice.com/jarvice/validate"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./NAE/screenshot.png",
            "/etc/NAE/screenshot.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./Wallpaper-yaybench_1280x720.png",
            "/opt/images/Wallpaper.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./yaymark_57x57.png",
            "/opt/icons/yaybench.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./xfce4-desktop.xml",
            "/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./xfce4-panel.xml",
            "/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml"
          ]
        },
        {
          "Key": "SERIAL_NUMBER",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "SERIAL_NUMBER",
              "Value": "${SERIAL_NUMBER:-20180705.1900}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/usr/local/scripts/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/scripts/update_drivers.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/nimbix"
        },
        {
          "CmdLine": [
            "rm -rf *"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=/usr/local/cuda/bin:/usr/local/anaconda3/envs/tensorflow/bin:$PATH' \u003e\u003e /home/nimbix/.bashrc \u0026\u0026  echo 'export PYTHONPATH=/usr/local/anaconda3/envs/tensorflow/lib/python3.6:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/prettytensor-0.7.2-py3.6.egg:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/enum34-1.1.6-py3.6.egg:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/matplotlib:$PYTHONPATH' \u003e\u003e /home/nimbix/.bashrc \u0026\u0026  echo 'export PATH=/usr/local/cuda/bin:/usr/local/anaconda3/envs/tensorflow/bin:$PATH' \u003e\u003e /etc/skel/.bashrc \u0026\u0026  echo 'export PYTHONPATH=/usr/local/anaconda3/envs/tensorflow/lib/python3.6:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/prettytensor-0.7.2-py3.6.egg:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/enum34-1.1.6-py3.6.egg:/usr/local/anaconda3/envs/tensorflow/lib/python3.6/site-packages/matplotlib:$PYTHONPATH' \u003e\u003e /etc/skel/.bashrc \u0026\u0026  echo 'export PATH=$PATH:/usr/local/AMDuProf_Linux_x64_1.2.275/bin' \u003e\u003e /etc/skel/.bashrc \u0026\u0026  echo 'export PATH=$PATH:/usr/local/AOCC-1.2-Compiler/bin' \u003e\u003e /etc/skel/.bashrc \u0026\u0026  echo 'source /usr/local/setenv_AOCC.sh' \u003e\u003e /etc/skel/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5901"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        }
      ]
    }
  ]
}