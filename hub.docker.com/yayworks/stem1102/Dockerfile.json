{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Nimbix, Inc.\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "SERIAL_NUMBER",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "SERIAL_NUMBER",
              "Value": "${SERIAL_NUMBER:-20181226.1130}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GIT_BRANCH",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "GIT_BRANCH",
              "Value": "${GIT_BRANCH:-master}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get -y install curl \u0026\u0026     curl -H 'Cache-Control: no-cache'         https://raw.githubusercontent.com/nimbix/image-common/master/install-nimbix.sh         | bash -s -- --setup-nimbix-desktop --image-common-branch $GIT_BRANCH"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install cuda-samples-9-1 \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod u+s /usr/lib/libdlfaker.so /usr/lib/libvglfaker.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "NAE/AppDef.json",
            "/etc/NAE/AppDef.json"
          ]
        },
        {
          "CmdLine": [
            "curl --fail -X POST -d @/etc/NAE/AppDef.json https://api.jarvice.com/jarvice/validate"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends     software-properties-common python-software-properties     build-essential     awscli     expect     curl     git     make     tcl     wget     libibverbs-dev     libibverbs1     librdmacm1     librdmacm-dev     rdmacm-utils     libibmad-dev     libibmad5     byacc     libibumad-dev     libibumad3     flex     gfortran \u0026\u0026     apt-get install -y python3.4 \u0026\u0026     apt-get install -y python3-pip \u0026\u0026     apt-get install -y python-qt4 \u0026\u0026     apt-get install -y nodejs-legacy \u0026\u0026     apt-get install -y npm \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "com.nvidia.volumes.needed",
              "Value": "\"nvidia_driver\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"/usr/local/nvidia/lib\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf \u0026\u0026     echo \"/usr/local/nvidia/lib64\" \u003e\u003e /etc/ld.so.conf.d/nvidia.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/nvidia/bin:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_VISIBLE_DEVICES",
              "Value": "all"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_DRIVER_CAPABILITIES",
              "Value": "compute,utility"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -O- -q http://s3tools.org/repo/deb-all/stable/s3tools.key | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O/etc/apt/sources.list.d/s3tools.list http://s3tools.org/repo/deb-all/stable/s3tools.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y s3cmd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./yb-sw-config.NIMBIX.x8664.turbotensor.sh",
            "/tmp/yb-sw-config.NIMBIX.x8664.turbotensor.sh"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash -x /tmp/yb-sw-config.NIMBIX.x8664.turbotensor.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/home/nimbix"
        },
        {
          "CmdLine": [
            "/usr/bin/wget https://s3.amazonaws.com/yb-lab-cfg/admin/yb-admin.NIMBIX.x86_64.tar \u0026\u0026     tar xvf yb-admin.NIMBIX.x86_64.tar -C /usr/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./jupyterhub_config.py",
            "/usr/local"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./wetty.tar.gz",
            "/usr/local"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./config.sh",
            "/usr/local/config.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./start.sh",
            "/usr/local/start.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./setup.x",
            "/usr/local/setup.x"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./jpy_lab_start.sh",
            "/usr/local/jpy_lab_start.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/config.sh \u0026\u0026 chown nimbix.nimbix /usr/local/config.sh \u0026\u0026     chmod +x /usr/local/start.sh \u0026\u0026 chown nimbix.nimbix /usr/local/start.sh \u0026\u0026     chmod +x /usr/local/setup.x \u0026\u0026 chown nimbix.nimbix /usr/local/setup.x \u0026\u0026     chmod +x /usr/local/jpy_lab_start.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt-get install -y r-base \u0026\u0026     sudo apt-get install -y r-base-dev \u0026\u0026     sudo apt-get install -y gdebi-core"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/bin/wget https://download1.rstudio.org/rstudio-xenial-1.1.456-amd64.deb \u0026\u0026     sudo apt-get -y install libjpeg62 \u0026\u0026     sudo dpkg -i rstudio-xenial-1.1.456-amd64.deb \u0026\u0026     rm rstudio-xenial-1.1.456-amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cat /etc/apt/sources.list | grep deb-src \u0026\u0026     sudo sed -i~orig -e 's/# deb-src/deb-src/' /etc/apt/sources.list \u0026\u0026     sudo apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \" \" | sudo apt-add-repository ppa:octave/stable \u0026\u0026     sudo apt-get update \u0026\u0026     sudo apt-get install -y octave \u0026\u0026     sudo apt-get build-dep -y octave \u0026\u0026     sudo /usr/local/anaconda3/bin/conda config --add channels conda-forge \u0026\u0026     echo \"Y\" | sudo /usr/local/anaconda3/bin/conda install -c conda-forge octave_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo apt-get install -y maxima \u0026\u0026     sudo apt-get update \u0026\u0026     sudo apt-get install -y wxmaxima"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sudo /usr/local/anaconda3/bin/pip install jupyter_c_kernel \u0026\u0026     sudo /usr/local/anaconda3/bin/install_c_kernel"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/anaconda3/bin/conda create -n fenicsproject -c conda-forge python=3.6 fenics mshr ipython \u0026\u0026     sudo apt-get -y install paraview"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O/tmp/gmsh-git-Linux64.tgz http://gmsh.info//bin/Linux/gmsh-git-Linux64.tgz \u0026\u0026     cd /tmp \u0026\u0026     sudo tar xvfz gmsh-git-Linux64.tgz \u0026\u0026     sudo cp /tmp/gmsh-git-Linux64/bin/gmsh /usr/local/bin \u0026\u0026     sudo mkdir /usr/share/gmsh \u0026\u0026     sudo cp -r /tmp/gmsh-git-Linux64/share /usr/share/gmsh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/images \u0026\u0026     mkdir -p /opt/icons"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./scripts",
            "/usr/local/scripts"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./NAE/nvidia.cfg",
            "/etc/NAE/nvidia.cfg"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./NAE/screenshot.png",
            "/etc/NAE/screenshot.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./Wallpaper-yaybench_1280x720.png",
            "/opt/images/Wallpaper.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./yaymark_57x57.png",
            "/opt/icons/yaybench.png"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./xfce4-desktop.xml",
            "/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./xfce4-panel.xml",
            "/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/scripts/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/scripts/update_drivers.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./install_cmake.sh",
            "/usr/local/install_cmake.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x          /usr/local/install_cmake.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -x       /usr/local/install_cmake.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export PATH=/usr/local/bin:/usr/local/cuda/bin:/usr/local/anaconda3/envs/fenicsproject/bin:/usr/local/anaconda3/bin:$PATH' \u003e\u003e /etc/skel/.bashrc \u0026\u0026  echo 'export PYTHONPATH=/usr/local/anaconda3/envs/fenicsproject/lib:/usr/local/anaconda3/envs/fenicsproject/lib/python3.6:/usr/local/anaconda3/envs/fenicsproject/lib/python3.6/site-packages/:/usr/local/anaconda3/envs/fenicsproject/lib/python3.6/site-packages/matplotlib:$PYTHONPATH' \u003e\u003e /etc/skel/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5901"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        }
      ]
    }
  ]
}