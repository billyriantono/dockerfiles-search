MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Labels:
    - Key: maintainer
      Value: "\"Alex Cohn\t<alex@alexcohn.com>\""
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: 1.15.12
    Name: env
  - Env:
    - Key: OPENSSL_VERSION
      Value: 1.1.1b
    Name: env
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     && OPENSSL_SHA256=5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b
      \    && NGINX_CT_TAG=93e9884764b77300236fd878ae284f2a40314f38 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module
      \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module
      \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module
      \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module
      \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic
      \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic
      \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module
      \t\t--with-stream_realip_module \t\t--with-stream_geoip_module=dynamic \t\t--with-http_slice_module
      \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat \t\t--with-file-aio
      \t\t--with-http_v2_module \t\t--add-dynamic-module=../nginx-ct \t\t--with-openssl=openssl-$OPENSSL_VERSION
      \t\" \t&& addgroup -g 82 -S nginx \t&& adduser -u 82 -D -S -h /var/cache/nginx
      -s /sbin/nologin -G nginx nginx \t&& apk add --no-cache --virtual .build-deps
      \t    git \t\tgcc \t\tlibc-dev \t\tmake \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers
      \t\tcurl \t\tgnupg1 \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t&& curl -fSL
      https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t&&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found=''; \tfor server in \t\tha.pool.sks-keyservers.net
      \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu
      \t; do \t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver
      \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes
      && break; \tdone; \ttest -z \"$found\" && echo >&2 \"error: failed to fetch
      GPG key $GPG_KEYS\" && exit 1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz
      \t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \t&& curl -fSL https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
      -o openssl-$OPENSSL_VERSION.tar.gz \t&& echo \"$OPENSSL_SHA256  openssl-$OPENSSL_VERSION.tar.gz\"
      | sha256sum -c \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz
      \t&& rm nginx.tar.gz \t&& tar -zxC /usr/src/nginx-$NGINX_VERSION -f openssl-$OPENSSL_VERSION.tar.gz
      \t&& rm openssl-$OPENSSL_VERSION.tar.gz \t&& git clone https://github.com/grahamedgecombe/nginx-ct
      /usr/src/nginx-ct \t&& cd /usr/src/nginx-ct \t&& git checkout --detach $NGINX_CT_TAG
      \t&& cd /usr/src/nginx-$NGINX_VERSION \t&& cd openssl-$OPENSSL_VERSION \t&&
      ./config \t&& cd .. \t&& ./configure $CONFIG \t&& make -j$(getconf _NPROCESSORS_ONLN)
      \t&& make install \t&& rm -rf /etc/nginx/html/ \t&& mkdir /etc/nginx/conf.d/
      \t&& mkdir -p /usr/share/nginx/html/ \t&& install -m644 html/index.html /usr/share/nginx/html/
      \t&& install -m644 html/50x.html /usr/share/nginx/html/ \t&& ln -s ../../usr/lib/nginx/modules
      /etc/nginx/modules \t&& strip /usr/sbin/nginx* \t&& strip /usr/lib/nginx/modules/*.so
      \t&& rm -rf /usr/src/nginx-$NGINX_VERSION \t&& apk add --no-cache --virtual
      .gettext gettext \t&& mv /usr/bin/envsubst /tmp/ \t&& runDeps=\"$( \t\tscanelf
      --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e
      /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&&
      apk add --no-cache --virtual .nginx-rundeps $runDeps \t&& apk del .build-deps
      \t&& apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/ \t&& apk add --no-cache
      tzdata \t&& ln -sf /dev/stdout /var/log/nginx/access.log \t&& ln -sf /dev/stderr
      /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.vh.default.conf
    - /etc/nginx/conf.d/default.conf
  - Name: expose
    Ports:
    - "80"
  - Name: expose
    Ports:
    - "443"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
