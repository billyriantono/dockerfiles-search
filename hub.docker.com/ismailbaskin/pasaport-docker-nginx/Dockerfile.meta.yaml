MetaArgs: null
Stages:
- BaseName: alpine:3.4
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.11.7
    Name: env
  - Env:
    - Key: LUAJIT_LIB
      Value: /usr/local/lib
    Name: env
  - Env:
    - Key: LUAJIT_INC
      Value: /usr/local/include/luajit-2.1
    Name: env
  - Key: VER_DOCKERIZE
    Name: arg
    Value: v0.2.0
  - Key: VER_NGINX_GEOIP
    Name: arg
    Value: "1.1"
  - Key: VER_NGINX_DEVEL_KIT
    Name: arg
    Value: 0.3.0
  - Key: VER_NGINX_LUA
    Name: arg
    Value: 0.10.7
  - Key: VER_LUAJIT
    Name: arg
    Value: 2.1.0-beta2
  - Key: VER_RESTY_CORE
    Name: arg
    Value: 0.1.9
  - Key: VER_LUAROCKS
    Name: arg
    Value: 2.4.2
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx-ssl-cert.patch
    - /tmp/nginx-ssl-cert.patch
  - CmdLine:
    - "CONFIG=\"\t\t--prefix=/etc/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules
      \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/var/log/nginx/error.log
      \t\t--http-log-path=/var/log/nginx/access.log \t\t--pid-path=/var/run/nginx.pid
      \t\t--lock-path=/var/run/nginx.lock \t\t--with-pcre-jit \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--user=www-data \t\t--group=www-data \t\t--with-http_realip_module \t\t--with-http_ssl_module
      \t\t--with-http_gzip_static_module \t\t--with-threads \t\t--with-stream \t\t--with-http_v2_module
      \t\t--with-ld-opt='-Wl,-rpath,$LUAJIT_LIB' \t\t--add-module=/tmp/ngx_http_geoip2_module-${VER_NGINX_GEOIP}
      \t\t--add-module=/tmp/ngx_devel_kit-${VER_NGINX_DEVEL_KIT} \t\t--add-module=/tmp/lua-nginx-module-${VER_NGINX_LUA}
      \t\" \t&& addgroup -S www-data \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G www-data www-data \t&& apk add --no-cache curl \t&& echo \"downloading packages...\"
      \t&& apk add --no-cache --virtual .build-deps         libc-dev         make
      \        openssl         openssl-dev         postgresql-dev         pcre-dev
      \        zlib-dev         linux-headers         libmaxminddb-dev         build-base
      \        unzip         luajit >/dev/null 2>&1     && cd /tmp     && curl -fSL
      https://github.com/jwilder/dockerize/releases/download/${VER_DOCKERIZE}/dockerize-linux-amd64-${VER_DOCKERIZE}.tar.gz
      -o dockerize.tar.gz >/dev/null 2>&1     && curl -fSL http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz
      -o /etc/GeoLite2-Country.mmdb.gz >/dev/null 2>&1     && curl -fSL http://luajit.org/download/LuaJIT-${VER_LUAJIT}.tar.gz
      -o LuaJIT-${VER_LUAJIT}.tar.gz >/dev/null 2>&1     && curl -fSL https://github.com/leev/ngx_http_geoip2_module/archive/${VER_NGINX_GEOIP}.tar.gz
      -o ngx_http_geoip2_module.tar.gz >/dev/null 2>&1     && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v${VER_NGINX_DEVEL_KIT}.tar.gz
      -o ngx_devel_kit.tar.gz >/dev/null 2>&1     && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v${VER_NGINX_LUA}.tar.gz
      -o lua-nginx-module.tar.gz >/dev/null 2>&1     && curl -fSL https://github.com/openresty/lua-resty-core/archive/v${VER_RESTY_CORE}.tar.gz
      -o lua-resty-core.tar.gz >/dev/null 2>&1     && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz >/dev/null 2>&1     && curl -fSL http://luarocks.github.io/luarocks/releases/luarocks-${VER_LUAROCKS}.tar.gz
      -o luarocks.tar.gz >/dev/null 2>&1     && wait     && gzip -d /etc/GeoLite2-Country.mmdb.gz
      \    && tar -C /usr/local/bin -xzvf dockerize.tar.gz && rm dockerize.tar.gz
      \    && tar -xzvf LuaJIT-${VER_LUAJIT}.tar.gz && rm LuaJIT-${VER_LUAJIT}.tar.gz
      \    && tar -xzvf ngx_http_geoip2_module.tar.gz && rm ngx_http_geoip2_module.tar.gz
      \    && tar -xzvf ngx_devel_kit.tar.gz && rm ngx_devel_kit.tar.gz     && tar
      -xzvf lua-nginx-module.tar.gz && rm lua-nginx-module.tar.gz     && tar -xzvf
      lua-resty-core.tar.gz && rm lua-resty-core.tar.gz     && tar -xzvf nginx.tar.gz
      && rm nginx.tar.gz     && tar -xzvf luarocks.tar.gz && rm luarocks.tar.gz     &&
      mv /tmp/lua-resty-core-${VER_RESTY_CORE} /etc/lua-resty-core \t&& cd /tmp/LuaJIT-${VER_LUAJIT}
      \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& ln -sf /usr/local/bin/luajit-${VER_LUAJIT}
      /usr/local/bin/luajit \t&& ln -sf /usr/local/bin/luajit-${VER_LUAJIT} /usr/local/bin/lua
      \t&& cd /tmp/luarocks-${VER_LUAROCKS} \t&& ./configure --with-lua-include=${LUAJIT_INC}
      \t&& make -j$(getconf _NPROCESSORS_ONLN) build \t&& make install \t&& luarocks
      install pgmoon \t&& luarocks install lbase64 \t&& cd /tmp/nginx-$NGINX_VERSION
      \t&& sed -i -e \"s/\\\"Server: nginx\\\" CRLF/\\\"Server: pasaport.io\\\" CRLF/g\"
      \        -e \"s/\\\"Server: \\\" NGINX_VER CRLF/\\\"Server: pasaport.io\\\"
      NGINX_VER CRLF/g\"         src/http/ngx_http_header_filter_module.c \t&& sed
      -i -e \t    \"s/static const u_char nginx\\[5\\] = \\\"\\\\\\\\x84\\\\\\\\xaa\\\\\\\\x63\\\\\\\\x55\\\\\\\\xe7\\\";/static
      const u_char nginx\\[\\] = \\{0x0B, \\'p\\', \\'a\\', \\'s\\', \\'a\\', \\'p\\',
      \\'o\\', \\'r\\', \\'t\\', \\'\\.\\', \\'i\\', \\'o\\'\\};/g\" \t    src/http/v2/ngx_http_v2_filter_module.c
      \t&& patch -p1 < /tmp/nginx-ssl-cert.patch && rm /tmp/nginx-ssl-cert.patch \t&&
      ./configure $CONFIG \t&& make build \t&& make install \t&& rm -rf /etc/nginx/html/
      \t&& mkdir /etc/nginx/conf.d/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install
      -m644 html/index.html /usr/share/nginx/html/ \t&& install -m644 html/50x.html
      /usr/share/nginx/html/ \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules
      \t&& strip /usr/sbin/nginx* \t&& rm -rf \t    /tmp/ngx_http_geoip2_module-${VER_NGINX_GEOIP}
      \t    /tmp/ngx_devel_kit-${VER_NGINX_DEVEL_KIT} \t    /tmp/lua-nginx-module-${VER_NGINX_LUA}
      \t    /tmp/LuaJIT-${VER_LUAJIT} \t    /tmp/nginx-${NGINX_VERSION} \t    /tmp/luarocks-${VER_LUAROCKS}
      \t&& apk add --no-cache --virtual .gettext gettext \t&& mv /usr/bin/envsubst
      /tmp/ \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'
      \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\"
      \t&& mv /tmp/envsubst /usr/local/bin/     && mkdir /ssl \t&& openssl req -subj
      '/CN=localhost/O=s/C=TR' -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509
      -keyout /ssl/server.key -out /ssl/server.crt \t&& apk add --no-cache --virtual
      .nginx-rundeps $runDeps \t&& apk del .build-deps \t&& apk del .gettext \t&&
      mkdir -p /tmp/nginx/cache \t&& mkdir -p /tmp/nginx/tmp \t&& ln -sf /dev/stdout
      /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - default.tmpl
    - /etc/nginx/conf.d/default.tmpl
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - snippet/*
    - /etc/nginx/snippet/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - create_gzip_files.sh
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dhparam.pem
    - /ssl/dhparam.pem
  - Name: expose
    Ports:
    - "443"
    - "80"
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.4
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.4
