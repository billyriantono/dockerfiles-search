MetaArgs:
- DefaultValue: '"3.10"'
  Key: ALPINE_VERSION
  ProvidedValue: null
  Value: '"3.10"'
Stages:
- BaseName: alpine:${ALPINE_VERSION}
  Commands:
  - Key: ALPINE_VERSION
    Name: arg
    Value: null
  - Key: NGINX_VERSION
    Name: arg
    Value: '"1.16.1"'
  - Key: GEOIP2_VERSION
    Name: arg
    Value: '"3.2"'
  - Key: HEADERS_MORE_VERSION
    Name: arg
    Value: '"0.33"'
  - Key: CONFIG_OPTIONS
    Name: arg
    Value: "\"\t--prefix=/usr/local/nginx \t--sbin-path=/usr/sbin/nginx \t--modules-path=/usr/lib/nginx/modules
      \t--conf-path=/usr/local/nginx/conf/nginx.conf \t--error-log-path=/var/log/nginx/error.log
      \t--http-log-path=/var/log/nginx/access.log \t--pid-path=/var/run/nginx.pid
      \t--lock-path=/var/run/nginx.lock \t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t--user=nginx \t--group=nginx \t--with-http_ssl_module \t--with-http_realip_module
      \t--with-http_addition_module \t--with-http_sub_module \t--with-http_gunzip_module
      \t--with-http_gzip_static_module \t--with-http_stub_status_module \t--with-http_auth_request_module
      \t--with-http_image_filter_module=dynamic \t--with-threads \t--with-stream \t--with-stream_ssl_module
      \t--with-stream_ssl_preread_module \t--with-stream_realip_module \t--with-compat
      \t--with-file-aio \t--with-http_v2_module \t\""
  - Labels:
    - Key: nginx.image
      Value: '"alpine:$ALPINE_VERSION"'
    - Key: nginx.version
      Value: '"$NGINX_VERSION"'
    - Key: nginx.geoip2.version
      Value: '"$GEOIP2_VERSION"'
    - Key: nginx.headers_more.version
      Value: '"$HEADERS_MORE_VERSION"'
    - Key: nginx.config.options
      Value: '"$CONFIG_OPTIONS"'
    Name: label
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& set -x \t&& apk update
      \t&& addgroup -S nginx \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx \t&& apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev
      \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl
      \t\tgnupg1 \t\tgd-dev \t\tlibmaxminddb-dev \t&& curl -sfSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -sfSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found='';
      \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80
      \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching
      GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options
      timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z
      \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit
      1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\"
      nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz
      \t&& rm nginx.tar.gz \t&& curl -sfSL https://github.com/leev/ngx_http_geoip2_module/archive/$GEOIP2_VERSION.tar.gz
      -o geoip2.tar.gz \t&& tar -zxC /usr/src -f geoip2.tar.gz \t&& rm geoip2.tar.gz
      \        && curl -sfSL https://github.com/openresty/headers-more-nginx-module/archive/v$HEADERS_MORE_VERSION.tar.gz
      -o headers.tar.gz         && tar -zxC /usr/src -f headers.tar.gz \t&& rm headers.tar.gz
      \t&& cd /usr/src/nginx-$NGINX_VERSION \t&& ./configure $CONFIG_OPTIONS \t\t--add-module=/usr/src/ngx_http_geoip2_module-$GEOIP2_VERSION
      \t\t--add-module=/usr/src/headers-more-nginx-module-$HEADERS_MORE_VERSION \t&&
      make -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& mkdir /etc/nginx/
      \t&& strip /usr/sbin/nginx* \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf
      /usr/src/nginx-$NGINX_VERSION \t&& rm -rf /usr/src/ngx_http_geoip2_module-$GEOIP2_VERSION
      \t&& rm -rf /usr/src/headers-more-nginx-module-$HEADERS_MORE_VERSION \t\t&&
      apk add --no-cache --virtual .gettext gettext \t&& mv /usr/bin/envsubst /tmp/
      \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx
      /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| tr ',' '\\n' \t\t\t| sort
      -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print
      \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps
      \t&& apk del .build-deps \t&& apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/
      \t\t&& apk add --no-cache tzdata \t\t&& ln -sf /dev/stdout /var/log/nginx/access.log
      \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - -c
    - /etc/nginx/nginx.conf
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:${ALPINE_VERSION}
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:${ALPINE_VERSION}
