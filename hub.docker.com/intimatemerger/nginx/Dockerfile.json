{
  "MetaArgs": [
    {
      "Key": "ALPINE_VERSION",
      "DefaultValue": "\"3.10\"",
      "ProvidedValue": null,
      "Value": "\"3.10\""
    }
  ],
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:${ALPINE_VERSION}",
      "SourceCode": "FROM alpine:${ALPINE_VERSION}",
      "Platform": "",
      "From": {
        "Image": "alpine:${ALPINE_VERSION}"
      },
      "Commands": [
        {
          "Key": "ALPINE_VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "NGINX_VERSION",
          "Name": "arg",
          "Value": "\"1.16.1\""
        },
        {
          "Key": "GEOIP2_VERSION",
          "Name": "arg",
          "Value": "\"3.2\""
        },
        {
          "Key": "HEADERS_MORE_VERSION",
          "Name": "arg",
          "Value": "\"0.33\""
        },
        {
          "Key": "CONFIG_OPTIONS",
          "Name": "arg",
          "Value": "\"\t--prefix=/usr/local/nginx \t--sbin-path=/usr/sbin/nginx \t--modules-path=/usr/lib/nginx/modules \t--conf-path=/usr/local/nginx/conf/nginx.conf \t--error-log-path=/var/log/nginx/error.log \t--http-log-path=/var/log/nginx/access.log \t--pid-path=/var/run/nginx.pid \t--lock-path=/var/run/nginx.lock \t--http-client-body-temp-path=/var/cache/nginx/client_temp \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \t--user=nginx \t--group=nginx \t--with-http_ssl_module \t--with-http_realip_module \t--with-http_addition_module \t--with-http_sub_module \t--with-http_gunzip_module \t--with-http_gzip_static_module \t--with-http_stub_status_module \t--with-http_auth_request_module \t--with-http_image_filter_module=dynamic \t--with-threads \t--with-stream \t--with-stream_ssl_module \t--with-stream_ssl_preread_module \t--with-stream_realip_module \t--with-compat \t--with-file-aio \t--with-http_v2_module \t\""
        },
        {
          "Labels": [
            {
              "Key": "nginx.image",
              "Value": "\"alpine:$ALPINE_VERSION\""
            },
            {
              "Key": "nginx.version",
              "Value": "\"$NGINX_VERSION\""
            },
            {
              "Key": "nginx.geoip2.version",
              "Value": "\"$GEOIP2_VERSION\""
            },
            {
              "Key": "nginx.headers_more.version",
              "Value": "\"$HEADERS_MORE_VERSION\""
            },
            {
              "Key": "nginx.config.options",
              "Value": "\"$CONFIG_OPTIONS\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t\u0026\u0026 set -x \t\u0026\u0026 apk update \t\u0026\u0026 addgroup -S nginx \t\u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg1 \t\tgd-dev \t\tlibmaxminddb-dev \t\u0026\u0026 curl -sfSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t\u0026\u0026 curl -sfSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 found=''; \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \u0026\u0026 found=yes \u0026\u0026 break; \tdone; \ttest -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $GPG_KEYS\" \u0026\u0026 exit 1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t\u0026\u0026 rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \t\u0026\u0026 mkdir -p /usr/src \t\u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz \t\u0026\u0026 rm nginx.tar.gz \t\u0026\u0026 curl -sfSL https://github.com/leev/ngx_http_geoip2_module/archive/$GEOIP2_VERSION.tar.gz -o geoip2.tar.gz \t\u0026\u0026 tar -zxC /usr/src -f geoip2.tar.gz \t\u0026\u0026 rm geoip2.tar.gz         \u0026\u0026 curl -sfSL https://github.com/openresty/headers-more-nginx-module/archive/v$HEADERS_MORE_VERSION.tar.gz -o headers.tar.gz         \u0026\u0026 tar -zxC /usr/src -f headers.tar.gz \t\u0026\u0026 rm headers.tar.gz \t\u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION \t\u0026\u0026 ./configure $CONFIG_OPTIONS \t\t--add-module=/usr/src/ngx_http_geoip2_module-$GEOIP2_VERSION \t\t--add-module=/usr/src/headers-more-nginx-module-$HEADERS_MORE_VERSION \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 make install \t\u0026\u0026 mkdir /etc/nginx/ \t\u0026\u0026 strip /usr/sbin/nginx* \t\u0026\u0026 strip /usr/lib/nginx/modules/*.so \t\u0026\u0026 rm -rf /usr/src/nginx-$NGINX_VERSION \t\u0026\u0026 rm -rf /usr/src/ngx_http_geoip2_module-$GEOIP2_VERSION \t\u0026\u0026 rm -rf /usr/src/headers-more-nginx-module-$HEADERS_MORE_VERSION \t\t\u0026\u0026 apk add --no-cache --virtual .gettext gettext \t\u0026\u0026 mv /usr/bin/envsubst /tmp/ \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t\u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps \t\u0026\u0026 apk del .build-deps \t\u0026\u0026 apk del .gettext \t\u0026\u0026 mv /tmp/envsubst /usr/local/bin/ \t\t\u0026\u0026 apk add --no-cache tzdata \t\t\u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log \t\u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "-c",
            "/etc/nginx/nginx.conf"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}