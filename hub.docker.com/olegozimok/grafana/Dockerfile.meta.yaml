MetaArgs: null
Stages:
- BaseName: golang:1.11
  Commands:
  - Name: workdir
    Path: $GOPATH/src/github.com/grafana/grafana
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Gopkg.toml
    - Gopkg.lock
    - ./
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - vendor
    - vendor
  - Key: DEP_ENSURE
    Name: arg
    Value: '""'
  - CmdLine:
    - if [ ! -z "${DEP_ENSURE}" ]; then       go get -u github.com/golang/dep/cmd/dep
      &&       dep ensure --vendor-only;     fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - pkg
    - pkg
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - build.go
    - build.go
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - package.json
    - package.json
  - CmdLine:
    - go run build.go build
    Name: run
    PrependShell: true
  From:
    Image: golang:1.11
  Name: ""
  Platform: ""
  SourceCode: FROM golang:1.11
- BaseName: node:8
  Commands:
  - Name: workdir
    Path: /usr/src/app/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - package.json
    - yarn.lock
    - ./
  - CmdLine:
    - yarn install --pure-lockfile --no-progress
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Gruntfile.js
    - tsconfig.json
    - tslint.json
    - ./
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - public
    - public
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - scripts
    - scripts
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - emails
    - emails
  - Env:
    - Key: NODE_ENV
      Value: production
    Name: env
  - CmdLine:
    - ./node_modules/.bin/grunt build
    Name: run
    PrependShell: true
  From:
    Image: node:8
  Name: ""
  Platform: ""
  SourceCode: FROM node:8
- BaseName: debian:stretch-slim
  Commands:
  - Key: GF_UID
    Name: arg
    Value: '"472"'
  - Key: GF_GID
    Name: arg
    Value: '"472"'
  - Env:
    - Key: PATH
      Value: /usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    - Key: GF_PATHS_CONFIG
      Value: '"/etc/grafana/grafana.ini"'
    - Key: GF_PATHS_DATA
      Value: '"/var/lib/grafana"'
    - Key: GF_PATHS_HOME
      Value: '"/usr/share/grafana"'
    - Key: GF_PATHS_LOGS
      Value: '"/var/log/grafana"'
    - Key: GF_PATHS_PLUGINS
      Value: '"/var/lib/grafana/plugins"'
    - Key: GF_PATHS_PROVISIONING
      Value: '"/etc/grafana/provisioning"'
    Name: env
  - Name: workdir
    Path: $GF_PATHS_HOME
  - CmdLine:
    - apt-get update && apt-get install -qq -y libfontconfig ca-certificates &&     apt-get
      autoremove -y &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - conf
    - ./conf
  - CmdLine:
    - mkdir -p "$GF_PATHS_HOME/.aws" &&     groupadd -r -g $GF_GID grafana &&     useradd
      -r -u $GF_UID -g grafana grafana &&     mkdir -p "$GF_PATHS_PROVISIONING/datasources"              "$GF_PATHS_PROVISIONING/dashboards"              "$GF_PATHS_LOGS"              "$GF_PATHS_PLUGINS"              "$GF_PATHS_DATA"
      &&     cp "$GF_PATHS_HOME/conf/sample.ini" "$GF_PATHS_CONFIG" &&     cp "$GF_PATHS_HOME/conf/ldap.toml"
      /etc/grafana/ldap.toml &&     chown -R grafana:grafana "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws"
      "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" &&     chmod 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws"
      "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS"
    Name: run
    PrependShell: true
  - Chown: ""
    From: "0"
    Name: copy
    SourcesAndDest:
    - /go/src/github.com/grafana/grafana/bin/linux-amd64/grafana-server
    - /go/src/github.com/grafana/grafana/bin/linux-amd64/grafana-cli
    - ./bin/
  - Chown: ""
    From: "1"
    Name: copy
    SourcesAndDest:
    - /usr/src/app/public
    - ./public
  - Chown: ""
    From: "1"
    Name: copy
    SourcesAndDest:
    - /usr/src/app/tools
    - ./tools
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - tools/phantomjs/render.js
    - ./tools/phantomjs/render.js
  - Name: expose
    Ports:
    - "3000"
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./packaging/docker/run.sh
    - /run.sh
  - Name: user
    User: grafana
  - CmdLine:
    - /run.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: debian:stretch-slim
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch-slim
