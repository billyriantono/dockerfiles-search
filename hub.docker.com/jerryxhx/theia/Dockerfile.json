{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install curl xz-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 for key in   94AE36675C464D64BAFA68DD7434390BDBE9B9C5   FD3A5288F042B6850C66B31F09FE44734EB7990E   71DCFD284A79C3B38668286BC97EC7A07EDE3FC1   DD8F2338BAE7501E3DD5AC78C273792F7D83545D   C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8   B9AE9905FFD7803F25714661B63B535A4C206CA9   56730D5401028683275BD23C23EFEFE93C4CFFFE   77984A986EBC2AA786BC0F66B01FBB92821C587A   ; do   gpg --keyserver pool.sks-keyservers.net --recv-keys \"$key\" ||   gpg --keyserver pgp.mit.edu --recv-keys \"$key\" ||   gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ||   gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ;   done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "8.12.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ARCH= \u0026\u0026 dpkgArch=\"$(dpkg --print-architecture)\"   \u0026\u0026 case \"${dpkgArch##*-}\" in   amd64) ARCH='x64';;   ppc64el) ARCH='ppc64le';;   s390x) ARCH='s390x';;   arm64) ARCH='arm64';;   armhf) ARCH='armv7l';;   i386) ARCH='x86';;   *) echo \"unsupported architecture\"; exit 1 ;;   esac   \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\"   \u0026\u0026 curl -SLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"   \u0026\u0026 gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc   \u0026\u0026 grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz\\$\" SHASUMS256.txt | sha256sum -c -   \u0026\u0026 tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner   \u0026\u0026 rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt   \u0026\u0026 ln -s /usr/local/bin/node /usr/local/bin/nodejs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "YARN_VERSION",
              "Value": "1.9.4"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 for key in   6A010C5166006599AA17F08146C2130DFD2497F5   ; do   gpg --keyserver pool.sks-keyservers.net --recv-keys \"$key\" ||   gpg --keyserver pgp.mit.edu --recv-keys \"$key\" ||   gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ||   gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ;   done   \u0026\u0026 curl -fSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\"   \u0026\u0026 curl -fSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\"   \u0026\u0026 gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz   \u0026\u0026 mkdir -p /opt/yarn   \u0026\u0026 tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1   \u0026\u0026 ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn   \u0026\u0026 ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg   \u0026\u0026 rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install git sudo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_VERSION",
              "Value": "1.9.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/usr/local/go-packages"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GO_ROOT",
              "Value": "/usr/local/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/usr/local/go/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:${GOPATH}/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -sS https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -C /usr/local -xzf -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/ramya-rao-a/go-outline"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/acroca/go-symbols"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/nsf/gocode"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/rogpeppe/godef"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v golang.org/x/tools/cmd/godoc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/zmb3/gogetdoc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v golang.org/x/lint/golint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/fatih/gomodifytags"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/uudashr/gopkgs/cmd/gopkgs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v golang.org/x/tools/cmd/gorename"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v sourcegraph.com/sqs/goreturns"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/cweill/gotests/..."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v golang.org/x/tools/cmd/guru"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/josharian/impl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/haya14busa/goplay/cmd/goplay"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:webupd8team/java   \u0026\u0026 apt-get update   \u0026\u0026 apt-get install -y oracle-java8-installer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main\" \u003e /etc/apt/sources.list.d/llvm.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y clang-tools-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/bin/clangd-8 /usr/bin/clangd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y python python-pip \u0026\u0026 pip install python-language-server;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install php curl php-cli php-mbstring unzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -s -o composer-setup.php https://getcomposer.org/installer     \u0026\u0026 php composer-setup.php --install-dir=/usr/local/bin --filename=composer     \u0026\u0026 rm composer-setup.php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install ruby ruby-dev zlib1g-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "gem install solargraph"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "adduser --disabled-password --gecos '' theia \u0026\u0026   adduser theia sudo \u0026\u0026   echo '%sudo ALL=(ALL) NOPASSWD:ALL' \u003e\u003e /etc/sudoers;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod g+rw /home \u0026\u0026   mkdir -p /home/project \u0026\u0026   chown -R theia:theia /home/theia \u0026\u0026   chown -R theia:theia /home/project;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y python build-essential"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "theia"
        },
        {
          "Key": "version",
          "Name": "arg",
          "Value": "latest"
        },
        {
          "Name": "workdir",
          "Path": "/home/theia"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "$version.package.json",
            "./package.json"
          ]
        },
        {
          "Key": "GITHUB_TOKEN",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "yarn --cache-folder ./ycache \u0026\u0026 rm -rf ./ycache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yarn theia build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "3000"
          ]
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/home/project"
          ]
        },
        {
          "CmdLine": [
            "yarn",
            "theia",
            "start",
            "/home/project",
            "--hostname=0.0.0.0"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}