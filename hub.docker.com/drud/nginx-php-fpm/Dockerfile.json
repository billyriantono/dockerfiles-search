{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nginx:mainline-alpine",
      "SourceCode": "FROM nginx:mainline-alpine",
      "Platform": "",
      "From": {
        "Image": "nginx:mainline-alpine"
      },
      "Commands": [
        {
          "Maintainer": "ngineered \u003csupport@ngineered.co.uk\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "php_conf",
              "Value": "/etc/php5/php.ini"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "fpm_conf",
              "Value": "/etc/php5/php-fpm.conf"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DRUSH_VERSION",
              "Value": "8.1.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAILHOG_VERSION",
              "Value": "0.2.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/root/.composer/vendor/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk update \u0026\u0026 apk add --no-cache bash less     openssh-client     wget     supervisor     curl     git     alpine-sdk     php5-fpm     php5-pdo     mysql-client     libcap     php5-pdo_mysql     php5-mysql     php5-mysqli     php5-mcrypt     php5-ctype     php5-zlib     php5-gd     php5-intl     php5-memcache     php5-sqlite3     php5-pgsql     php5-xml     php5-xsl     php5-curl     php5-openssl     php5-iconv     php5-json     php5-soap     php5-phar     php5-dom \u0026\u0026     curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \u0026\u0026     mkdir -p /etc/nginx \u0026\u0026     mkdir -p /var/www/app \u0026\u0026     mkdir -p /run/nginx \u0026\u0026     mkdir -p /var/log/supervisor \u0026\u0026     curl -fsSL -o /usr/local/bin/drush \"https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar\" \u0026\u0026     chmod +x /usr/local/bin/drush"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone http://github.com/bmc/daemonize.git     \u0026\u0026 cd daemonize     \u0026\u0026 sh configure     \u0026\u0026 make     \u0026\u0026 make install     \u0026\u0026 rm -rf /daemonize"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "files",
            "/"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /etc/nginx/sites-enabled \u0026\u0026     ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf \u0026\u0026     touch /var/log/php-fpm.log \u0026\u0026     chown nginx:nginx /var/log/php-fpm.log \u0026\u0026     chown -R nginx:nginx /var/run \u0026\u0026     touch /var/log/nginx/access.log \u0026\u0026     touch /var/log/nginx/error.log \u0026\u0026     chown -R nginx:nginx /var/log/nginx/ \u0026\u0026     mkdir -p /var/lib/nginx/logs \u0026\u0026     touch /var/lib/nginx/logs/error.log \u0026\u0026     chown nginx:nginx /var/lib/nginx/logs/error.log \u0026\u0026     chmod ugo+x /usr/local/bin/* \u0026\u0026     chmod ugo+x /start.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" ${php_conf} \u0026\u0026     sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g\" ${php_conf} \u0026\u0026     sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" ${php_conf} \u0026\u0026     sed -i -e \"s/variables_order = \\\"GPCS\\\"/variables_order = \\\"EGPCS\\\"/g\" ${php_conf} \u0026\u0026     sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/pm.max_children = 4/pm.max_children = 4/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/pm.max_requests = 500/pm.max_requests = 200/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/user = nobody/user = nginx/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/group = nobody/group = nginx/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/;listen.owner = nobody/listen.owner = nginx/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/;listen.group = nobody/listen.group = nginx/g\" ${fpm_conf} \u0026\u0026     sed -i -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" ${fpm_conf} \u0026\u0026    ln -s /etc/php5/php.ini /etc/php5/conf.d/php.ini \u0026\u0026     find /etc/php5/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod 755 /start.sh \u0026\u0026     setcap cap_net_bind_service=ep /usr/sbin/nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/mailhog/MailHog/releases/download/v${MAILHOG_VERSION}/MailHog_linux_amd64",
            "/usr/bin/mailhog"
          ]
        },
        {
          "CmdLine": [
            "chmod ugo+x /usr/bin/mailhog"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80",
            "8025"
          ]
        },
        {
          "CmdLine": [
            "/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}