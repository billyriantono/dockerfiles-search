MetaArgs: null
Stages:
- BaseName: nuxeoapbcatalog/nuxeo-apb-base:1.0
  Commands:
  - Labels:
    - Key: '"com.redhat.apb.spec"'
      Value: '""'
    Name: label
  - Chown: ""
    Name: add
    SourcesAndDest:
    - playbooks
    - /opt/apb/actions
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .
    - /opt/ansible/roles/nuxeo-elasticsearch-apb
  - CmdLine:
    - chmod -R g=u /opt/{ansible,apb}
    Name: run
    PrependShell: true
  - Name: user
    User: apb
  From:
    Image: nuxeoapbcatalog/nuxeo-apb-base:1.0
  Name: ""
  Platform: ""
  SourceCode: FROM nuxeoapbcatalog/nuxeo-apb-base:1.0
