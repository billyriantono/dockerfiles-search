{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.1-fpm",
      "SourceCode": "FROM php:7.1-fpm",
      "Platform": "",
      "From": {
        "Image": "php:7.1-fpm"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"krzysztof@kardasz.eu\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "APP_ENV",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "APP_ENV",
              "Value": "${APP_ENV:-prod}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get -y install curl git telnet vim autoconf file g++ gcc libc-dev make pkg-config re2c wget ca-certificates supervisor apt-transport-https software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL http://nginx.org/keys/nginx_signing.key | apt-key add - \u0026\u0026     add-apt-repository -s \"deb http://nginx.org/packages/debian/ $(lsb_release -cs) nginx\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get -y install nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://deb.nodesource.com/setup_7.x | bash - \u0026\u0026     apt-get install -y nodejs;     npm install -g gulp bower;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         libpq-dev         libbz2-dev         libzip-dev         libcurl4-openssl-dev         libicu-dev         libxslt-dev         libtidy-dev         libxml2-dev         libmcrypt-dev         libmemcached-dev         libssl-dev         libsqlite3-dev         libfreetype6-dev         libjpeg62-turbo-dev         libpng12-dev         libwebp-dev         librabbitmq-dev     \u0026\u0026 docker-php-ext-configure gd --with-freetype-dir=/usr/include/         --with-jpeg-dir=/usr/include/         --with-png-dir=/usr/include/     \u0026\u0026 docker-php-ext-install -j$(nproc) gd     \u0026\u0026 docker-php-ext-install bcmath     \u0026\u0026 docker-php-ext-install bz2     \u0026\u0026 docker-php-ext-install ctype     \u0026\u0026 docker-php-ext-install curl     \u0026\u0026 docker-php-ext-install dom     \u0026\u0026 docker-php-ext-install exif     \u0026\u0026 docker-php-ext-install fileinfo     \u0026\u0026 docker-php-ext-install gettext     \u0026\u0026 docker-php-ext-install hash     \u0026\u0026 docker-php-ext-install iconv     \u0026\u0026 docker-php-ext-install intl     \u0026\u0026 docker-php-ext-install mbstring     \u0026\u0026 docker-php-ext-install mcrypt     \u0026\u0026 docker-php-ext-install mysqli     \u0026\u0026 docker-php-ext-install opcache     \u0026\u0026 docker-php-ext-install pcntl     \u0026\u0026 docker-php-ext-install pgsql     \u0026\u0026 docker-php-ext-install pdo     \u0026\u0026 docker-php-ext-install pdo_mysql     \u0026\u0026 docker-php-ext-install pdo_pgsql     \u0026\u0026 docker-php-ext-install pdo_sqlite     \u0026\u0026 docker-php-ext-install soap     \u0026\u0026 docker-php-ext-install sockets     \u0026\u0026 docker-php-ext-install simplexml     \u0026\u0026 docker-php-ext-install tidy     \u0026\u0026 docker-php-ext-install xml     \u0026\u0026 CFLAGS=\"-I/usr/src/php\" docker-php-ext-install xmlreader     \u0026\u0026 docker-php-ext-install xmlrpc     \u0026\u0026 docker-php-ext-install xmlwriter     \u0026\u0026 docker-php-ext-install xsl     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pecl install zip-1.13.5 \u0026\u0026     docker-php-ext-enable zip \u0026\u0026     pecl install mongodb \u0026\u0026     docker-php-ext-enable mongodb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | /usr/local/bin/php -- --install-dir=/usr/local/bin --filename=composer \u0026\u0026     wget -O /usr/local/bin/apigen http://apigen.org/apigen.phar \u0026\u0026 chmod +x /usr/local/bin/apigen \u0026\u0026     wget -O /usr/local/bin/phpdoc http://phpdoc.org/phpDocumentor.phar \u0026\u0026 chmod +x /usr/local/bin/phpdoc \u0026\u0026     wget -O /usr/local/bin/phpunit https://phar.phpunit.de/phpunit.phar \u0026\u0026 chmod +x /usr/local/bin/phpunit \u0026\u0026     curl -LsS http://symfony.com/installer \u003e /usr/local/bin/symfony \u0026\u0026 chmod a+x /usr/local/bin/symfony \u0026\u0026     wget -O /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \u0026\u0026 chmod +x /usr/local/bin/wp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/nginx/apps.d;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./etc",
            "/etc"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./usr",
            "/usr"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord",
            "-c",
            "/etc/supervisord.conf"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}