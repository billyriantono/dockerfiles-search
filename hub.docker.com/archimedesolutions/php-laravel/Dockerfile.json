{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "modsecurity-build",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as modsecurity-build",
      "Platform": "",
      "As": "modsecurity-build",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Salvatore BROSIO \u003ctools@archimedesolutions.it\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qq \u0026\u0026     apt install -qq -y --no-install-recommends --no-install-suggests         apt-transport-https         apt-utils         autoconf         automake         build-essential         ca-certificates         dirmngr         git         libcurl4-openssl-dev         libgd-dev         libgeoip-dev         liblmdb-dev         libpcre++-dev         libssl-dev         libtool         libxml2-dev         libyajl-dev         lsb-release         lua5.2-dev         openssl         pkgconf         software-properties-common         tree         wget         zlib1g-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity \u0026\u0026     cd ModSecurity \u0026\u0026     git submodule init \u0026\u0026     git submodule update \u0026\u0026     ./build.sh \u0026\u0026     ./configure \u0026\u0026     make \u0026\u0026     make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026     wget http://nginx.org/download/nginx-1.17.1.tar.gz \u0026\u0026     tar zxvf nginx-1.17.1.tar.gz \u0026\u0026     cd nginx-1.17.1 \u0026\u0026     ./configure --with-compat --add-dynamic-module=../ModSecurity-nginx \u0026\u0026     make modules"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh",
            "/bin/wait-for-it.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/just-containers/s6-overlay/releases/download/v1.22.1.0/s6-overlay-amd64.tar.gz",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "chmod 700 /bin/wait-for-it.sh \u0026\u0026     tar xzf /tmp/s6-overlay-amd64.tar.gz -C / \u0026\u0026     rm /tmp/s6-overlay-amd64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/init"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "7.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/root/composer/vendor/binf"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -qq --no-install-recommends --no-install-suggests     ca-certificates     software-properties-common     curl     gpg-agent     lsb-release     inetutils-syslogd \u0026\u0026     echo \"deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\" | tee /etc/apt/sources.list.d/nginx.list \u0026\u0026     curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add - \u0026\u0026     LC_ALL=C.UTF-8 apt-add-repository ppa:ondrej/php -y \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y     cron     git     gnupg2     libgeoip-dev     libyajl-dev     lua5.2-dev     locales     nginx     php${PHP_VERSION}-apcu     php${PHP_VERSION}-bcmath     php${PHP_VERSION}-cli     php${PHP_VERSION}-curl     php${PHP_VERSION}-fpm     php${PHP_VERSION}-gd     php${PHP_VERSION}-intl     php${PHP_VERSION}-json     php${PHP_VERSION}-mysql     php${PHP_VERSION}-mbstring     php${PHP_VERSION}-opcache     php${PHP_VERSION}-soap     php${PHP_VERSION}-sqlite3     php${PHP_VERSION}-xml     php${PHP_VERSION}-zip     php-ast     php-gettext     unzip     htop     mc     nano     zip \u0026\u0026     apt-get autoremove -y \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026     locale-gen it_IT.UTF-8 \u0026\u0026     dpkg-reconfigure locales \u0026\u0026     mkdir -p /run/php \u0026\u0026 chmod -R 750 /run/php \u0026\u0026     sed -i 's|.*expose_php =.*|expose_php = Off|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*max_input_vars =.*|max_input_vars = 3000|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*memory_limit =.*|memory_limit = 256M|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*post_max_size =.*|post_max_size = 256M|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*upload_max_filesize =.*|upload_max_filesize = 256M|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*variables_order =.*|variables_order = GPCS|g' /etc/php/${PHP_VERSION}/fpm/php.ini \u0026\u0026     sed -i 's|.*error_log =.*|error_log=/proc/self/fd/2|g' /etc/php/${PHP_VERSION}/fpm/php-fpm.conf \u0026\u0026     sed -i 's|.*listen.mode =.*|listen.mode = 0660|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*pm.max_children =.*|pm.max_children = 150|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*pm.start_servers =.*|pm.start_servers = 10|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*pm.min_spare_servers =.*|pm.min_spare_servers = 4|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*pm.max_spare_servers =.*|pm.max_spare_servers = 24|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*pm.max_requests =.*|pm.max_requests = 1000|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*listen =.*|listen=9000|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*access.log =.*|access.log=/proc/self/fd/2|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*user\\s*=.*|user = www-data|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*group\\s*=.*|group = www-data|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i \"s|.*catch_workers_output\\s*=\\s*yes|catch_workers_output = no|g\" /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     sed -i 's|.*clear_env\\s*=.*|clear_env = no|g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \u0026\u0026     curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "modsecurity-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/modsecurity/",
            "/usr/local/modsecurity/"
          ]
        },
        {
          "Chown": "",
          "From": "modsecurity-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/opt/nginx-1.17.1/objs/ngx_http_modsecurity_module.so",
            "/etc/nginx/modules"
          ]
        },
        {
          "Chown": "",
          "From": "modsecurity-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/opt/ModSecurity/modsecurity.conf-recommended",
            "/etc/nginx/modsecurity.d/modsecurity.conf"
          ]
        },
        {
          "Chown": "",
          "From": "modsecurity-build",
          "Name": "copy",
          "SourcesAndDest": [
            "/opt/ModSecurity/unicode.mapping",
            "/etc/nginx/modsecurity.d"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "cron/laravel",
            "/tmp/laravel"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/nginx.modsec.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/start-cron.sh",
            "/etc/services.d/cron/run"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/start-env-cron.sh",
            "/etc/services.d/env/run"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/start-fpm.sh",
            "/etc/services.d/php_fpm/run"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/start-nginx.sh",
            "/etc/services.d/nginx/run"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/start-queue.sh",
            "/etc/services.d/queue/run"
          ]
        },
        {
          "CmdLine": [
            "ln -s $(composer config --global home) /root/composer \u0026\u0026     usermod -u 1000 www-data \u0026\u0026     crontab -l -u www-data | cat - /tmp/laravel | crontab -u www-data - \u0026\u0026     rm /tmp/laravel \u0026\u0026     chmod 750 /etc/services.d/cron/run \u0026\u0026     chmod 750 /etc/services.d/env/run \u0026\u0026     chmod 750 /etc/services.d/php_fpm/run \u0026\u0026     chmod 750 /etc/services.d/nginx/run \u0026\u0026     chmod 750 /etc/services.d/queue/run \u0026\u0026     chmod 644 /etc/nginx/modules/ngx_http_modsecurity_module.so \u0026\u0026     echo \"include /etc/nginx/modsecurity.d/modsecurity.conf\" \u003e\u003e /etc/nginx/modsecurity.d/include.conf \u0026\u0026     cd /tmp \u0026\u0026     git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git \u0026\u0026     touch /etc/nginx/modsecurity.d/crs.conf \u0026\u0026     cat /tmp/owasp-modsecurity-crs/crs-setup.conf.example /tmp/owasp-modsecurity-crs/rules/*.conf \u003e\u003e /etc/nginx/modsecurity.d/crs.conf \u0026\u0026     cp /tmp/owasp-modsecurity-crs/rules/*.data /etc/nginx/modsecurity.d/ \u0026\u0026     rm -rf /tmp/owasp-modsecurity-crs \u0026\u0026     echo \"include /etc/nginx/modsecurity.d/crs.conf\" \u003e\u003e /etc/nginx/modsecurity.d/include.conf \u0026\u0026     sed -i -e 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' /etc/nginx/modsecurity.d/modsecurity.conf"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}