{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ocrd/core",
      "SourceCode": "FROM ocrd/core",
      "Platform": "",
      "From": {
        "Image": "ocrd/core"
      },
      "Commands": [
        {
          "Maintainer": "OCR-D",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "PREFIX",
              "Value": "/usr/local"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "VIRTUAL_ENV",
              "Value": "$PREFIX"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y apt-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "OCRD_MODULES",
          "Name": "arg",
          "Value": "\"core dinglehopper format-converters ocrd_calamari ocrd_cis ocrd_im6convert ocrd_keraslm ocrd_olena ocrd_segment ocrd_tesserocr tesseract tesserocr cor-asv-ann workflow-configuration\""
        },
        {
          "Env": [
            {
              "Key": "OCRD_MODULES",
              "Value": "\"${OCRD_MODULES}\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "PIP_OPTIONS",
          "Name": "arg",
          "Value": "\"\""
        },
        {
          "Name": "workdir",
          "Path": "/build"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "."
          ]
        },
        {
          "Env": [
            {
              "Key": "PIP_OPTIONS",
              "Value": "\"--timeout=3000 ${PIP_OPTIONS}\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"Acquire::http::Timeout \\\"3000\\\";\" \u003e\u003e /etc/apt/apt.conf.d/99network"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Acquire::https::Timeout \\\"3000\\\";\" \u003e\u003e /etc/apt/apt.conf.d/99network"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Acquire::ftp::Timeout \\\"3000\\\";\" \u003e\u003e /etc/apt/apt.conf.d/99network"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"set -ex\" \u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"apt-get -y install automake autoconf libtool pkg-config g++\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"\u003e $PREFIX/bin/activate\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"make deps-ubuntu\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"make all\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"make fix-pip\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"apt-get -y autoremove \u0026\u0026 apt-get clean\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"if [[ '${PIP_OPTIONS}' =~ -e|--editable ]]; then make -i clean; else rm -fr /build; fi\" \u003e\u003e docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -a; bash docker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/rights=\"none\"/rights=\"read|write\"/g' /etc/ImageMagick-6/policy.xml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "teletype"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/data"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}