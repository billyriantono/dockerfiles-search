{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nipype/base:latest",
      "SourceCode": "FROM nipype/base:latest",
      "Platform": "",
      "From": {
        "Image": "nipype/base:latest"
      },
      "Commands": [
        {
          "Maintainer": "The nipype developers https://github.com/nipy/nipype",
          "Name": "maintainer"
        },
        {
          "Key": "PYTHON_VERSION_MAJOR",
          "Name": "arg",
          "Value": "3"
        },
        {
          "CmdLine": [
            "curl -sSLO https://repo.continuum.io/miniconda/Miniconda${PYTHON_VERSION_MAJOR}-4.2.12-Linux-x86_64.sh \u0026\u0026     bash Miniconda${PYTHON_VERSION_MAJOR}-4.2.12-Linux-x86_64.sh -b -p /usr/local/miniconda \u0026\u0026     rm Miniconda${PYTHON_VERSION_MAJOR}-4.2.12-Linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/miniconda/bin:$PATH"
            },
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            },
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            },
            {
              "Key": "ACCEPT_INTEL_PYTHON_EULA",
              "Value": "yes"
            },
            {
              "Key": "MKL_NUM_THREADS",
              "Value": "1"
            },
            {
              "Key": "OMP_NUM_THREADS",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "PYTHON_VERSION_MINOR",
          "Name": "arg",
          "Value": "6"
        },
        {
          "CmdLine": [
            "conda config --add channels conda-forge; sync \u0026\u0026     conda config --set always_yes yes --set changeps1 no; sync \u0026\u0026     conda install -y python=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}                      mkl                      numpy                      scipy                      scikit-learn                      matplotlib                      pandas                      libxml2                      libxslt                      traits=4.6.0                      psutil                      icu=58.1 \u0026\u0026     sync;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/\\(backend *: \\).*$/\\1Agg/g' /usr/local/miniconda/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages/matplotlib/mpl-data/matplotlibrc \u0026\u0026     python -c \"from matplotlib import font_manager\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/files/run_*",
            "/usr/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/bin/run_*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nipype/external/fsl_imglob.py",
            "/usr/bin/fsl_imglob.py"
          ]
        },
        {
          "CmdLine": [
            "rm -rf ${FSLDIR}/bin/imglob \u0026\u0026     chmod +x /usr/bin/fsl_imglob.py \u0026\u0026     ln -s /usr/bin/fsl_imglob.py ${FSLDIR}/bin/imglob"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "requirements.txt"
          ]
        },
        {
          "CmdLine": [
            "pip install -r requirements.txt \u0026\u0026     rm -rf ~/.cache/pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/src/nipype"
          ]
        },
        {
          "CmdLine": [
            "cd /src/nipype \u0026\u0026     pip install -e .[all] \u0026\u0026     rm -rf ~/.cache/pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/work/"
        },
        {
          "Key": "BUILD_DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VCS_REF",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Labels": [
            {
              "Key": "org.label-schema.build-date",
              "Value": "$BUILD_DATE"
            },
            {
              "Key": "org.label-schema.name",
              "Value": "\"NIPYPE\""
            },
            {
              "Key": "org.label-schema.description",
              "Value": "\"NIPYPE - Neuroimaging in Python: Pipelines and Interfaces\""
            },
            {
              "Key": "org.label-schema.url",
              "Value": "\"http://nipype.readthedocs.io\""
            },
            {
              "Key": "org.label-schema.vcs-ref",
              "Value": "$VCS_REF"
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/nipy/nipype\""
            },
            {
              "Key": "org.label-schema.version",
              "Value": "$VERSION"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"1.0\""
            }
          ],
          "Name": "label"
        }
      ]
    }
  ]
}