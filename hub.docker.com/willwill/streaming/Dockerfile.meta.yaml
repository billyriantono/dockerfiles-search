MetaArgs: null
Stages:
- BaseName: alpine:3.6
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.13.4
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.1.8
    Name: env
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t\t--prefix=/etc/nginx
      \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf
      \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log
      \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t--user=nginx \t\t--group=nginx \t\t--with-http_realip_module \t\t--with-http_flv_module
      \t\t--with-http_mp4_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module
      \t\t--with-http_secure_link_module \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module
      \t\t--with-threads \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module
      \t\t--add-module=/push-stream \t\" \t&& addgroup -S nginx \t&& adduser -D -S
      -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&& apk add --no-cache
      --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake \t\tlibressl-dev \t\tpcre-dev
      \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg \t\tgit \t&& curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& git clone --single-branch --depth 1 https://github.com/wandenberg/nginx-push-stream-module.git
      /push-stream/ \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found=''; \tfor server
      in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80
      \t\tpgp.mit.edu \t; do \t\techo \"Fetching GPG key $GPG_KEYS from $server\";
      \t\tgpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\"
      && found=yes && break; \tdone; \ttest -z \"$found\" && echo >&2 \"error: failed
      to fetch GPG key $GPG_KEYS\" && exit 1; \tgpg --batch --verify nginx.tar.gz.asc
      nginx.tar.gz \t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc; \tmkdir -p /usr/src
      \t&& tar -zxC /usr/src -f nginx.tar.gz \t&& rm nginx.tar.gz \t&& cd /usr/src/nginx-$NGINX_VERSION
      \t&& ./configure $CONFIG --with-debug \t&& make -j$(getconf _NPROCESSORS_ONLN)
      \t&& mv objs/nginx objs/nginx-debug \t&& ./configure $CONFIG \t&& make -j$(getconf
      _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/ \t&& mkdir
      /etc/nginx/conf.d/ \t&& mkdir -p /usr/share/nginx/html/ \t&& install -m644 html/index.html
      /usr/share/nginx/html/ \t&& install -m644 html/50x.html /usr/share/nginx/html/
      \t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t&& ln -s ../../usr/lib/nginx/modules
      /etc/nginx/modules \t&& strip /usr/sbin/nginx* \t&& rm -rf /usr/src/nginx-$NGINX_VERSION
      \t&& rm -rf /push-stream/ \t\t&& apk add --no-cache --virtual .gettext gettext
      \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner
      /usr/sbin/nginx /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print
      \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t|
      sort -u \t)\" \t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \t&&
      apk del .build-deps \t&& apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/
      \t\t&& ln -sf /dev/stdout /var/log/nginx/access.log \t&& ln -sf /dev/stderr
      /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - Env:
    - Key: PHPIZE_DEPS
      Value: "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake
        \t\tpcre-dev \t\tpkgconf \t\tre2c"
    Name: env
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
    Name: env
  - Env:
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    Name: env
  - Env:
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E
    Name: env
  - CmdLine:
    - "set -xe; \tmkdir -p $PHP_INI_DIR/conf.d \t&& apk add --no-cache --virtual .persistent-deps
      \t\tca-certificates \t\tcurl \t\ttar \t\txz \t&& set -x \t&& addgroup -g 82
      -S www-data \t&& adduser -u 82 -D -S -G www-data www-data \t\t&& apk add --no-cache
      --virtual .fetch-deps \t\tgnupg \t\tlibressl \t; \t\tmkdir -p /usr/src; \tcd
      /usr/src; \t\twget -O php.tar.xz \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\";
      \t\twget -O php.tar.xz.asc \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\";
      \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --keyserver
      ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --verify
      php.tar.xz.asc php.tar.xz; \trm -rf \"$GNUPGHOME\"; \t\tapk del .fetch-deps
      \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils
      \t\tcurl-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibressl-dev \t\tsqlite-dev
      \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\"
      \t&& mkdir -p /usr/src/php/ \t&& tar -Jxf /usr/src/php.tar.xz -C /usr/src/php/
      --strip-components=1 \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t--disable-cgi \t\t--enable-mbstring
      \t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t--with-pcre-regex=/usr
      \t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& make install \t&&
      { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all
      '{}' + || true; } \t&& make clean \t&& cd / \t&& rm -rf /usr/src/php/ /usr/src/php.tar.xz*
      \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t|
      awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t|
      xargs -r apk info --installed \t\t\t| sort -u \t)\" \t&& apk add --no-cache
      --virtual .php-rundeps $runDeps \t\t&& apk del .build-deps \t&& sed 's!=NONE/!=!g'
      /usr/local/etc/php-fpm.conf.default | tee /usr/local/etc/php-fpm.conf > /dev/null"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /var/www/html
  - CmdLine:
    - "mv /var/www/html/docker/nginx.conf /etc/nginx/nginx.conf \t&& mv /var/www/html/docker/run.sh
      / \t&& chmod +x /run.sh \t&& mv /var/www/html/docker/config.php /var/www/html/config.php
      \t&& rm -r /var/www/html/docker /var/www/html/Dockerfile \t&& cp /usr/local/etc/php-fpm.d/www.conf.default
      /usr/local/etc/php-fpm.d/www.conf \t&& sed -i 's!127\\.0\\.0\\.1:9000!/var/run/php-fpm.sock!g'
      /usr/local/etc/php-fpm.d/www.conf \t&& echo -e 'env[FB_ID] = $FB_ID\\nenv[FB_SECRET]
      = $FB_SECRET' >> /usr/local/etc/php-fpm.d/www.conf"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/sh
    - /run.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.6
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.6
