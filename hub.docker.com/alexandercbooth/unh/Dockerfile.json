{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:latest",
      "SourceCode": "FROM debian:latest",
      "Platform": "",
      "From": {
        "Image": "debian:latest"
      },
      "Commands": [
        {
          "Maintainer": "Alexander Booth \u003calexander.c.booth@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends --fix-missing     git     vim     jed     wget     curl     build-essential     python-dev     ca-certificates     bzip2     unzip     libsm6     pandoc     texlive-latex-base     sudo     sqlite3     nodejs     npm     locales     libxrender1     libapparmor1     libedit2     libcurl4-openssl-dev     libssl1.0.0     libssl-dev     psmisc     sudo     \u0026\u0026 VER=$(wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver)     \u0026\u0026 wget -q http://download2.rstudio.org/rstudio-server-${VER}-amd64.deb     \u0026\u0026 dpkg -i rstudio-server-${VER}-amd64.deb     \u0026\u0026 rm rstudio-server-*-amd64.deb     \u0026\u0026 ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/local/bin     \u0026\u0026 ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin     \u0026\u0026 wget https://github.com/jgm/pandoc-templates/archive/1.15.0.6.tar.gz     \u0026\u0026 mkdir -p /opt/pandoc/templates \u0026\u0026 tar zxf 1.15.0.6.tar.gz     \u0026\u0026 cp -r pandoc-templates*/* /opt/pandoc/templates \u0026\u0026 rm -rf pandoc-templates*     \u0026\u0026 mkdir /root/.pandoc \u0026\u0026 ln -s /opt/pandoc/templates /root/.pandoc/templates     \u0026\u0026 apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL https://get.docker.com/ | sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://github.com/krallin/tini/releases/download/v0.9.0/tini \u0026\u0026     echo \"faafbfb5b079303691a939a747d7f60591f2143164093727e870b289a44d9872 *tini\" | sha256sum -c - \u0026\u0026     mv tini /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "unh"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \u0026\u0026     mkdir -p /opt/conda \u0026\u0026     chown unh /opt/conda"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "unh"
        },
        {
          "CmdLine": [
            "mkdir /home/$NB_USER/work \u0026\u0026     mkdir /home/$NB_USER/.jupyter \u0026\u0026     mkdir /home/$NB_USER/.local \u0026\u0026     echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" \u003e /home/$NB_USER/.curlrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo 'export PATH=/opt/conda/bin:$PATH' \u003e /etc/profile.d/conda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "unh"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     mkdir -p $CONDA_DIR \u0026\u0026     wget --quiet https://repo.continuum.io/archive/Anaconda3-4.0.0-Linux-x86_64.sh \u0026\u0026     /bin/bash Anaconda3-4.0.0-Linux-x86_64.sh -f -b -p $CONDA_DIR \u0026\u0026     rm Anaconda3-4.0.0-Linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "conda install -y -c r r-essentials"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "wget -P /tmp/ https://github.com/just-containers/s6-overlay/releases/download/v1.11.0.1/s6-overlay-amd64.tar.gz   \u0026\u0026 tar xzf /tmp/s6-overlay-amd64.tar.gz -C /"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 mkdir xgboost \u0026\u0026 cd xgboost \u0026\u0026     git clone --recursive https://github.com/dmlc/xgboost.git \u0026\u0026 cd xgboost \u0026\u0026     make \u0026\u0026 cd python-package \u0026\u0026 python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install keras \u0026\u0026     pip install git+https://github.com/dnouri/nolearn.git@master#egg=nolearn==0.7.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "unh"
        },
        {
          "CmdLine": [
            "pip install gensim"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install lifelines"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install hiveplot"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda config --add channels conda-forge \u0026\u0026     conda install -y pyshp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "APACHE_SPARK_VERSION",
              "Value": "1.6.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y update \u0026\u0026     apt-get install -y --no-install-recommends openjdk-7-jre-headless \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026         wget -q http://d3kbcqa49mib13.cloudfront.net/spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz \u0026\u0026         echo \"439fe7793e0725492d3d36448adcd1db38f438dd1392bffd556b58bb9a3a2601 *spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz\" | sha256sum -c - \u0026\u0026         tar xzf spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz -C /usr/local \u0026\u0026         rm spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local \u0026\u0026 ln -s spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6 spark"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF \u0026\u0026     DISTRO=debian \u0026\u0026     CODENAME=wheezy \u0026\u0026     echo \"deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main\" \u003e /etc/apt/sources.list.d/mesosphere.list \u0026\u0026     apt-get -y update \u0026\u0026     apt-get --no-install-recommends -y --force-yes install mesos=0.22.1-1.0.debian78 \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "SPARK_HOME",
              "Value": "/usr/local/spark"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.9-src.zip"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MESOS_NATIVE_LIBRARY",
              "Value": "/usr/local/lib/libmesos.so"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_OPTS",
              "Value": "--driver-java-options=-Xms1024M --driver-java-options=-Xmx4096M --driver-java-options=-Dlog4j.logLevel=info"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install --pre toree \u0026\u0026     jupyter toree install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install git+https://github.com/minrk/findspark.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/spark/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYSPARK_PYTHON",
              "Value": "python3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install gitsome"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026     wget https://raw.githubusercontent.com/donnemartin/gitsome/master/scripts/gh_complete.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/$NB_USER/work"
        },
        {
          "CmdLine": [
            "tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/home/$NB_USER/.jupyter/"
          ]
        },
        {
          "CmdLine": [
            "chown -R $NB_USER:users /home/$NB_USER/.jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /opt/conda/bin/R /usr/local/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo unh:unh | chpasswd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     git clone https://github.com/airbnb/caravel.git \u0026\u0026     cd caravel \u0026\u0026     pip install -e ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install altair --channel conda-forge"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "unh"
        }
      ]
    }
  ]
}