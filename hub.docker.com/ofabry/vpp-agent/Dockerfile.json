{
  "MetaArgs": [
    {
      "Key": "BASE_IMG",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    }
  ],
  "Stages": [
    {
      "Name": "verify-stage",
      "BaseName": "golang",
      "SourceCode": "FROM golang as verify-stage",
      "Platform": "",
      "As": "verify-stage",
      "From": {
        "Image": "golang"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y --no-install-recommends     patch python-pip  \u0026\u0026 rm -rf /var/lib/apt/lists/*  \u0026\u0026 pip install ply"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "VPP_REPO_URL",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VPP_COMMIT",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "git clone ${VPP_REPO_URL} /opt/vpp  \u0026\u0026 cd /opt/vpp  \u0026\u0026 git checkout ${VPP_COMMIT}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts/genjsonapi.sh",
            "/opt/genjsonapi.sh"
          ]
        },
        {
          "CmdLine": [
            "/opt/genjsonapi.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/go/src/github.com/ligato/vpp-agent"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "plugins/vpp/binapi",
            "plugins/vpp/binapi"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "vendor",
            "vendor"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Makefile",
            "vpp.env",
            "./"
          ]
        },
        {
          "CmdLine": [
            "cp -r plugins/vpp/binapi /tmp/orig_binapi  \u0026\u0026 make generate-binapi  \u0026\u0026 diff -r plugins/vpp/binapi /tmp/orig_binapi"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "dev-stage",
      "BaseName": "${BASE_IMG}",
      "SourceCode": "FROM ${BASE_IMG} as dev-stage",
      "Platform": "",
      "As": "dev-stage",
      "From": {
        "Image": "${BASE_IMG}"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y --no-install-recommends     autoconf automake build-essential ca-certificates curl gdb git     inetutils-traceroute iproute2 ipsec-tools iputils-ping     libapr1 libmbedcrypto1 libmbedtls10 libmbedx509-0 libtool     make mc nano netcat python software-properties-common sudo supervisor     telnet unzip wget  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PROTOC_VERSION",
          "Name": "arg",
          "Value": "3.6.1"
        },
        {
          "Key": "PROTOC_OS_ARCH",
          "Name": "arg",
          "Value": "linux_x86_64"
        },
        {
          "CmdLine": [
            "wget -q https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip  \u0026\u0026 unzip protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip -d protoc3  \u0026\u0026 mv protoc3/bin/protoc /usr/local/bin  \u0026\u0026 mv protoc3/include/google /usr/local/include  \u0026\u0026 rm -rf protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip protoc3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /opt/vpp-agent/dev /opt/vpp-agent/plugin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/vpp-agent/dev"
        },
        {
          "Key": "VPP_REPO_URL",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VPP_COMMIT",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VPP_DEBUG_DEB",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "set -eux;     git clone \"${VPP_REPO_URL}\" vpp;     cd vpp;     git checkout \"${VPP_COMMIT}\";     sed -i -e 's/vpp vom japi/vpp/g' build-data/platforms/vpp.mk;     export UNATTENDED=y;     make install-dep dpdk-install-dev;     if [ -n \"${VPP_DEBUG_DEB}\" ]; then         make vpp_configure_args_vpp='--disable-japi' build;         make -C build-root PLATFORM=vpp TAG=vpp_debug install-deb;     else         make vpp_configure_args_vpp='--disable-japi' build-release pkg-deb;     fi;     cd build-root;     dpkg -i vpp_*.deb vpp-dev_*.deb vpp-lib_*.deb vpp-plugins_*.deb vpp-dbg_*.deb;     rm -rf .ccache /var/lib/apt/lists/*;     find . -type f -name '*.o' -exec rm -rf '{}' \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOLANG_VERSION",
              "Value": "1.11"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GOLANG_OS_ARCH",
          "Name": "arg",
          "Value": "linux-amd64"
        },
        {
          "CmdLine": [
            "wget -O go.tgz \"https://golang.org/dl/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz\"  \u0026\u0026 tar -C /usr/local -xzf go.tgz  \u0026\u0026 rm go.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\"  \u0026\u0026 chmod -R 777 \"$GOPATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/dev/etcd.conf",
            "docker/dev/kafka.conf",
            "docker/dev/govpp.conf",
            "docker/dev/vpp-plugin.conf",
            "docker/dev/linux-plugin.conf",
            "docker/dev/logs.conf",
            "./"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/dev/vpp.conf",
            "/etc/vpp/vpp.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/dev/supervisord.conf",
            "/etc/supervisord/supervisord.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker/dev/exec_vpp.sh",
            "docker/dev/exec_agent.sh",
            "docker/dev/supervisord_kill.py",
            "/usr/bin/"
          ]
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "COMMIT",
          "Name": "arg",
          "Value": null
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "$GOPATH/src/github.com/ligato/vpp-agent"
          ]
        },
        {
          "CmdLine": [
            "cd $GOPATH/src/github.com/ligato/vpp-agent  \u0026\u0026 VERSION=$VERSION COMMIT=$COMMIT make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api \u0026\u0026     /usr/bin/supervisord -c /etc/supervisord/supervisord.conf"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}