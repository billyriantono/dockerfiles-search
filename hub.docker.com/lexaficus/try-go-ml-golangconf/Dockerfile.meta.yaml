MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: TZ
      Value: Europe/Moscow
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     build-essential git python3 libopenblas-dev     libcurl4-openssl-dev
      libgtest-dev cmake wget unzip apt-transport-https     ca-certificates curl gnupg-agent
      software-properties-common && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
      | apt-key add -
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository    "deb https://apt.repos.intel.com/openvino/2019/ all main"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y     intel-openvino-dev-ubuntu18 && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/src/gtest && cmake CMakeLists.txt && make && cp *.a /usr/lib
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y     python3-dev python3-pip     libgtk2.0-dev
      pkg-config libavcodec-dev libavformat-dev libswscale-dev     libtbb2 libtbb-dev
      libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install numpy
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y libzmq3-dev && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --upgrade pip && hash -r pip && pip3 install -U jupyter jupyterlab
      && jupyter serverextension enable --py jupyterlab --sys-prefix
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_8.x | bash - &&   apt-get install
      -y nodejs &&   jupyter labextension install @yunabe/lgo_extension && jupyter
      lab clean &&   apt-get remove -y nodejs --purge && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: LC_CTYPE
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - wget https://dl.google.com/go/go1.10.8.linux-amd64.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -C /usr/local -xzf go1.10.8.linux-amd64.tar.gz
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/usr/local/go/bin:/go/bin
    Name: env
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - CmdLine:
    - mkdir -p $GOPATH
    Name: run
    PrependShell: true
  - Env:
    - Key: LGOPATH
      Value: /lgo
    Name: env
  - CmdLine:
    - mkdir -p $LGOPATH
    Name: run
    PrependShell: true
  - Key: NB_USER
    Name: arg
    Value: gopher
  - Key: NB_UID
    Name: arg
    Value: "1000"
  - Env:
    - Key: HOME
      Value: /home/${NB_USER}
    Name: env
  - CmdLine:
    - adduser --disabled-password     --gecos "Default user"     --uid ${NB_UID}     --home
      ${HOME}     ${NB_USER}
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R ${NB_USER}:${NB_USER} ${HOME} $GOPATH $LGOPATH
    Name: run
    PrependShell: true
  - Name: user
    User: ${NB_USER}
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - go get github.com/yunabe/lgo/cmd/lgo && go get -d github.com/yunabe/lgo/cmd/lgo-internal
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -u github.com/nfnt/resize gonum.org/v1/gonum/... gonum.org/v1/plot/...
      github.com/wcharczuk/go-chart
    Name: run
    PrependShell: true
  - CmdLine:
    - lgo install && lgo installpkg github.com/nfnt/resize gonum.org/v1/gonum/...
      gonum.org/v1/plot/... github.com/wcharczuk/go-chart
    Name: run
    PrependShell: true
  - CmdLine:
    - python3 $GOPATH/src/github.com/yunabe/lgo/bin/install_kernel
    Name: run
    PrependShell: true
  - CmdLine:
    - go get github.com/anthonynsimon/bild
    Name: run
    PrependShell: true
  - CmdLine:
    - lgo installpkg github.com/anthonynsimon/bild
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -u -d gocv.io/x/gocv
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-get update && apt-get install -y     unzip build-essential cmake curl git
      libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libtbb2
      libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev     && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Key: OPENCV_VERSION
    Name: arg
    Value: 4.1.0
  - Key: TMP_DIR
    Name: arg
    Value: /tmp/
  - CmdLine:
    - "mkdir ${TMP_DIR}opencv && cd ${TMP_DIR}opencv     && curl -Lo opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip
      \    && unzip -q opencv.zip \t&& curl -Lo opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip
      \t&& unzip -q opencv_contrib.zip \t&& rm opencv.zip opencv_contrib.zip"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd ${TMP_DIR}opencv/opencv-${OPENCV_VERSION} \t&& mkdir build \t&& cd build
      \t&& cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D
      WITH_INF_ENGINE=ON -D OPENCV_EXTRA_MODULES_PATH=${TMP_DIR}opencv/opencv_contrib-${OPENCV_VERSION}/modules
      -D BUILD_DOCS=OFF -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF
      -D BUILD_opencv_java=NO -D BUILD_opencv_python=NO -D BUILD_opencv_python2=NO
      -D BUILD_opencv_python3=NO -D WITH_JASPER=OFF -DOPENCV_GENERATE_PKGCONFIG=ON
      -DINF_ENGINE_LIB_DIRS=/opt/intel/openvino/inference_engine/lib/intel64 -DINF_ENGINE_INCLUDE_DIRS=/opt/intel/openvino/inference_engine/include
      .. \t&& make -j$(nproc) \t&& make preinstall && make install && make clean"
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: $LD_LIBRARY_PATH:/usr/local/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64
    Name: env
  - CmdLine:
    - cd $GOPATH/src/gocv.io/x/gocv && go run ./cmd/version/main.go && go install
      gocv.io/x/gocv
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install mxnet-mkl
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install opencv-python-headless opencv-contrib-python-headless
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install ipympl
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -t -u -v github.com/sjwhitworth/golearn
    Name: run
    PrependShell: true
  - CmdLine:
    - cd $GOPATH/src/github.com/sjwhitworth/golearn && go get -t -u -v ./...
    Name: run
    PrependShell: true
  - CmdLine:
    - go get -v -u -d gorgonia.org/gorgonia
    Name: run
    PrependShell: true
  - CmdLine:
    - go get gopkg.in/cheggaaa/pb.v1
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R ${NB_USER}:${NB_USER} $GOPATH
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install networkx test-generator
    Name: run
    PrependShell: true
  - Name: user
    User: ${NB_USER}
  - CmdLine:
    - lgo installpkg gocv.io/x/gocv github.com/sjwhitworth/golearn
    Name: run
    PrependShell: true
  - CmdLine:
    - lgo installpkg github.com/sjwhitworth/golearn/base github.com/sjwhitworth/golearn/perceptron
    Name: run
    PrependShell: true
  - CmdLine:
    - lgo installpkg gorgonia.org/gorgonia
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -r $GOPATH/src/github.com/sjwhitworth/golearn/examples/datasets ${HOME}/datasets
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -r $GOPATH/src/github.com/yunabe/lgo/examples ${HOME}/examples
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter
    - notebook
    - --ip=0.0.0.0
    - --NotebookApp.password='sha1:f7335c3fb9de:ac2bb08755692f03e9dcdc5dc000e164620605cd'
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
