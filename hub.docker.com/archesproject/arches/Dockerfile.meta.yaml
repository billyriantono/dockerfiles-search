MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Name: user
    User: root
  - Env:
    - Key: WEB_ROOT
      Value: /web_root
    Name: env
  - Env:
    - Key: DOCKER_DIR
      Value: /docker
    Name: env
  - Env:
    - Key: ARCHES_ROOT
      Value: ${WEB_ROOT}/arches
    Name: env
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - "apt-get update -y &&\tapt-get upgrade -y &&\tapt-get install -y wget \t\tbuild-essential
      \t\tlibxml2-dev \t\tlibjson0-dev \t\tlibproj-dev \t\txsltproc docbook-xsl \t\tdocbook-mathml
      \t\tlibgdal1-dev \t\tpython-setuptools \t\tpython-dev \t\tpython-software-properties
      \t\tdos2unix \t\tcurl \t\tlibpq-dev \t\tlibgeos-3.5.0 \t\topenjdk-8-jre-headless
      \t\tgit-all \t\tzlib1g-dev         clang         make         pkg-config &&\tcurl
      -sL https://deb.nodesource.com/setup_6.x | bash - &&\tapt-get install nodejs
      &&\tnpm install -g yarn &&\twget https://bootstrap.pypa.io/get-pip.py &&\tpython
      get-pip.py"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${WEB_ROOT}
  - CmdLine:
    - "pip install virtualenv==15.1.0 &&\tvirtualenv ENV &&\t. ENV/bin/activate &&\tpip
      install -U pip \tsetuptools &&\tpip install requests"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list
      &&\twget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key
      add - &&\tapt-get update -y &&\tapt-get install -y postgresql-client-9.6"
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /tmp/*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${ARCHES_ROOT}
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./package.json
    - ${ARCHES_ROOT}/package.json
  - CmdLine:
    - yarn install
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./arches/install/requirements.txt
    - ${ARCHES_ROOT}/arches/install/requirements.txt
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./arches/install/requirements_dev.txt
    - ${ARCHES_ROOT}/arches/install/requirements_dev.txt
  - CmdLine:
    - ". ${WEB_ROOT}/ENV/bin/activate &&\tpip install -r ${ARCHES_ROOT}/arches/install/requirements.txt
      &&\tpip install -r ${ARCHES_ROOT}/arches/install/requirements_dev.txt &&\tpip
      install 'gunicorn==19.7.1'"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./arches/__init__.py
    - /tmp/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - ${ARCHES_ROOT}
  - CmdLine:
    - ". ${WEB_ROOT}/ENV/bin/activate &&\tpip install -e . --no-binary :all:"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/entrypoint.sh
    - ${DOCKER_DIR}/entrypoint.sh
  - CmdLine:
    - "chmod -R 700 ${DOCKER_DIR} &&\tdos2unix ${DOCKER_DIR}/*"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/gunicorn_config.py
    - ${ARCHES_ROOT}/gunicorn_config.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/settings_local.py
    - ${ARCHES_ROOT}/arches/settings_local.py
  - CmdLine:
    - /docker/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - run_arches
    Name: cmd
    PrependShell: false
  - Name: expose
    Ports:
    - "8000"
  - Name: workdir
    Path: ${ARCHES_ROOT}
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
