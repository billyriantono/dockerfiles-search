MetaArgs: null
Stages:
- BaseName: ubuntu
  Commands:
  - Env:
    - Key: SDK_TOOLS
      Value: '"sdk-tools-linux-4333796.zip"'
    Name: env
  - Env:
    - Key: NDK_DL
      Value: '"https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip"'
    Name: env
  - Env:
    - Key: NDKVER
      Value: r17c
    Name: env
  - Env:
    - Key: NDKDIR
      Value: /ndk/
    Name: env
  - Env:
    - Key: NDKAPI
      Value: "21"
    Name: env
  - Env:
    - Key: ANDROIDAPI
      Value: "28"
    Name: env
  - Env:
    - Key: PIP
      Value: pip3
    Name: env
  - CmdLine:
    - apt update --fix-missing && apt upgrade -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y zip python3 python-pip python python3-venv python3-virtualenv
      python-virtualenv python3-pip curl wget lbzip2 bsdtar && dpkg --add-architecture
      i386 && apt update && apt install -y build-essential libstdc++6:i386 zlib1g-dev
      zlib1g:i386 openjdk-8-jdk libncurses5:i386 && apt install -y libtool automake
      autoconf unzip pkg-config git ant gradle rsync
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /sdk-install/
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /sdk-install && wget --quiet https://dl.google.com/android/repository/${SDK_TOOLS}
      &&  cd /sdk-install && unzip -q ./sdk-tools-*.zip && chmod +x ./tools//bin/sdkmanager
      &&  rm -v sdk-tools-*.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - /sdk-install/tools/bin/sdkmanager --update
    Name: run
    PrependShell: true
  - CmdLine:
    - yes | /sdk-install/tools/bin/sdkmanager "platform-tools" "platforms;android-28"
      "build-tools;28.0.3"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tmp/ndk/ && cd /tmp/ndk/ && wget --quiet ${NDK_DL} && unzip -q android-ndk*.zip
      && mv android-*/ /ndk/ && rm -v android-ndk*.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt install -y ccache
    Name: run
    PrependShell: true
  - Env:
    - Key: USE_CCACHE
      Value: "1"
    Name: env
  - Env:
    - Key: CCACHE_DIR
      Value: /ccache/contents/
    Name: env
  - Env:
    - Key: CC
      Value: ccache gcc
    Name: env
  - Env:
    - Key: CCACHE_DEBUG
      Value: "1"
    Name: env
  - Env:
    - Key: CCACHE_LOGFILE
      Value: /ccache/contents/cache.debug.txt
    Name: env
  - Name: volume
    Volumes:
    - /ccache/
  - CmdLine:
    - if [ -x /sdk-install ]; then chmod a+x /sdk-install/tools/bin/*; fi
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} install -U pip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y libffi-dev libssl-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - $PIP install -U Cython
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y cmake
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y nano vim tree
    Name: run
    PrependShell: true
  - CmdLine:
    - apt update && apt install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt install -y psmisc bash sudo
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/echo -e '\nBASH_ENV="~/.additional_env"\n' >> /etc/environment
    Name: run
    PrependShell: true
  - Env:
    - Key: BASH_ENV
      Value: '"~/.additional_env"'
    Name: env
  - CmdLine:
    - mkdir -p /home/userhome/
    Name: run
    PrependShell: true
  - Env:
    - Key: HOME
      Value: /home/userhome
    Name: env
  - Env:
    - Key: BUILDUSERNAME
      Value: root
    Name: env
  - Name: volume
    Volumes:
    - /home/userhome/workspace/
  - Name: volume
    Volumes:
    - /home/userhome/output
  - Name: workdir
    Path: /home/userhome
  - CmdLine:
    - '$PIP install --user -U ''buildozer'' ''https://github.com/kivy/python-for-android/archive/master.zip''
      #  # p4a build 63768e71-3198-48f7-aa59-bf38dabb2e68'
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tmp/test-app/ && cd /tmp/test-app && git clone https://github.com/kivy/python-for-android/
      .
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -R /tmp/test-app/testapps/testapp_keyboard/ /home/userhome/testapp-sdl2-keyboard/
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -R /tmp/test-app/testapps/testapp_flask/ /home/userhome/testapp-webview-flask/
    Name: run
    PrependShell: true
  - CmdLine:
    - cp -R /tmp/test-app/testapps/testapp_nogui/ /home/userhome/testapp-service_only-nogui/
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'bash' > /tmp/launchcmd.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/echo -e '#!/usr/bin/python3\nimport json\nimport os\nprint("echo \"\"")\nprint("echo
      \"  *** WELCOME to p4a-build-spaces ***\"\\n")\nprint("echo \"\"\\n")\nprint("echo
      \"To build a kivy demo app, use this command:\"")\nprint("echo \"\"\\n")\ninit_file
      = ""\nif os.environ["PIP"] == "pip2":\n    demoapp_line = "echo \"$ cd ~/testapp-sdl2-keyboard
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --requirements=kivy,python2 --private .\"\\n"\n    print(demoapp_line)\n    init_file
      += "shopt -s expand_aliases\\n"\n    init_file += "alias testbuild=\"cd ~/testapp-sdl2-keyboard
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --requirements=kivy,python2 --private . && cp *.apk ~/output\"\\n"\n    init_file
      += "alias testbuild_webview=\"cd ~/testapp-webview-flask && p4a apk --arch=armeabi-v7a
      --name test --package com.example.test --version 1 --bootstrap webview --requirements=python2,flask
      --private . && cp *.apk ~/output\"\\n"\n    init_file += "alias testbuild_service_only=\"cd
      ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a --name test --package
      com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python2
      --private . && cp *.apk ~/output\"\\n"\nelse:\n    demoapp_line = "echo \"$
      cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package
      com.example.test --version 1 --requirements=kivy,python3 --private .\"\\n"\n    print(demoapp_line)\n    init_file
      += "shopt -s expand_aliases\\n"\n    init_file += "alias testbuild=\"cd ~/testapp-sdl2-keyboard
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --requirements=kivy,python3 --private . && cp *.apk ~/output\"\\n"\n    init_file
      += "alias testbuild_webview=\"cd ~/testapp-webview-flask && p4a apk --arch=armeabi-v7a
      --name test --package com.example.test --version 1 --bootstrap webview --requirements=python3,flask
      --private . && cp *.apk ~/output\"\\n"\n    init_file += "alias testbuild_service_only=\"cd
      ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a --name test --package
      com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python3
      --private . && cp *.apk ~/output\"\\n"\nprint("echo \"\"\\n")\nprint("echo \"...
      or use the shortcut alias \\`testbuild\\`!\"\\n")\nprint("echo \"\"\\n")\nwith
      open("/tmp/launchcmd.txt", "r") as f:\n    import shlex\n    args = shlex.split(f.read().strip())\n    print("CMD=()")\n    i
      = -1\n    for arg in args:\n        i += 1\n        print("CMD[" + str(i) +
      "]=" + shlex.quote(arg))\nvars = ["ANDROIDAP='$ANDROIDAPI'",\n    "ANDROIDNDKVER='$NDKVER'",\n    "NDKAPI='$NDKAPI'",\n    "HOME=/home/userhome",\n    "GRADLE_OPTS=\"-Xms1724m
      -Xmx5048m -Dorg.gradle.jvmargs='"'"'-Xms1724m -Xmx5048m'"'"'\"",\n    "JAVA_OPTS=\"-Xms1724m
      -Xmx5048m\"",\n    "TESTPATH=\"$PATH:/home/userhome/.local/bin\"",\n    "PATH=\"$PATH:/home/userhome/.local/bin\"",\n    "ANDROIDSDK=/sdk-install/
      ANDROIDNDK=\"'$NDKDIR'\"",\n    ]\nwith open(os.path.expanduser("~/.pam_environment"),
      "a", encoding="utf-8") as f1:\n    f1.write("\\n" + "\\n".join([\n        var.partition("=")[0]
      + " DEFAULT=" +\n        var.partition("=")[2] for var in vars]))\nwith open(os.path.expanduser("~/.bash_profile"),
      "a", encoding="utf-8") as f2:\n    f2.write("\\n" + init_file + "\\n")\n    f2.write("\\n"
      + "\\nexport ".join(vars) + "\\n")\nwith open(os.path.expanduser("~/.profile"),
      "a", encoding="utf-8") as f2:\n    f2.write("\\n" + "\\nexport ".join(vars)
      + "\\n")\nwith open(os.path.expanduser("~/.bashrc"), "a", encoding="utf-8")
      as f2:\n    f2.write("\\n" + init_file + "\\n")\n    f2.write("\\n" + "\\nexport
      ".join(vars) + "\\n")\nwith open(os.path.expanduser("~/.additional_env"), "a",
      encoding="utf-8") as f3:\n    f3.write("\\n" + "\\nexport ".join(vars) + "\\n")'
      > /tmp/cmdline.py
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/echo -e '#!/bin/sh\npython3 /tmp/cmdline.py > /tmp/launch-prepare.sh\nsource
      /tmp/launch-prepare.sh\nexec -- ${CMD[@]}' > /tmp/launch.sh
    Name: run
    PrependShell: true
  From:
    Image: ubuntu
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu
