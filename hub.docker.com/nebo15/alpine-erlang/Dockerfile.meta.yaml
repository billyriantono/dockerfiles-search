MetaArgs: null
Stages:
- BaseName: alpine:3.10.2
  Commands:
  - Maintainer: 'Nebo #15 <support@nebo15.com>'
    Name: maintainer
  - Env:
    - Key: REFRESHED_AT
      Value: "2019-10-12"
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    - Key: HOME
      Value: /opt/app/
    - Key: TERM
      Value: xterm
    - Key: OTP_VERSION
      Value: 22.1.3
    - Key: OTP_DOWNLOAD_SHA256
      Value: 53a828c1199a41cb54bd3bc6c2c49af977a8834e702c030a5ea34013a3fcacdd
    Name: env
  - Name: workdir
    Path: /tmp/erlang-build
  - CmdLine:
    - set -xe &&     echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/main" >>
      /etc/apk/repositories &&     apk add --no-cache --update apk-tools musl ca-certificates
      tini
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -xe &&     OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\"
      &&     mkdir -p ${HOME} &&     adduser -s /bin/sh -u 1001 -G root -h ${HOME}
      -S -D default &&     chown -R 1001:0 ${HOME} &&     apk add --no-cache --update
      --virtual .fetch-deps curl &&     apk add --no-cache --update --virtual .build-deps
      \      build-base       dpkg-dev dpkg       pcre       openssl-dev       ncurses-dev
      \      zlib-dev       gcc g++ libc-dev       linux-headers       perl-dev       make
      \      autoconf       unixodbc-dev       lksctp-tools-dev       tar &&     curl
      -fSL -o otp-src.tar.gz \"${OTP_DOWNLOAD_URL}\" &&     echo \"$OTP_DOWNLOAD_SHA256
      \ otp-src.tar.gz\" | sha256sum -c - &&     export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\"
      &&     mkdir -vp $ERL_TOP &&     tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1
      &&     rm otp-src.tar.gz &&     ( cd $ERL_TOP &&       export CPPFlAGS=\"-D_BSD_SOURCE
      $CPPFLAGS\" &&       export gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      &&       ./otp_build autoconf &&       ./configure         --build=\"$gnuArch\"
      \        --prefix=/usr/local         --sysconfdir=/etc         --mandir=/usr/share/man
      \        --infodir=/usr/share/info         --without-javac         --without-jinterface
      \        --without-wx         --without-debugger         --without-observer
      \        --without-cosEvent         --without-cosEventDomain         --without-cosFileTransfer
      \        --without-cosNotification         --without-cosProperty         --without-cosTime
      \        --without-cosTransactions         --without-dialyzer         --without-et
      \        --without-gs         --without-ic         --without-megaco         --without-orber
      \        --without-percept         --without-odbc         --enable-kernel-poll
      \        --enable-threads         --enable-shared-zlib         --enable-dynamic-ssl-lib
      \        --enable-ssl=dynamic-ssl-lib         --enable-sctp         --enable-hipe
      \        --enable-dirty-schedulers &&       make -j$(getconf _NPROCESSORS_ONLN)
      &&       make install ) &&     rm -rf $ERL_TOP &&     find /usr/local -regex
      '/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)'
      | xargs rm -rf &&     rm -rf /usr/local/lib/erlang/lib/*test*       /usr/local/lib/erlang/usr
      \      /usr/local/lib/erlang/misc       /usr/local/lib/erlang/erts*/lib/lib*.a
      \      /usr/local/lib/erlang/erts*/lib/internal &&     scanelf --nobanner -E
      ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all &&     scanelf
      --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded
      &&     runDeps=\"$(   \t\tscanelf --needed --nobanner --format '%n#p' --recursive
      /usr/local   \t\t\t| tr ',' '\\n'   \t\t\t| sort -u   \t\t\t| awk 'system(\"[
      -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }'   \t)\"
      &&     apk add --virtual .erlang-rundeps $runDeps lksctp-tools &&     apk del
      .fetch-deps .build-deps &&     rm -rf /var/cache/apk/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - update-ca-certificates --fresh
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - /sbin/tini
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - erl
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.10.2
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.10.2
