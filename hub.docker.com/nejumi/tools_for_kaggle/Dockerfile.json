{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Maintainer": "nejumi \u003cdr_jingles@mac.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y software-properties-common \u0026\u0026     add-apt-repository ppa:git-core/ppa \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y git build-essential cmake \u0026\u0026     git --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y curl wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git vim mercurial subversion cmake libboost-dev libboost-system-dev libboost-filesystem-dev gcc g++"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/OpenCL/vendors \u0026\u0026 echo \"libnvidia-opencl.so.1\" \u003e /etc/OpenCL/vendors/nvidia.icd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TINI_VERSION",
              "Value": "v0.14.0"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini",
            "/tini"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y wget bzip2 ca-certificates \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh \u0026\u0026     /bin/bash Anaconda3-5.2.0-Linux-x86_64.sh -b -p /opt/conda \u0026\u0026     rm Anaconda3-5.2.0-Linux-x86_64.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     rm /opt/conda/lib/libstdc++* \u0026\u0026 rm /opt/conda/lib/libgomp.* \u0026\u0026     ln -s /usr/lib/x86_64-linux-gnu/libgomp.so.1 /opt/conda/lib/libgomp.so.1 \u0026\u0026     ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/conda/lib/libstdc++.so.6"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 mkdir lightgbm \u0026\u0026 cd lightgbm \u0026\u0026 git clone --recursive https://github.com/Microsoft/LightGBM \u0026\u0026 cd LightGBM \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. \u0026\u0026  make OPENCL_HEADERS=/usr/local/cuda-8.0/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-8.0/targets/x86_64-linux/lib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/src/lightgbm/LightGBM:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/bin/bash -c \"cd /usr/local/src/lightgbm/LightGBM/python-package \u0026\u0026 python setup.py install --precompile\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 git clone --recursive https://github.com/dmlc/xgboost \u0026\u0026     cd xgboost \u0026\u0026 mkdir build \u0026\u0026 cd build \u0026\u0026 cmake .. -DPLUGIN_UPDATER_GPU=ON \u0026\u0026 make -j4 \u0026\u0026     cd ../python-package \u0026\u0026 python3 setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 pip --no-cache-dir install -I -U tensorflow-gpu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install keras"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 pip install catboost kaggle umap-learn tqdm nltk hdbscan spacy category_encoders gensim optuna cupy #TO DO: catboost-GPU is to be installed."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m spacy download en"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 pip install torch torchvision"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/src \u0026\u0026 pip install git+https://github.com/hyperopt/hyperopt.git"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}