MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - CmdLine:
    - "apt-get update   && apt-get install -q --no-install-recommends -y \tautoconf
      \tautomake \tautotools-dev \tbc \tbsdmainutils \tbuild-essential \tclang \tcurl
      \tdirmngr \tgettext \tgit \tgpg \tgpg-agent \tjq \tlibboost-all-dev \twget \tlibcurl4-openssl-dev
      \tlibev-dev \tlibevent-dev \tlibgmp-dev \tlibjansson-dev \tlibsecp256k1-dev
      \tlibsodium-dev \tlibsqlite3-dev \tlibssl-dev \tlibtool \tlibzmq3-dev \tminiupnpc
      \tnet-tools \topenjdk-11-jdk \tpkg-config \tpython \tpython3 \tpython3-mako
      \tpython3-pip \tpython3-setuptools \tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Key: BITCOIN_VERSION
    Name: arg
    Value: 0.17.1
  - Env:
    - Key: BITCOIN_TARBALL
      Value: bitcoin-$BITCOIN_VERSION-x86_64-linux-gnu.tar.gz
    Name: env
  - Env:
    - Key: BITCOIN_URL
      Value: https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_TARBALL
    Name: env
  - Env:
    - Key: BITCOIN_ASC_URL
      Value: https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc
    Name: env
  - Env:
    - Key: BITCOIN_PGP_KEY
      Value: 01EA5486DE18A882D4C2684590C8019E36C2E964
    Name: env
  - Env:
    - Key: MVN_VERSION
      Value: 3.6.2
    Name: env
  - Env:
    - Key: GO_VERSION
      Value: 1.12.7
    Name: env
  - CmdLine:
    - cd /tmp     && wget -qO $BITCOIN_TARBALL "$BITCOIN_URL"     && gpg --keyserver
      hkp://keyserver.ubuntu.com:80 --recv-keys "$BITCOIN_PGP_KEY"     && wget -qO
      bitcoin.asc "$BITCOIN_ASC_URL"     && gpg --verify bitcoin.asc     && grep $BITCOIN_TARBALL
      bitcoin.asc | tee SHA256SUMS.asc     && sha256sum -c SHA256SUMS.asc     && BD=bitcoin-$BITCOIN_VERSION/bin     &&
      tar -xzvf $BITCOIN_TARBALL     && cp bitcoin-$BITCOIN_VERSION/bin/bitcoin* /usr/bin/     &&
      rm -rf $BITCOIN_TARBALL bitcoin-$BITCOIN_VERSION
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp     && wget -qO mvn.tar.gz https://www-us.apache.org/dist/maven/maven-3/${MVN_VERSION}/binaries/apache-maven-${MVN_VERSION}-bin.tar.gz     &&
      tar -xzf mvn.tar.gz     && rm mvn.tar.gz     && mv apache-maven-${MVN_VERSION}
      /usr/local/maven     && ln -s /usr/local/maven/bin/mvn /usr/local/bin
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp     && wget -q https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz     &&
      tar -xf go${GO_VERSION}.linux-amd64.tar.gz     && mv go /usr/local     && rm
      go${GO_VERSION}.linux-amd64.tar.gz     && ln -s /usr/local/go/bin/go /usr/bin/
    Name: run
    PrependShell: true
  - Env:
    - Key: GOROOT
      Value: /usr/local/go
    Name: env
  - Name: volume
    Volumes:
    - /root/lightning-integration/reports
  - Name: volume
    Volumes:
    - /root/lightning-integration/output
  - Name: workdir
    Path: /root/lightning-integration
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - /root/lightning-integration/requirements.txt
  - CmdLine:
    - ln -sf /usr/bin/python3 /usr/bin/python   && ln -sf /usr/bin/pip3 /usr/bin/pip   &&
      pip install -r /root/lightning-integration/requirements.txt
    Name: run
    PrependShell: true
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: TEST_DEBUG
      Value: "0"
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /root/lightning-integration/
  - CmdLine:
    - make
    - update
    - clients
    - test
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
