{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stretch-slim",
      "SourceCode": "FROM debian:stretch-slim",
      "Platform": "",
      "From": {
        "Image": "debian:stretch-slim"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \t\u0026\u0026 apt-get upgrade -y \t\u0026\u0026 apt-get install -y --no-install-recommends --no-install-suggests \t\t\t\t\t\t\tautoconf \t\t\t\t\t\t\tca-certificates \t\t\t\t\t\t\tcurl \t\t\t\t\t\t\tgit \t\t\t\t\t\t\tmake \t\t\t\t\t\t\tpatch \t\t\t\t\t\t\tpython \t\t\t\t\t\t\tqt5-qmake \t\t\t\t\t\t\tqt5-default \t\t\t\t\t\t\tqtbase5-dev-tools \t\t\t\t\t\t\tunzip \t\t\t\t\t\t\twget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'deb http://httpredir.debian.org/debian/ jessie main contrib non-free' \u003e\u003e /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \t\u0026\u0026 apt-get install -y --no-install-recommends --no-install-suggests \t\t\t\t\t\t\tg++=4:4.9.2-2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "QTDIR",
              "Value": "/opt/qt57"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PKG_CONFIG_PATH",
              "Value": "$QTDIR/lib/pkgconfig:$PKG_CONFIG_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "QT5_PATH",
              "Value": "\"/opt/qt57/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$QT5_PATH:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "useradd --uid 1000 -G sudo --create-home tester \u0026\u0026 mkdir /home/tester/bin \u0026\u0026 chown -R tester:tester /home/tester/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "bin",
            "/home/tester/bin"
          ]
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/home/tester/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "touch dev_mode_disabled"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "ccache.patch",
            "./ccache.patch"
          ]
        },
        {
          "Env": [
            {
              "Key": "CCACHE_VER",
              "Value": "3.3.3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://github.com/ccache/ccache/archive/v${CCACHE_VER}.tar.gz \t\u0026\u0026 tar -xf v${CCACHE_VER}.tar.gz --strip-components=1 \t\u0026\u0026 rm v${CCACHE_VER}.tar.gz \t\u0026\u0026 ./autogen.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "patch -p1 -i ccache.patch \t\u0026\u0026 ./configure \t\u0026\u0026 make \t\u0026\u0026 make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/lib/ccache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf ../../bin/ccache /usr/local/lib/ccache/gcc \t\u0026\u0026 ln -sf ../../bin/ccache /usr/local/lib/ccache/g++ \t\u0026\u0026 ln -sf ../../bin/ccache /usr/local/lib/ccache/cc \t\u0026\u0026 ln -sf ../../bin/ccache /usr/local/lib/ccache/c++"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/lib/ccache:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/home/tester/opt"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "googletest-1.8.0.zip",
            "/home/tester/opt/googletest-1.8.0.zip"
          ]
        },
        {
          "CmdLine": [
            "unzip -q googletest-1.8.0.zip -x \"*/docs/*\" -x \"*/msvc/*\" -x \"*/samples/*\" \t\u0026\u0026 rm googletest-1.8.0.zip \u0026\u0026 mv googletest-release-1.8.0 gtest \t\u0026\u0026 apt-get purge -y --auto-remove unzip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GTEST_ROOT",
              "Value": "/home/tester/opt/gtest/googletest"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GTEST_DIR",
              "Value": "${GTEST_ROOT}"
            },
            {
              "Key": "GMOCK_DIR",
              "Value": "/home/tester/opt/gtest/googlemock"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GTEST_INCLUDE_DIR",
              "Value": "${GTEST_ROOT}/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GMOCK_INCLUDE_DIR",
              "Value": "/home/tester/opt/gtest/googlemock/include"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GTEST_MAIN_LIBRARY",
              "Value": "/home/tester/opt/gtest/libgmock.a"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GTEST_LIBRARY",
              "Value": "/home/tester/opt/gtest/libgmock.a"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} -pthread -c ${GTEST_DIR}/src/gtest-all.cc \t\u0026\u0026 g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} -pthread -c ${GMOCK_DIR}/src/gmock-all.cc \t\u0026\u0026 ar -rv /home/tester/opt/gtest/libgmock.a gtest-all.o gmock-all.o \t\u0026\u0026 cp /home/tester/opt/gtest/libgmock.a ${GMOCK_DIR}/ \t\u0026\u0026 rm -rf /home/tester/opt/*/*.o"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "gmock_tokenize_public_slots.patch",
            "/home/tester/opt/gtest/googlemock/scripts/generator/cpp/tokenize.patch"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/tester/opt/gtest/googlemock/scripts/generator/cpp"
        },
        {
          "CmdLine": [
            "patch -p1 \u003c ./tokenize.patch"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "find /opt \\( -name \"doc\" -o -name \"examples\" \\) -type d -print0 | xargs -0 --no-run-if-empty rm -rf \t\u0026\u0026 find /usr/share \\( -name fonts -o -name \"[hH]elp\" -o -name man -o -name \"[lL]ocale\" \\) -type d -print0 | xargs -0 --no-run-if-empty rm -rf \t\u0026\u0026 find /var/log -name \"*\" -type f -print0 | xargs -0 --no-run-if-empty rm -f -- \t\u0026\u0026 find /var/cache -name \"*\" -type f -print0 | xargs -0 --no-run-if-empty rm -f -- \t\u0026\u0026 apt-get clean \t\u0026\u0026 apt-get purge -y patch \t\u0026\u0026 apt-get -y autoclean \t\u0026\u0026 apt-get -y autoremove  \t\u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026 rm -rf /var/lib/dpkg/info/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GCC_COLORS",
              "Value": "'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "tester"
        },
        {
          "CmdLine": [
            "ccache --set-config=cache_dir=/cache --max-size=10G"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/dublin"
        }
      ]
    }
  ]
}