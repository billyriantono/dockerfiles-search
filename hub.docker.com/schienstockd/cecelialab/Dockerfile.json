{
  "MetaArgs": [
    {
      "Key": "BASE_CONTAINER",
      "DefaultValue": "tensorflow/tensorflow:1.8.0-gpu-py3",
      "ProvidedValue": null,
      "Value": "tensorflow/tensorflow:1.8.0-gpu-py3"
    }
  ],
  "Stages": [
    {
      "Name": "",
      "BaseName": "$BASE_CONTAINER",
      "SourceCode": "FROM $BASE_CONTAINER",
      "Platform": "",
      "From": {
        "Image": "$BASE_CONTAINER"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Dominik Schienstock \u003cschienstockd@student.unimelb.edu.au\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/$NB_USER"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "NB_USER",
          "Name": "arg",
          "Value": "\"rotund\""
        },
        {
          "Key": "NB_UID",
          "Name": "arg",
          "Value": "\"1000\""
        },
        {
          "Key": "NB_GID",
          "Name": "arg",
          "Value": "\"100\""
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     wget     bzip2     ca-certificates     sudo     locales     fonts-liberation     run-one     build-essential     git     jed     libsm6     libxext-dev     libxrender1     lmodern     netcat     pandoc     python-dev     texlive-fonts-extra     texlive-fonts-recommended     texlive-generic-recommended     texlive-latex-base     texlive-latex-extra     texlive-xetex     tzdata     unzip     ffmpeg     fonts-dejavu     gfortran     gcc  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            },
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            },
            {
              "Key": "NB_USER",
              "Value": "$NB_USER"
            },
            {
              "Key": "NB_UID",
              "Value": "$NB_UID"
            },
            {
              "Key": "NB_GID",
              "Value": "$NB_GID"
            },
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            },
            {
              "Key": "HOME",
              "Value": "/home/$NB_USER"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "fix-permissions",
            "/usr/local/bin/fix-permissions"
          ]
        },
        {
          "CmdLine": [
            "sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"auth requisite pam_deny.so\" \u003e\u003e /etc/pam.d/su \u0026\u0026     sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers \u0026\u0026     sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers \u0026\u0026     useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \u0026\u0026     mkdir -p $CONDA_DIR \u0026\u0026     chown $NB_USER:$NB_GID $CONDA_DIR \u0026\u0026     chmod g+w /etc/passwd \u0026\u0026     fix-permissions $HOME \u0026\u0026     fix-permissions \"$(dirname $CONDA_DIR)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "Env": [
            {
              "Key": "MINICONDA_VERSION",
              "Value": "4.7.12"
            },
            {
              "Key": "CONDA_VERSION",
              "Value": "4.7.12"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     echo \"0dba759b8ecfc8948f626fa18785e3d8 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \u0026\u0026     /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \u0026\u0026     rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     echo \"conda ${CONDA_VERSION}\" \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \u0026\u0026     $CONDA_DIR/bin/conda config --system --set auto_update_conda false \u0026\u0026     $CONDA_DIR/bin/conda config --system --set show_channel_urls true \u0026\u0026     $CONDA_DIR/bin/conda install --quiet --yes conda \u0026\u0026     $CONDA_DIR/bin/conda update --all --quiet --yes \u0026\u0026     conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     conda clean --all -f -y \u0026\u0026     rm -rf /home/$NB_USER/.cache/yarn \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --quiet --yes 'tini=0.18.0' \u0026\u0026     conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     conda clean --all -f -y \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --quiet --yes     'notebook=6.0.1'     'jupyterhub=1.0.0'     'jupyterlab=1.1.4' \u0026\u0026     conda clean --all -f -y \u0026\u0026     npm cache clean --force \u0026\u0026     jupyter notebook --generate-config \u0026\u0026     rm -rf $CONDA_DIR/share/jupyter/lab/staging \u0026\u0026     rm -rf /home/$NB_USER/.cache/yarn \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --quiet --yes     'beautifulsoup4'     'conda-forge::blas=*=openblas'     'bokeh'     'cloudpickle'     'cudatoolkit'     'cython'     'dask'     'dill'     'h5py'     'hdf5'     'ipywidgets'     'matplotlib-base'     'numba'     'numexpr'     'pandas'     'patsy'     'protobuf'     'scikit-image'     'scikit-learn'     'scipy'     'seaborn'     'spyder-kernels'     'sqlalchemy'     'statsmodels'     'sympy'     'vincent'     'xlrd'     \u0026\u0026     conda clean --all -f -y \u0026\u0026     jupyter nbextension enable --py widgetsnbextension --sys-prefix \u0026\u0026     jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build \u0026\u0026     jupyter labextension install jupyterlab_bokeh --no-build \u0026\u0026     jupyter lab build --dev-build=False \u0026\u0026     npm cache clean --force \u0026\u0026     rm -rf $CONDA_DIR/share/jupyter/lab/staging \u0026\u0026     rm -rf /home/$NB_USER/.cache/yarn \u0026\u0026     rm -rf /home/$NB_USER/.node-gyp \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     git clone https://github.com/PAIR-code/facets.git \u0026\u0026     cd facets \u0026\u0026     jupyter nbextension install facets-dist/ --sys-prefix \u0026\u0026     cd \u0026\u0026     rm -rf /tmp/facets \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "XDG_CACHE_HOME",
              "Value": "/home/$NB_USER/.cache/"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "JULIA_DEPOT_PATH",
              "Value": "/opt/julia"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_PKGDIR",
              "Value": "/opt/julia"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_VERSION",
              "Value": "1.2.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /opt/julia-${JULIA_VERSION} \u0026\u0026     cd /tmp \u0026\u0026     wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \u0026\u0026     echo \"926ced5dec5d726ed0d2919e849ff084a320882fb67ab048385849f9483afc47 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - \u0026\u0026     tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 \u0026\u0026     rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/julia \u0026\u0026     echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" \u003e\u003e /etc/julia/juliarc.jl \u0026\u0026     mkdir $JULIA_PKGDIR \u0026\u0026     chown $NB_USER $JULIA_PKGDIR \u0026\u0026     fix-permissions $JULIA_PKGDIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "CmdLine": [
            "conda install --quiet --yes     'r-base'     'r-care'     'r-crayon'     'r-devtools'     'r-forecast'     'r-hexbin'     'r-htmltools'     'r-htmlwidgets'     'r-irkernel'     'r-nycflights13'     'r-plyr'     'r-randomforest'     'r-rcurl'     'r-reshape2'     'r-rmarkdown'     'r-rsqlite'     'r-shiny'     'r-sparklyr'     'r-tidyverse'     'rpy2'     \u0026\u0026     conda clean --all -f -y \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "julia -e 'import Pkg; Pkg.update()' \u0026\u0026     (test $TEST_ONLY_BUILD || julia -e 'import Pkg; Pkg.add(\"HDF5\")') \u0026\u0026     julia -e \"using Pkg; pkg\\\"add IJulia\\\"; pkg\\\"precompile\\\"\" \u0026\u0026     mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ \u0026\u0026     chmod -R go+rx $CONDA_DIR/share/jupyter \u0026\u0026     rm -rf $HOME/.local \u0026\u0026     fix-permissions $JULIA_PKGDIR $CONDA_DIR/share/jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "CYTOKIT_REPO_URL",
          "Name": "arg",
          "Value": "\"https://github.com/hammerlab/cytokit.git\""
        },
        {
          "Key": "BASE_DIR",
          "Name": "arg",
          "Value": "/cytokit"
        },
        {
          "Key": "SIM_DIR",
          "Name": "arg",
          "Value": "$BASE_DIR/lab/sim"
        },
        {
          "Key": "REPO_DIR",
          "Name": "arg",
          "Value": "$BASE_DIR/lab/repos"
        },
        {
          "Key": "DATA_DIR",
          "Name": "arg",
          "Value": "$BASE_DIR/lab/data"
        },
        {
          "Key": "CYTOKIT_REPO_DIR",
          "Name": "arg",
          "Value": "$REPO_DIR/cytokit"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $LAB_DIR $REPO_DIR $DATA_DIR $SIM_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends git vim wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libsm6 libxext6 libfontconfig1 libxrender1 python3-tk"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "cytokit-requirements.txt",
            "/tmp/"
          ]
        },
        {
          "CmdLine": [
            "pip --no-cache-dir install --requirement /tmp/cytokit-requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $REPO_DIR \u0026\u0026 git clone $CYTOKIT_REPO_URL"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p $(python -m site --user-site) \u0026\u0026     echo \"$CYTOKIT_REPO_DIR/python/pipeline\" \u003e $(python -m site --user-site)/local.pth \u0026\u0026     echo \"$CYTOKIT_REPO_DIR/python/notebooks/src\" \u003e\u003e $(python -m site --user-site)/local.pth \u0026\u0026     echo \"$CYTOKIT_REPO_DIR/python/applications\" \u003e\u003e $(python -m site --user-site)/local.pth"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "mkdir $REPO_DIR/.nodeenv \u0026\u0026     cd $REPO_DIR/.nodeenv \u0026\u0026     pip install nodeenv \u0026\u0026     nodeenv jupyterlab \u0026\u0026     . jupyterlab/bin/activate \u0026\u0026     pip install itkwidgets \u0026\u0026     jupyter labextension install @jupyter-widgets/jupyterlab-manager itk-jupyter-widgets"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s $CONDA_DIR/etc/profile.d/conda.sh /etc/profile.d/conda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c 'source /etc/profile.d/conda.sh \u0026\u0026 conda create -n cellprofiler python=2.7' \u0026\u0026     apt-get update \u0026\u0026     apt-get install -y openjdk-8-jdk libmysqlclient-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $REPO_DIR \u0026\u0026     git clone https://github.com/CellProfiler/CellProfiler.git \u0026\u0026     cd CellProfiler \u0026\u0026     git checkout v3.1.8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd $REPO_DIR/CellProfiler \u0026\u0026     /bin/bash -c 'source /etc/profile.d/conda.sh \u0026\u0026 conda activate cellprofiler \u0026\u0026     pip install numpy==1.16.4 PyYAML==3.13 tifffile==2019.7.2 \u0026\u0026 pip install -e .'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash -c 'source /etc/profile.d/conda.sh \u0026\u0026 conda activate cellprofiler \u0026\u0026     pip install ipykernel==4.10.0 pyzmq==18.0.2 \u0026\u0026     python -m ipykernel install --user --name cellprofiler --display-name \"Python (CP)\"'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "\"/lab\""
        },
        {
          "Env": [
            {
              "Key": "CYTOKIT_SIM_DIR",
              "Value": "$SIM_DIR"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CYTOKIT_DATA_DIR",
              "Value": "$DATA_DIR"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CYTOKIT_REPO_DIR",
              "Value": "$CYTOKIT_REPO_DIR"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-8-openjdk-amd64/jre"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHONWARNINGS",
              "Value": "\"ignore::FutureWarning:h5py\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "CECELIA_REPO_URL",
          "Name": "arg",
          "Value": "\"https://github.com/schienstockd/cecelia.git\""
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gpu-test.py",
            "$HOME/"
          ]
        },
        {
          "CmdLine": [
            "fix-permissions $HOME/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod a+x $CYTOKIT_REPO_DIR/python/pipeline/cytokit/cli/main.py \u0026\u0026     ln -s $CYTOKIT_REPO_DIR/python/pipeline/cytokit/cli/main.py /usr/local/bin/cytokit"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "tini",
            "-g",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start-notebook.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-notebook.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-singleuser.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/etc/jupyter/"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "fix-permissions /etc/jupyter/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        }
      ]
    }
  ]
}