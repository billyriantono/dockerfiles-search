MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"maziyar.panahi@iscpif.fr"'
    Name: label
  - Env:
    - Key: Z_VERSION
      Value: '"0.8.2"'
    Name: env
  - Env:
    - Key: LOG_TAG
      Value: '"[ZEPPELIN_${Z_VERSION}]:"'
    - Key: Z_HOME
      Value: '"/home/zeppelin"'
    - Key: LANG
      Value: en_US.UTF-8
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - "echo \"$LOG_TAG update and install basic packages\" && \tapt-get -y update
      && \tapt-get install -y locales && \tlocale-gen $LANG && \tapt-get install -y
      software-properties-common && \tapt -y autoclean && \tapt -y dist-upgrade &&
      \tapt-get install -y build-essential"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"$LOG_TAG install tini related packages\" && \tapt-get install -y wget
      curl grep sed dpkg && \tTINI_VERSION=`curl https://github.com/krallin/tini/releases/latest
      | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` && \tcurl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\"
      > tini.deb && \tdpkg -i tini.deb && \trm tini.deb"
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64
    Name: env
  - CmdLine:
    - "echo \"$LOG_TAG Install java8\" && \tapt-get -y update && \tapt-get install
      -y openjdk-8-jdk && \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"$LOG_TAG Install miniconda2 related packages\" && \tapt-get -y update
      && \tapt-get install -y bzip2 ca-certificates \tlibglib2.0-0 libxext6 libsm6
      libxrender1 \tgit mercurial subversion && \techo 'export PATH=/opt/conda/bin:$PATH'
      > /etc/profile.d/conda.sh && \twget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.2.12-Linux-x86_64.sh
      -O ~/miniconda.sh && \t/bin/bash ~/miniconda.sh -b -p /opt/conda && \trm ~/miniconda.sh"
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - "echo \"$LOG_TAG Install python related packages\" && \tapt-get -y update &&
      \tapt-get install -y python-dev python-pip && \tapt-get install -y gfortran
      && \tapt-get install -y libblas-dev libatlas-dev liblapack-dev && \tapt-get
      install -y libpng-dev libfreetype6-dev libxft-dev && \tapt-get install -y python-tk
      libxml2-dev libxslt-dev zlib1g-dev && \tconda config --set always_yes yes --set
      changeps1 no && \tconda update -q conda && \tconda info -a && \tconda config
      --add channels conda-forge && \tconda install -q numpy=1.12.1 pandas=0.21.1
      matplotlib=2.1.1 pandasql=0.7.3 ipython=5.4.1 jupyter_client=5.1.0 ipykernel=4.7.0
      bokeh=0.12.10 && \tpip install -q ggplot==0.11.5 grpcio==1.8.2 bkzep==0.4.0"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"$LOG_TAG Install R related packages\" && \techo \"deb http://cran.rstudio.com/bin/linux/ubuntu
      xenial/\" | tee -a /etc/apt/sources.list && \tgpg --keyserver keyserver.ubuntu.com
      --recv-key E084DAB9 && \tgpg -a --export E084DAB9 | apt-key add - && \tapt-get
      -y update && \tapt-get -y install r-base r-base-dev && \tR -e \"install.packages('knitr',
      repos='http://cran.us.r-project.org')\" && \tR -e \"install.packages('ggplot2',
      repos='http://cran.us.r-project.org')\" && \tR -e \"install.packages('googleVis',
      repos='http://cran.us.r-project.org')\" && \tR -e \"install.packages('data.table',
      repos='http://cran.us.r-project.org')\" && \tapt-get -y install libcurl4-gnutls-dev
      libssl-dev && \tR -e \"install.packages('devtools', repos='http://cran.us.r-project.org')\"
      && \tR -e \"install.packages('Rcpp', repos='http://cran.us.r-project.org')\"
      && \tRscript -e \"library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')\""
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"$LOG_TAG Install requirements to build Zeppelin\" && \tcurl -sL https://deb.nodesource.com/setup_10.x
      | bash - && \tcurl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add
      - && \techo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list
      && \tapt-get update && \tapt-get -y install nodejs yarn git libfontconfig r-base-dev
      r-cran-evaluate && \twget http://www.eu.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
      && \ttar -zxf apache-maven-3.3.9-bin.tar.gz -C /usr/local/ && \tln -s /usr/local/apache-maven-3.3.9/bin/mvn
      /usr/local/bin/mvn && \tnpm config set strict-ssl false && \tnpm install -g
      bower"
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd -ms /bin/bash zeppelin
    Name: run
    PrependShell: true
  - Name: user
    User: zeppelin
  - Name: workdir
    Path: /home/zeppelin
  - CmdLine:
    - whoami
    Name: run
    PrependShell: true
  - CmdLine:
    - node -v
    Name: run
    PrependShell: true
  - CmdLine:
    - npm -v
    Name: run
    PrependShell: true
  - CmdLine:
    - mvn -v
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo ''{ "allow_root": true }'' > ~/.bowerrc'
    Name: run
    PrependShell: true
  - CmdLine:
    - cat ~/.bowerrc
    Name: run
    PrependShell: true
  - CmdLine:
    - export MAVEN_OPTS="-Xmx2g -XX:MaxPermSize=1024m"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"$LOG_TAG Build Zeppelin $Z_VERSION\" && \trm -rf zeppelin && \tgit clone
      https://github.com/multivacplatform/zeppelin && \tcd zeppelin && \tgit checkout
      branch-0.8 && \t./dev/change_scala_version.sh 2.11 && \tmvn -X clean package
      -DskipTests -Pbuild-distr -Dcheckstyle.skip=true -Pspark-2.4 -Pscala-2.11 &&
      \tmv zeppelin-distribution/target/zeppelin-${Z_VERSION}-SNAPSHOT/zeppelin-${Z_VERSION}-SNAPSHOT
      ${Z_HOME}"
    Name: run
    PrependShell: true
  - CmdLine:
    - pwd
    Name: run
    PrependShell: true
  - CmdLine:
    - ls /home/zeppelin
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
  - Name: expose
    Ports:
    - "8081"
  - CmdLine:
    - /usr/bin/tini
    - --
    Name: entrypoint
    PrependShell: false
  - Name: workdir
    Path: ${Z_HOME}
  - CmdLine:
    - bin/zeppelin.sh
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
