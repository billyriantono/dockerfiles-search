{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "python:2",
      "SourceCode": "FROM python:2",
      "Platform": "",
      "From": {
        "Image": "python:2"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"MinimalCompact\""
            }
          ],
          "Name": "label"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "CmdLine": [
            "awk '$1 ~ \"^deb\" { $3 = $3 \"-backports\"; print; exit }' /etc/apt/sources.list \u003e /etc/apt/sources.list.d/backports.list \u0026\u0026     apt-get update \u0026\u0026     apt-get -y upgrade \u0026\u0026     apt-get -y autoremove \u0026\u0026     apt-get install -y -q         python-numpy         python-opencv         git         curl         libdc1394-22         libjpeg-turbo-progs         graphicsmagick         libgraphicsmagick++3         libgraphicsmagick++1-dev         libgraphicsmagick-q16-3         zlib1g-dev         libboost-python-dev         libmemcached-dev         gifsicle=1.88*         ffmpeg \u0026\u0026     apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "bash"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WORKON_HOME",
              "Value": "/app"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "requirements.txt",
            "/app/requirements.txt"
          ]
        },
        {
          "CmdLine": [
            "pip install --trusted-host None --no-cache-dir    -r /app/requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "conf/thumbor.conf.tpl",
            "/app/thumbor.conf.tpl"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "conf/circus.ini.tpl",
            "/etc/"
          ]
        },
        {
          "CmdLine": [
            "mkdir  /etc/circus.d /etc/setup.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "conf/thumbor-circus.ini.tpl",
            "/etc/circus.d/"
          ]
        },
        {
          "CmdLine": [
            "ln /usr/lib/python2.7/dist-packages/cv2.x86_64-linux-gnu.so /usr/local/lib/python2.7/cv2.so \u0026\u0026     ln /usr/lib/python2.7/dist-packages/cv.py /usr/local/lib/python2.7/cv.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "SIMD_LEVEL",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "if [ -n \"$SIMD_LEVEL\" ]; then apt-get install -y -q libjpeg-dev zlib1g-dev; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "if [ -n \"$SIMD_LEVEL\" ]; then pip uninstall -y pillow; CC=\"cc -m$SIMD_LEVEL\" LDFLAGS=-L/usr/lib/x86_64-linux-gnu/ pip install --no-cache-dir -U --force-reinstall Pillow-SIMD==5.1.1.post0; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "circus"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "80",
            "8888"
          ]
        }
      ]
    }
  ]
}