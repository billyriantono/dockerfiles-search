MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - CmdLine:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y gnupg wget
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main" >> /etc/apt/sources.list
      && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key > llvm_key && apt-key
      add llvm_key
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y  libllvm-9-ocaml-dev
      libllvm9 llvm-9 llvm-9-dev llvm-9-doc llvm-9-examples llvm-9-runtime  clang-9
      clang-tools-9 clang-9-doc libclang-common-9-dev libclang-9-dev libclang1-9 clang-format-9
      python-clang-9 clangd-9  libfuzzer-9-dev  lldb-9  lld-9  libc++-9-dev libc++abi-9-dev  autoconf  automake  bsdmainutils  cmake  curl  libunwind8  flex  bison  autopoint  gettext  g++  gcc  gdb  git  glibc-source  htop   iputils-ping  libc6-dbg  liblttng-ust-dev  libncurses5-dev  libreadline-dev  libtool  libz-dev  locales  lttng-modules-dkms  lttng-tools  make  nano  net-tools  ninja-build  openssh-server  pkg-config  python-pip  screen  silversearcher-ag  sudo  tcl  tcsh  texinfo  tmux  tree  unzip  uuid-dev  vim  tcpdump  valgrind  tzdata  npm  nodejs  rsync  datamash  hwloc  strace  sshpass  libssh2-1-dev  mono-runtime  libfsharp-core4.3-cil  libmono-system-net-http4.0-cil  mono-reference-assemblies-4.0  bash-completion  libpq-dev  libpqxx-dev  zip  &&
      rm -rf /var/lig/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 100;
      update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100; update-alternatives
      --config clang; update-alternatives --config clang++
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y ccache
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install pybars3 paramiko mkdocs
    Name: run
    PrependShell: true
  - CmdLine:
    - npm install -g npx
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '''en_US.utf8'''
    - Key: LANGUAGE
      Value: '''en_US:en'''
    - Key: LC_ALL
      Value: '''en_US.utf8'''
    - Key: TZ
      Value: '''America/Chicago'''
    Name: env
  - CmdLine:
    - locale-gen
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/src/glibc ; tar xvf glibc-*.tar.xz
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cgdb-0.7.0.tar.gz
    - /externals/
  - CmdLine:
    - cd /externals/ && tar -xvzf cgdb-0.7.0.tar.gz && cd cgdb-0.7.0 && ./configure
      && make -j$(nproc) && make install
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /var/run/sshd && echo 'root:root' | chpasswd && sed -i 's/#PermitRootLogin
      prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && sed -i 's/#PasswordAuthentication
      yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - CmdLine:
    - sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g'
      -i /etc/pam.d/sshd
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'set background=dark \nset showcmd \nset showmatch \nset ignorecase \nset
      smartcase \nset incsearch \nset autowrite \nset hidden \nset mouse= \nimap jj
      <Esc> \n' >> /etc/vim/vimrc
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
      -O packages-microsoft-prod.deb     && sudo dpkg -i packages-microsoft-prod.deb     &&
      sudo apt-get update     && sudo apt-get install apt-transport-https -y     &&
      sudo apt-get update     && sudo apt-get install dotnet-sdk-2.1 -y     && sudo
      apt-get install dotnet-sdk-3.1 -y
    Name: run
    PrependShell: true
  - Env:
    - Key: DOTNET_RUNNING_IN_CONTAINER
      Value: "true"
    - Key: DOTNET_USE_POLLING_FILE_WATCHER
      Value: "true"
    - Key: NUGET_XMLDOC_MODE
      Value: skip
    Name: env
  - CmdLine:
    - dotnet help
    Name: run
    PrependShell: true
  - Env:
    - Key: POWERSHELL_VERSION
      Value: 7.0.0-preview.4
    - Key: POWERSHELL_DISTRIBUTION_CHANNEL
      Value: PSDocker-DotnetCoreSDK-Ubuntu-18.04
    Name: env
  - CmdLine:
    - curl -SL --output PowerShell.Linux.x64.$POWERSHELL_VERSION.nupkg https://pwshtool.blob.core.windows.net/tool/$POWERSHELL_VERSION/PowerShell.Linux.x64.$POWERSHELL_VERSION.nupkg     &&
      powershell_sha512='0fb0167e13560371bffec38a4a87bf39377fa1a5cc39b3a078ddec8803212bede73e5821861036ba5c345bd55c74703134c9b55c49385f87dae9e2de9239f5d9'     &&
      echo "$powershell_sha512  PowerShell.Linux.x64.$POWERSHELL_VERSION.nupkg" |
      sha512sum -c -     && mkdir -p /usr/share/powershell     && dotnet tool install
      --add-source / --tool-path /usr/share/powershell --version $POWERSHELL_VERSION
      PowerShell.Linux.x64     && rm PowerShell.Linux.x64.$POWERSHELL_VERSION.nupkg     &&
      ln -s /usr/share/powershell/pwsh /usr/bin/pwsh     && find /usr/share/powershell
      -print | grep -i '.*[.]nupkg$' | xargs rm
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://aka.ms/getvsdbgsh -O - 2>/dev/null | /bin/sh /dev/stdin -v latest
      -l ~/vsdbg
    Name: run
    PrependShell: true
  - CmdLine:
    - DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 dotnet tool install --tool-path /usr/local/bin
      paket
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod +X /usr/local/bin/paket
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - sqlite-version-3.26.0.zip
    - extension-functions.c
    - build_sqlite.sh
    - /
  - CmdLine:
    - ./build_sqlite.sh && rm -rf /sqlite-version-3.26.0/
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - git-lfs
    - /usr/bin/
  - CmdLine:
    - chmod +x /usr/bin/git-lfs && git lfs install
    Name: run
    PrependShell: true
  - Key: ONLOAD_VERSION
    Name: arg
    Value: '"201811-u1"'
  - Key: ONLOAD_MD5SUM
    Name: arg
    Value: '"357e64862aa4145e49d218fd04e63407"'
  - Key: ONLOAD_WITHZF
    Name: arg
    Value: null
  - CmdLine:
    - DEBIAN_FRONTEND=noninteractive apt-get update -y     && DEBIAN_FRONTEND=noninteractive
      apt-get install -y --no-install-recommends         ethtool         gcc-multilib         libc6-dev-i386         libpcap0.8-dev         libtool-bin     &&
      cd /tmp     && curl -fSL https://www.openonload.org/download/openonload-${ONLOAD_VERSION}.tgz
      -o /tmp/openonload-${ONLOAD_VERSION}.tgz     && echo "${ONLOAD_MD5SUM} openonload-${ONLOAD_VERSION}.tgz"
      | md5sum --check     && tar -zxf openonload-${ONLOAD_VERSION}.tgz     && cd
      /tmp/openonload-${ONLOAD_VERSION}     && cd scripts     && ./onload_build --user     &&
      ./onload_install --userfiles --nobuild     && cd /tmp     && rm -rf openonload-${ONLOAD_VERSION}.tgz
      openonload-${ONLOAD_VERSION}     && if [ -z ${ONLOAD_WITHZF} ] ; then rm -rf
      /usr/include/zf /usr/bin/zf_stackdump /usr/bin/zf_debug /usr/lib/x86_64-linux-gnu/zf
      /usr/lib/x86_64-linux-gnu/libonload_zf* ; fi     && DEBIAN_FRONTEND=noninteractive
      apt-get remove -y --purge         curl         patch     && DEBIAN_FRONTEND=noninteractive
      apt-get autoremove -y
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
