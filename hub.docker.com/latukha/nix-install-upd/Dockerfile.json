{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "Anton-Latukha \u003canton.latukha@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt -y install git patch curl bzip2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NIX_VER",
              "Value": "nix-2.0.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NIX_SYSTEM",
              "Value": "x86_64-linux"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NIX_EXT",
              "Value": "tar.bz2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NIX_URL",
              "Value": "https://nixos.org/releases/nix/\"$NIX_VER\"/\"$NIX_VER\"-\"$NIX_SYSTEM\".\"$NIX_EXT\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir ~/build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/build"
        },
        {
          "CmdLine": [
            "git clone -b installFullProgress https://github.com/Anton-Latukha/nix.git installFullProgress"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L \"$NIX_URL\" -O"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar xvf \"$NIX_VER\"-\"$NIX_SYSTEM\".\"$NIX_EXT\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm \"$NIX_VER\"-\"$NIX_SYSTEM\".\"$NIX_EXT\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp ./installFullProgress/scripts/install-nix-from-closure.sh ./\"$NIX_VER\"-\"$NIX_SYSTEM\"/install-new.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod u+x ./\"$NIX_VER\"-\"$NIX_SYSTEM\"/install-new.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/build/\"$NIX_VER\"-\"$NIX_SYSTEM\""
        },
        {
          "CmdLine": [
            "echo '--- install-nix-from-closure.sh\t2017-10-28 14:04:24.812532357 +0200\\n+++ install-nix-from-closure-new.sh\t2017-10-28 14:03:49.104006041 +0200\\n@@ -89,8 +89,8 @@\\n {\\n readonly dest=\"/nix\"\\n readonly self=\"$(dirname \"$(realpath \"$0\")\")\"\\n-readonly nix=\"@nix@\"\\n-readonly cacert=\"@cacert@\"\\n+readonly nix=\"/nix/store/b4s1gxiis1ryvybnjhdjvgc5sr1nq0ys-nix-1.11.15\"\\n+readonly cacert=\"/nix/store/28v6ma4zb887m7ldrbqh56r8jjxc53cb-nss-cacert-3.31\"\\n readonly appname=\"$0\"\\n }\\n' \u003e\u003e git_to_deploy.patch"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "patch install-new.sh git_to_deploy.patch"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo '[ ! -z \"$TERM\" -a -r /etc/motd ] \u0026\u0026 cat /etc/issue \u0026\u0026 cat /etc/motd'     \u003e\u003e /etc/bash.bashrc     ; echo '\\033[1;32m======================================================================\\n= Docker container for new Nix install demonstration for NixCon 2017 =\\n======================================================================\\n\\nInstallation solves bugs of installator. It is tranparent to migrate to.\\n\\nBecause it stays transparent to migrate upstream to - it also uses single\\nuser Nix installation, as old does.\\n\\nAnd so it falls on nixbld group, because single user installation does\\nnot requires nix workers by official documentation.\\n\\nProviding nixbld group and workers is a pure WND of expectations of Nix C++ code.\\nSo it needs to be upplied manually:\\n\\033[1;33m \\ngroupadd -r nixbld\\nfor n in $(seq 1 10); do useradd -c \"Nix build user $n\" -d /var/empty -g nixbld -G nixbld -M -N -r -s \"$(which nologin)\" \"nixbld$n\"; done\\n\\033[0;m\\n(c) Anton Latukha, Serokell 2017 \\n\\nSource directory: '\"$PWD\"'\\n'\u003e /etc/motd"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}