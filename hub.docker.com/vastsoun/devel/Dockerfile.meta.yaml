MetaArgs:
- DefaultValue: ""
  Key: ARCH
  ProvidedValue: null
  Value: ""
- DefaultValue: "18.04"
  Key: UBUNTU_VERSION
  ProvidedValue: null
  Value: "18.04"
- DefaultValue: "10.0"
  Key: CUDA
  ProvidedValue: null
  Value: "10.0"
Stages:
- As: base
  BaseName: nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Commands:
  - Key: ARCH
    Name: arg
    Value: null
  - Key: CUDA
    Name: arg
    Value: null
  - Name: shell
    Shell:
    - /bin/bash
    - -c
  - Env:
    - Key: USER
      Value: docker
    Name: env
  - Env:
    - Key: TERM
      Value: xterm-256color
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     sudo     locate     curl     wget     git     unzip     pkg-config     build-essential     cmake     software-properties-common     vim     ffmpeg
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd -m docker && echo "docker:docker" | chpasswd && adduser docker sudo
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -s /bin/bash docker
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: WORKON_HOME
      Value: /home/docker/.virtualenvs
    Name: env
  - Env:
    - Key: VIRTUALENVWRAPPER_PYTHON
      Value: /usr/bin/python
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     python     python-pip     python-virtualenv     python3     python3-pip     python3-virtualenv
    Name: run
    PrependShell: true
  - CmdLine:
    - pip --no-cache-dir install -U virtualenvwrapper
    Name: run
    PrependShell: true
  - Name: user
    User: docker:docker
  - CmdLine:
    - source /usr/local/bin/virtualenvwrapper.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - python -m virtualenv --python=/usr/bin/python3 /home/docker/.virtualenvs/tensorflow
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends     cuda-command-line-tools-${CUDA/./-}     cuda-cublas-${CUDA/./-}     cuda-cufft-${CUDA/./-}     cuda-curand-${CUDA/./-}     cuda-cusolver-${CUDA/./-}     cuda-cusparse-${CUDA/./-}     curl     libcudnn7     libfreetype6-dev     libhdf5-serial-dev     libzmq3-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends libnvinfer5=5.1.5-1+cuda${CUDA}     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    Name: env
  - CmdLine:
    - ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1     &&
      echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf     &&
      ldconfig
    Name: run
    PrependShell: true
  - Key: TF_PACKAGE
    Name: arg
    Value: tensorflow-gpu
  - Key: TF_PACKAGE_VERSION
    Name: arg
    Value: 1.13.1
  - Name: user
    User: docker:docker
  - CmdLine:
    - source /home/docker/.virtualenvs/tensorflow/bin/activate     && pip --no-cache-dir
      install --upgrade pip setuptools     && pip install ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}     &&
      pip install tensorflow-probability==0.6.0
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - echo 'Etc/UTC' > /etc/timezone &&     ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime
      &&     apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -q -y     dirmngr     gnupg2     && rm -rf
      /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros1-latest.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install --no-install-recommends -y     python-rosdep     python-rosinstall     python-vcstools     python-catkin-tools     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - rosdep init && rosdep update
    Name: run
    PrependShell: true
  - Env:
    - Key: ROS_DISTRO
      Value: melodic
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     ros-melodic-desktop-full=1.4.1-0*     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Name: user
    User: docker:docker
  - CmdLine:
    - echo "alias ros_enable=\"source /opt/ros/$ROS_DISTRO/setup.bash\"" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: user
    User: docker:docker
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./init.sh
    - /home/docker/.init.sh
  - Name: workdir
    Path: /home/docker/
  - CmdLine:
    - git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir git ws
    Name: run
    PrependShell: true
  - CmdLine:
    - /home/docker/.init.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  From:
    Image: nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Name: base
  Platform: ""
  SourceCode: FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
    as base
