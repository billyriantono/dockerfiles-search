{
  "MetaArgs": [
    {
      "Key": "DOCKER_TAG",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "NAME",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "VERSION",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "COMMIT",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "URL",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "BRANCH",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "DATE",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "REPO",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    },
    {
      "Key": "DOCKERFILE_PATH",
      "DefaultValue": null,
      "ProvidedValue": null,
      "Value": null
    }
  ],
  "Stages": [
    {
      "Name": "meta",
      "BaseName": "alpine",
      "SourceCode": "FROM alpine AS meta",
      "Platform": "",
      "As": "meta",
      "From": {
        "Image": "alpine"
      },
      "Commands": [
        {
          "Key": "DOCKER_TAG",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "NAME",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "VERSION",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "COMMIT",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "URL",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "BRANCH",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DATE",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "REPO",
          "Name": "arg",
          "Value": null
        },
        {
          "Key": "DOCKERFILE_PATH",
          "Name": "arg",
          "Value": null
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "\"${DOCKERFILE_PATH}\"",
            "/provision/\"${DOCKERFILE_PATH}\""
          ]
        },
        {
          "CmdLine": [
            "echo \u003e\u003e/etc/docker-meta.yml \"- name: ${NAME}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  version: ${VERSION}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  commit: ${COMMIT}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  url: ${URL}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  branch: ${BRANCH}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  date: ${DATE}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  repo: ${REPO}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  docker_tag: ${DOCKER_TAG}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  dockerfile_path: ${DOCKERFILE_PATH}\"     \u0026\u0026 echo \u003e\u003e/etc/docker-meta.yml \"  dockerfile: |\"     \u0026\u0026 sed \u003e\u003e/etc/docker-meta.yml 's/^/    /' \u003c/provision/\"${DOCKERFILE_PATH}\"     \u0026\u0026 rm -r /provision"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "debian:stretch-slim",
      "SourceCode": "FROM debian:stretch-slim",
      "Platform": "",
      "From": {
        "Image": "debian:stretch-slim"
      },
      "Commands": [
        {
          "Chown": "",
          "From": "meta",
          "Name": "copy",
          "SourcesAndDest": [
            "/etc/docker-meta.yml",
            "/etc/new-docker-meta.yml"
          ]
        },
        {
          "CmdLine": [
            "cat /etc/new-docker-meta.yml \u003e\u003e/etc/docker-meta.yml     \u0026\u0026 echo Full meta:     \u0026\u0026 cat /etc/docker-meta.yml     \u0026\u0026 rm /etc/new-docker-meta.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y update     \u0026\u0026 apt-get install -y --no-install-recommends         psmisc         procps         ca-certificates         curl         bzip2         vim         git         graphviz         htop         ncdu         ssh-client         certbot     \u0026\u0026 echo Installing LIGO DataGrid     || exit 1     bash -c '         v=1;         until [ $v -eq 0 ]; do             curl https://www.lsc-group.phys.uwm.edu/lscdatagrid/doc/ldg-client.sh | bash;             v=$?;         done     '     \u0026\u0026 echo Installing nodejs     \u0026\u0026 curl -sL https://deb.nodesource.com/setup_10.x | bash -     \u0026\u0026 apt-get install -y nodejs     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \u003e~/miniconda.sh     \u0026\u0026 bash ~/miniconda.sh -b -f -p /opt/anaconda     \u0026\u0026 rm ~/miniconda.sh     \u0026\u0026 /opt/anaconda/bin/conda update conda     \u0026\u0026 /opt/anaconda/bin/conda update --all     \u0026\u0026 /opt/anaconda/bin/conda config --add channels conda-forge     \u0026\u0026 echo 'export PATH=/opt/anaconda/bin:\"$PATH\"' \u003e/etc/profile.d/conda.sh     \u0026\u0026 rm -r /opt/anaconda/pkgs     \u0026\u0026 sh -l -c '         git config --global user.name \"LLAMA Docker Image\"             \u0026\u0026 git config --global user.email \"NA\"     '"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "shell",
          "Shell": [
            "sh",
            "-l",
            "-c"
          ]
        }
      ]
    }
  ]
}