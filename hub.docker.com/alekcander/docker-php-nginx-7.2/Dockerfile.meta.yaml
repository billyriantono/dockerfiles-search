MetaArgs:
- DefaultValue: "7.2"
  Key: PHP_VERSION
  ProvidedValue: null
  Value: "7.2"
- DefaultValue: ${PHP_VERSION}
  Key: MAJOR_PHP_VERSION
  ProvidedValue: null
  Value: ${PHP_VERSION}
- DefaultValue: 9.0.11
  Key: NUSPHERE_DEBUGGER_VERSION
  ProvidedValue: null
  Value: 9.0.11
- DefaultValue: x86_64
  Key: NUSPHERE_DEBUGGER_ARC
  ProvidedValue: null
  Value: x86_64
- DefaultValue: 8.2.0.221
  Key: NEWRELIC_AGENT_VERSION
  ProvidedValue: null
  Value: 8.2.0.221
- DefaultValue: '"/usr/local/php-dbg"'
  Key: PHP_DBG_PATH
  ProvidedValue: null
  Value: '"/usr/local/php-dbg"'
- DefaultValue: 1.15.7
  Key: NGINX_VERSION
  ProvidedValue: null
  Value: 1.15.7
Stages:
- As: base
  BaseName: php:${PHP_VERSION}-fpm-alpine
  Commands:
  - CmdLine:
    - rm /usr/local/etc/php-fpm.d/docker.conf
    Name: run
    PrependShell: true
  From:
    Image: php:${PHP_VERSION}-fpm-alpine
  Name: base
  Platform: ""
  SourceCode: FROM php:${PHP_VERSION}-fpm-alpine as base
- As: php_builder
  BaseName: base
  Commands:
  - Key: PHP_DBG_PATH
    Name: arg
    Value: null
  - Key: NEWRELIC_AGENT_VERSION
    Name: arg
    Value: null
  - CmdLine:
    - apk --no-cache add curl
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "Installing Newrelic"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://download.newrelic.com/php_agent/archive/${NEWRELIC_AGENT_VERSION}/newrelic-php5-${NEWRELIC_AGENT_VERSION}-linux-musl.tar.gz
      | tar -C /tmp -zx &&    NR_INSTALL_USE_CP_NOT_LN=1 NR_INSTALL_SILENT=1 /tmp/newrelic-php5-*/newrelic-install
      install
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "Xdebug installation"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p ${PHP_DBG_PATH}
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache $PHPIZE_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - if [ ${PHP_VERSION:0:1} = 5 ]; then yes | pecl install xdebug-2.5.5;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - if [ ${PHP_VERSION:0:1} = 7 ]; then yes | pecl install xdebug;fi
    Name: run
    PrependShell: true
  - CmdLine:
    - find / -name 'xdebug.so' -type f -not -path ${PHP_DBG_PATH} -exec cp {} ${PHP_DBG_PATH}/
      \;
    Name: run
    PrependShell: true
  - CmdLine:
    - find / -name 'newrelic.so' -type f -not -path ${PHP_DBG_PATH} -exec cp {} ${PHP_DBG_PATH}/
      \;
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: php_builder
  Platform: ""
  SourceCode: FROM base as php_builder
- As: nginx_base_build
  BaseName: base
  Commands:
  - Key: NGINX_VERSION
    Name: arg
    Value: null
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8         && CONFIG="            --prefix=/etc/nginx             --sbin-path=/usr/sbin/nginx             --modules-path=/usr/lib/nginx/modules             --conf-path=/etc/nginx/nginx.conf             --error-log-path=/var/log/nginx/error.log             --http-log-path=/var/log/nginx/access.log             --pid-path=/var/run/nginx.pid             --lock-path=/var/run/nginx.lock             --http-client-body-temp-path=/var/cache/nginx/client_temp             --http-proxy-temp-path=/var/cache/nginx/proxy_temp             --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp             --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp             --http-scgi-temp-path=/var/cache/nginx/scgi_temp             --user=nginx             --group=nginx             --with-http_ssl_module             --with-http_realip_module             --with-http_addition_module             --with-http_sub_module             --with-http_dav_module             --with-http_flv_module             --with-http_mp4_module             --with-http_gunzip_module             --with-http_gzip_static_module             --with-http_random_index_module             --with-http_secure_link_module             --with-http_stub_status_module             --with-http_auth_request_module             --with-http_xslt_module=dynamic             --with-http_image_filter_module=dynamic             --with-http_geoip_module=dynamic             --with-threads             --with-stream             --with-stream_ssl_module             --with-stream_ssl_preread_module             --with-stream_realip_module             --with-stream_geoip_module=dynamic             --with-http_slice_module             --with-mail             --with-mail_ssl_module             --with-compat             --with-file-aio             --with-http_v2_module         "         &&
      addgroup -S nginx         && adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx         && apk add --no-cache --virtual .build-deps             gcc             libc-dev             make             openssl-dev             pcre-dev             zlib-dev             linux-headers             curl             gnupg1             libxslt-dev             gd-dev             geoip-dev         &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz         &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc         &&
      export GNUPGHOME="$(mktemp -d)"         && found='''';         for server in             ha.pool.sks-keyservers.net             hkp://keyserver.ubuntu.com:80             hkp://p80.pool.sks-keyservers.net:80             pgp.mit.edu         ;
      do             echo "Fetching GPG key $GPG_KEYS from $server";             gpg
      --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS"
      && found=yes && break;         done;         test -z "$found" && echo >&2 "error:
      failed to fetch GPG key $GPG_KEYS" && exit 1;         gpg --batch --verify nginx.tar.gz.asc
      nginx.tar.gz         && rm -rf "$GNUPGHOME" nginx.tar.gz.asc         && mkdir
      -p /usr/src         && tar -zxC /usr/src -f nginx.tar.gz         && rm nginx.tar.gz         &&
      cd /usr/src/nginx-$NGINX_VERSION         && ./configure $CONFIG --with-debug         &&
      make -j$(getconf _NPROCESSORS_ONLN)         && mv objs/nginx objs/nginx-debug         &&
      mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so         &&
      mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so         &&
      mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so         &&
      mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so         &&
      ./configure $CONFIG         && make -j$(getconf _NPROCESSORS_ONLN)         &&
      make install         && rm -rf /etc/nginx/html/         && mkdir /etc/nginx/conf.d/         &&
      mkdir -p /usr/share/nginx/html/         && install -m644 html/index.html /usr/share/nginx/html/         &&
      install -m644 html/50x.html /usr/share/nginx/html/         && install -m755
      objs/nginx-debug /usr/sbin/nginx-debug         && install -m755 objs/ngx_http_xslt_filter_module-debug.so
      /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so         && install
      -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so         &&
      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so         &&
      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so         &&
      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules         && strip /usr/sbin/nginx*         &&
      strip /usr/lib/nginx/modules/*.so         && rm -rf /usr/src/nginx-$NGINX_VERSION                 &&
      apk add --no-cache --virtual .gettext gettext         && mv /usr/bin/envsubst
      /tmp/                 && runDeps="$(             scanelf --needed --nobanner
      --format ''%n#p'' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst                 |
      tr '','' ''\n''                 | sort -u                 | awk ''system("[
      -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }''         )"         &&
      apk add --no-cache --virtual .nginx-rundeps $runDeps         && apk del .build-deps         &&
      apk del .gettext         && mv /tmp/envsubst /usr/local/bin/                 &&
      apk add --no-cache tzdata                 && ln -sf /dev/stdout /var/log/nginx/access.log         &&
      ln -sf /dev/stderr /var/log/nginx/error.log'
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: nginx_base_build
  Platform: ""
  SourceCode: FROM base as nginx_base_build
- As: final
  BaseName: nginx_base_build
  Commands:
  - Key: NUSPHERE_DEBUGGER_VERSION
    Name: arg
    Value: null
  - Key: NUSPHERE_DEBUGGER_ARC
    Name: arg
    Value: null
  - Key: PHP_DBG_PATH
    Name: arg
    Value: null
  - Key: MAJOR_PHP_VERSION
    Name: arg
    Value: null
  - Name: expose
    Ports:
    - "80"
  - CmdLine:
    - apk --no-cache add curl s6
    Name: run
    PrependShell: true
  - Chown: ""
    From: php_builder
    Name: copy
    SourcesAndDest:
    - ${PHP_DBG_PATH}/xdebug.so
    - ${PHP_DBG_PATH}/xdebug.so
  - Chown: ""
    From: php_builder
    Name: copy
    SourcesAndDest:
    - ${PHP_DBG_PATH}/newrelic.so
    - ${PHP_DBG_PATH}/newrelic.so
  - Chown: ""
    From: php_builder
    Name: copy
    SourcesAndDest:
    - /usr/bin/newrelic-daemon
    - /usr/bin/newrelic-daemon
  - Chown: ""
    From: php_builder
    Name: copy
    SourcesAndDest:
    - /lib/ld-musl-x86_64.so.1
    - /lib/ld-musl-x86_64.so.1
  - CmdLine:
    - mkdir -p /var/log/newrelic
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_DBG_PATH
      Value: ${PHP_DBG_PATH}
    Name: env
  - Env:
    - Key: PHP_CONF_D
      Value: /usr/local/etc/php/conf.d
    Name: env
  - Env:
    - Key: NEW_RELIC_ENABLED
      Value: "false"
    Name: env
  - Env:
    - Key: NEW_RELIC_KEY
      Value: '"xxxxx"'
    Name: env
  - Env:
    - Key: NEW_RELIC_APP_NAME
      Value: '"MyAPP"'
    Name: env
  - Env:
    - Key: FPM_ERROR_LOG
      Value: '"/var/log/php-fpm-error.log"'
    Name: env
  - Env:
    - Key: FPM_PING_PATH
      Value: '"/fpm-ping"'
    Name: env
  - Env:
    - Key: FPM_PING_RESPONSE
      Value: '"/fpm-ping"'
    Name: env
  - Env:
    - Key: FPM_PM_STATUS_PATH
      Value: '"/fpm-status"'
    Name: env
  - Env:
    - Key: FPM_PM
      Value: ondemand
    Name: env
  - Env:
    - Key: FPM_PM_MAX_CHILDREN
      Value: "30"
    Name: env
  - Env:
    - Key: FPM_PM_START_SERVERS
      Value: "3"
    Name: env
  - Env:
    - Key: FPM_PM_MIN_SPARE_SERVERS
      Value: "2"
    Name: env
  - Env:
    - Key: FPM_PM_MAX_SPARE_SERVERS
      Value: "4"
    Name: env
  - Env:
    - Key: FPM_PM_MAX_REQUESTS
      Value: "500"
    Name: env
  - Env:
    - Key: FPM_PROCESS_MAX_IDLE_TIMEOUT
      Value: 10s
    Name: env
  - Env:
    - Key: FPM_REQUEST_SLOWLOG_TIMEOUT
      Value: 30s
    Name: env
  - Env:
    - Key: FPM_SLOWLOG
      Value: /var/log/php-fpm-slow.log
    Name: env
  - Env:
    - Key: PHP_INI_DISPLAY_ERRORS
      Value: "off"
    Name: env
  - Env:
    - Key: PHP_INI_DISPLAY_STARTUP_ERRORS
      Value: "off"
    Name: env
  - Env:
    - Key: PHP_INI_ERROR_REPORTING
      Value: '"E_ALL & ~E_DEPRECATED & ~E_STRICT"'
    Name: env
  - Env:
    - Key: PHP_INI_LOG_ERRORS
      Value: "on"
    Name: env
  - Env:
    - Key: PHP_INI_ERROR_LOG
      Value: /var/log/php-fpm.log
    Name: env
  - Env:
    - Key: PHP_INI_MAX_EXECUTION_TIME
      Value: "30"
    Name: env
  - Env:
    - Key: PHP_INI_MEMORY_LIMIT
      Value: 128M
    Name: env
  - Env:
    - Key: PHP_INI_UPLOAD_MAX_FILESIZE
      Value: 2M
    Name: env
  - Env:
    - Key: PHP_INI_POST_MAX_SIZE
      Value: 8M
    Name: env
  - Env:
    - Key: PHP_INI_DATE_TIMEZONE
      Value: Europe/London
    Name: env
  - Env:
    - Key: PHP_INI_GC_MAXLIFETIME
      Value: "1440"
    Name: env
  - Env:
    - Key: PHP_INI_SESSION_SAVE_HANDLER
      Value: files
    Name: env
  - Env:
    - Key: PHP_INI_SESSION_SAVE_PATH
      Value: '""'
    Name: env
  - Env:
    - Key: NUSPHERE_DBG_ENABLED
      Value: "false"
    Name: env
  - Env:
    - Key: NUSPHERE_DBG_PORT
      Value: "7869"
    Name: env
  - Env:
    - Key: NUSPHERE_DBG_ALLOWED_HOSTS
      Value: '"172.18.0.0/24 localhost 127.0.0.1 host.docker.internal .localhost"'
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nusphere-debugger/${NUSPHERE_DEBUGGER_VERSION}/${NUSPHERE_DEBUGGER_ARC}/dbg-php-${MAJOR_PHP_VERSION}.so
    - ${PHP_DBG_PATH}/dbg-php.so
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - s6
    - /s6
  - CmdLine:
    - chmod -R +x /s6
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir ${PHP_DBG_PATH}/s6/
    Name: run
    PrependShell: true
  - CmdLine:
    - mv /s6/newrelic ${PHP_DBG_PATH}/s6/
    Name: run
    PrependShell: true
  - Env:
    - Key: S6_BEHAVIOUR_IF_STAGE2_FAILS
      Value: '2 #send a termination signal to whole branch'
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - init.sh
    - /
  - CmdLine:
    - chmod +x /init.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx/nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx/nginx.vh.default.conf
    - /etc/nginx/conf.d/default.conf
  - CmdLine:
    - mkdir -p /var/www/default
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx/index.php
    - /var/www/default/
  - Health:
      Interval: 1000000000
      Test:
      - CMD-SHELL
      - curl --fail http://localhost${FPM_PING_PATH} || exit 1
      Timeout: 3000000000
    Name: healthcheck
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .profile
    - /root/.ashrc
  - Env:
    - Key: ENV
      Value: '"/root/.ashrc"'
    Name: env
  - CmdLine:
    - /init.sh
    Name: entrypoint
    PrependShell: false
  From:
    Stage:
      Index: 2
      Named: nginx_base_build
  Name: final
  Platform: ""
  SourceCode: FROM nginx_base_build as final
