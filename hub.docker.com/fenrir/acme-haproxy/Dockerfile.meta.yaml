MetaArgs: null
Stages:
- BaseName: debian:stretch-slim
  Commands:
  - Maintainer: Fenrir <dont@want.spam>
    Name: maintainer
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: SYSLOG
      Value: 127.0.0.1:514
    Name: env
  - Env:
    - Key: BACKEND
      Value: www.example.com:8080
    Name: env
  - CmdLine:
    - "echo 'APT::Install-Suggests \"false\";' > /etc/apt/apt.conf &&\techo 'APT::Install-Recommends
      \"false\";' >> /etc/apt/apt.conf &&\techo 'Aptitude::Recommends-Important \"false\";'
      >> /etc/apt/apt.conf &&\techo 'Aptitude::Suggests-Important \"false\";' >> /etc/apt/apt.conf
      &&\tapt-get update &&\tapt-get -y dist-upgrade &&\tapt-get -y install \tca-certificates
      \tcurl \thaproxy \tnetcat &&\tapt-get autoclean && apt-get clean && rm -rf /var/lib/apt/lists/*
      /var/cache/apt/archives/*.deb /tmp/* /var/tmp/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mv /etc/haproxy /etc/haproxy.dist && mkdir -p /run/haproxy &&\techo \"#!/bin/bash\"
      > /docker-entrypoint &&\techo \"if [ ! -f /etc/haproxy/haproxy.cfg ]; then\"
      >> /docker-entrypoint &&\techo \"\tmkdir -p /etc/haproxy/ssl\" >> /docker-entrypoint
      &&\techo \"\tcp -r /etc/haproxy.dist/* /etc/haproxy/.\" >> /docker-entrypoint
      &&\techo \"\tsed -i '3 d' /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo
      \"\tsed -i '2 d' /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo \"\tsed
      -i '2ilog $SYSLOG local1' /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo
      \"\tsed -i '20itune.ssl.default-dh-param 2048' /etc/haproxy/haproxy.cfg\" >>
      /docker-entrypoint &&\techo \"\techo 'frontend ssl_redirector' >> /etc/haproxy/haproxy.cfg\"
      >> /docker-entrypoint &&\techo \"\techo '\tbind *:443 ssl crt /etc/haproxy/ssl/'
      >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo \"\techo '\thttp-request
      del-header X-Forwarded-Proto' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint
      &&\techo \"\techo '\thttp-request set-header X-Forwarded-Proto https if { ssl_fc
      }' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo \"\techo '\tacl
      letsencrypt-request path_beg -i /.well-known/acme-challenge/' >> /etc/haproxy/haproxy.cfg\"
      >> /docker-entrypoint &&\techo \"\techo '\tuse_backend letsencrypt_backend if
      letsencrypt-request' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo
      \"\techo '\tdefault_backend website_backend' >> /etc/haproxy/haproxy.cfg\" >>
      /docker-entrypoint &&\techo \"\techo 'frontend http_redirect' >> /etc/haproxy/haproxy.cfg\"
      >> /docker-entrypoint &&\techo \"\techo '\tbind *:80' >> /etc/haproxy/haproxy.cfg\"
      >> /docker-entrypoint &&\techo \"\techo '\tacl letsencrypt-request path_beg
      -i /.well-known/acme-challenge/' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint
      &&\techo \"\techo '\tredirect scheme https code 302 if !letsencrypt-request'
      >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo \"\techo '\tuse_backend
      letsencrypt_backend if letsencrypt-request' >> /etc/haproxy/haproxy.cfg\" >>
      /docker-entrypoint &&\techo \"\techo 'backend letsencrypt_backend' >> /etc/haproxy/haproxy.cfg\"
      >> /docker-entrypoint &&\techo \"\techo '\tserver letsencrypt 127.0.0.1:11444'
      >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo \"\techo 'backend
      website_backend' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint &&\techo
      \"\techo '\tserver server01 $BACKEND' >> /etc/haproxy/haproxy.cfg\" >> /docker-entrypoint
      &&\techo \"fi\" >> /docker-entrypoint &&\techo \"if [ ! -f /etc/haproxy/ssl/temp.pem
      ]; then\" >> /docker-entrypoint &&\techo \"\topenssl req -subj '/CN=temp/O=org/C=RY'
      -new -newkey rsa:2048 -sha256 -days 100 -nodes -x509 -keyout /tmp/temp.key -out
      /tmp/temp.crt\" >> /docker-entrypoint &&\techo \"\tcat /tmp/temp.key /tmp/temp.crt
      > /etc/haproxy/ssl/temp.pem\" >> /docker-entrypoint &&\techo \"fi\" >> /docker-entrypoint
      &&\techo \"if [ ! -f /root/.acme.sh/acme.sh ]; then\" >> /docker-entrypoint
      &&\techo \"  mkdir /home/certificates\" >> /docker-entrypoint &&\techo \"\tcurl
      -o /tmp/acme.sh https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh\"
      >> /docker-entrypoint &&\techo \"\tchmod +x /tmp/acme.sh\" >> /docker-entrypoint
      &&\techo \"\tcd /tmp\" >> /docker-entrypoint &&\techo \"\t./acme.sh --install
      --nocron --certhome /home/certificates\" >> /docker-entrypoint &&\techo \"\techo
      '####################################' > /home/STAGING.readme\" >> /docker-entrypoint
      &&\techo \"\techo 'Delete this file in order to create valide certificates.'
      >> /home/STAGING.readme\" >> /docker-entrypoint &&\techo \"\techo 'By default
      all certificates will be signed by Fake LE Intermediate X1 in order to avoid
      quota problems.' >> /home/STAGING.readme\" >> /docker-entrypoint &&\techo \"fi\"
      >> /docker-entrypoint &&\techo \"/usr/sbin/haproxy-systemd-wrapper -f /etc/haproxy/haproxy.cfg
      -p /run/haproxy.pid &\" >> /docker-entrypoint &&\techo \"sleep infinity\" >>
      /docker-entrypoint &&\tchmod +x /docker-entrypoint &&\techo \"#!/bin/bash\"
      > /docker-certissue &&\techo \"if [ ! -f /home/STAGING.readme ]; then\" >> /docker-certissue
      &&\techo '  /root/.acme.sh/acme.sh --issue --standalone --httpport 11444 --force
      $@' >> /docker-certissue &&\techo \"else\" >> /docker-certissue &&\techo '  /root/.acme.sh/acme.sh
      --issue --staging --standalone --httpport 11444 --force --debug $@' >> /docker-certissue
      &&\techo \"fi\" >> /docker-certissue &&\tchmod +x /docker-certissue &&\techo
      \"#!/bin/bash\" > /docker-certrenew &&\techo \"if [ ! -f /home/STAGING.readme
      ]; then\" >> /docker-certrenew &&\techo \"  /root/.acme.sh/acme.sh --renew-all
      --standalone --httpport 11444\" >> /docker-certrenew &&\techo \"else\" >> /docker-certrenew
      &&\techo \"  /root/.acme.sh/acme.sh --renew-all --staging --standalone --httpport
      11444 --force --debug\" >> /docker-certrenew &&\techo \"fi\" >> /docker-certrenew
      &&\tchmod +x /docker-certrenew &&\techo \"#!/bin/bash\" > /docker-certinstall
      &&\techo 'DOMAIN=$1' >> /docker-certinstall &&\techo \"ACMESTORE='/home/certificates'\"
      >> /docker-certinstall &&\techo \"HAPROXYSTORE='/etc/haproxy/ssl'\" >> /docker-certinstall
      &&\techo 'if [ -f $ACMESTORE/$DOMAIN/$DOMAIN.cer ]; then' >> /docker-certinstall
      &&\techo '\tcat $ACMESTORE/$DOMAIN/$DOMAIN.key $ACMESTORE/$DOMAIN/$DOMAIN.cer
      $ACMESTORE/$DOMAIN/ca.cer > $HAPROXYSTORE/$DOMAIN.pem' >> /docker-certinstall
      &&\techo \"fi\" >> /docker-certinstall &&\techo 'haproxy -f /etc/haproxy/haproxy.cfg
      -p /run/haproxy.pid -sf $(cat /run/haproxy.pid) &' >> /docker-certinstall &&\tchmod
      +x /docker-certinstall &&\techo \"#!/bin/bash\" > /docker-restart &&\techo 'haproxy
      -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -sf $(cat /run/haproxy.pid)
      &' >> /docker-restart &&\tchmod +x /docker-restart &&\techo \"end\""
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - 443/tcp
    - 80/tcp
  - Name: volume
    Volumes:
    - /home
    - /etc/haproxy
  - CmdLine:
    - /docker-entrypoint
    Name: entrypoint
    PrependShell: false
  From:
    Image: debian:stretch-slim
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch-slim
