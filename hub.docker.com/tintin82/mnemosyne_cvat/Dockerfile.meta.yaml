MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Key: http_proxy
    Name: arg
    Value: null
  - Key: https_proxy
    Name: arg
    Value: null
  - Key: no_proxy
    Name: arg
    Value: null
  - Key: socks_proxy
    Name: arg
    Value: null
  - Env:
    - Key: TERM
      Value: xterm
    - Key: http_proxy
      Value: ${http_proxy}
    - Key: https_proxy
      Value: ${https_proxy}
    - Key: no_proxy
      Value: ${no_proxy}
    - Key: socks_proxy
      Value: ${socks_proxy}
    Name: env
  - Env:
    - Key: LANG
      Value: '''C.UTF-8'''
    - Key: LC_ALL
      Value: '''C.UTF-8'''
    Name: env
  - Key: USER
    Name: arg
    Value: '"jango"'
  - Key: DJANGO_CONFIGURATION
    Name: arg
    Value: '"production"'
  - Env:
    - Key: DJANGO_CONFIGURATION
      Value: ${DJANGO_CONFIGURATION}
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -yq         python-software-properties         software-properties-common         wget
      &&     add-apt-repository ppa:mc3man/xerus-media -y &&     add-apt-repository
      ppa:mc3man/gstffmpeg-keep -y &&     apt-get update &&     DEBIAN_FRONTEND=noninteractive
      apt-get install -yq         apache2         apache2-dev         libapache2-mod-xsendfile         supervisor         ffmpeg         gstreamer0.10-ffmpeg         libldap2-dev         libsasl2-dev         python3-dev         python3-pip         unzip         unrar         p7zip-full         vim
      &&     add-apt-repository --remove ppa:mc3man/gstffmpeg-keep -y &&     add-apt-repository
      --remove ppa:mc3man/xerus-media -y &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: USER
      Value: ${USER}
    Name: env
  - Env:
    - Key: HOME
      Value: /home/${USER}
    Name: env
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - echo "DEBUG_USER  $USER"
    Name: run
    PrependShell: true
  - CmdLine:
    - adduser --shell /bin/bash --disabled-password --gecos "" ${USER}
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - components
    - /tmp/components
  - Key: OPENVINO_TOOLKIT
    Name: arg
    Value: null
  - Env:
    - Key: OPENVINO_TOOLKIT
      Value: ${OPENVINO_TOOLKIT}
    Name: env
  - CmdLine:
    - if [ "$OPENVINO_TOOLKIT" = "yes" ]; then         /tmp/components/openvino/install.sh;     fi
    Name: run
    PrependShell: true
  - Key: CUDA_SUPPORT
    Name: arg
    Value: null
  - Env:
    - Key: CUDA_SUPPORT
      Value: ${CUDA_SUPPORT}
    Name: env
  - CmdLine:
    - if [ "$CUDA_SUPPORT" = "yes" ]; then         /tmp/components/cuda/install.sh;     fi
    Name: run
    PrependShell: true
  - Key: TF_ANNOTATION
    Name: arg
    Value: '"no"'
  - Env:
    - Key: TF_ANNOTATION
      Value: ${TF_ANNOTATION}
    Name: env
  - Env:
    - Key: TF_ANNOTATION_MODEL_PATH
      Value: ${HOME}/rcnn/inference_graph
    Name: env
  - CmdLine:
    - if [ "$TF_ANNOTATION" = "yes" ]; then         bash -i /tmp/components/tf_annotation/install.sh;     fi
    Name: run
    PrependShell: true
  - Key: WITH_TESTS
    Name: arg
    Value: null
  - CmdLine:
    - if [ "$WITH_TESTS" = "yes" ]; then         wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub
      | apt-key add - &&         echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/
      stable main' | tee /etc/apt/sources.list.d/google-chrome.list &&         wget
      -qO- https://deb.nodesource.com/setup_9.x | bash - &&         apt-get update
      &&         DEBIAN_FRONTEND=noninteractive apt-get install -yq             google-chrome-stable             nodejs
      &&         rm -rf /var/lib/apt/lists/*;         mkdir tests && cd tests && npm
      install             eslint             eslint-detailed-reporter             karma             karma-chrome-launcher             karma-coveralls             karma-coverage             karma-junit-reporter             karma-qunit             qunit;         echo
      "export PATH=~/tests/node_modules/.bin:${PATH}" >> ~/.bashrc;     fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cvat/requirements/
    - /tmp/requirements/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - supervisord.conf
    - mod_wsgi.conf
    - wait-for-it.sh
    - manage.py
    - ${HOME}/
  - CmdLine:
    - pip3 install --no-cache-dir -r /tmp/requirements/${DJANGO_CONFIGURATION}.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update &&     apt-get install -y ssh netcat-openbsd git curl zip  &&     wget
      -qO /dev/stdout https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh
      | bash &&     apt-get install -y git-lfs &&     git lfs install &&     rm -rf
      /var/lib/apt/lists/* &&     if [ -z ${socks_proxy} ]; then         echo export
      "GIT_SSH_COMMAND=\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30\"" >>
      ${HOME}/.bashrc;     else         echo export "GIT_SSH_COMMAND=\"ssh -o StrictHostKeyChecking=no
      -o ConnectTimeout=30 -o ProxyCommand='nc -X 5 -x ${socks_proxy} %h %p'\"" >>
      ${HOME}/.bashrc;     fi
    Name: run
    PrependShell: true
  - Env:
    - Key: REID_MODEL_DIR
      Value: ${HOME}/reid
    Name: env
  - CmdLine:
    - if [ "$OPENVINO_TOOLKIT" = "yes" ]; then         mkdir ${HOME}/reid &&         wget
      https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.xml
      -O reid/reid.xml &&         wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.bin
      -O reid/reid.bin;     fi
    Name: run
    PrependShell: true
  - Key: WITH_DEXTR
    Name: arg
    Value: null
  - Env:
    - Key: WITH_DEXTR
      Value: ${WITH_DEXTR}
    Name: env
  - Env:
    - Key: DEXTR_MODEL_DIR
      Value: ${HOME}/models/dextr
    Name: env
  - CmdLine:
    - if [ "$WITH_DEXTR" = "yes" ]; then         mkdir ${DEXTR_MODEL_DIR} -p &&         wget
      https://download.01.org/openvinotoolkit/models_contrib/cvat/dextr_model_v1.zip
      -O ${DEXTR_MODEL_DIR}/dextr.zip &&         unzip ${DEXTR_MODEL_DIR}/dextr.zip
      -d ${DEXTR_MODEL_DIR} && rm ${DEXTR_MODEL_DIR}/dextr.zip;     fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ssh
    - ${HOME}/.ssh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - cvat/
    - ${HOME}/cvat
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - tests
    - ${HOME}/tests
  - CmdLine:
    - patch -p1 < ${HOME}/cvat/apps/engine/static/engine/js/3rdparty.patch
    Name: run
    PrependShell: true
  - CmdLine:
    - chown -R ${USER}:${USER} .
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - CmdLine:
    - mkdir data share media keys logs /tmp/supervisord
    Name: run
    PrependShell: true
  - CmdLine:
    - python3 manage.py collectstatic
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8080"
    - "8443"
  - CmdLine:
    - /usr/bin/supervisord
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
