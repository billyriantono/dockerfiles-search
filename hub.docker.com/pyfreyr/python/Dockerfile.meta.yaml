MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         ca-certificates         netbase     &&
      rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 97FC712E4C024BBEA48A61ED3A5CA953F73C700D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.5.7
    Name: env
  - CmdLine:
    - 'set -ex         && savedAptMark="$(apt-mark showmanual)"     && apt-get update
      && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends         dpkg-dev         gcc         libbz2-dev         libc6-dev         libexpat1-dev         libffi-dev         libgdbm-dev         liblzma-dev         libncursesw5-dev         libreadline-dev         libsqlite3-dev         libssl-dev         make         tk-dev         wget         xz-utils         zlib1g-dev         $(command
      -v gpg > /dev/null || echo ''gnupg dirmngr'')         && wget -O python.tar.xz
      "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"     &&
      wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"     &&
      export GNUPGHOME="$(mktemp -d)"     && gpg --batch --keyserver ha.pool.sks-keyservers.net
      --recv-keys "$GPG_KEY"     && gpg --batch --verify python.tar.xz.asc python.tar.xz     &&
      { command -v gpgconf > /dev/null && gpgconf --kill all || :; }     && rm -rf
      "$GNUPGHOME" python.tar.xz.asc     && mkdir -p /usr/src/python     && tar -xJC
      /usr/src/python --strip-components=1 -f python.tar.xz     && rm python.tar.xz         &&
      cd /usr/src/python     && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"     &&
      ./configure         --build="$gnuArch"         --enable-loadable-sqlite-extensions         --enable-shared         --with-system-expat         --with-system-ffi         --without-ensurepip     &&
      make -j "$(nproc)"     && make install     && ldconfig         && apt-mark auto
      ''.*'' > /dev/null     && apt-mark manual $savedAptMark     && find /usr/local
      -type f -executable -not \( -name ''*tkinter*'' \) -exec ldd ''{}'' '';''         |
      awk ''/=>/ { print $(NF-1) }''         | sort -u         | xargs -r dpkg-query
      --search         | cut -d: -f1         | sort -u         | xargs -r apt-mark
      manual     && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false     &&
      rm -rf /var/lib/apt/lists/*         && find /usr/local -depth         \(             \(
      -type d -a \( -name test -o -name tests \) \)             -o             \(
      -type f -a \( -name ''*.pyc'' -o -name ''*.pyo'' \) \)         \) -exec rm -rf
      ''{}'' +     && rm -rf /usr/src/python         && python3 --version'
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/local/bin     && ln -s idle3 idle     && ln -s pydoc3 pydoc     && ln
      -s python3 python     && ln -s python3-config python-config
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: 19.0.3
    Name: env
  - CmdLine:
    - set -ex;         savedAptMark="$(apt-mark showmanual)";     apt-get update;     apt-get
      install -y --no-install-recommends wget;         wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';         apt-mark
      auto '.*' > /dev/null;     [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;     apt-get
      purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;     rm
      -rf /var/lib/apt/lists/*;         python get-pip.py         --disable-pip-version-check         --no-cache-dir         "pip==$PYTHON_PIP_VERSION"     ;     pip
      --version;         find /usr/local -depth         \(             \( -type d
      -a \( -name test -o -name tests \) \)             -o             \( -type f
      -a \( -name '*.pyc' -o -name '*.pyo' \) \)         \) -exec rm -rf '{}' +;     rm
      -f get-pip.py
    Name: run
    PrependShell: true
  - CmdLine:
    - python3
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
