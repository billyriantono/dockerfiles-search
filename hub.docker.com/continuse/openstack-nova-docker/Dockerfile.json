{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Maintainer": "Jaewoo Lee \u003ccontinuse@icloud.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install ubuntu-cloud-keyring         \u0026\u0026 echo \"deb http://ubuntu-cloud.archive.canonical.com/ubuntu\"                 \"trusty-updates/kilo main\" \u003e /etc/apt/sources.list.d/cloudarchive-kilo.list         \u0026\u0026 apt-get update \u0026\u0026 apt-get -y dist-upgrade"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y install nova-compute sysfsutils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y install neutron-plugin-ml2 neutron-plugin-openvswitch-agent neutron-l3-agent"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -qqy     apt-transport-https     ca-certificates     curl     telnet     lxc     iptables"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sSL https://get.docker.com/ubuntu/ | sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install git git-review python-pip python-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y upgrade"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "usermod -G docker nova"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone http://github.com/stackforge/nova-docker.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /nova-docker \u0026\u0026 git checkout stable/kilo \u0026\u0026 python setup.py install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /etc/hosts /tmp/hosts \u0026\u0026     mkdir -p -- /lib-override \u0026\u0026 cp /lib/x86_64-linux-gnu/libnss_files.so.2 /lib-override \u0026\u0026     perl -pi -e 's:/etc/hosts:/tmp/hosts:g' /lib-override/libnss_files.so.2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/lib-override"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get -y install glance"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/nova/nova.conf",
            "/etc/nova/nova.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/neutron/neutron.conf",
            "/etc/neutron/neutron.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/neutron/l3_agent.ini",
            "/etc/neutron/l3_agent.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/neutron/metadata_agent.ini",
            "/etc/neutron/metadata_agent.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/neutron//ml2_conf.ini",
            "/etc/neutron/plugins/ml2/ml2_conf.ini"
          ]
        },
        {
          "CmdLine": [
            "chown nova:nova /etc/nova/nova.conf   \u0026\u0026 chown root:neutron /etc/neutron/neutron.conf   \u0026\u0026 chown root:neutron /etc/neutron/l3_agent.ini   \u0026\u0026 chown root:neutron /etc/neutron/metadata_agent.ini   \u0026\u0026 chown root:neutron /etc/neutron/plugins/ml2/ml2_conf.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nova-compute.conf",
            "/etc/nova/nova-compute.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker.filters",
            "/etc/nova/rootwrap.d/docker.filters"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "hostsctl.sh",
            "/hostsctl.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "16509",
            "5900"
          ]
        }
      ]
    }
  ]
}