{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Maintainer": "drunkar \u003cdrunkars.p@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "cp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y   build-essential   wget   doxygen doxygen-gui graphviz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CUDA_MAJOR",
              "Value": "7.0"
            },
            {
              "Key": "CUDA_VERSION",
              "Value": "7.0.28"
            },
            {
              "Key": "CUDA_MAJOR_U",
              "Value": "7_0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026   wget --quiet http://developer.download.nvidia.com/compute/cuda/${CUDA_MAJOR_U}/Prod/local_installers/cuda_${CUDA_VERSION}_linux.run \u0026\u0026   chmod +x cuda_*_linux.run \u0026\u0026 ./cuda_*_linux.run -extract=`pwd` \u0026\u0026   ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \u0026\u0026   ./cuda-linux64-rel-*.run -noprompt \u0026\u0026   rm -rf *"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/cuda/bin:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"/usr/local/cuda/lib64\" \u003e\u003e /etc/ld.so.conf \u0026\u0026 ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y wget bzip2 ca-certificates \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://repo.continuum.io/archive/Anaconda2-4.4.0-Linux-x86_64.sh \u0026\u0026     /bin/bash Anaconda2-4.4.0-Linux-x86_64.sh -b -p /opt/conda \u0026\u0026     rm Anaconda2-4.4.0-Linux-x86_64.sh \u0026\u0026     /opt/conda/bin/conda install --yes conda==3.10.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"import sys\\nsys.setdefaultencoding('utf-8')\" \u003e\u003e /opt/conda/lib/python2.7/sitecustomize.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --default-timeout 6000 tornado pycrypto elasticsearch mysql-python pydot graphviz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y   libprotobuf-dev   libleveldb-dev   libsnappy-dev   libopencv-dev   libboost-all-dev   libhdf5-serial-dev   protobuf-compiler   gcc-4.8   g++-4.8   gcc-4.8-multilib   g++-4.8-multilib   gfortran   libjpeg62   libfreeimage-dev   libatlas-base-dev   libopenblas-dev   git   bc   wget   curl   unzip   cmake   liblmdb-dev   pkgconf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.8 30 \u0026\u0026   update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.8 30 \u0026\u0026   update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 30 \u0026\u0026   update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 30"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 git clone https://github.com/jeffdonahue/caffe.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 git checkout -b recurrent-rebase-cleanup origin/recurrent-rebase-cleanup"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026 wget https://github.com/google/glog/archive/v0.3.4.tar.gz -O glog-0.3.4.tar.gz \u0026\u0026   tar zxvf glog-0.3.4.tar.gz \u0026\u0026   cd /opt/glog-0.3.4 \u0026\u0026   ./configure \u0026\u0026   make \u0026\u0026   make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt \u0026\u0026   wget https://github.com/schuhschuh/gflags/archive/master.zip \u0026\u0026   unzip master.zip \u0026\u0026   cd /opt/gflags-master \u0026\u0026   mkdir build \u0026\u0026   cd /opt/gflags-master/build \u0026\u0026   export CXXFLAGS=\"-fPIC\" \u0026\u0026   cmake .. \u0026\u0026   make VERBOSE=1 \u0026\u0026   make \u0026\u0026   make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 cp Makefile.config.example Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 echo \"CXX := /usr/bin/g++-4.8\" \u003e\u003e Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 sed -i 's/atlas/open/' Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 sed -i 's/CXX :=/CXX ?=/' Makefile"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 make all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install -r /opt/caffe/python/requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"ANACONDA_HOME := /opt/conda\" \u003e\u003e /opt/caffe/Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'PYTHON_INCLUDE := $(ANACONDA_HOME)/include $(ANACONDA_HOME)/include/python2.7 $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include' \u003e\u003e /opt/caffe/Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'PYTHON_LIB := $(ANACONDA_HOME)/lib' \u003e\u003e /opt/caffe/Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include' \u003e\u003e /opt/caffe/Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib' \u003e\u003e /opt/caffe/Makefile.config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /opt/caffe \u0026\u0026 make pycaffe"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "/opt/caffe/python/:${PYTHONPATH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"ln /dev/null /dev/raw1394\" \u003e\u003e /etc/profile.d/caffeenv.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ipython profile create nbserver"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i         -e \"s/^# c.NotebookApp.ip = 'localhost'$/c.NotebookApp.ip = '0.0.0.0'/\"         -e \"s/^# c.NotebookApp.port = 8888$/c.NotebookApp.port = 8888/\"         -e \"s;^# c.NotebookApp.notebook_dir = '/.*'$;c.NotebookApp.notebook_dir = '/notebook';\"         -e \"s/^# c.NotebookApp.open_browser = True$/c.NotebookApp.open_browser = False/\"         -e \"s/^# c.IPKernelApp.matplotlib = None$/c.IPKernelApp.matplotlib = 'inline'/\"         -e \"s/^# c.IPKernelApp.extensions = \\[\\]$/c.IPKernelApp.extensions = ['version_information']/\"         /root/.ipython/profile_nbserver/ipython_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "mkdir /notebook"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /workspace"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/workspace",
            "/notebook"
          ]
        },
        {
          "CmdLine": [
            "bash /etc/profile.d/caffeenv.sh \u0026\u0026 ipython notebook --profile=nbserver"
          ],
          "Name": "entrypoint",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp /opt/caffe/examples/*ipynb /notebook/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/notebook"
        }
      ]
    }
  ]
}