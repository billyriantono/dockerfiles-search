{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Maintainer": "drunkar \u003cdrunkars.p@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apk --update add tzdata \u0026\u0026     cp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime \u0026\u0026     apk del tzdata \u0026\u0026     rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \u0026\u0026     ALPINE_GLIBC_PACKAGE_VERSION=\"2.27-r0\" \u0026\u0026     ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \u0026\u0026     apk add --no-cache --virtual=.build-dependencies wget ca-certificates \u0026\u0026     wget --quiet         \"https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub\"         -O \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     wget --quiet         \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026     apk add --no-cache         \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \u0026\u0026         rm \"/etc/apk/keys/sgerrand.rsa.pub\" \u0026\u0026     /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \u0026\u0026     echo \"export LANG=$LANG\" \u003e /etc/profile.d/locale.sh \u0026\u0026         apk del glibc-i18n \u0026\u0026         rm \"/root/.wget-hsts\" \u0026\u0026     apk del .build-dependencies \u0026\u0026     rm         \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\"         \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk --update add --no-cache --virtual .build-deps mariadb-dev ca-certificates wget \u0026\u0026     update-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \u0026\u0026     /bin/ash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda \u0026\u0026     rm Miniconda3-latest-Linux-x86_64.sh \u0026\u0026     echo 'export PATH=/opt/conda/bin:$PATH' \u003e\u003e /etc/profile.d/conda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install --upgrade --default-timeout 6000 pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --virtual .runtime-deps mariadb-client-libs build-base linux-headers bash"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "AIRFLOW_HOME",
              "Value": "/airflow"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "C_FORCE_ROOT",
              "Value": "true  # run airflow worker by root"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "pip install --default-timeout 6000 \"apache-airflow[celery, mysql, password, slack, s3, redis]\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --default-timeout 6000 boto3"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk del .build-deps mariadb-dev build-base"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/root/entrypoint.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint_webserver.sh",
            "/root/entrypoint_webserver.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint_worker.sh",
            "/root/entrypoint_worker.sh"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint_flower.sh",
            "/root/entrypoint_flower.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /root/entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /root/entrypoint_webserver.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /root/entrypoint_worker.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /root/entrypoint_flower.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "airflow.cfg",
            "/root/airflow.cfg"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /airflow/config \u0026\u0026 touch /airflow/config/__init__.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "log_config.py",
            "/airflow/config/log_config.py"
          ]
        },
        {
          "Env": [
            {
              "Key": "PYTHONPATH",
              "Value": "/airflow/config/"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/airflow/dags",
            "/airflow/logs",
            "/airflow/plugins"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5555",
            "8080",
            "8793"
          ]
        },
        {
          "Name": "workdir",
          "Path": "${AIRFLOW_HOME}"
        },
        {
          "CmdLine": [
            "/root/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}