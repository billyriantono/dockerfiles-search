{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-runtime-ubuntu14.04",
      "SourceCode": "FROM nvidia/cuda:8.0-runtime-ubuntu14.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-runtime-ubuntu14.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"MICROSOFT CORPORATION\""
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "com.microsoft.cntk.version",
              "Value": "\"2.0.beta15.0\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "CNTK_VERSION",
              "Value": "\"2.0.beta15.0\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         ca-certificates         wget         gcc         g++         make         libjasper1         libjpeg8         libpng12-0         libgfortran3         \u0026\u0026     apt-get -y autoremove         \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "OPENMPI_VERSION=\"1.10.4\" \u0026\u0026     OPENMPI_SHA1=\"84d035e7ab1572e5ebc086049f05b694d2158844\" \u0026\u0026     wget -q https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz \u0026\u0026     echo \"$OPENMPI_SHA1 openmpi-${OPENMPI_VERSION}.tar.gz\" | sha1sum --check --strict - \u0026\u0026     tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz \u0026\u0026     cd openmpi-${OPENMPI_VERSION} \u0026\u0026     ./configure --prefix=/usr/local/mpi \u0026\u0026     make -j\"$(nproc)\" install \u0026\u0026     cd .. \u0026\u0026     rm -rf /openmpi-${OPENMPI_VERSION} \u0026\u0026     rm -rf openmpi-${OPENMPI_VERSION}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/mpi/bin:$PATH"
            },
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/usr/local/mpi/lib:$LD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ANACONDA_PREFIX=\"/root/anaconda3\" \u0026\u0026     ANACONDA_VERSION=\"3-4.1.1\" \u0026\u0026     ANACONDA_SHA256=\"4f5c95feb0e7efeadd3d348dcef117d7787c799f24b0429e45017008f3534e55\" \u0026\u0026     wget -q https://repo.continuum.io/archive/Anaconda${ANACONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     echo \"$ANACONDA_SHA256 Anaconda${ANACONDA_VERSION}-Linux-x86_64.sh\" | sha256sum --check --strict - \u0026\u0026     chmod a+x ./Anaconda${ANACONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     ./Anaconda${ANACONDA_VERSION}-Linux-x86_64.sh -b -p ${ANACONDA_PREFIX} \u0026\u0026     rm -rf /Anaconda${ANACONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     $ANACONDA_PREFIX/bin/conda clean --all --yes"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "install-cntk-docker.sh",
            "/root"
          ]
        },
        {
          "CmdLine": [
            "CNTK_VERSION_DASHED=$(echo $CNTK_VERSION | tr . -) \u0026\u0026     CNTK_SHA256=\"26c4f2fb38b6e96f2b94ea1561e57db1bc35f98be36392058116a030bcab1dfc\" \u0026\u0026     wget -q https://cntk.ai/BinaryDrop/CNTK-${CNTK_VERSION_DASHED}-Linux-64bit-GPU.tar.gz \u0026\u0026     echo \"$CNTK_SHA256 CNTK-${CNTK_VERSION_DASHED}-Linux-64bit-GPU.tar.gz\" | sha256sum --check --strict - \u0026\u0026     tar -xzf CNTK-${CNTK_VERSION_DASHED}-Linux-64bit-GPU.tar.gz \u0026\u0026     rm -f CNTK-${CNTK_VERSION_DASHED}-Linux-64bit-GPU.tar.gz \u0026\u0026     mv /root/install-cntk-docker.sh /cntk/Scripts/install/linux \u0026\u0026     /bin/bash /cntk/Scripts/install/linux/install-cntk-docker.sh \u0026\u0026     /root/anaconda3/bin/conda clean --all --yes \u0026\u0026     rm -rf /cntk/cntk/python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/cntk/cntk/bin:$PATH"
            },
            {
              "Key": "LD_LIBRARY_PATH",
              "Value": "/cntk/cntk/lib:/cntk/cntk/dependencies/lib:$LD_LIBRARY_PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/root"
        }
      ]
    }
  ]
}