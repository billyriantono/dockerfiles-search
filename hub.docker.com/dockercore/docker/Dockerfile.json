{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Key": "APT_MIRROR",
          "Name": "arg",
          "Value": "deb.debian.org"
        },
        {
          "CmdLine": [
            "sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "keys/launchpad-ppa-zfs.asc",
            "/go/src/github.com/docker/docker/keys/"
          ]
        },
        {
          "CmdLine": [
            "apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main \u003e /etc/apt/sources.list.d/zfs.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y \tapparmor \tapt-utils \taufs-tools \tautomake \tbash-completion \tbinutils-mingw-w64 \tbsdmainutils \tbtrfs-tools \tbuild-essential \tclang \tcmake \tcreaterepo \tcurl \tdpkg-sig \tgcc-mingw-w64 \tgit \tiptables \tjq \tless \tlibapparmor-dev \tlibcap-dev \tlibltdl-dev \tlibnl-3-dev \tlibprotobuf-c0-dev \tlibprotobuf-dev \tlibsystemd-journal-dev \tlibtool \tlibzfs-dev \tmercurial \tnet-tools \tpkg-config \tprotobuf-compiler \tprotobuf-c-compiler \tpython-dev \tpython-mock \tpython-pip \tpython-websocket \ttar \tubuntu-zfs \tvim \tvim-common \txfsprogs \tzip \t--no-install-recommends \t\u0026\u0026 pip install awscli==1.10.15"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LVM2_VERSION",
              "Value": "2.02.103"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /usr/local/lvm2 \t\u0026\u0026 curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" \t\t| tar -xzC /usr/local/lvm2 --strip-components=1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/lvm2 \t\u0026\u0026 ./configure \t\t--build=\"$(gcc -print-multiarch)\" \t\t--enable-static_link \t\u0026\u0026 make device-mapper \t\u0026\u0026 make install_device-mapper"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "OSX_SDK",
              "Value": "MacOSX10.11.sdk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OSX_CROSS_COMMIT",
              "Value": "a9317c18a3a457ca0a657f08cc4d0d43c6cf8953"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 export OSXCROSS_PATH=\"/osxcross\" \t\u0026\u0026 git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \t\u0026\u0026 ( cd $OSXCROSS_PATH \u0026\u0026 git checkout -q $OSX_CROSS_COMMIT) \t\u0026\u0026 curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \t\u0026\u0026 UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/osxcross/target/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SECCOMP_VERSION",
              "Value": "2.3.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 export SECCOMP_PATH=\"$(mktemp -d)\" \t\u0026\u0026 curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" \t\t| tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \t\u0026\u0026 ( \t\tcd \"$SECCOMP_PATH\" \t\t\u0026\u0026 ./configure --prefix=/usr/local \t\t\u0026\u0026 make \t\t\u0026\u0026 make install \t\t\u0026\u0026 ldconfig \t) \t\u0026\u0026 rm -rf \"$SECCOMP_PATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_VERSION",
              "Value": "1.7.5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" \t| tar -xzC /usr/local"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/go/bin:/usr/local/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_CROSSPLATFORMS",
              "Value": "linux/386 linux/arm \tdarwin/amd64 \tfreebsd/amd64 freebsd/386 freebsd/arm \twindows/amd64 windows/386 \tsolaris/amd64"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GO_TOOLS_COMMIT",
              "Value": "823804e1ae08dbb14eb807afc7db9993bc9e3cc3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \t\u0026\u0026 (cd /go/src/golang.org/x/tools \u0026\u0026 git checkout -q $GO_TOOLS_COMMIT)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_LINT_COMMIT",
              "Value": "32a87160691b3c96046c0c678fe57c5bef761456"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \t\u0026\u0026 (cd /go/src/github.com/golang/lint \u0026\u0026 git checkout -q $GO_LINT_COMMIT) \t\u0026\u0026 go install -v github.com/golang/lint/golint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CRIU_VERSION",
              "Value": "2.12.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get install libnet-dev -y \u0026\u0026 \tmkdir -p /usr/src/criu \t\u0026\u0026 curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \t\u0026\u0026 cd /usr/src/criu \t\u0026\u0026 make \t\u0026\u0026 make install-criu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "REGISTRY_COMMIT_SCHEMA1",
              "Value": "ec87e9b6971d831f0eff752ddb54fb64693e51cd"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "REGISTRY_COMMIT",
              "Value": "47a064d4195a9b56133891bbb13620c3ac83a827"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 export GOPATH=\"$(mktemp -d)\" \t\u0026\u0026 git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \t\u0026\u0026 (cd \"$GOPATH/src/github.com/docker/distribution\" \u0026\u0026 git checkout -q \"$REGISTRY_COMMIT\") \t\u0026\u0026 GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \t\tgo build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \t\u0026\u0026 (cd \"$GOPATH/src/github.com/docker/distribution\" \u0026\u0026 git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\") \t\u0026\u0026 GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \t\tgo build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \t\u0026\u0026 rm -rf \"$GOPATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NOTARY_VERSION",
              "Value": "v0.5.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 export GOPATH=\"$(mktemp -d)\" \t\u0026\u0026 git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \t\u0026\u0026 (cd \"$GOPATH/src/github.com/docker/notary\" \u0026\u0026 git checkout -q \"$NOTARY_VERSION\") \t\u0026\u0026 GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \t\u0026\u0026 GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \t\tgo build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \t\u0026\u0026 rm -rf \"$GOPATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_PY_COMMIT",
              "Value": "4a08d04aef0595322e1b5ac7c52f28a931da85a5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/docker/docker-py.git /docker-py \t\u0026\u0026 cd /docker-py \t\u0026\u0026 git checkout -q $DOCKER_PY_COMMIT \t\u0026\u0026 pip install docker-pycreds==0.2.1 \t\u0026\u0026 pip install -r test-requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install yamllint==1.5.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GO_SWAGGER_COMMIT",
              "Value": "c28258affb0b6251755d92489ef685af8d4ff3eb"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \t\u0026\u0026 (cd /go/src/github.com/go-swagger/go-swagger \u0026\u0026 git checkout -q $GO_SWAGGER_COMMIT) \t\u0026\u0026 go install -v github.com/go-swagger/go-swagger/cmd/swagger"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git config --global user.email 'docker-dummy@example.com'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "groupadd -r docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd --create-home --gid docker unprivilegeduser"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/docker"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/go/src/github.com/docker/docker"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_BUILDTAGS",
              "Value": "apparmor pkcs11 seccomp selinux"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -sfv $PWD/.bashrc ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"source $PWD/hack/make/.integration-test-helpers\" \u003e\u003e /etc/bash.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "contrib/download-frozen-image-v2.sh",
            "/go/src/github.com/docker/docker/contrib/"
          ]
        },
        {
          "CmdLine": [
            "./contrib/download-frozen-image-v2.sh /docker-frozen-images \tbuildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \tbusybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \tdebian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \thello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "hack/dockerfile/binaries-commits",
            "/tmp/binaries-commits"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "hack/dockerfile/install-binaries.sh",
            "/tmp/install-binaries.sh"
          ]
        },
        {
          "CmdLine": [
            "/tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "hack/dind"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/go/src/github.com/docker/docker"
          ]
        }
      ]
    }
  ]
}