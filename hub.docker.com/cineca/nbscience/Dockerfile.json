{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:15.10",
      "SourceCode": "FROM ubuntu:15.10",
      "Platform": "",
      "From": {
        "Image": "ubuntu:15.10"
      },
      "Commands": [
        {
          "Maintainer": "\"Paolo D'Onorio De Meo \u003cp.donoriodemeo@gmail.com\u003e\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends     git vim wget build-essential python-dev bzip2 unzip libsm6     ca-certificates pandoc sudo     libglib2.0-0 libxext6 libxrender1 libxml2-dev libxslt1-dev     libreadline-dev r-base r-base-dev     \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet https://github.com/krallin/tini/releases/download/v0.6.0/tini \u0026\u0026     echo \"d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini\" | sha256sum -c - \u0026\u0026     mv tini /usr/local/bin/tini \u0026\u0026     chmod +x /usr/local/bin/tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONDA_REPO",
              "Value": "https://repo.continuum.io/miniconda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONDA_BIN",
              "Value": "Miniconda3-latest-Linux-x86_64.sh"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONDA_URL",
              "Value": "$CONDA_REPO/$CONDA_BIN"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "jovyan"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NB_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p $CONDA_DIR \u0026\u0026     echo export PATH=$CONDA_DIR/bin:'$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     wget --quiet $CONDA_URL \u0026\u0026     /bin/bash /$CONDA_BIN -f -b -p $CONDA_DIR \u0026\u0026 rm $CONDA_BIN \u0026\u0026     $CONDA_DIR/bin/conda install --yes conda==3.18.6 \u0026\u0026     conda clean --tarballs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --yes     'notebook=4.*' terminado     \u0026\u0026 conda clean -yt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \u0026\u0026     mkdir /home/$NB_USER/work \u0026\u0026     mkdir /home/$NB_USER/.jupyter \u0026\u0026     mkdir /home/$NB_USER/.local \u0026\u0026     chown -R $NB_USER:users $CONDA_DIR \u0026\u0026     chown -R $NB_USER:users /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start-notebook.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Env": [
            {
              "Key": "JUPY_GITHUB",
              "Value": "https://raw.githubusercontent.com/jupyter/docker-stacks/master"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SCRIPT",
              "Value": "start-notebook.sh"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JUPY_STARTSCRIPT",
              "Value": "$JUPY_GITHUB/minimal-notebook/$SCRIPT"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget $JUPY_STARTSCRIPT -q -O /usr/local/bin/$SCRIPT \u0026\u0026     chmod +x /usr/local/bin/$SCRIPT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JUPY_CONFIG",
              "Value": "$JUPY_GITHUB/minimal-notebook/jupyter_notebook_config.py"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget $JUPY_CONFIG -q -O /home/$NB_USER/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R $NB_USER:users /home/$NB_USER/.jupyter"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "jovyan"
        },
        {
          "CmdLine": [
            "conda install --yes ipywidgets     pandas matplotlib scipy seaborn bokeh     scikit-learn scikit-image sympy cython     patsy statsmodels cloudpickle dill numba     \u0026\u0026 conda clean -yt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "wget -q https://github.com/pdonorio/RISE/archive/master.tar.gz     \u0026\u0026 tar xvzf *.gz \u0026\u0026 cd *master \u0026\u0026     python setup.py install \u003e /tmp/rise.log \u0026\u0026 rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MATHJ_REL",
              "Value": "2.5.3.zip"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -q https://github.com/mathjax/MathJax/archive/$MATHJ_REL \u0026\u0026     python -m IPython.external.mathjax $MATHJ_REL \u0026\u0026     rm $MATHJ_REL"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "boot.sh",
            "/boot.sh"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Name": "workdir",
          "Path": "/home/$NB_USER/.ipython/extensions"
        },
        {
          "Env": [
            {
              "Key": "GIT_MASTER",
              "Value": "https://raw.githubusercontent.com/cineca-scai/lectures/master"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -q $GIT_MASTER/ipython_extensions/version_information.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/data"
        },
        {
          "CmdLine": [
            "chown -R $NB_USER /home/$NB_USER/.ipython"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install rpy2"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /boot.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "/boot.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}