MetaArgs: null
Stages:
- BaseName: node:8-stretch
  Commands:
  - Maintainer: Kitware, Inc. <kitware@kitware.com>
    Name: maintainer
  - Name: expose
    Ports:
    - "8080"
  - CmdLine:
    - mkdir /girder
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /girder/logs
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -qqy update && apt-get install -qy software-properties-common python3-software-properties
      &&   apt-get update -qqy && apt-get install -qy     build-essential     git     vim     gosu     xsltproc     python3-cairo     python3-gi     python3-gi-cairo     libcairo2
      libcairo2-dev libcairo-gobject2     libffi-dev     libfuse-dev     libsasl2-dev     libssl-dev     libldap2-dev     libpango1.0-dev     gir1.2-pango-1.0     gir1.2-rsvg-2.0     libpython3-dev
      &&   apt-get clean && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -q https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py
    Name: run
    PrependShell: true
  - Env:
    - Key: PYCAIRO
      Value: pycairo-1.11.0
    Name: env
  - CmdLine:
    - cd /tmp &&   wget https://github.com/pygobject/pycairo/releases/download/v1.11.0/$PYCAIRO.tar.gz
      -O $PYCAIRO.tar.gz &&   tar -xzf $PYCAIRO.tar.gz &&   cd $PYCAIRO &&   python3
      setup.py install &&   cd /tmp &&   rm -rf /tmp/$PYCAIRO
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /girder
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - girder
    - /girder/girder
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - clients
    - /girder/clients
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - scripts
    - /girder/scripts
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - grunt_tasks
    - /girder/grunt_tasks
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Gruntfile.js
    - /girder/Gruntfile.js
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - setup.py
    - /girder/setup.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - package.json
    - /girder/package.json
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - README.rst
    - /girder/README.rst
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - plugins
    - /girder/plugins
  - CmdLine:
    - python3 -m pip install --no-cache-dir -q   -r plugins/wholetale/requirements.txt   -r
      plugins/wt_home_dir/requirements.txt   -r plugins/wt_data_manager/requirements.txt   -e
      .[plugins,sftp]
    Name: run
    PrependShell: true
  - CmdLine:
    - python3 -m pip install -U pyOpenSSL
    Name: run
    PrependShell: true
  - Env:
    - Key: NPM_CONFIG_LOGLEVEL
      Value: warn
    - Key: NPM_CONFIG_COLOR
      Value: "false"
    - Key: NPM_CONFIG_PROGRESS
      Value: "false"
    Name: env
  - CmdLine:
    - girder-install web --plugins=oauth,gravatar,jobs,worker,wt_data_manager,wholetale,wt_home_dir
      &&   rm -rf /root/.npm /tmp/npm* /girder/node_modules
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - girder.local.cfg.dev
    - /girder/girder/conf/girder.local.cfg
  - Env:
    - Key: LC_ALL
      Value: C.UTF-8
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - python3 -m pip install ipython
    Name: run
    PrependShell: true
  - CmdLine:
    - girder-worker-config set celery backend redis://redis/ &&   girder-worker-config
      set celery broker redis://redis/ &&   girder-worker-config set girder_worker
      tmp_root /tmp
    Name: run
    PrependShell: true
  - CmdLine:
    - sed   -e 's/return decode(data/&.decode("utf-8")/'   -i /usr/local/lib/python3.5/dist-packages/kombu/serialization.py
    Name: run
    PrependShell: true
  - Env:
    - Key: GCP_URL
      Value: https://downloads.globus.org/globus-connect-personal/linux/stable/globusconnectpersonal-latest.tgz
    Name: env
  - CmdLine:
    - wget -qO- $GCP_URL | tar xz -C /opt &&   mv /opt/globusconnectpersonal-* /opt/globusconnectpersonal
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r girder   && useradd --no-log-init -s /bin/bash -p $(openssl rand
      -base64 32) -m -r -g girder girder   && usermod -U girder   && chown girder:girder
      -R /girder
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_USER
      Value: "0:0"
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./docker-entrypoint.sh
    - /usr/local/bin/docker-entrypoint.sh
  - CmdLine:
    - /usr/local/bin/docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - girder
    - serve
    Name: cmd
    PrependShell: false
  From:
    Image: node:8-stretch
  Name: ""
  Platform: ""
  SourceCode: FROM node:8-stretch
