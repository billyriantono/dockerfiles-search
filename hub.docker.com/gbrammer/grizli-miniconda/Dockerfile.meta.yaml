MetaArgs: null
Stages:
- BaseName: amazonlinux:latest
  Commands:
  - Env:
    - Key: LANG
      Value: C.UTF-8
    - Key: LC_ALL
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - yum update -y &&     yum install -y git vi which bzip2 curl wget tar make gcc
      gcc-c++ gcc-gfortran
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/local/share &&     wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh
      -O ~/miniconda.sh &&     /bin/bash ~/miniconda.sh -b -p /opt/conda &&     rm
      ~/miniconda.sh &&     /opt/conda/bin/conda clean -tipsy &&     ln -s /opt/conda/etc/profile.d/conda.sh
      /etc/profile.d/conda.sh &&     echo ". /etc/profile.d/conda.sh" >> /root/.bashrc
      &&     . /etc/profile.d/conda.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /tmp &&     wget http://www.eso.org/~jpritcha/jFEROS-DRS/FEROS-DRS/src/dfits.c
      &&     wget http://www.eso.org/~jpritcha/jFEROS-DRS/FEROS-DRS/src/fitsort.c
      &&     gcc -o dfits dfits.c &&     gcc -o fitsort fitsort.c &&     cp dfits
      fitsort /usr/local/bin
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/local/share &&     mkdir python &&     cd python &&     git clone https://github.com/gbrammer/grizli.git
      &&     cd grizli &&     . /etc/profile.d/conda.sh &&     conda env create -f
      environment_min.yml -n grizli-dev &&     echo "conda activate grizli-dev" >>
      /root/.bashrc &&     conda activate grizli-dev &&     python setup.py install
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /usr/local/share/grizli               &&     mkdir /usr/local/share/grizli/CONF          &&     mkdir
      /usr/local/share/grizli/templates     &&     mkdir /usr/local/share/grizli/iref          &&     mkdir
      /usr/local/share/grizli/jref          &&     mkdir /usr/local/share/grizli/uref
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export GRIZLI=\"/usr/local/share/grizli\"" >> /root/.bashrc     &&     echo
      "export GRIZLICODE=\"/usr/local/share/python/grizli\"" >> /root/.bashrc &&     echo
      "export iref=\"\${GRIZLI}/iref/\"" >> /root/.bashrc              &&     echo
      "export jref=\"\${GRIZLI}/jref/\"" >> /root/.bashrc              &&     echo
      "export uref=\"\${GRIZLI}/uref/\"" >> /root/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: GRIZLI
      Value: /usr/local/share/grizli
    Name: env
  - Env:
    - Key: iref
      Value: /usr/local/share/grizli/iref/
    Name: env
  - Env:
    - Key: jref
      Value: /usr/local/share/grizli/jref/
    Name: env
  - CmdLine:
    - . /etc/profile.d/conda.sh &&     conda activate grizli-dev &&     python -c
      "import grizli.utils; grizli.utils.fetch_default_calibs(ACS=False)"  &&     python
      -c "import grizli.utils; grizli.utils.fetch_config_files()"             &&     python
      -c "import grizli.utils; grizli.utils.fetch_default_calibs(ACS=True)"   &&     python
      -c "import grizli.utils; grizli.utils.fetch_config_files(ACS=True)"     &&     python
      -c "import grizli.utils; grizli.utils.symlink_templates(force=False)"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /opt/notebooks &&     cd /usr/local/share/python/grizli/examples/ &&     cp
      Grizli-Pipeline.ipynb /opt/notebooks/ &&     cp Fit-with-Photometry.ipynb /opt/notebooks/
    Name: run
    PrependShell: true
  - CmdLine:
    - . /etc/profile.d/conda.sh &&     conda activate grizli-dev &&     cd /usr/local/share/python
      &&     git clone https://github.com/bd-j/prospector.git &&     cd prospector
      &&     python setup.py install
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash
    Name: cmd
    PrependShell: false
  From:
    Image: amazonlinux:latest
  Name: ""
  Platform: ""
  SourceCode: FROM amazonlinux:latest
