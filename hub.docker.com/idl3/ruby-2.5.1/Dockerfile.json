{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ruby:alpine",
      "SourceCode": "FROM ruby:alpine",
      "Platform": "",
      "From": {
        "Image": "ruby:alpine"
      },
      "Commands": [
        {
          "Maintainer": "Ernest Sim\u003cernest.codes@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 apk upgrade --no-cache   \u0026\u0026 apk add --no-cache --virtual build-dependencies   build-base   \u0026\u0026 apk add --no-cache   libxml2-dev   libxslt-dev   \u0026\u0026 gem install nokogiri   -- --use-system-libraries   --with-xml2-config=/usr/bin/xml2-config   --with-xslt-config=/usr/bin/xslt-config   \u0026\u0026 echo 'http://dl-cdn.alpinelinux.org/alpine/v3.5/main' \u003e\u003e /etc/apk/repositories   \u0026\u0026 echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' \u003e\u003e /etc/apk/repositories   \u0026\u0026 apk --no-cache add imagemagick-dev==6.9.6.8-r1 imagemagick-c++==6.9.6.8-r1 imagemagick=6.9.6.8-r1 less   --repository http://dl-cdn.alpinelinux.org/alpine/v3.5/main   \u0026\u0026 apk add postgresql-dev git tzdata   \u0026\u0026 apk add postgis geos-dev --update-cache --allow-untrusted   --repository http://dl-cdn.alpinelinux.org/alpine/edge/community   --repository http://dl-cdn.alpinelinux.org/alpine/edge/main   \u0026\u0026 apk add libc6-compat xz-libs   \u0026\u0026 apk del build-dependencies"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "v8.11.3"
            },
            {
              "Key": "NPM_VERSION",
              "Value": "5"
            },
            {
              "Key": "YARN_VERSION",
              "Value": "latest"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONFIG_FLAGS",
              "Value": "\"--fully-static --without-npm\""
            },
            {
              "Key": "DEL_PKGS",
              "Value": "\"libstdc++\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache curl make gcc g++ python linux-headers binutils-gold gnupg libstdc++ \u0026\u0026   for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do   gpg --keyserver $server --recv-keys   94AE36675C464D64BAFA68DD7434390BDBE9B9C5   FD3A5288F042B6850C66B31F09FE44734EB7990E   71DCFD284A79C3B38668286BC97EC7A07EDE3FC1   DD8F2338BAE7501E3DD5AC78C273792F7D83545D   C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8   B9AE9905FFD7803F25714661B63B535A4C206CA9   56730D5401028683275BD23C23EFEFE93C4CFFFE   77984A986EBC2AA786BC0F66B01FBB92821C587A \u0026\u0026 break;   done \u0026\u0026   curl -sfSLO https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}.tar.xz \u0026\u0026   curl -sfSL https://nodejs.org/dist/${NODE_VERSION}/SHASUMS256.txt.asc | gpg --batch --decrypt |   grep \" node-${NODE_VERSION}.tar.xz\\$\" | sha256sum -c | grep ': OK$' \u0026\u0026   tar -xf node-${NODE_VERSION}.tar.xz \u0026\u0026   cd node-${NODE_VERSION} \u0026\u0026   ./configure --prefix=/usr ${CONFIG_FLAGS} \u0026\u0026   make -j$(getconf _NPROCESSORS_ONLN) \u0026\u0026   make install \u0026\u0026   cd / \u0026\u0026   if [ -z \"$CONFIG_FLAGS\" ]; then   if [ -n \"$NPM_VERSION\" ]; then   npm install -g npm@${NPM_VERSION};   fi;   find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf;   if [ -n \"$YARN_VERSION\" ]; then   for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do   gpg --keyserver $server --recv-keys   6A010C5166006599AA17F08146C2130DFD2497F5 \u0026\u0026 break;   done \u0026\u0026   curl -sfSL -O https://yarnpkg.com/${YARN_VERSION}.tar.gz -O https://yarnpkg.com/${YARN_VERSION}.tar.gz.asc \u0026\u0026   gpg --batch --verify ${YARN_VERSION}.tar.gz.asc ${YARN_VERSION}.tar.gz \u0026\u0026   mkdir /usr/local/share/yarn \u0026\u0026   tar -xf ${YARN_VERSION}.tar.gz -C /usr/local/share/yarn --strip 1 \u0026\u0026   ln -s /usr/local/share/yarn/bin/yarn /usr/local/bin/ \u0026\u0026   ln -s /usr/local/share/yarn/bin/yarnpkg /usr/local/bin/ \u0026\u0026   rm ${YARN_VERSION}.tar.gz*;   fi;   fi"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}