MetaArgs: null
Stages:
- As: py-ea
  BaseName: alpine:latest
  Commands:
  - Key: ELASTALERT_VERSION
    Name: arg
    Value: v0.2.0b2
  - Env:
    - Key: ELASTALERT_VERSION
      Value: ${ELASTALERT_VERSION}
    Name: env
  - Key: ELASTALERT_URL
    Name: arg
    Value: https://github.com/Yelp/elastalert/archive/$ELASTALERT_VERSION.zip
  - Env:
    - Key: ELASTALERT_URL
      Value: ${ELASTALERT_URL}
    Name: env
  - Env:
    - Key: ELASTALERT_HOME
      Value: /opt/elastalert
    Name: env
  - Name: workdir
    Path: /opt
  - CmdLine:
    - apk add --update --no-cache ca-certificates openssl-dev openssl python2-dev
      python2 py2-pip py2-yaml libffi-dev gcc musl-dev wget &&     wget -O elastalert.zip
      "${ELASTALERT_URL}" &&     unzip elastalert.zip &&     rm elastalert.zip &&     mv
      e* "${ELASTALERT_HOME}"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: '"${ELASTALERT_HOME}"'
  - CmdLine:
    - sed -i 's/jira>=1.0.10/jira>=1.0.10,<1.0.15/g' setup.py &&     python setup.py
      install &&     pip install -r requirements.txt
    Name: run
    PrependShell: true
  From:
    Image: alpine:latest
  Name: py-ea
  Platform: ""
  SourceCode: FROM alpine:latest as py-ea
- BaseName: node:alpine
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"BitSensor <dev@bitsensor.io>"'
    Name: label
  - Env:
    - Key: TZ
      Value: Etc/UTC
    Name: env
  - CmdLine:
    - apk add --update --no-cache curl tzdata python2 make libmagic
    Name: run
    PrependShell: true
  - Chown: ""
    From: py-ea
    Name: copy
    SourcesAndDest:
    - /usr/lib/python2.7/site-packages
    - /usr/lib/python2.7/site-packages
  - Chown: ""
    From: py-ea
    Name: copy
    SourcesAndDest:
    - /opt/elastalert
    - /opt/elastalert
  - Chown: ""
    From: py-ea
    Name: copy
    SourcesAndDest:
    - /usr/bin/elastalert*
    - /usr/bin/
  - Name: workdir
    Path: /opt/elastalert-server
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /opt/elastalert-server
  - CmdLine:
    - npm install --production --quiet
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/elastalert.yaml
    - /opt/elastalert/config.yaml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/elastalert-test.yaml
    - /opt/elastalert/config-test.yaml
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/config.json
    - config/config.json
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - rule_templates/
    - /opt/elastalert/rule_templates
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - elastalert_modules/
    - /opt/elastalert/elastalert_modules
  - CmdLine:
    - mkdir -p /opt/elastalert/rules/ /opt/elastalert/server_data/tests/     && chown
      -R node:node /opt
    Name: run
    PrependShell: true
  - Name: user
    User: node
  - Name: expose
    Ports:
    - "3030"
  - CmdLine:
    - npm
    - start
    Name: entrypoint
    PrependShell: false
  From:
    Image: node:alpine
  Name: ""
  Platform: ""
  SourceCode: FROM node:alpine
