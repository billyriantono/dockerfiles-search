{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.2-fpm",
      "SourceCode": "FROM php:7.2-fpm",
      "Platform": "",
      "From": {
        "Image": "php:7.2-fpm"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Linc \u003cqulamj@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.17.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PKG_RELEASE",
              "Value": "1~buster"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NJS_VERSION",
              "Value": "0.3.3"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 addgroup --system --gid 101 nginx     \u0026\u0026 adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos \"nginx user\" --shell /bin/false --uid 101 nginx     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install --no-install-recommends --no-install-suggests -q -y gcc make autoconf libc-dev pkg-config curl zlib1g-dev gnupg2 dirmngr wget apt-transport-https lsb-release ca-certificates     \u0026\u0026     NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \t  found=''; \t  for server in \t\t  ha.pool.sks-keyservers.net \t\t  hkp://keyserver.ubuntu.com:80 \t\t  hkp://p80.pool.sks-keyservers.net:80 \t\t  pgp.mit.edu \t  ; do \t\t  echo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \t\t  apt-key adv --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \u0026\u0026 found=yes \u0026\u0026 break; \t  done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $NGINX_GPGKEY\" \u0026\u0026 exit 1;     echo \"deb http://nginx.org/packages/mainline/debian/ buster nginx\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg     \u0026\u0026 echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" \u003e /etc/apt/sources.list.d/php.list     \u0026\u0026 nginxPackages=\"         nginx=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE}         nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-${PKG_RELEASE}     \" \u0026\u0026     apt-get update \u0026\u0026     apt-get upgrade -y \u0026\u0026     apt-get install -y --no-install-recommends     $nginxPackages     gettext-base     openssl     apt-utils     vim     supervisor     libpq-dev     libfreetype6-dev     libpng-dev     libjpeg-dev     libssl-dev     libmcrypt-dev     libzip-dev     libicu-dev     g++ \u0026\u0026     docker-php-ext-configure gd     --with-gd     --with-freetype-dir=/usr/include/     --with-png-dir=/usr/include/     --with-jpeg-dir=/usr/include/ \u0026\u0026     docker-php-ext-configure zip --with-libzip \u0026\u0026     docker-php-ext-configure intl \u0026\u0026     docker-php-ext-install gd exif zip intl pcntl \u0026\u0026     pecl install swoole xdebug \u0026\u0026     docker-php-ext-enable swoole xdebug \u0026\u0026     php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \u0026\u0026     php composer-setup.php --quiet --install-dir=/usr/bin --filename=composer \u0026\u0026     rm composer-setup.php \u0026\u0026     rm -rf /tmp/pear \u0026\u0026     apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/* \u0026\u0026     ln -sf /dev/stdout /var/log/nginx/access.log \u0026\u0026     ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        }
      ]
    }
  ]
}