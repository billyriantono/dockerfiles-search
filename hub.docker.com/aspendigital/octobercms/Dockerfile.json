{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.1-apache",
      "SourceCode": "FROM php:7.1-apache",
      "Platform": "",
      "From": {
        "Image": "php:7.1-apache"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y cron git-core jq unzip vim zip   libjpeg-dev libpng-dev libpq-dev libsqlite3-dev libwebp-dev libzip-dev \u0026\u0026   rm -rf /var/lib/apt/lists/* \u0026\u0026   docker-php-ext-configure zip --with-libzip \u0026\u0026   docker-php-ext-configure gd --with-png-dir --with-jpeg-dir --with-webp-dir \u0026\u0026   docker-php-ext-install exif gd mysqli opcache pdo_pgsql pdo_mysql zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "{     echo 'opcache.memory_consumption=128';     echo 'opcache.interned_strings_buffer=8';     echo 'opcache.max_accelerated_files=4000';     echo 'opcache.revalidate_freq=2';     echo 'opcache.fast_shutdown=1';     echo 'opcache.enable_cli=1';   } \u003e /usr/local/etc/php/conf.d/docker-oc-opcache.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "{     echo 'log_errors=on';     echo 'display_errors=off';     echo 'upload_max_filesize=32M';     echo 'post_max_size=32M';     echo 'memory_limit=128M';   } \u003e /usr/local/etc/php/conf.d/docker-oc-php.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_ALLOW_SUPERUSER",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \u0026\u0026   /usr/local/bin/composer global require hirak/prestissimo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "a2enmod rewrite"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/docker",
            "/usr/src/octobercms-config-docker"
          ]
        },
        {
          "Env": [
            {
              "Key": "OCTOBERCMS_TAG",
              "Value": "v1.0.462"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCTOBERCMS_CHECKSUM",
              "Value": "dc054d2800762edc6d95424f3fb8ac2cc0e19420"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCTOBERCMS_CORE_BUILD",
              "Value": "462"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OCTOBERCMS_CORE_HASH",
              "Value": "455c8d34ba2d80b1b408144879a786c7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "git clone https://github.com/octobercms/october.git -b $OCTOBERCMS_TAG --depth 1 . \u0026\u0026   echo \"Update composer.json: Set explicit build references for october module dependencies\" \u0026\u0026   sed -i.orig \"s/\\(\\\"october\\/\\([rain|system|backend|cms]*\\)\\\": \\\"\\(~1.0\\)\\\"\\)/\\\"october\\/\\2\\\": \\\"\u003c=${OCTOBERCMS_TAG#v}\\\"/g\" composer.json \u0026\u0026   egrep -o \"['\\\"]october\\/[rain|system|backend|cms]*['\\\"]\\s*:\\s*['\\\"](.+?)['\\\"]\" composer.json \u0026\u0026   composer install --no-interaction --prefer-dist --no-scripts \u0026\u0026   composer clearcache \u0026\u0026   git status \u0026\u0026 git checkout modules/. \u0026\u0026   rm -rf .git \u0026\u0026   echo 'APP_ENV=docker' \u003e .env \u0026\u0026   mv /usr/src/octobercms-config-docker config/docker \u0026\u0026   touch storage/database.sqlite \u0026\u0026   chmod 666 storage/database.sqlite \u0026\u0026   php artisan october:up \u0026\u0026   php artisan plugin:install october.drivers \u0026\u0026   chown -R www-data:www-data /var/www/html \u0026\u0026   find . -type d \\( -path './plugins' -or  -path './storage' -or  -path './themes' -or  -path './plugins/*' -or  -path './storage/*' -or  -path './themes/*' \\) -exec chmod g+ws {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "php -r \"use System\\\\Models\\\\Parameter;     require __DIR__.'/bootstrap/autoload.php';     \\$app = require_once __DIR__.'/bootstrap/app.php';     \\$app-\u003emake('Illuminate\\\\Contracts\\\\Console\\\\Kernel')-\u003ebootstrap();     Parameter::set(['system::core.build'=\u003egetenv('OCTOBERCMS_CORE_BUILD'), 'system::core.hash'=\u003egetenv('OCTOBERCMS_CORE_HASH')]);     echo \\\"October CMS \\\\n Build: \\\",Parameter::get('system::core.build'), \\\"\\\\n Hash: \\\", Parameter::get('system::core.hash'), \\\"\\\\n\\\";\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"* * * * * /usr/local/bin/php /var/www/html/artisan schedule:run \u003e /proc/1/fd/1 2\u003e/proc/1/fd/2\" \u003e /etc/cron.d/october-cron \u0026\u0026   crontab /etc/cron.d/october-cron"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'exec php artisan \"$@\"' \u003e /usr/local/bin/artisan \u0026\u0026   echo 'exec php artisan tinker' \u003e /usr/local/bin/tinker \u0026\u0026   echo '[ $# -eq 0 ] \u0026\u0026 exec php artisan october || exec php artisan october:\"$@\"' \u003e /usr/local/bin/october \u0026\u0026   sed -i '1s;^;#!/bin/bash\\n[ \"$PWD\" != \"/var/www/html\" ] \\\u0026\\\u0026 echo \" - Helper must be run from /var/www/html\" \\\u0026\\\u0026 exit 1\\n;' /usr/local/bin/artisan /usr/local/bin/tinker /usr/local/bin/october \u0026\u0026   chmod +x /usr/local/bin/artisan /usr/local/bin/tinker /usr/local/bin/october"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-oc-entrypoint",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "docker-oc-entrypoint"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "apache2-foreground"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}