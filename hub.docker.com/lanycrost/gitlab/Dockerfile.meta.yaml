MetaArgs: null
Stages:
- BaseName: lanycrost/alpine:3.8
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Khachatur Ashotyan (lanycrost)"'
    Name: label
  - Labels:
    - Key: version
      Value: '"0.1"'
    Name: label
  - Labels:
    - Key: description
      Value: '"GitLab CE w/S6 Overlay based on Alpine."'
    Name: label
  - Env:
    - Key: RUBY_MAJOR
      Value: "2.4"
    Name: env
  - Env:
    - Key: RUBY_VERSION
      Value: 2.4.4
    Name: env
  - Env:
    - Key: RUBY_DOWNLOAD_SHA256
      Value: 1d0034071d675193ca769f64c91827e5f54cb3a7962316a41d5217c7bc6949f0
    Name: env
  - Env:
    - Key: RUBYGEMS_VERSION
      Value: 2.7.7
    Name: env
  - Env:
    - Key: BUNDLER_VERSION
      Value: 1.16.2
    Name: env
  - Env:
    - Key: GITLAB_VERSION
      Value: '"11.2.0"'
    Name: env
  - Env:
    - Key: GITLAB_SHELL_VERSION
      Value: '"8.1.1"'
    Name: env
  - Env:
    - Key: GITLAB_WORKHORSE_VERSION
      Value: '"5.1.0"'
    Name: env
  - Env:
    - Key: GITLAB_PAGES_VERSION
      Value: '"1.0.0"'
    Name: env
  - Env:
    - Key: GITALY_SERVER_VERSION
      Value: '"0.117.2"'
    Name: env
  - Env:
    - Key: GITLAB_USER
      Value: '"root"'
    Name: env
  - Env:
    - Key: GITLAB_HOME
      Value: '"/home/git"'
    Name: env
  - Env:
    - Key: RAILS_ENV
      Value: '"production"'
    Name: env
  - Env:
    - Key: NODE_ENV
      Value: '"production"'
    Name: env
  - Env:
    - Key: GITLAB_INSTALL_DIR
      Value: '"${GITLAB_HOME}/gitlab"'
    Name: env
  - Env:
    - Key: GITLAB_SHELL_INSTALL_DIR
      Value: '"${GITLAB_HOME}/gitlab-shell"'
    Name: env
  - Env:
    - Key: GITLAB_WORKHORSE_INSTALL_DIR
      Value: '"${GITLAB_HOME}/gitlab-workhorse"'
    Name: env
  - Env:
    - Key: GITLAB_PAGES_INSTALL_DIR
      Value: '"${GITLAB_HOME}/gitlab-pages"'
    Name: env
  - Env:
    - Key: GITLAB_GITALY_INSTALL_DIR
      Value: '"${GITLAB_HOME}/gitaly"'
    Name: env
  - Env:
    - Key: GITLAB_DATA_DIR
      Value: '"${GITLAB_HOME}/data"'
    Name: env
  - Env:
    - Key: GITLAB_BUILD_DIR
      Value: '"/usr/src"'
    Name: env
  - Env:
    - Key: GITLAB_RUNTIME_DIR
      Value: '"${GITLAB_HOME}/runtime"'
    Name: env
  - Env:
    - Key: GITLAB_LOG_DIR
      Value: '"/var/log"'
    Name: env
  - Env:
    - Key: MODE
      Value: '"START"'
    Name: env
  - CmdLine:
    - "set -ex &&     mkdir -p /usr/local/etc \\ && \t{ \t\techo 'install: --no-document';
      \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison
      \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg
      \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\topenssl \t\topenssl-dev
      \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\tprocps
      \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget
      -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\"
      \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir
      -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1
      \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK
      0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&&
      autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&&
      export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\"
      \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&&
      make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p'
      --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[
      -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&&
      apk add --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev
      \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del .ruby-builddeps \t&& cd /
      \t&& rm -r /usr/src/ruby \t\t&& gem update --system \"$RUBYGEMS_VERSION\" \t&&
      gem install bundler --version \"$BUNDLER_VERSION\" --force \t&& rm -r /root/.gem/"
    Name: run
    PrependShell: true
  - Env:
    - Key: GEM_HOME
      Value: /usr/local/bundle
    Name: env
  - Env:
    - Key: BUNDLE_PATH
      Value: '"$GEM_HOME"'
    Name: env
  - Env:
    - Key: BUNDLE_SILENCE_ROOT_WARNING
      Value: "1"
    Name: env
  - Env:
    - Key: BUNDLE_APP_CONFIG
      Value: '"$GEM_HOME"'
    Name: env
  - Env:
    - Key: PATH
      Value: $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
    Name: run
    PrependShell: true
  - CmdLine:
    - "addgroup -g 1000 -S ${GITLAB_USER} && \tadduser -u 1000 -D -S -s /bin/bash
      -G ${GITLAB_USER} ${GITLAB_USER} && \tsed -i '/^git/s/!/*/' /etc/shadow && \techo
      \"PS1='\\w\\$ '\" >> ${GITHOME_HOME}/.bashrc &&   echo \"PATH=/usr/local/sbin:/usr/local/bin:\\$PATH\"
      >> ${GITLAB_HOME}/.profile"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update --no-cache -t .gitlab-rundeps   git   grep   icu-libs   krb5-libs   libc6-compat   libre2   openssl   make   mariadb-client   nginx   openssh   postgresql-client   python2   rsync   shadow   su-exec   sudo   zip
    Name: run
    PrependShell: true
  - CmdLine:
    - apk del openssl-dev libressl-dev &&   apk add --update --no-cache -t .gitlab-build-deps     autoconf     build-base     cmake     coreutils     g++     gdbm-dev     go     icu-dev     krb5-dev     libassuan-dev     libffi-dev     libre2-dev     libressl-dev     libgcrypt-dev     libxml2-dev     libxslt-dev     linux-headers     mariadb-dev     ncurses-dev     nodejs     patch     postgresql-dev     readline-dev     sqlite-dev     yaml-dev     yarn     zlib-dev
      &&     rm -rf /etc/nginx/conf.d/default.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update redis postgresql gettext &&   cp /usr/bin/redis-cli /tmp &&   cp
      /usr/bin/pg_* /tmp &&   apk del --purge redis postgresql &&   mv /tmp/redis-cli
      /usr/bin/ &&   mv /tmp/pg_* /usr/bin/
    Name: run
    PrependShell: true
  - CmdLine:
    - GITLAB_CLONE_URL=https://gitlab.com/gitlab-org/gitlab-ce.git &&   mkdir -p ${GITLAB_INSTALL_DIR}
      &&   git clone -q -b v${GITLAB_VERSION} --depth 1 ${GITLAB_CLONE_URL} ${GITLAB_INSTALL_DIR}
      &&   chown -R ${GITLAB_USER}:${GITLAB_USER} ${GITLAB_INSTALL_DIR} &&   su-exec
      git sed -i "/headers\['Strict-Transport-Security'\]/d" ${GITLAB_INSTALL_DIR}/app/controllers/application_controller.rb
      &&   cd ${GITLAB_INSTALL_DIR} &&   chown -R ${GITLAB_USER}:${GITLAB_USER} /usr/local/lib/ruby/gems/2.4.0/
      &&   chown -R ${GITLAB_USER}:${GITLAB_USER} /usr/local/bundle/
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${GITLAB_INSTALL_DIR}
  - CmdLine:
    - export BUNDLE_FORCE_RUBY_PLATFORM=1 &&   su-exec git bundle install -j$(nproc)
      --deployment --verbose --without development test aws kerberos
    Name: run
    PrependShell: true
  - CmdLine:
    - 'chown -R ${GITLAB_USER}: ${GITLAB_HOME}'
    Name: run
    PrependShell: true
  - CmdLine:
    - su-exec git cp ${GITLAB_INSTALL_DIR}/config/resque.yml.example ${GITLAB_INSTALL_DIR}/config/resque.yml
      &&   su-exec git cp ${GITLAB_INSTALL_DIR}/config/gitlab.yml.example ${GITLAB_INSTALL_DIR}/config/gitlab.yml
      &&   su-exec git cp ${GITLAB_INSTALL_DIR}/config/database.yml.mysql ${GITLAB_INSTALL_DIR}/config/database.yml
    Name: run
    PrependShell: true
  - CmdLine:
    - su-exec git yarn install --production --pure-lockfile &&   su-exec git yarn
      add ajv@^4.0.0 &&   su-exec git bundle exec rake gitlab:assets:compile USE_DB=false
      SKIP_STORAGE_VALIDATION=true
    Name: run
    PrependShell: true
  - CmdLine:
    - su-exec git bundle exec rake gettext:pack &&   su-exec git bundle exec rake
      gettext:po_to_json
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GITLAB_SHELL_URL=https://gitlab.com/gitlab-org/gitlab-shell/repository/archive.tar.gz
      &&   GITLAB_SHELL_VERSION=${GITLAB_SHELL_VERSION:-$(cat ${GITLAB_INSTALL_DIR}/GITLAB_SHELL_VERSION)}
      &&   echo "Downloading gitlab-shell v.${GITLAB_SHELL_VERSION}..." &&   mkdir
      -p ${GITLAB_SHELL_INSTALL_DIR} &&   curl -sSL ${GITLAB_SHELL_URL}?ref=v${GITLAB_SHELL_VERSION}
      | tar xfvz - --strip 1 -C ${GITLAB_SHELL_INSTALL_DIR} &&   chown -R ${GITLAB_USER}:
      ${GITLAB_SHELL_INSTALL_DIR} &&     cd ${GITLAB_SHELL_INSTALL_DIR} &&   su-exec
      git cp -a ${GITLAB_SHELL_INSTALL_DIR}/config.yml.example ${GITLAB_SHELL_INSTALL_DIR}/config.yml
      &&   su-exec git ./bin/compile &&   su-exec git ./bin/install &&     su-exec
      git rm -rf ${GITLAB_HOME}/repositories'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GITLAB_WORKHORSE_URL=https://gitlab.com/gitlab-org/gitlab-workhorse.git &&   GITLAB_WORKHORSE_VERSION=${GITLAB_WORKHOUSE_VERSION:-$(cat
      ${GITLAB_INSTALL_DIR}/GITLAB_WORKHORSE_VERSION)} &&   echo "Cloning gitlab-workhorse
      v.${GITLAB_WORKHORSE_VERSION}..." &&   su-exec git git clone -q -b v${GITLAB_WORKHORSE_VERSION}
      --depth 1 ${GITLAB_WORKHORSE_URL} ${GITLAB_WORKHORSE_INSTALL_DIR} &&   chown
      -R ${GITLAB_USER}: ${GITLAB_WORKHORSE_INSTALL_DIR} &&   cd ${GITLAB_WORKHORSE_INSTALL_DIR}
      &&   make install'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GITLAB_PAGES_URL=https://gitlab.com/gitlab-org/gitlab-pages.git &&   GITLAB_PAGES_VERSION=${GITLAB_PAGES_VERSION:-$(cat
      ${GITLAB_INSTALL_DIR}/GITLAB_PAGES_VERSION)} &&   echo "Downloading gitlab-pages
      v.${GITLAB_PAGES_VERSION}..." &&   su-exec git git clone -q -b v${GITLAB_PAGES_VERSION}
      --depth 1 ${GITLAB_PAGES_URL} ${GITLAB_PAGES_INSTALL_DIR} &&   chown -R ${GITLAB_USER}:
      ${GITLAB_PAGES_INSTALL_DIR} &&   cd ${GITLAB_PAGES_INSTALL_DIR} &&   make &&   cp
      -f gitlab-pages /usr/local/bin/'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'GITLAB_GITALY_URL=https://gitlab.com/gitlab-org/gitaly.git &&   echo "Downloading
      gitaly v.${GITALY_SERVER_VERSION}..." &&   su-exec git git clone -q -b v${GITALY_SERVER_VERSION}
      --depth 1 ${GITLAB_GITALY_URL} ${GITLAB_GITALY_INSTALL_DIR} &&   chown -R ${GITLAB_USER}:
      ${GITLAB_GITALY_INSTALL_DIR} &&   su-exec git cp ${GITLAB_GITALY_INSTALL_DIR}/config.toml.example
      ${GITLAB_GITALY_INSTALL_DIR}/config.toml &&   cd ${GITLAB_GITALY_INSTALL_DIR}
      &&   export BUNDLE_FORCE_RUBY_PLATFORM=1 &&   make install &&   make clean'
    Name: run
    PrependShell: true
  - CmdLine:
    - su-exec git sed -i 's/db:reset/db:setup/' ${GITLAB_INSTALL_DIR}/lib/tasks/gitlab/setup.rake
      &&     rm -rf ${GITLAB_DATA_DIR}/config/secrets.yml &&     rm -f ${GITLAB_INSTALL_DIR}/.gitlab_shell_secret
      ${GITLAB_INSTALL_DIR}/.gitlab_workhorse_secret &&     su-exec git mkdir -p ${GITLAB_INSTALL_DIR}/tmp/pids/
      ${GITLAB_INSTALL_DIR}/tmp/sockets/ &&   chmod -R u+rwX ${GITLAB_INSTALL_DIR}/tmp
      &&     rm -rf ${GITLAB_HOME}/.ssh &&   su-exec git ln -sf ${GITLAB_DATA_DIR}/.ssh
      ${GITLAB_HOME}/.ssh &&     rm -rf ${GITLAB_INSTALL_DIR}/log &&   ln -sf ${GITLAB_LOG_DIR}/gitlab
      ${GITLAB_INSTALL_DIR}/log &&     rm -rf ${GITLAB_INSTALL_DIR}/public/uploads
      &&   su-exec git ln -sf ${GITLAB_DATA_DIR}/uploads ${GITLAB_INSTALL_DIR}/public/uploads
      &&     rm -rf ${GITLAB_INSTALL_DIR}/.secret &&   su-exec git ln -sf ${GITLAB_DATA_DIR}/.secret
      ${GITLAB_INSTALL_DIR}/.secret &&     rm -rf ${GITLAB_INSTALL_DIR}/builds &&   rm
      -rf ${GITLAB_INSTALL_DIR}/shared &&     cp ${GITLAB_INSTALL_DIR}/lib/support/init.d/gitlab
      /etc/init.d/gitlab &&   chmod +x /etc/init.d/gitlab &&     rm -rf /etc/nginx/conf.d/default.conf
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i   -e "s|^[#]*UsePAM yes|UsePAM no|"   -e "s|^[#]*UsePrivilegeSeparation
      yes|UsePrivilegeSeparation no|"   -e "s|^[#]*PasswordAuthentication yes|PasswordAuthentication
      no|"   -e "s|^[#]*LogLevel INFO|LogLevel VERBOSE|"   /etc/ssh/sshd_config &&   echo
      "UseDNS no" >> /etc/ssh/sshd_config
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo -u ${GITLAB_USER} git config --global core.autocrlf input &&   sudo -u
      ${GITLAB_USER} git config --global gc.auto 0 &&   sudo -u ${GITLAB_USER} git
      config --global repack.writeBitmaps true &&   sudo -u ${GITLAB_USER} git config
      --global receive.advertisePushOptions true
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo ${GITLAB_USER}" ALL=(root) NOPASSWD: /usr/sbin/sshd >/etc/sudoers.d/git"
      &&   rm -rf "${GITLAB_HOME}/.ssh" &&   ln -sf "${GITLAB_DATA_DIR}/.ssh" "${GITLAB_HOME}/.ssh"'
    Name: run
    PrependShell: true
  - CmdLine:
    - apk del --purge .gitlab-build-deps &&   rm -rf ${GITLAB_INSTALL_DIR}/node_modules
      &&   rm -rf ${GITLAB_GITALY_INSTALL_DIR}/*.md &&   rm -rf ${GITLAB_GITALY_INSTALL_DIR}/Dockerfile
      &&   rm -rf ${GITLAB_GITALY_INSTALL_DIR}/Makefile &&   rm -rf ${GITLAB_WORKHORSE_INSTALL_DIR}/_build
      &&   rm -rf ${GITLAB_WORKHORSE_INSTALL_DIR}/testdata &&   rm -rf ${GITLAB_PAGES_INSTALL_DIR}/.git
      &&   rm -rf /usr/local/bundle/cache &&   rm -rf /usr/share/vim/vim80/doc/* &&   rm
      -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - Env:
    - Key: EXECJS_RUNTIME
      Value: '"Disabled"'
    Name: env
  - Name: workdir
    Path: ${GITLAB_INSTALL_DIR}
  - Name: expose
    Ports:
    - 22/tcp
    - 443/tcp
    - 80/tcp
  - Chown: ""
    Name: add
    SourcesAndDest:
    - install
    - /
  - CmdLine:
    - set -x &&   chmod -R u+x /etc/s6 &&   chmod -R u+x /etc/cont-init.d
    Name: run
    PrependShell: true
  From:
    Image: lanycrost/alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM lanycrost/alpine:3.8
