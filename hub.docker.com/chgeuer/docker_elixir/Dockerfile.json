{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "erlang-builder",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8 as erlang-builder",
      "Platform": "",
      "As": "erlang-builder",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "REFRESHED_AT",
              "Value": "2018-11-12"
            },
            {
              "Key": "ERLANG_VERSION",
              "Value": "21.1.1"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "HOME",
              "Value": "/opt/app/"
            },
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp/erlang-build"
        },
        {
          "CmdLine": [
            "mkdir -p \"${HOME}\" \u0026\u0026     adduser -s /bin/sh -u 1001 -G root -h \"${HOME}\" -S -D default \u0026\u0026     chown -R 1001:0 \"${HOME}\" \u0026\u0026     echo \"@main http://dl-cdn.alpinelinux.org/alpine/v3.8/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026     echo \"@community http://dl-cdn.alpinelinux.org/alpine/v3.8/community\" \u003e\u003e /etc/apk/repositories \u0026\u0026     echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026     apk --no-cache --update --available upgrade \u0026\u0026     apk add --no-cache --update pcre@edge \u0026\u0026     apk add --no-cache --update       bash       ca-certificates       openssl-dev       ncurses-dev       unixodbc-dev       zlib-dev \u0026\u0026     apk add --no-cache --virtual .erlang-build dpkg-dev dpkg binutils git autoconf build-base perl-dev \u0026\u0026     git clone -b OTP-${ERLANG_VERSION} --single-branch --depth 1 https://github.com/erlang/otp.git . \u0026\u0026     export ERL_TOP=/tmp/erlang-build \u0026\u0026     export PATH=$ERL_TOP/bin:$PATH \u0026\u0026     export CPPFlAGS=\"-D_BSD_SOURCE $CPPFLAGS\" \u0026\u0026     ./otp_build autoconf \u0026\u0026     ./configure --prefix=/usr       --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"       --sysconfdir=/etc       --mandir=/usr/share/man       --infodir=/usr/share/info       --without-javac --without-wx --without-debugger --without-observer --without-jinterface       --without-cosEvent --without-cosEventDomain --without-cosFileTransfer --without-cosNotification       --without-cosProperty --without-cosTime --without-cosTransactions --without-et --without-gs       --without-ic --without-megaco --without-orber --without-percept --without-typer       --enable-threads --enable-shared-zlib --enable-ssl=dynamic-ssl-lib --enable-hipe \u0026\u0026       make -j4 \u0026\u0026 make install \u0026\u0026       cd $HOME \u0026\u0026       rm -rf /tmp/erlang-build \u0026\u0026       update-ca-certificates --fresh \u0026\u0026       /usr/bin/erl -eval \"beam_lib:strip_release('/usr/lib/erlang/lib')\" -s init stop \u003e /dev/null \u0026\u0026       (/usr/bin/strip /usr/lib/erlang/erts-*/bin/* || true) \u0026\u0026       rm -rf /usr/lib/erlang/usr/ \u0026\u0026       rm -rf /usr/lib/erlang/misc/ \u0026\u0026       for DIR in /usr/lib/erlang/erts* /usr/lib/erlang/lib/*; do         rm -rf ${DIR}/src/*.erl;         rm -rf ${DIR}/doc;         rm -rf ${DIR}/man;         rm -rf ${DIR}/examples;         rm -rf ${DIR}/emacs;         rm -rf ${DIR}/c_src;       done \u0026\u0026       rm -rf /usr/lib/erlang/erts-*/lib/ \u0026\u0026       rm /usr/lib/erlang/erts-*/bin/dialyzer \u0026\u0026       rm /usr/lib/erlang/erts-*/bin/erlc \u0026\u0026       rm /usr/lib/erlang/erts-*/bin/typer \u0026\u0026       rm /usr/lib/erlang/erts-*/bin/ct_run \u0026\u0026       apk del --force .erlang-build"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "erlang",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8 as erlang",
      "Platform": "",
      "As": "erlang",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "REFRESHED_AT",
              "Value": "2018-11-12"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "erlang-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/lib/erlang",
            "/usr/lib/erlang"
          ]
        },
        {
          "CmdLine": [
            "echo \"@main http://dl-cdn.alpinelinux.org/alpine/v3.8/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026     echo \"@community http://dl-cdn.alpinelinux.org/alpine/v3.8/community\" \u003e\u003e /etc/apk/repositories \u0026\u0026     echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" \u003e\u003e /etc/apk/repositories \u0026\u0026     apk --update add ncurses-libs openssl \u0026\u0026     for F in erl erlc run_erl to_erl; do       ln -s /usr/lib/erlang/bin/${F} /usr/bin/${F};     done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    },
    {
      "Name": "elixir",
      "BaseName": "erlang",
      "SourceCode": "FROM erlang as elixir",
      "Platform": "",
      "As": "elixir",
      "From": {
        "Stage": {
          "Named": "erlang",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "ELIXIR_VERSION",
              "Value": "1.7.4"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk --no-cache --virtual .elixir-install add wget \u0026\u0026     wget --no-check-certificate \"https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip\" \u0026\u0026     apk del --force .elixir-install \u0026\u0026     mkdir -p /usr/lib/elixir \u0026\u0026     unzip Precompiled.zip -d /usr/lib/elixir/ \u0026\u0026     rm Precompiled.zip \u0026\u0026     for F in elixir elixirc iex mix; do       ln -s /usr/lib/elixir/bin/${F} /usr/bin/${F};     done \u0026\u0026     mix local.hex --force \u0026\u0026     mix local.rebar --force"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "elixir",
      "SourceCode": "FROM elixir",
      "Platform": "",
      "From": {
        "Stage": {
          "Named": "elixir",
          "Index": 2
        }
      },
      "Commands": [
        {
          "CmdLine": [
            "apk --update add nodejs nodejs-npm inotify-tools"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}