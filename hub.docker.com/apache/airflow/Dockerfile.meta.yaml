MetaArgs:
- DefaultValue: '"python:3.6-slim-stretch"'
  Key: PYTHON_BASE_IMAGE
  ProvidedValue: null
  Value: '"python:3.6-slim-stretch"'
Stages:
- As: main
  BaseName: ${PYTHON_BASE_IMAGE}
  Commands:
  - Name: shell
    Shell:
    - /bin/bash
    - -o
    - pipefail
    - -e
    - -u
    - -x
    - -c
  - Key: PYTHON_BASE_IMAGE
    Name: arg
    Value: '"python:3.6-slim-stretch"'
  - Env:
    - Key: PYTHON_BASE_IMAGE
      Value: ${PYTHON_BASE_IMAGE}
    Name: env
  - Key: AIRFLOW_VERSION
    Name: arg
    Value: '"2.0.0.dev0"'
  - Env:
    - Key: AIRFLOW_VERSION
      Value: $AIRFLOW_VERSION
    Name: env
  - CmdLine:
    - 'echo "Base image: ${PYTHON_BASE_IMAGE}"'
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo "Airflow version: ${AIRFLOW_VERSION}"'
    Name: run
    PrependShell: true
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    - Key: LANGUAGE
      Value: C.UTF-8
    - Key: LANG
      Value: C.UTF-8
    - Key: LC_ALL
      Value: C.UTF-8
    - Key: LC_CTYPE
      Value: C.UTF-8
    - Key: LC_MESSAGES
      Value: C.UTF-8
    Name: env
  - Key: DEPENDENCIES_EPOCH_NUMBER
    Name: arg
    Value: '"2"'
  - Env:
    - Key: DEPENDENCIES_EPOCH_NUMBER
      Value: ${DEPENDENCIES_EPOCH_NUMBER}
    Name: env
  - CmdLine:
    - apt-get update     && apt-get install -y --no-install-recommends            curl            gnupg2     &&
      apt-get autoremove -yqq --purge     && apt-get clean     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://deb.nodesource.com/setup_10.x | bash -     && curl https://dl.yarnpkg.com/debian/pubkey.gpg
      | apt-key add - > /dev/null     && echo "deb https://dl.yarnpkg.com/debian/
      stable main" > /etc/apt/sources.list.d/yarn.list     && apt-get update     &&
      apt-get install -y --no-install-recommends            apt-utils            build-essential            dirmngr            freetds-bin            freetds-dev            git            gosu            libffi-dev            libkrb5-dev            libpq-dev            libsasl2-2            libsasl2-dev            libsasl2-modules            libssl-dev            locales             netcat            nodejs            rsync            sasl2-bin            sudo            unixodbc            unixodbc-dev            yarn     &&
      apt-get autoremove -yqq --purge     && apt-get clean     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update     && apt-get install -y --no-install-recommends            graphviz     &&
      apt-get autoremove -yqq --purge     && apt-get clean     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - KEY="A4A9406876FCBD3C456770C88C718D3B5072E1F5"     && GNUPGHOME="$(mktemp -d)"     &&
      export GNUPGHOME     && for KEYSERVER in $(shuf -e             ha.pool.sks-keyservers.net             hkp://p80.pool.sks-keyservers.net:80             keyserver.ubuntu.com             hkp://keyserver.ubuntu.com:80             pgp.mit.edu)
      ; do           gpg --keyserver "${KEYSERVER}" --recv-keys "${KEY}" && break
      || true ;        done     && gpg --export "${KEY}" | apt-key add -     && gpgconf
      --kill all     rm -rf "${GNUPGHOME}";     apt-key list > /dev/null     && echo
      "deb http://repo.mysql.com/apt/debian/ stretch mysql-5.6" | tee -a /etc/apt/sources.list.d/mysql.list     &&
      apt-get update     && apt-get install --no-install-recommends -y         libmysqlclient-dev         mysql-client     &&
      apt-get autoremove -yqq --purge     && apt-get clean && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - CmdLine:
    - 'adduser airflow     && echo "airflow ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/airflow     &&
      chmod 0440 /etc/sudoers.d/airflow'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-8-openjdk-amd64/
    Name: env
  - CmdLine:
    - mkdir -pv /usr/share/man/man1     && mkdir -pv /usr/share/man/man7     && apt-get
      update     && apt-get install --no-install-recommends -y       gnupg       apt-transport-https       bash-completion       ca-certificates       software-properties-common       krb5-user       ldap-utils       less       lsb-release       net-tools       openjdk-8-jdk       openssh-client       openssh-server       postgresql-client       python-selinux       sqlite3       tmux       unzip       vim     &&
      apt-get autoremove -yqq --purge     && apt-get clean     && rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: HADOOP_HOME
      Value: '"/opt/hadoop-cdh"'
    - Key: HIVE_HOME
      Value: '"/opt/hive"'
    Name: env
  - CmdLine:
    - HADOOP_DISTRO="cdh"     && HADOOP_MAJOR="5"     && HADOOP_DISTRO_VERSION="5.11.0"     &&
      HADOOP_VERSION="2.6.0"     && HADOOP_URL="https://archive.cloudera.com/${HADOOP_DISTRO}${HADOOP_MAJOR}/${HADOOP_DISTRO}/${HADOOP_MAJOR}/"    &&
      HADOOP_DOWNLOAD_URL="${HADOOP_URL}hadoop-${HADOOP_VERSION}-${HADOOP_DISTRO}${HADOOP_DISTRO_VERSION}.tar.gz"     &&
      HADOOP_TMP_FILE="/tmp/hadoop.tar.gz"     && mkdir -pv "${HADOOP_HOME}"     &&
      curl -L "${HADOOP_DOWNLOAD_URL}" -o "${HADOOP_TMP_FILE}"     && tar xzf "${HADOOP_TMP_FILE}"
      --absolute-names --strip-components 1 -C "${HADOOP_HOME}"     && rm "${HADOOP_TMP_FILE}"     &&
      echo "Installing Hive"     && HIVE_VERSION="1.1.0"     && HIVE_URL="${HADOOP_URL}hive-${HIVE_VERSION}-${HADOOP_DISTRO}${HADOOP_DISTRO_VERSION}.tar.gz"     &&
      HIVE_VERSION="1.1.0"     && HIVE_TMP_FILE="/tmp/hive.tar.gz"     && mkdir -pv
      "${HIVE_HOME}"     && mkdir -pv "/user/hive/warehouse"     && chmod -R 777 "${HIVE_HOME}"     &&
      chmod -R 777 "/user/"     && curl -L "${HIVE_URL}" -o "${HIVE_TMP_FILE}"     &&
      tar xzf "${HIVE_TMP_FILE}" --strip-components 1 -C "${HIVE_HOME}"     && rm
      "${HIVE_TMP_FILE}"
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"${PATH}:/opt/hive/bin"'
    Name: env
  - Env:
    - Key: MINICLUSTER_HOME
      Value: '"/opt/minicluster"'
    Name: env
  - CmdLine:
    - MINICLUSTER_BASE="https://github.com/bolkedebruin/minicluster/releases/download/"     &&
      MINICLUSTER_VER="1.1"     && MINICLUSTER_URL="${MINICLUSTER_BASE}${MINICLUSTER_VER}/minicluster-${MINICLUSTER_VER}-SNAPSHOT-bin.zip"     &&
      MINICLUSTER_TMP_FILE="/tmp/minicluster.zip"     && mkdir -pv "${MINICLUSTER_HOME}"     &&
      curl -L "${MINICLUSTER_URL}" -o "${MINICLUSTER_TMP_FILE}"     && unzip "${MINICLUSTER_TMP_FILE}"
      -d "/opt"     && rm "${MINICLUSTER_TMP_FILE}"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://download.docker.com/linux/debian/gpg | apt-key add -     &&
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian
      stretch stable"     && apt-get update     && apt-get -y install --no-install-recommends
      docker-ce     && apt-get autoremove -yqq --purge     && apt-get clean && rm
      -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Key: KUBECTL_VERSION
    Name: arg
    Value: '"v1.15.3"'
  - CmdLine:
    - KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"   &&
      curl -L "${KUBECTL_URL}" -o "/usr/local/bin/kubectl"   && chmod +x /usr/local/bin/kubectl
    Name: run
    PrependShell: true
  - Key: KIND_VERSION
    Name: arg
    Value: '"v0.6.1"'
  - CmdLine:
    - KIND_URL="https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64"    &&
      curl -L "${KIND_URL}" -o "/usr/local/bin/kind"    && chmod +x /usr/local/bin/kind
    Name: run
    PrependShell: true
  - Key: RAT_VERSION
    Name: arg
    Value: '"0.13"'
  - CmdLine:
    - RAT_URL="https://repo1.maven.org/maven2/org/apache/rat/apache-rat/${RAT_VERSION}/apache-rat-${RAT_VERSION}.jar"     &&
      RAT_JAR="/opt/apache-rat.jar"     && RAT_JAR_MD5="${RAT_JAR}.md5"     && RAT_URL_MD5="${RAT_URL}.md5"     &&
      echo "Downloading RAT from ${RAT_URL} to ${RAT_JAR}"     && curl -L "${RAT_URL}"
      -o "${RAT_JAR}"     && curl -L "${RAT_URL_MD5}" -o "${RAT_JAR_MD5}"     && jar
      -tf "${RAT_JAR}" > /dev/null     && md5sum -c <<<"$(cat "${RAT_JAR_MD5}") ${RAT_JAR}"
    Name: run
    PrependShell: true
  - Key: PIP_NO_CACHE_DIR
    Name: arg
    Value: '"true"'
  - Env:
    - Key: PIP_NO_CACHE_DIR
      Value: ${PIP_NO_CACHE_DIR}
    Name: env
  - CmdLine:
    - 'echo "Pip no cache dir: ${PIP_NO_CACHE_DIR}"'
    Name: run
    PrependShell: true
  - Key: PIP_VERSION
    Name: arg
    Value: '"19.0.2"'
  - Env:
    - Key: PIP_VERSION
      Value: ${PIP_VERSION}
    Name: env
  - CmdLine:
    - 'echo "Pip version: ${PIP_VERSION}"'
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --upgrade pip==${PIP_VERSION}
    Name: run
    PrependShell: true
  - Env:
    - Key: GCLOUD_HOME
      Value: '"/opt/gcloud"'
    Name: env
  - CmdLine:
    - GCLOUD_VERSION="274.0.1"     && GCOUD_URL="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz"     &&
      GCLOUD_TMP_FILE="/tmp/gcloud.tar.gz"     && export CLOUDSDK_CORE_DISABLE_PROMPTS=1     &&
      mkdir -p /opt/gcloud     && curl "${GCOUD_URL}" -o "${GCLOUD_TMP_FILE}"    &&
      tar xzf "${GCLOUD_TMP_FILE}" --strip-components 1 -C "${GCLOUD_HOME}"     &&
      rm -rf "${GCLOUD_TMP_FILE}"     && echo '. /opt/gcloud/completion.bash.inc'
      >> /etc/bash.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: '"$PATH:${GCLOUD_HOME}/bin"'
    Name: env
  - Env:
    - Key: AWS_HOME
      Value: '"/opt/aws"'
    Name: env
  - CmdLine:
    - AWS_TMP_DIR="/tmp/awscli/"     && AWS_TMP_BUNDLE="${AWS_TMP_DIR}/awscli-bundle.zip"     &&
      AWS_URL="https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"     && mkdir -pv
      "${AWS_TMP_DIR}"     && curl "${AWS_URL}" -o "${AWS_TMP_BUNDLE}"     && unzip
      "${AWS_TMP_BUNDLE}" -d "${AWS_TMP_DIR}"     && "${AWS_TMP_DIR}/awscli-bundle/install"
      -i "${AWS_HOME}" -b /usr/local/bin/aws     && echo "complete -C '${AWS_HOME}/bin/aws_completer'
      aws" >> /etc/bash.bashrc     && rm -rf "${AWS_TMP_DIR}"
    Name: run
    PrependShell: true
  - Key: HOME
    Name: arg
    Value: /root
  - Env:
    - Key: HOME
      Value: ${HOME}
    Name: env
  - Key: AIRFLOW_HOME
    Name: arg
    Value: /root/airflow
  - Env:
    - Key: AIRFLOW_HOME
      Value: ${AIRFLOW_HOME}
    Name: env
  - Key: AIRFLOW_SOURCES
    Name: arg
    Value: /opt/airflow
  - Env:
    - Key: AIRFLOW_SOURCES
      Value: ${AIRFLOW_SOURCES}
    Name: env
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}
  - CmdLine:
    - mkdir -pv ${AIRFLOW_HOME}     mkdir -pv ${AIRFLOW_HOME}/dags     mkdir -pv ${AIRFLOW_HOME}/logs
    Name: run
    PrependShell: true
  - Key: PIP_DEPENDENCIES_EPOCH_NUMBER
    Name: arg
    Value: '"2"'
  - Env:
    - Key: PIP_DEPENDENCIES_EPOCH_NUMBER
      Value: ${PIP_DEPENDENCIES_EPOCH_NUMBER}
    Name: env
  - Key: CASS_DRIVER_NO_CYTHON
    Name: arg
    Value: '"1"'
  - Key: CASS_DRIVER_BUILD_CONCURRENCY
    Name: arg
    Value: '"8"'
  - Env:
    - Key: CASS_DRIVER_BUILD_CONCURRENCY
      Value: ${CASS_DRIVER_BUILD_CONCURRENCY}
    Name: env
  - Env:
    - Key: CASS_DRIVER_NO_CYTHON
      Value: ${CASS_DRIVER_NO_CYTHON}
    Name: env
  - Key: AIRFLOW_REPO
    Name: arg
    Value: apache/airflow
  - Env:
    - Key: AIRFLOW_REPO
      Value: ${AIRFLOW_REPO}
    Name: env
  - Key: AIRFLOW_BRANCH
    Name: arg
    Value: master
  - Env:
    - Key: AIRFLOW_BRANCH
      Value: ${AIRFLOW_BRANCH}
    Name: env
  - Key: AIRFLOW_EXTRAS
    Name: arg
    Value: '"all"'
  - Env:
    - Key: AIRFLOW_EXTRAS
      Value: ${AIRFLOW_EXTRAS}
    Name: env
  - CmdLine:
    - 'echo "Installing with extras: ${AIRFLOW_EXTRAS}."'
    Name: run
    PrependShell: true
  - Key: AIRFLOW_CONTAINER_CI_OPTIMISED_BUILD
    Name: arg
    Value: '"false"'
  - Env:
    - Key: AIRFLOW_CONTAINER_CI_OPTIMISED_BUILD
      Value: ${AIRFLOW_CONTAINER_CI_OPTIMISED_BUILD}
    Name: env
  - Key: AIRFLOW_CI_BUILD_EPOCH
    Name: arg
    Value: '"1"'
  - Env:
    - Key: AIRFLOW_CI_BUILD_EPOCH
      Value: ${AIRFLOW_CI_BUILD_EPOCH}
    Name: env
  - CmdLine:
    - if [[ "${AIRFLOW_CONTAINER_CI_OPTIMISED_BUILD}" == "true" ]]; then         pip
      install         "https://github.com/apache/airflow/archive/${AIRFLOW_BRANCH}.tar.gz#egg=apache-airflow[${AIRFLOW_EXTRAS}]"         &&
      pip uninstall --yes apache-airflow;     fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/www/yarn.lock
    - airflow/www/package.json
    - ${AIRFLOW_SOURCES}/airflow/www/
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}/airflow/www
  - CmdLine:
    - yarn install --frozen-lockfile
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - setup.py
    - ${AIRFLOW_SOURCES}/setup.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - setup.cfg
    - ${AIRFLOW_SOURCES}/setup.cfg
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/version.py
    - ${AIRFLOW_SOURCES}/airflow/version.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/__init__.py
    - ${AIRFLOW_SOURCES}/airflow/__init__.py
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/bin/airflow
    - ${AIRFLOW_SOURCES}/airflow/bin/airflow
  - CmdLine:
    - pip install -e ".[${AIRFLOW_EXTRAS}]"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}/airflow/www
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/www/
    - ${AIRFLOW_SOURCES}/airflow/www/
  - CmdLine:
    - yarn run prod
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - scripts/docker/entrypoint.sh
    - /entrypoint.sh
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .github/
    - ${AIRFLOW_SOURCES}/.github/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - dags/
    - ${AIRFLOW_SOURCES}/dags/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - common/
    - ${AIRFLOW_SOURCES}/common/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - licenses/
    - ${AIRFLOW_SOURCES}/licenses/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - scripts/ci/
    - ${AIRFLOW_SOURCES}/scripts/ci/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docs/
    - ${AIRFLOW_SOURCES}/docs/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - tests/
    - ${AIRFLOW_SOURCES}/tests/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - airflow/
    - ${AIRFLOW_SOURCES}/airflow/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .coveragerc
    - .rat-excludes
    - .flake8
    - pylintrc
    - LICENSE
    - MANIFEST.in
    - NOTICE
    - CHANGELOG.txt
    - .github
    - pytest.ini
    - setup.cfg
    - setup.py
    - ${AIRFLOW_SOURCES}/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - Dockerfile
    - ${AIRFLOW_SOURCES}/Dockerfile
  - CmdLine:
    - register-python-argcomplete airflow >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "source /etc/bash_completion" >> ~/.bashrc     && kubectl completion bash
      >> ~/.bashrc
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}
  - Key: ADDITIONAL_PYTHON_DEPS
    Name: arg
    Value: '""'
  - CmdLine:
    - if [[ -n "${ADDITIONAL_PYTHON_DEPS}" ]]; then         pip install ${ADDITIONAL_PYTHON_DEPS};     fi
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${AIRFLOW_SOURCES}
  - Env:
    - Key: PATH
      Value: '"${HOME}:${PATH}"'
    Name: env
  - Name: expose
    Ports:
    - "8080"
  - CmdLine:
    - /usr/local/bin/dumb-init
    - --
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - --help
    Name: cmd
    PrependShell: false
  From:
    Image: ${PYTHON_BASE_IMAGE}
  Name: main
  Platform: ""
  SourceCode: FROM ${PYTHON_BASE_IMAGE} as main
