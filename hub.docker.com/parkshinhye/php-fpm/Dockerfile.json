{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "laradock/php-fpm:1.4-70",
      "SourceCode": "FROM laradock/php-fpm:1.4-70",
      "Platform": "",
      "From": {
        "Image": "laradock/php-fpm:1.4-70"
      },
      "Commands": [
        {
          "Maintainer": "Mahmoud Zalt \u003cmahmoud@zalt.me\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "INSTALL_SOAP",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_SOAP} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get -y install libxml2-dev php-soap \u0026\u0026     docker-php-ext-install soap ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_XDEBUG",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_XDEBUG} = true ]; then     pecl install xdebug \u0026\u0026     docker-php-ext-enable xdebug ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./ini/xdebug.ini",
            "/usr/local/etc/php/conf.d/xdebug.ini"
          ]
        },
        {
          "Key": "INSTALL_BLACKFIRE",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then     version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\")     \u0026\u0026 curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version     \u0026\u0026 tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp     \u0026\u0026 mv /tmp/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so     \u0026\u0026 printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" \u003e $PHP_INI_DIR/conf.d/blackfire.ini ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PHPREDIS",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PHPREDIS} = true ]; then     pecl install -o -f redis     \u0026\u0026  rm -rf /tmp/pear     \u0026\u0026  docker-php-ext-enable redis ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_SWOOLE",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_SWOOLE} = true ]; then     pecl install swoole     \u0026\u0026  docker-php-ext-enable swoole ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_MONGO",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MONGO} = true ]; then     pecl install mongodb \u0026\u0026     docker-php-ext-enable mongodb ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_ZIP_ARCHIVE",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then     docker-php-ext-install zip ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_BCMATH",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_BCMATH} = true ]; then     docker-php-ext-install bcmath ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_MEMCACHED",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MEMCACHED} = true ]; then     curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\"     \u0026\u0026 mkdir -p memcached     \u0026\u0026 tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1     \u0026\u0026 (         cd memcached         \u0026\u0026 phpize         \u0026\u0026 ./configure         \u0026\u0026 make -j$(nproc)         \u0026\u0026 make install     )     \u0026\u0026 rm -r memcached     \u0026\u0026 rm /tmp/memcached.tar.gz     \u0026\u0026 docker-php-ext-enable memcached ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_EXIF",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_EXIF} = true ]; then     docker-php-ext-install exif ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_AEROSPIKE",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_AEROSPIKE",
              "Value": "${INSTALL_AEROSPIKE}"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./ini/aerospike.ini",
            "/usr/local/etc/php/conf.d/aerospike.ini"
          ]
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_AEROSPIKE} = true ]; then     curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\"     \u0026\u0026 mkdir -p aerospike-client-php     \u0026\u0026 tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1     \u0026\u0026 (         cd aerospike-client-php/src/aerospike         \u0026\u0026 phpize         \u0026\u0026 ./build.sh         \u0026\u0026 make install     )     \u0026\u0026 rm /tmp/aerospike-client-php.tar.gz     \u0026\u0026 docker-php-ext-enable aerospike ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_OPCACHE",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_OPCACHE} = true ]; then     docker-php-ext-install opcache ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./ini/opcache.ini",
            "/usr/local/etc/php/conf.d/opcache.ini"
          ]
        },
        {
          "Key": "INSTALL_MYSQLI",
          "Name": "arg",
          "Value": "true"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MYSQLI} = true ]; then     docker-php-ext-install mysqli ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_TOKENIZER",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_TOKENIZER} = true ]; then     docker-php-ext-install tokenizer ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_INTL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_INTL} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get install -y zlib1g-dev libicu-dev g++ \u0026\u0026     docker-php-ext-configure intl \u0026\u0026     docker-php-ext-install intl ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_GHOSTSCRIPT",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_GHOSTSCRIPT} = true ]; then     apt-get update -yqq     \u0026\u0026 apt-get install -y     poppler-utils     ghostscript ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_LDAP",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_LDAP} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get install -y libldap2-dev \u0026\u0026     docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \u0026\u0026     docker-php-ext-install ldap ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_MSSQL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_MSSQL",
              "Value": "${INSTALL_MSSQL}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_MSSQL} = true ]; then     apt-get update -yqq         \u0026\u0026 apt-get install -y apt-transport-https         \u0026\u0026 curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -         \u0026\u0026 curl https://packages.microsoft.com/config/debian/8/prod.list \u003e /etc/apt/sources.list.d/mssql-release.list         \u0026\u0026 apt-get update -yqq         \u0026\u0026 ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales         \u0026\u0026 echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen         \u0026\u0026 locale-gen         \u0026\u0026 pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview         \u0026\u0026 docker-php-ext-enable pdo_sqlsrv sqlsrv ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./ini/laravel.ini",
            "/usr/local/etc/php/conf.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./ini/laravel.pool.conf",
            "/usr/local/etc/php-fpm.d/"
          ]
        },
        {
          "CmdLine": [
            "usermod -u 1000 www-data"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        },
        {
          "CmdLine": [
            "php-fpm"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "9000"
          ]
        }
      ]
    }
  ]
}