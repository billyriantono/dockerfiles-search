{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "Patrick Thomas \u003cpatrick.thomas@staudacher.de\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y curl php php-imagick php-mysqli php-mbstring php-curl php-xdebug php-pdo php-zip php-gd php-exif php-bcmath php-pear php7.2-dev git openssh-server zlib1g-dev supervisor imagemagick libmagickwand-dev libimage-exiftool-perl mysql-client libyaml-dev gnupg python-pip python-netaddr ffmpeg cron sudo vim zip  \u0026\u0026 apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367  \u0026\u0026 apt-get update  \u0026\u0026 pip install 'docker-py\u003e=1.7.0'  \u0026\u0026 pip install 'docker-compose\u003e=1.7.0'  \u0026\u0026 pip install zabbix-api  \u0026\u0026 pip install git+https://github.com/ansible/ansible.git@v2.9.2  \u0026\u0026 a2enmod headers rewrite  \u0026\u0026 rm -rf /var/lib/apt/lists/*  \u0026\u0026 rm -Rf /usr/share/doc \u0026\u0026 rm -Rf /usr/share/man  \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$PATH:$HOME/.composer/vendor/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_IDE_CONFIG",
              "Value": "\"serverName=docker\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "WEB_DOCUMENT_ROOT",
              "Value": "/var/www/html/public"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "apache/000-default.conf",
            "/etc/apache2/sites-available/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "apache/apache2.conf",
            "/etc/apache2/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "supervisor/*.conf",
            "/etc/supervisor/conf.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "php.rmts.ini",
            "/etc/php/7.2/apache2/php.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "xdebug.rmts.ini",
            "/etc/php/7.2/apache2/conf.d/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "laravel-scheduler",
            "/etc/cron.d/laravel-scheduler"
          ]
        },
        {
          "CmdLine": [
            "chmod 0600 /etc/cron.d/laravel-scheduler"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -ri -e 's!/var/www/html!${WEB_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/run/sshd \u0026\u0026 sed -i \"s/UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g\" /etc/ssh/sshd_config   \u0026\u0026 echo 'PermitRootLogin yes' \u003e\u003e /etc/ssh/sshd_config   \u0026\u0026 touch /root/.Xauthority   \u0026\u0026 sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd   \u0026\u0026 true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "imagemagic_config",
          "Name": "arg",
          "Value": "/etc/ImageMagick-6/policy.xml"
        },
        {
          "CmdLine": [
            "sed -i 's/\u003cpolicy domain=\"coder\" rights=\"none\" pattern=\"PDF\" \\/\u003e/\u003cpolicy domain=\"coder\" rights=\"read|write\" pattern=\"PDF\" \\/\u003e/g' $imagemagic_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/\u003cpolicy domain=\"coder\" rights=\"none\" pattern=\"EPS\" \\/\u003e/\u003cpolicy domain=\"coder\" rights=\"read|write\" pattern=\"EPS\" \\/\u003e/g' $imagemagic_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/html"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "22"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "9001"
          ]
        },
        {
          "Env": [
            {
              "Key": "QUEUE_WORKER",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "QUEUE_WORKER_DIR",
              "Value": "\"/var/www/html/resources/queue-worker\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}