{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04"
      },
      "Commands": [
        {
          "Key": "ARCH",
          "Name": "arg",
          "Value": "x86_64"
        },
        {
          "Key": "PYTHON_VERSION",
          "Name": "arg",
          "Value": "3.7.0"
        },
        {
          "Key": "MAJOR_VERSION",
          "Name": "arg",
          "Value": "3.7"
        },
        {
          "Key": "TCH",
          "Name": "arg",
          "Value": "0.4.1.post2"
        },
        {
          "Key": "CU",
          "Name": "arg",
          "Value": "90"
        },
        {
          "Key": "PY",
          "Name": "arg",
          "Value": "37"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get dist-upgrade -y  \u0026\u0026 apt-get install -y      build-essential      libboost-python-dev      libbz2-dev      libexpat1-dev      libffi-dev      libgdbm-dev      libjpeg-dev      liblapack-dev      liblzma-dev      libncurses5-dev      libreadline-dev      libsm6      libspatialindex-dev      libssl-dev      libsqlite3-dev      libxml2-dev      libxslt-dev      lzma-dev      git      gfortran      wget      xz-utils      zlib1g-dev  \u0026\u0026 apt-get clean \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /tmp   \u0026\u0026 TARGET_ARCH=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"   \u0026\u0026 wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz   \u0026\u0026 tar xvf Python-${PYTHON_VERSION}.tgz   \u0026\u0026 cd Python-${PYTHON_VERSION}   \u0026\u0026 ./configure      --build=\"$TARGET_ARCH\"      --with-lto      --with-system-ffi      --with-system-expat      --enable-ipv6      --enable-optimizations      --enable-shared      --enable-loadable-sqlite-extensions   \u0026\u0026 make -j4   \u0026\u0026 make altinstall   \u0026\u0026 rm -rf /tmp/Python*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig -v    \u0026\u0026 cd /usr/local/bin    \u0026\u0026 find /usr/local -depth       \\( \\( -type d -and \\( -name test -or -name tests -or -name __pycache__ \\) \\) -or          \\( -type f -and \\( -name '*.pyc' -or -name '*.pyo' \\) \\) \\)       -exec rm -rf '{}' +    \u0026\u0026 find /var/lib/apt/lists            /usr/share/man            /usr/share/doc            /var/log       -type f -exec rm -rf '{}' +"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/local/bin    \u0026\u0026 ln -sf easy_install-${MAJOR_VERSION} easy_install    \u0026\u0026 ln -sf idle${MAJOR_VERSION} idle    \u0026\u0026 ln -sf pydoc${MAJOR_VERSION} pydoc    \u0026\u0026 ln -sf python${MAJOR_VERSION} python    \u0026\u0026 ln -sf python-config${MAJOR_VERSION} python-config    \u0026\u0026 ln -sf pip${MAJOR_VERSION} pip    \u0026\u0026 pip${MAJOR_VERSION} --no-cache-dir install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/app"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "/app"
          ]
        },
        {
          "CmdLine": [
            "python -m pip install cython torch"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m pip install -r deps/requirements.txt"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}