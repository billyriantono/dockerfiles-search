MetaArgs: null
Stages:
- BaseName: alpine:3.10
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.6
    Name: env
  - Env:
    - Key: HEADERS_MORE_VERSION
      Value: "0.33"
    Name: env
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& CONFIG=\"\t--prefix=/etc/nginx
      \t--sbin-path=/usr/sbin/nginx \t--modules-path=/usr/lib/nginx/modules \t--conf-path=/etc/nginx/nginx.conf
      \t--error-log-path=/var/log/nginx/error.log \t--http-log-path=/var/log/nginx/access.log
      \t--pid-path=/var/run/nginx.pid \t--lock-path=/var/run/nginx.lock \t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t--user=nginx \t--group=nginx \t--with-http_ssl_module \t--with-http_realip_module
      \t--with-http_addition_module \t--with-http_sub_module \t--with-http_dav_module
      \t--with-http_flv_module \t--with-http_mp4_module \t--with-http_gunzip_module
      \t--with-http_gzip_static_module \t--with-http_random_index_module \t--with-http_secure_link_module
      \t--with-http_stub_status_module \t--with-http_auth_request_module \t--with-http_xslt_module=dynamic
      \t--with-http_image_filter_module=dynamic \t--with-http_geoip_module=dynamic
      \t--with-http_perl_module=dynamic \t--with-threads \t--with-stream \t--with-stream_ssl_module
      \t--with-stream_ssl_preread_module \t--with-stream_realip_module \t--with-stream_geoip_module=dynamic
      \t--with-http_slice_module \t--with-mail \t--with-mail_ssl_module \t--with-compat
      \t--with-file-aio \t--with-http_v2_module \t--add-module=/usr/src/ngx_brotli
      \t--add-module=/usr/src/headers-more \t\" \t&& set -xe \t&& addgroup -S nginx
      \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&&
      apk add --no-cache --virtual .build-deps \tgcc \tlibc-dev \tmake \topenssl-dev
      \tpcre-dev \tzlib-dev \tlinux-headers \tcurl \tgnupg1 \tlibxslt-dev \tgd-dev
      \tgeoip-dev \tperl-dev \t&& apk add --no-cache --virtual .brotli-build-deps
      \tautoconf \tlibtool \tautomake \tgit \tg++ \tcmake \t&& mkdir -p /usr/src \t&&
      cd /usr/src \t&& git clone --recursive https://github.com/google/ngx_brotli.git
      \t&& git clone -o v${HEADERS_MORE_VERSION} --depth 1 https://github.com/openresty/headers-more-nginx-module.git
      headers-more \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
      -o nginx.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc
      \ -o nginx.tar.gz.asc \t&& sha512sum nginx.tar.gz nginx.tar.gz.asc \t&& export
      GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver ipv4.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEYS\" \t&& gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz
      \t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar
      -zxC /usr/src -f nginx.tar.gz \t&& rm nginx.tar.gz \t&& cd /usr/src/nginx-$NGINX_VERSION
      \t&& ./configure $CONFIG --with-debug \t&& make -j$(getconf _NPROCESSORS_ONLN)
      \t&& mv objs/nginx objs/nginx-debug \t&& mv objs/ngx_http_xslt_filter_module.so
      objs/ngx_http_xslt_filter_module-debug.so \t&& mv objs/ngx_http_image_filter_module.so
      objs/ngx_http_image_filter_module-debug.so \t&& mv objs/ngx_http_geoip_module.so
      objs/ngx_http_geoip_module-debug.so \t&& mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so
      \t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so
      \t&& ./configure $CONFIG \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& make
      install \t&& rm -rf /etc/nginx/html/ \t&& mkdir /etc/nginx/conf.d/ \t&& mkdir
      -p /usr/share/nginx/html/ \t&& install -m644 html/index.html /usr/share/nginx/html/
      \t&& install -m644 html/50x.html /usr/share/nginx/html/ \t&& install -m755 objs/nginx-debug
      /usr/sbin/nginx-debug \t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so
      /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \t&& install -m755
      objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so
      \t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so
      \t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so
      \t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so
      \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx*
      \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf /usr/src/nginx-$NGINX_VERSION
      \t&& rm -rf /usr/src/ngx_brotli \t\t&& apk add --no-cache --virtual .gettext
      gettext \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$( \tscanelf --needed
      --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \t| awk
      '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t| sort -u \t| xargs -r apk
      info --installed \t| sort -u \t)\" \t&& apk add --no-cache --virtual .nginx-rundeps
      tzdata $runDeps \t&& apk del .build-deps \t&& apk del .brotli-build-deps \t&&
      apk del .gettext \t&& mv /tmp/envsubst /usr/local/bin/ \t\t&& ln -sf /dev/stdout
      /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log \t&&
      apk add --no-cache curl"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.vh.default.conf
    - /etc/nginx/conf.d/default.conf
  - Name: expose
    Ports:
    - "443"
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.10
