{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:8.14.0-alpine",
      "SourceCode": "FROM node:8.14.0-alpine",
      "Platform": "",
      "From": {
        "Image": "node:8.14.0-alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "GLIBC_PKG_VERSION=\"${GLIBC_PKG_VERSION:-2.26-r0}\"   \u0026\u0026 GLIBC_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download/$GLIBC_PKG_VERSION\"   \u0026\u0026 GLIBC_SSH_KEY=\"/etc/apk/keys/sgerrand.rsa.pub\"   \u0026\u0026 GLIBC_PKG_FILE=\"glibc-$GLIBC_PKG_VERSION.apk\"   \u0026\u0026 GLIBC_BIN_PKG_FILE=\"glibc-bin-$GLIBC_PKG_VERSION.apk\"   \u0026\u0026 apk add --no-cache --virtual=.fetchdeps wget ca-certificates   \u0026\u0026 wget -q -O \"$GLIBC_SSH_KEY\" \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\"   \u0026\u0026 wget -q \"$GLIBC_URL/$GLIBC_PKG_FILE\" \"$GLIBC_URL/$GLIBC_BIN_PKG_FILE\"   \u0026\u0026 apk add --no-cache \"$GLIBC_PKG_FILE\" \"$GLIBC_BIN_PKG_FILE\"   \u0026\u0026 apk del .fetchdeps   \u0026\u0026 rm \"$GLIBC_SSH_KEY\"   \u0026\u0026 rm ~/.wget-hsts   \u0026\u0026 rm \"$GLIBC_PKG_FILE\" \"$GLIBC_BIN_PKG_FILE\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/cache/apk   \u0026\u0026 ln -s /var/cache/apk /etc/apk/cache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apk add --no-cache   bash   build-base   binutils-gold   git   linux-headers   openssl   openssl-dev   python   python2-dev   wget"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm /etc/apk/cache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NODENV_ROOT",
              "Value": "/opt/nodenv"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"$NODENV_ROOT/shims:$NODENV_ROOT/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "nodenv_version=\"v1.1.2\"   \u0026\u0026 git clone https://github.com/nodenv/nodenv.git ${NODENV_ROOT}   \u0026\u0026 cd ${NODENV_ROOT} \u0026\u0026 git checkout ${nodenv_version}   \u0026\u0026 src/configure   \u0026\u0026 make -C src   \u0026\u0026 node_build_version=\"v4.1.0\"   \u0026\u0026 git clone https://github.com/nodenv/node-build.git ${NODENV_ROOT}/plugins/node-build   \u0026\u0026 cd ${NODENV_ROOT}/plugins/node-build \u0026\u0026 git checkout ${node_build_version}   \u0026\u0026 node_build_jxcore_version=\"v1.0.0\"   \u0026\u0026 git clone https://github.com/nodenv/node-build-jxcore.git $(nodenv root)/plugins/node-build-jxcore   \u0026\u0026 cd $(nodenv root)/plugins/node-build-jxcore \u0026\u0026 git checkout ${node_build_jxcore_version}   \u0026\u0026 npm_migrate_version=\"0.1.0\"   \u0026\u0026 git clone https://github.com/nodenv/nodenv-npm-migrate.git ${NODENV_ROOT}/plugins/nodenv-npm-migrate   \u0026\u0026 cd ${NODENV_ROOT}/plugins/nodenv-npm-migrate \u0026\u0026 git checkout ${npm_migrate_version}   \u0026\u0026 find ${NODENV_ROOT} -type d -name \".git\" -exec rm -r \"{}\" \\+   \u0026\u0026 nodenv install --list"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}