{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:9-slim",
      "SourceCode": "FROM debian:9-slim",
      "Platform": "",
      "From": {
        "Image": "debian:9-slim"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "name",
              "Value": "\"iroffer\""
            },
            {
              "Key": "version",
              "Value": "$CONT_IMG_VER"
            },
            {
              "Key": "maintainer",
              "Value": "\"Luis E Alvarado \u003cadmin@avnet.ws\u003e\""
            },
            {
              "Key": "description",
              "Value": "\"iroffer-dinoex mod XDCC Bot with cUrl, GeoIP, Ruby \u0026 UPnP support in a container~\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "BUILD_ARGS",
              "Value": "\"-curl -geoip -upnp -ruby\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "CONT_IMG_VER",
          "Name": "arg",
          "Value": null
        },
        {
          "Env": [
            {
              "Key": "CONT_IMG_VER",
              "Value": "${CONT_IMG_VER:-v1.0}"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "Env": [
            {
              "Key": "PREQ_PACKAGES",
              "Value": "curl"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILD_PACKAGES",
              "Value": "ca-certificates gcc libc-dev libcurl4-openssl-dev libgeoip-dev libminiupnpc-dev libssl-dev make ruby ruby-dev"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUNTIME_PACKAGES",
              "Value": "libcurl3 libgeoip1 libminiupnpc10 ruby"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "IROFFER_USER",
              "Value": "iroffer"
            },
            {
              "Key": "IROFFER_CONFIG_DIR",
              "Value": "/config"
            },
            {
              "Key": "IROFFER_DATA_DIR",
              "Value": "/files"
            },
            {
              "Key": "IROFFER_LOG_DIR",
              "Value": "/logs"
            },
            {
              "Key": "IROFFER_TAR",
              "Value": "iroffer.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "IROFFER_USER_ID",
          "Name": "arg",
          "Value": "999"
        },
        {
          "Key": "IROFFER_GROUP_ID",
          "Name": "arg",
          "Value": "999"
        },
        {
          "Key": "IROFFER_VER",
          "Name": "arg",
          "Value": "snap"
        },
        {
          "Key": "IROFFER_SHA256",
          "Name": "arg",
          "Value": "FFCEDD67B124C2B2BB9B9FD1883D38112076E1412BC1625590C58B95B396E0A9"
        },
        {
          "Env": [
            {
              "Key": "IROFFER_URL",
              "Value": "http://iroffer.dinoex.net/iroffer-dinoex-${IROFFER_VER}.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "IROFFER_CONFIG_FILE_NAME",
              "Value": "mybot.config"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"Preparing\" $CONT_IMG_VER \"of this container.\"  \u0026\u0026 echo \"Let's begin! Adding user...\"  \u0026\u0026 groupadd -g ${IROFFER_GROUP_ID} -r ${IROFFER_USER} \u0026\u0026 useradd -u ${IROFFER_USER_ID} -r -g ${IROFFER_USER} ${IROFFER_USER}  \u0026\u0026 echo \"Installing essential packages...\"  \u0026\u0026 apt-get -q update \u003e /dev/null  \u0026\u0026 apt-get -qy install --no-install-recommends $PREQ_PACKAGES \u003e /dev/null 2\u003e\u00261  \u0026\u0026 echo \"Downloading latest iroffer-dinoex...\"  \u0026\u0026 curl -sSL \"$IROFFER_URL\" -o ${IROFFER_TAR}  \u0026\u0026 echo \"Verifying checksum...\"  \u0026\u0026 echo \"$IROFFER_SHA256  $IROFFER_TAR\" | sha256sum -c -  \u0026\u0026 echo \"Extracting files...\"  \u0026\u0026 tar -C /tmp -xzf ${IROFFER_TAR}  \u0026\u0026 rm ${IROFFER_TAR}  \u0026\u0026 echo \"Installing build packages...\"  \u0026\u0026 echo \"This will take a while...\"  \u0026\u0026 apt-get -q update \u003e /dev/null  \u0026\u0026 apt-get -qy install --no-install-recommends $BUILD_PACKAGES \u003e /dev/null 2\u003e\u00261  \u0026\u0026 cd /tmp/iroffer-dinoex-${IROFFER_VER}  \u0026\u0026 echo \"Configuring build...\"  \u0026\u0026 chmod a+x ./Configure  \u0026\u0026 ./Configure ${BUILD_ARGS} \u003e /dev/null 2\u003e\u00261  \u0026\u0026 echo \"Making build...\"  \u0026\u0026 make \u003e /dev/null 2\u003e\u00261  \u0026\u0026 echo \"Build complete!\"  \u0026\u0026 echo \"Cleaning up...\"  \u0026\u0026 apt-get remove --purge -qy $PREQ_PACKAGES $BUILD_PACKAGES \u003e /dev/null 2\u003e\u00261  \u0026\u0026 apt-get autoremove -qy \u003e /dev/null  \u0026\u0026 apt-get clean -qy \u003e /dev/null  \u0026\u0026 echo \"Installing runtime packages...\"  \u0026\u0026 apt-get -q update \u003e /dev/null  \u0026\u0026 apt-get -qy install --no-install-recommends $RUNTIME_PACKAGES \u003e /dev/null 2\u003e\u00261  \u0026\u0026 rm -rf /var/lib/apt/lists/*  \u0026\u0026 ldconfig  \u0026\u0026 echo \"Modifying iroffer default install...\"  \u0026\u0026 bash -c 'mkdir -p $USER/{config,data,extras/www,logs}'  \u0026\u0026 cd /tmp/iroffer-dinoex-${IROFFER_VER}  \u0026\u0026 cp -p iroffer /  \u0026\u0026 cp *.html /extras/www  \u0026\u0026 cp -r htdocs /extras/www  \u0026\u0026 cp sample.config /extras/sample.config  \u0026\u0026 chmod 600 /extras/sample.config  \u0026\u0026 cp -n /extras/sample.config /extras/sample.customized.config  \u0026\u0026 bash -c 'chown -R ${IROFFER_USER}: /{config,data,extras,logs}'  \u0026\u0026 sed -i -e \"s|pidfile mybot.pid|pidfile /config/mybot.pid|g\" /extras/sample.customized.config  \u0026\u0026 sed -i -e \"s|logfile mybot.log|logfile /logs/mybot.log|g\" /extras/sample.customized.config  \u0026\u0026 sed -i -e \"s|statefile mybot.state|statefile /config/mybot.state|g\" /extras/sample.customized.config  \u0026\u0026 sed -i -e \"s|xdcclistfile mybot.txt|xdcclistfile /files/packlist.txt|g\" /extras/sample.customized.config  \u0026\u0026 sed -i \"/channel #dinoex -noannounce/s/^/#/\" /extras/sample.customized.config  \u0026\u0026 sed -i \"/# 2nd Network/,/^$/d\" /extras/sample.customized.config  \u0026\u0026 sed -i \"/# 3st Network/,/^$/d\" /extras/sample.customized.config  \u0026\u0026 sed -i \"/#no_status_log/s/#//g\" /extras/sample.customized.config  \u0026\u0026 chmod 700 .  \u0026\u0026 rm -rf /tmp/*  \u0026\u0026 echo \"Done! Thanks for waiting~\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$USER/"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /usr/local/bin/entrypoint.sh  \u0026\u0026 ln -s usr/local/bin/entrypoint.sh /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "${IROFFER_CONFIG_DIR}",
            "${IROFFER_DATA_DIR}"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "30000-31000"
          ]
        },
        {
          "CmdLine": [
            "entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}