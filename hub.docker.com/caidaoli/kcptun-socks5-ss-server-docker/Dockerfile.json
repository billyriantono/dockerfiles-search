{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:latest",
      "SourceCode": "FROM alpine:latest",
      "Platform": "",
      "From": {
        "Image": "alpine:latest"
      },
      "Commands": [
        {
          "Maintainer": "cnDocker",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "SS_URL",
              "Value": "https://github.com/shadowsocks/shadowsocks-libev/archive/v2.5.6.tar.gz"
            },
            {
              "Key": "SS_DIR",
              "Value": "shadowsocks-libev-2.5.6"
            },
            {
              "Key": "CONF_DIR",
              "Value": "\"/usr/local/conf\""
            },
            {
              "Key": "kcptun_latest",
              "Value": "\"https://github.com/xtaci/kcptun/releases/latest\""
            },
            {
              "Key": "KCPTUN_DIR",
              "Value": "/usr/local/kcp-server"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk add --no-cache pcre bash \u0026\u0026     apk add --no-cache  --virtual TMP autoconf build-base wget curl libtool linux-headers openssl-dev pcre-dev \u0026\u0026     curl -sSL $SS_URL | tar xz \u0026\u0026     cd $SS_DIR \u0026\u0026     ./configure --disable-documentation \u0026\u0026     make install \u0026\u0026     cd .. \u0026\u0026     rm -rf $SS_DIR \u0026\u0026     [ ! -d ${CONF_DIR} ] \u0026\u0026 mkdir -p ${CONF_DIR} \u0026\u0026     [ ! -d ${KCPTUN_DIR} ] \u0026\u0026 mkdir -p ${KCPTUN_DIR} \u0026\u0026 cd ${KCPTUN_DIR} \u0026\u0026     wget https://raw.githubusercontent.com/clangcn/kcp-server/master/socks5_latest/socks5_linux_amd64 -O ${KCPTUN_DIR}/socks5 \u0026\u0026     kcptun_latest_release=`curl -s ${kcptun_latest} | cut -d\\\" -f2` \u0026\u0026     kcptun_latest_download=`curl -s ${kcptun_latest} | cut -d\\\" -f2 | sed 's/tag/download/'` \u0026\u0026     kcptun_latest_filename=`curl -s ${kcptun_latest_release} | sed -n '/\u003cstrong\u003ekcptun-linux-amd64/p' | cut -d\"\u003e\" -f2 | cut -d \"\u003c\" -f1` \u0026\u0026     wget ${kcptun_latest_download}/${kcptun_latest_filename} -O ${KCPTUN_DIR}/${kcptun_latest_filename} \u0026\u0026     tar xzf ${KCPTUN_DIR}/${kcptun_latest_filename} -C ${KCPTUN_DIR}/ \u0026\u0026     mv ${KCPTUN_DIR}/server_linux_amd64 ${KCPTUN_DIR}/kcp-server \u0026\u0026     rm -f ${KCPTUN_DIR}/client_linux_amd64 ${KCPTUN_DIR}/${kcptun_latest_filename} \u0026\u0026     chown root:root ${KCPTUN_DIR}/* \u0026\u0026     chmod 755 ${KCPTUN_DIR}/* \u0026\u0026     ln -s ${KCPTUN_DIR}/* /bin/ \u0026\u0026     apk --no-cache del --virtual TMP \u0026\u0026     apk --no-cache del build-base autoconf \u0026\u0026     rm -rf /var/cache/apk/* ~/.cache /tmp/libsodium"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}