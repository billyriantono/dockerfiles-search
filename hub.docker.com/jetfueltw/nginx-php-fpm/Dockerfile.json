{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.2-fpm-alpine",
      "SourceCode": "FROM php:7.2-fpm-alpine",
      "Platform": "",
      "From": {
        "Image": "php:7.2-fpm-alpine"
      },
      "Commands": [
        {
          "CmdLine": [
            "set -ex  \u0026\u0026 KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\"  \u0026\u0026 apk add --no-cache --virtual .cert-deps openssl curl ca-certificates  \u0026\u0026 curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub  \u0026\u0026 if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then         echo \"key verification succeeded!\";         mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/;     else         echo \"key verification failed!\";         exit 1;     fi  \u0026\u0026 printf \"%s%s%s\\n\" \"http://nginx.org/packages/alpine/v\" `egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release` \"/main\" | tee -a /etc/apk/repositories  \u0026\u0026 apk del .cert-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex  \u0026\u0026 apk update \u0026\u0026 apk upgrade  \u0026\u0026 apk add --no-cache freetype-dev libxpm-dev libpng-dev libjpeg-turbo-dev libwebp-dev libzip-dev     git     nginx     supervisor  \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log  \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log  \u0026\u0026 docker-php-ext-configure gd     --with-freetype-dir=/usr/include/     --with-xpm-dir=/usr/include/     --with-png-dir=/usr/include/     --with-jpeg-dir=/usr/include/     --with-webp-dir=/usr/include/  \u0026\u0026 docker-php-ext-configure zip --with-libzip=/usr/include/  \u0026\u0026 docker-php-ext-install opcache bcmath gd zip pdo_mysql  \u0026\u0026 EXPECTED_COMPOSER_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig)  \u0026\u0026 php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"  \u0026\u0026 php -r \"if (hash_file('SHA384', 'composer-setup.php') === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar installer verified'; } else { echo 'Composer.phar installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"  \u0026\u0026 php composer-setup.php --install-dir=/usr/bin --filename=composer  \u0026\u0026 php -r \"unlink('composer-setup.php');\"  \u0026\u0026 composer global require hirak/prestissimo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx/nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx/default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "php-fpm/php-fpm.conf",
            "/usr/local/etc/php-fpm.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "php-fpm/www.conf",
            "/usr/local/etc/php-fpm.d/www.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "php-fpm/docker-var.ini",
            "/usr/local/etc/php/conf.d/docker-var.ini"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "supervisor/supervisord.conf",
            "/etc/supervisord.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/start.sh"
          ]
        },
        {
          "CmdLine": [
            "rm /usr/local/etc/php-fpm.d/docker.conf  \u0026\u0026 rm /usr/local/etc/php-fpm.d/zz-docker.conf  \u0026\u0026 rm -rf /var/www/html  \u0026\u0026 chmod 755 /start.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www/app"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/start.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}