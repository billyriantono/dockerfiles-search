{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "laradock/workspace:1.9-71",
      "SourceCode": "FROM laradock/workspace:1.9-71",
      "Platform": "",
      "From": {
        "Image": "laradock/workspace:1.9-71"
      },
      "Commands": [
        {
          "Maintainer": "Terry Zhang \u003czterry@qq.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "PUID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "PGID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "PUID",
              "Value": "${PUID}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PGID",
              "Value": "${PGID}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -g ${PGID} spark \u0026\u0026     useradd -u ${PUID} -g spark -m spark \u0026\u0026     apt-get update -yqq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "TZ",
          "Name": "arg",
          "Value": "UTC"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "${TZ}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./composer.json",
            "/home/spark/.composer/composer.json"
          ]
        },
        {
          "CmdLine": [
            "chown -R spark:spark /home/spark/.composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "spark"
        },
        {
          "Key": "COMPOSER_GLOBAL_INSTALL",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "COMPOSER_GLOBAL_INSTALL",
              "Value": "${COMPOSER_GLOBAL_INSTALL}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then     composer global install ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./crontab",
            "/etc/cron.d"
          ]
        },
        {
          "CmdLine": [
            "chmod -R 644 /etc/cron.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "spark"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./aliases.sh",
            "/home/spark/aliases.sh"
          ]
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"# Load Custom Aliases\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"source /home/spark/aliases.sh\" \u003e\u003e ~/.bashrc \u0026\u0026 \techo \"\" \u003e\u003e ~/.bashrc \u0026\u0026 \tsed -i 's/\\r//' /home/spark/aliases.sh \u0026\u0026 \tsed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/spark/aliases.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"# Load Custom Aliases\" \u003e\u003e ~/.bashrc \u0026\u0026     echo \"source /home/spark/aliases.sh\" \u003e\u003e ~/.bashrc \u0026\u0026 \techo \"\" \u003e\u003e ~/.bashrc \u0026\u0026 \tsed -i 's/\\r//' /home/spark/aliases.sh \u0026\u0026 \tsed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/spark/aliases.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_XDEBUG",
          "Name": "arg",
          "Value": "false"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_XDEBUG} = true ]; then     apt-get update \u0026\u0026     apt-get install -y --force-yes php7.1-xdebug \u0026\u0026     sed -i 's/^;//g' /etc/php/7.1/cli/conf.d/20-xdebug.ini \u0026\u0026     echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" \u003e\u003e ~/.bashrc ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./xdebug.ini",
            "/etc/php/7.1/cli/conf.d/xdebug.ini"
          ]
        },
        {
          "Key": "INSTALL_WORKSPACE_SSH",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_WORKSPACE_SSH",
              "Value": "${INSTALL_WORKSPACE_SSH}"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "insecure_id_rsa",
            "/tmp/id_rsa"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "insecure_id_rsa.pub",
            "/tmp/id_rsa.pub"
          ]
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_WORKSPACE_SSH} = true ]; then     rm -f /etc/service/sshd/down \u0026\u0026     cat /tmp/id_rsa.pub \u003e\u003e /root/.ssh/authorized_keys         \u0026\u0026 cat /tmp/id_rsa.pub \u003e\u003e /root/.ssh/id_rsa.pub         \u0026\u0026 cat /tmp/id_rsa \u003e\u003e /root/.ssh/id_rsa         \u0026\u0026 rm -f /tmp/id_rsa*         \u0026\u0026 chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub     \u0026\u0026 chmod 400 /root/.ssh/id_rsa ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PHPREDIS",
          "Name": "arg",
          "Value": "true"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_PHPREDIS",
              "Value": "${INSTALL_PHPREDIS}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PHPREDIS} = true ]; then     printf \"\\n\" | pecl -q install -o -f redis \u0026\u0026     echo \"extension=redis.so\" \u003e\u003e /etc/php/7.1/mods-available/redis.ini \u0026\u0026     phpenmod redis ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "DRUSH_VERSION",
              "Value": "8.1.15"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "INSTALL_DRUSH",
          "Name": "arg",
          "Value": "true"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_DRUSH",
              "Value": "${INSTALL_DRUSH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_DRUSH} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get -y install mysql-client \u0026\u0026     curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \u0026\u0026     chmod +x /usr/local/bin/drush \u0026\u0026     drush core-status ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_DRUPAL_CONSOLE",
          "Name": "arg",
          "Value": "true"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_DRUPAL_CONSOLE",
              "Value": "${INSTALL_DRUPAL_CONSOLE}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_DRUPAL_CONSOLE} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get -y install mysql-client \u0026\u0026     curl https://drupalconsole.com/installer -L -o drupal.phar \u0026\u0026     mv drupal.phar /usr/local/bin/drupal \u0026\u0026     chmod +x /usr/local/bin/drupal ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "spark"
        },
        {
          "Name": "user",
          "User": "spark"
        },
        {
          "CmdLine": [
            "echo \"\" \u003e\u003e ~/.bashrc \u0026\u0026     echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_LARAVEL_INSTALLER",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_LARAVEL_INSTALLER",
              "Value": "${INSTALL_LARAVEL_INSTALLER}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_LARAVEL_INSTALLER} = true ]; then \techo \"\" \u003e\u003e ~/.bashrc \u0026\u0026 \techo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' \u003e\u003e ~/.bashrc \t\u0026\u0026 composer global require \"laravel/installer\" ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "spark"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_SYMFONY",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_SYMFONY",
              "Value": "${INSTALL_SYMFONY}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_SYMFONY} = true ]; then   mkdir -p /usr/local/bin   \u0026\u0026 curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony   \u0026\u0026 chmod a+x /usr/local/bin/symfony   \u0026\u0026 echo 'alias dev=\"php bin/console -e=dev\"' \u003e\u003e ~/.bashrc   \u0026\u0026 echo 'alias prod=\"php bin/console -e=prod\"' \u003e\u003e ~/.bashrc ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_PYTHON",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_PYTHON",
              "Value": "${INSTALL_PYTHON}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PYTHON} = true ]; then   apt-get update   \u0026\u0026 apt-get -y install python python-pip python-dev build-essential    \u0026\u0026 pip install --upgrade pip    \u0026\u0026 pip install --upgrade virtualenv ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_IMAGEMAGICK",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_IMAGEMAGICK",
              "Value": "${INSTALL_IMAGEMAGICK}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_IMAGEMAGICK} = true ]; then     apt-get install -y --force-yes imagemagick php-imagick ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_PG_CLIENT",
          "Name": "arg",
          "Value": "false"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_PG_CLIENT",
              "Value": "${INSTALL_PG_CLIENT}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ ${INSTALL_PG_CLIENT} = true ]; then     apt-get update -yqq \u0026\u0026     apt-get -y install postgresql-client ;fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        }
      ]
    }
  ]
}