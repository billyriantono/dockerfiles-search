MetaArgs:
- DefaultValue: "18.04"
  Key: UBUNTU_VERSION
  ProvidedValue: null
  Value: "18.04"
- DefaultValue: ""
  Key: ARCH
  ProvidedValue: null
  Value: ""
- DefaultValue: "10.0"
  Key: CUDA
  ProvidedValue: null
  Value: "10.0"
Stages:
- As: base
  BaseName: nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Commands:
  - Key: ARCH
    Name: arg
    Value: null
  - Key: CUDA
    Name: arg
    Value: null
  - Key: CUDNN
    Name: arg
    Value: 7.6.2.24-1
  - Name: shell
    Shell:
    - /bin/bash
    - -c
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends         build-essential         cuda-command-line-tools-${CUDA/./-}         cuda-cublas-${CUDA/./-}         cuda-cufft-${CUDA/./-}         cuda-curand-${CUDA/./-}         cuda-cusolver-${CUDA/./-}         cuda-cusparse-${CUDA/./-}         curl         libcudnn7=${CUDNN}+cuda${CUDA}         libfreetype6-dev         libhdf5-serial-dev         libzmq3-dev         pkg-config         software-properties-common         unzip
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ ${ARCH} = ppc64le ] || (apt-get update &&         apt-get install -y --no-install-recommends
      libnvinfer5=5.1.5-1+cuda${CUDA}         && apt-get clean         && rm -rf /var/lib/apt/lists/*)'
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    Name: env
  - CmdLine:
    - ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1     &&
      echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf     &&
      echo "/usr/local/cuda/extras/CUPTI/lib64" > /etc/ld.so.conf.d/cupti.conf     &&
      ldconfig
    Name: run
    PrependShell: true
  - Key: USE_PYTHON_3_NOT_2
    Name: arg
    Value: null
  - Key: _PY_SUFFIX
    Name: arg
    Value: ${USE_PYTHON_3_NOT_2:+3}
  - Key: PYTHON
    Name: arg
    Value: python${_PY_SUFFIX}
  - Key: PIP
    Name: arg
    Value: pip${_PY_SUFFIX}
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - apt-get update && apt-get install -y     ${PYTHON}     ${PYTHON}-pip
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} --no-cache-dir install --upgrade     pip     setuptools
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s $(which ${PYTHON}) /usr/local/bin/python
    Name: run
    PrependShell: true
  - Key: TF_PACKAGE
    Name: arg
    Value: tensorflow-gpu
  - Key: TF_PACKAGE_VERSION
    Name: arg
    Value: ""
  - CmdLine:
    - ${PIP} install ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}
    Name: run
    PrependShell: true
  - Env:
    - Key: NVIDIA_VISIBLE_DEVICES
      Value: all
    Name: env
  - Env:
    - Key: NVIDIA_DRIVER_CAPABILITIES
      Value: compute,utility
    Name: env
  - Env:
    - Key: NVIDIA_REQUIRE_CUDA
      Value: '"cuda>=10.1 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=396,driver<397
        brand=tesla,driver>=410,driver<411"'
    Name: env
  - Maintainer: thisgithub
    Name: maintainer
  - CmdLine:
    - apt-get update && apt-get install -y --no-install-recommends       bzip2       g++       git       graphviz       libgl1-mesa-glx       libhdf5-dev       openmpi-bin       wget
      &&     rm -rf /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    Name: env
  - Env:
    - Key: PATH
      Value: $CONDA_DIR/bin:$PATH
    Name: env
  - CmdLine:
    - wget --quiet --no-check-certificate https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh
      &&     echo "c59b3dd3cad550ac7596e0d599b91e75d88826db132e4146030ef471bb434e9a
      *Miniconda3-4.2.12-Linux-x86_64.sh" | sha256sum -c - &&     /bin/bash /Miniconda3-4.2.12-Linux-x86_64.sh
      -f -b -p $CONDA_DIR &&     rm Miniconda3-4.2.12-Linux-x86_64.sh &&     echo
      export PATH=$CONDA_DIR/bin:'$PATH' > /etc/profile.d/conda.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: NB_USER
      Value: keras
    Name: env
  - Env:
    - Key: NB_UID
      Value: "1000"
    Name: env
  - CmdLine:
    - useradd -m -s /bin/bash -N -u $NB_UID $NB_USER &&     chown $NB_USER $CONDA_DIR
      -R &&     mkdir -p /src &&     chown $NB_USER /src
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Key: python_version
    Name: arg
    Value: "3.6"
  - CmdLine:
    - conda config --append channels conda-forge
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - Env:
    - Key: PATH
      Value: /opt/conda/envs/idp/bin:$PATH
    Name: env
  - CmdLine:
    - conda update conda
    Name: run
    PrependShell: true
  - CmdLine:
    - conda config --add channels intel
    Name: run
    PrependShell: true
  - CmdLine:
    - conda create -n idp intelpython3_full python=3
    Name: run
    PrependShell: true
  - CmdLine:
    - conda config --append channels conda-forge
    Name: run
    PrependShell: true
  - CmdLine:
    - conda install -y python=${python_version} &&     pip install       sklearn_pandas       h5py       MedPy       nibabel       Keras       numpy       scipy       Pillow       click       tensorflow-gpu       cntk-gpu
      &&     conda install       bcolz       h5py       matplotlib       mkl       nose       notebook       pandas       pydot       pygpu       pyyaml       scikit-learn       six       theano       pygpu       mkdocs       &&     git
      clone git://github.com/keras-team/keras.git /src && pip install -e /src[tests]
      &&     pip install git+git://github.com/keras-team/keras.git &&     conda clean
      -yt
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - requirements.txt
    - /requirements.txt
  - CmdLine:
    - useradd -ms /bin/bash docker
    Name: run
    PrependShell: true
  - Env:
    - Key: HOME
      Value: /home/docker
    Name: env
  - CmdLine:
    - mkdir $HOME/src
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /$HOME/src:${PATH}
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - __init__.py
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - .theanorc
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - app.py
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - cnn_scripts.py
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - libs
    - $HOME/src/libs
  - Chown: ""
    Name: add
    SourcesAndDest:
    - utils
    - $HOME/src/utils
  - Chown: ""
    Name: add
    SourcesAndDest:
    - logonic.png
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - nic_train_network_batch.py
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - nic_infer_segmentation_batch.py
    - $HOME/src/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - tensorboardlogs
    - $HOME/src/
  - Name: user
    User: docker
  - Name: workdir
    Path: $HOME/src
  From:
    Image: nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
  Name: base
  Platform: ""
  SourceCode: FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION}
    as base
