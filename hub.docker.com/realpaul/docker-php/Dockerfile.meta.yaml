MetaArgs: null
Stages:
- BaseName: alpine:3.4
  Commands:
  - Env:
    - Key: PHPIZE_DEPS
      Value: "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake
        \t\tpcre-dev \t\tpkgconf \t\tre2c"
    Name: env
  - CmdLine:
    - "apk add --no-cache --virtual .persistent-deps \t\tca-certificates \t\tcurl
      \t\ttar \t\txz \t\topenssl"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data
      www-data"
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_INI_DIR
      Value: /usr/local/etc/php
    Name: env
  - CmdLine:
    - mkdir -p $PHP_INI_DIR/conf.d
    Name: run
    PrependShell: true
  - Env:
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
    Name: env
  - Env:
    - Key: PHP_CFLAGS
      Value: '"-fstack-protector-strong -fpic -fpie -O2"'
    Name: env
  - Env:
    - Key: PHP_CPPFLAGS
      Value: '"$PHP_CFLAGS"'
    Name: env
  - Env:
    - Key: PHP_LDFLAGS
      Value: '"-Wl,-O1 -Wl,--hash-style=both -pie"'
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E
    Name: env
  - Env:
    - Key: PHP_VERSION
      Value: 7.1.11
    Name: env
  - Env:
    - Key: PHP_URL
      Value: '"https://secure.php.net/get/php-7.1.11.tar.xz/from/this/mirror"'
    - Key: PHP_ASC_URL
      Value: '"https://secure.php.net/get/php-7.1.11.tar.xz.asc/from/this/mirror"'
    Name: env
  - Env:
    - Key: PHP_SHA256
      Value: '"074093e9d7d21afedc5106904218a80a47b854abe368d2728ed22184c884893e"'
    - Key: PHP_MD5
      Value: '""'
    Name: env
  - CmdLine:
    - "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tmkdir
      -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n
      \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c
      -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" |
      md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc
      \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS;
      do \t\t\tgpg --keyserver pgp.mit.edu --recv-keys \"$key\" || \t\t\tgpg --keyserver
      keyserver.pgp.com --recv-keys \"$key\" || \t\t\tgpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz;
      \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del .fetch-deps"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-source
    - /usr/local/bin/
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils
      \t\tcurl-dev \t\tlibedit-dev \t\topenssl-dev \t\tlibxml2-dev \t\tsqlite-dev
      \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\"
      \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture
      --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--disable-cgi
      \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl
      \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t--with-pcre-regex=/usr
      \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& make install
      \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all
      '{}' + || true; } \t&& make clean \t&& cd / \t&& docker-php-source delete \t\t&&
      runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local
      \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\"
      $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache
      --virtual .php-rundeps $runDeps \t\t&& apk del .build-deps \t\t&& pecl update-channels
      \t&& rm -rf /tmp/pear ~/.pearrc"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-php-ext-*
    - docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - docker-php-entrypoint
    Name: entrypoint
    PrependShell: false
  - Name: workdir
    Path: /var/www/html
  - CmdLine:
    - "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g'
      php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default
      php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default
      php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf';
      \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log
      = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this
      to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2';
      \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout
      and stderr are sent to the main error log.'; \t\techo 'catch_workers_output
      = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo
      'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = [::]:9000';
      \t} | tee php-fpm.d/zz-docker.conf"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& apk add --no-cache --virtual .build-deps build-base m4 autoconf
      bzip2-dev curl-dev libxml2-dev enchant-dev openssl-dev gettext-dev gmp-dev imap-dev
      icu-dev openldap-dev libmcrypt-dev unixodbc-dev freetds-dev postgresql-dev sqlite-dev
      aspell-dev libedit-dev recode-dev libxml2-dev net-snmp-dev libxslt-dev zlib-dev
      libtool imagemagick-dev freetype-dev libpng-dev libjpeg-turbo-dev libxpm-dev
      libvpx-dev libwebp-dev \t&& docker-php-source extract \t&& { \t\techo '# https://github.com/docker-library/php/issues/103#issuecomment-271413933';
      \t\techo 'AC_DEFUN([PHP_ALWAYS_SHARED],[])dnl'; \t\techo; \t\tcat /usr/src/php/ext/odbc/config.m4;
      \t} > test.m4 \t&& mv test.m4 /usr/src/php/ext/odbc/config.m4 \t&& docker-php-ext-configure
      odbc --with-unixODBC=shared,/usr \t&& docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr
      \t&& docker-php-ext-install odbc pdo_odbc \t&& docker-php-source delete \t&&
      docker-php-ext-install bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo
      ftp gettext gmp hash iconv imap intl json ldap mbstring mcrypt mysqli opcache
      pcntl pdo pdo_dblib pdo_mysql pdo_pgsql pdo_sqlite pgsql phar posix pspell readline
      session shmop simplexml snmp sockets sysvmsg sysvshm tokenizer wddx xml xmlrpc
      xmlwriter xsl zip \t&& CFLAGS=\"-I/usr/src/php\" docker-php-ext-install xmlreader
      \t&& printf \"\\n\" | pecl install raphf propro \t&& docker-php-ext-enable raphf
      propro \t&& printf \"\\n\" | pecl install pecl_http \t&& echo -e \"extension=raphf.so\\nextension=propro.so\\nextension=http.so\"
      > /usr/local/etc/php/conf.d/docker-php-ext-http.ini \t&& rm -rf /usr/local/etc/php/conf.d/docker-php-ext-raphf.ini
      \t&& rm -rf /usr/local/etc/php/conf.d/docker-php-ext-propro.ini \t&& printf
      \"\\n\" | pecl install redis timezonedb imagick mongodb xdebug \t&& docker-php-ext-enable
      redis timezonedb imagick mongodb xdebug \t&& docker-php-ext-configure gd \t\t--with-gd
      \t\t--with-freetype-dir=/usr/include/ \t\t--with-png-dir=/usr/include/ \t\t--with-jpeg-dir=/usr/include/
      \t&& NPROC=$(getconf _NPROCESSORS_ONLN) \t&& docker-php-ext-install -j${NPROC}
      gd \t&& cd /tmp \t&& php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"
      \t&& php -r \"if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061')
      { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php');
      } echo PHP_EOL;\" \t&& php composer-setup.php \t&& php -r \"unlink('composer-setup.php');\"
      \t&& apk del .build-deps \t&& rm -rf /tmp/*"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "9000"
  - CmdLine:
    - php-fpm
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.4
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.4
