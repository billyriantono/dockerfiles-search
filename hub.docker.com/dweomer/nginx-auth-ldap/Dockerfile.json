{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.5",
      "SourceCode": "FROM alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "alpine:3.5"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.13.5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x  \u0026\u0026 mkdir -p       /tmp/src/nginx       /usr/lib/nginx/modules       /var/cache/nginx  \u0026\u0026 apk add --no-cache --virtual .build-deps       curl       gcc       gd-dev       geoip-dev       gnupg       libc-dev       libxslt-dev       linux-headers       make       openldap-dev       pcre-dev       tar       unzip       zlib-dev  \u0026\u0026 curl -fsSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar vxz --strip=1 -C /tmp/src/nginx  \u0026\u0026 curl -fsSL https://github.com/kvspb/nginx-auth-ldap/archive/master.zip -o /tmp/nginx-auth-ldap-master.zip  \u0026\u0026 unzip -d /tmp/src /tmp/nginx-auth-ldap-master.zip  \u0026\u0026 cd /tmp/src/nginx  \u0026\u0026 addgroup -S nginx  \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx  \u0026\u0026 ./configure \t    --prefix=/usr/share/nginx \t    --sbin-path=/usr/sbin/nginx \t    --modules-path=/usr/lib/nginx/modules \t    --conf-path=/etc/nginx/nginx.conf \t    --error-log-path=/var/log/nginx/error.log \t    --http-log-path=/var/log/nginx/access.log \t    --pid-path=/var/run/nginx.pid \t    --lock-path=/var/run/nginx.lock       --http-client-body-temp-path=/var/cache/nginx/client_temp \t    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \t    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t    --http-scgi-temp-path=/var/cache/nginx/scgi_temp       --user=nginx       --group=nginx       --with-http_ssl_module   \t\t--with-http_realip_module   \t\t--with-http_addition_module   \t\t--with-http_sub_module   \t\t--with-http_dav_module   \t\t--with-http_flv_module   \t\t--with-http_mp4_module   \t\t--with-http_gunzip_module   \t\t--with-http_gzip_static_module   \t\t--with-http_random_index_module   \t\t--with-http_secure_link_module   \t\t--with-http_stub_status_module   \t\t--with-http_auth_request_module   \t\t--with-http_xslt_module=dynamic   \t\t--with-http_image_filter_module=dynamic   \t\t--with-http_geoip_module=dynamic   \t\t--with-threads   \t\t--with-stream   \t\t--with-stream_ssl_module   \t\t--with-stream_ssl_preread_module   \t\t--with-stream_realip_module   \t\t--with-stream_geoip_module=dynamic   \t\t--with-http_slice_module   \t\t--with-mail   \t\t--with-mail_ssl_module   \t\t--with-compat   \t\t--with-file-aio   \t\t--with-http_v2_module       --add-module=/tmp/src/nginx-auth-ldap-master  \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)  \u0026\u0026 make install  \u0026\u0026 mkdir -vp       /etc/nginx/conf.d/       /usr/share/nginx/html/  \u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/  \u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/  \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log  \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log  \u0026\u0026 apk add --no-cache --virtual .gettext gettext  \u0026\u0026 mv /usr/bin/envsubst /tmp/  \u0026\u0026 runDeps=\"$(     scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst       | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'       | sort -u       | xargs -r apk info --installed       | sort -u     )\"  \u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps  \u0026\u0026 apk del .build-deps  \u0026\u0026 apk del .gettext  \u0026\u0026 rm -fr     /etc/nginx/*.default     /tmp/*     /var/tmp/*     /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "library/nginx:alpine",
          "Name": "copy",
          "SourcesAndDest": [
            "/etc/nginx/nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "library/nginx:alpine",
          "Name": "copy",
          "SourcesAndDest": [
            "/etc/nginx/conf.d/default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}