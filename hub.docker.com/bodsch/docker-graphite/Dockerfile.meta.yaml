MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Key: BUILD_DATE
    Name: arg
    Value: null
  - Key: GRAPHITE_VERSION
    Name: arg
    Value: null
  - Key: PYTHON_VERSION
    Name: arg
    Value: null
  - Key: BUILD_TYPE
    Name: arg
    Value: null
  - Env:
    - Key: TZ
      Value: '''Europe/Berlin'''
    - Key: TERM
      Value: xterm
    Name: env
  - Name: expose
    Ports:
    - "2003"
    - 2003/udp
    - "7002"
    - "8080"
  - Labels:
    - Key: version
      Value: '"1807"'
    - Key: maintainer
      Value: '"Bodo Schulz <bodo@boone-schulz.de>"'
    - Key: org.label-schema.build-date
      Value: ${BUILD_DATE}
    - Key: org.label-schema.name
      Value: '"Graphite Docker Image"'
    - Key: org.label-schema.description
      Value: '"Inofficial Graphite Docker Image"'
    - Key: org.label-schema.url
      Value: '"https://graphite.readthedocs.io/en/latest/index.html"'
    - Key: org.label-schema.vcs-url
      Value: '"https://github.com/bodsch/docker-graphite"'
    - Key: org.label-schema.vendor
      Value: '"Bodo Schulz"'
    - Key: org.label-schema.version
      Value: ${GRAPHITE_VERSION}
    - Key: org.label-schema.schema-version
      Value: '"1.0"'
    - Key: com.microscaling.docker.dockerfile
      Value: '"/Dockerfile"'
    - Key: com.microscaling.license
      Value: '"The Unlicense"'
    Name: label
  - CmdLine:
    - echo "export TZ=${TZ}"                              > /etc/enviroment &&   echo
      "export BUILD_DATE=${BUILD_DATE}"             >> /etc/enviroment &&   echo "export
      BUILD_TYPE=${BUILD_TYPE}"             >> /etc/enviroment &&   echo "export GRAPHITE_VERSION=${GRAPHITE_VERSION}"
      >> /etc/enviroment &&   apk update --quiet --no-cache &&   apk upgrade --quiet
      --no-cache &&   apk add --quiet --no-cache --virtual .build-deps     build-base
      git libffi-dev py${PYTHON_VERSION}-pip python${PYTHON_VERSION}-dev &&   apk
      add --quiet --no-cache     cairo curl mariadb-client nginx supervisor python${PYTHON_VERSION}
      py${PYTHON_VERSION}-cairo py${PYTHON_VERSION}-parsing py-mysqldb &&   pip${PYTHON_VERSION}
      install     --quiet --trusted-host http://d.pypi.python.org/simple --upgrade
      pip &&   mkdir /src &&   git clone https://github.com/graphite-project/whisper.git      /src/whisper      &&   git
      clone https://github.com/graphite-project/carbon.git       /src/carbon       &&   git
      clone https://github.com/graphite-project/graphite-web.git /src/graphite-web
      &&   if [ "${BUILD_TYPE}" == "stable" ] ; then     for i in whisper carbon graphite-web
      ; do       echo "switch to stable Tag ${GRAPHITE_VERSION} for $i" &&       cd
      /src/$i ;       git checkout tags/${GRAPHITE_VERSION} 2> /dev/null ;     done
      ;   fi &&   if [[ "${PYTHON_VERSION}" = 3 ]] ; then      sed -i 's|^python-memcached|#
      python-memcached|g' /src/graphite-web/requirements.txt;   fi &&   cd /src/graphite-web
      &&  pip${PYTHON_VERSION} install --quiet --requirement requirements.txt &&   cd
      /src/whisper      &&  python -W ignore::UserWarning:distutils.dist setup.py
      install --quiet > /dev/null &&   cd /src/carbon       &&  python -W ignore::UserWarning:distutils.dist
      setup.py install --quiet > /dev/null &&   cd /src/graphite-web &&  python -W
      ignore::UserWarning:distutils.dist setup.py install --quiet > /dev/null &&   mv
      /opt/graphite/conf/graphite.wsgi.example /opt/graphite/webapp/graphite/graphite_wsgi.py
      &&   mv /src/carbon/lib/carbon/tests/data/conf-directory/storage-aggregation.conf
      /opt/graphite/conf/storage-aggregation.conf-DIST &&   mv /src/carbon/lib/carbon/tests/data/conf-directory/storage-schemas.conf
      /opt/graphite/conf/storage-schemas.conf-DIST &&   apk del --quiet .build-deps
      &&   rm -rf     /src     /tmp/*     /root/.cache     /var/cache/apk/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - rootfs/
    - /
  - Name: volume
    Volumes:
    - /srv
  - Health:
      Interval: 5000000000
      Retries: 12
      Test:
      - CMD-SHELL
      - curl --silent --fail http://localhost:8080 || exit 1
      Timeout: 2000000000
    Name: healthcheck
  - CmdLine:
    - /init/run.sh
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
