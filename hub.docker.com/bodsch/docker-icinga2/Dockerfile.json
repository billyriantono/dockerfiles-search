{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm"
            },
            {
              "Key": "TZ",
              "Value": "'Europe/Berlin'"
            },
            {
              "Key": "BUILD_DATE",
              "Value": "\"2018-01-24\""
            },
            {
              "Key": "BUILD_TYPE",
              "Value": "\"stable\""
            },
            {
              "Key": "CERT_SERVICE_VERSION",
              "Value": "\"0.16.5\""
            },
            {
              "Key": "ICINGA_VERSION",
              "Value": "\"2.8.0-r0\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "5665",
            "8080"
          ]
        },
        {
          "Labels": [
            {
              "Key": "version",
              "Value": "\"1801\""
            },
            {
              "Key": "maintainer",
              "Value": "\"Bodo Schulz \u003cbodo@boone-schulz.de\u003e\""
            },
            {
              "Key": "org.label-schema.build-date",
              "Value": "${BUILD_DATE}"
            },
            {
              "Key": "org.label-schema.name",
              "Value": "\"Icinga2 Docker Image\""
            },
            {
              "Key": "org.label-schema.description",
              "Value": "\"Inofficial Icinga2 Docker Image\""
            },
            {
              "Key": "org.label-schema.url",
              "Value": "\"https://www.icinga.org/\""
            },
            {
              "Key": "org.label-schema.vcs-url",
              "Value": "\"https://github.com/bodsch/docker-icinga2\""
            },
            {
              "Key": "org.label-schema.vendor",
              "Value": "\"Bodo Schulz\""
            },
            {
              "Key": "org.label-schema.version",
              "Value": "${ICINGA_VERSION}"
            },
            {
              "Key": "org.label-schema.schema-version",
              "Value": "\"1.0\""
            },
            {
              "Key": "com.microscaling.docker.dockerfile",
              "Value": "\"/Dockerfile\""
            },
            {
              "Key": "com.microscaling.license",
              "Value": "\"GNU General Public License v3.0\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apk update --quiet --no-cache  \u0026\u0026   apk upgrade --quiet --no-cache \u0026\u0026   apk add --quiet --no-cache --virtual .build-deps     libffi-dev g++ make git openssl-dev ruby-dev \u0026\u0026   apk add --quiet --no-cache     bash bind-tools curl expect fping inotify-tools icinga2 jq mailx monitoring-plugins mariadb-client netcat-openbsd nmap nrpe-plugin openssl pwgen ruby rsync ssmtp tzdata unzip \u0026\u0026   cp /etc/icinga2/conf.d.example/* /etc/icinga2/conf.d/ \u0026\u0026   ln -s /usr/lib/nagios/plugins/* /usr/lib/monitoring-plugins/ \u0026\u0026   /usr/sbin/icinga2 feature enable command checker mainlog notification \u0026\u0026   mkdir -p /etc/icinga2/objects.d \u0026\u0026   mkdir -p /run/icinga2/cmd \u0026\u0026   mkdir -p /etc/icinga2/zones.d/global-templates \u0026\u0026   mkdir -p /etc/icinga2/zones.d/director-global \u0026\u0026   cp /etc/icinga2/zones.conf /etc/icinga2/zones.conf-distributed \u0026\u0026   chmod u+s /bin/busybox \u0026\u0026   echo 'gem: --no-document' \u003e\u003e /etc/gemrc \u0026\u0026   gem install --quiet --no-rdoc --no-ri     io-console bundler \u0026\u0026   cd /tmp \u0026\u0026   if [ \"${BUILD_TYPE}\" == \"local\" ] ; then     echo \"use local sources\" \u0026\u0026     mv /ruby-icinga-cert-service /tmp/ \u0026\u0026     cd ruby-icinga-cert-service ;   else     git clone https://github.com/bodsch/ruby-icinga-cert-service.git \u0026\u0026     cd ruby-icinga-cert-service \u0026\u0026     if [ \"${BUILD_TYPE}\" == \"stable\" ] ; then       echo \"switch to stable Tag v${CERT_SERVICE_VERSION}\" \u0026\u0026       git checkout tags/${CERT_SERVICE_VERSION} 2\u003e /dev/null ;     elif [ \"${BUILD_TYPE}\" == \"development\" ] ; then       echo \"switch to development Branch\" \u0026\u0026       git checkout development 2\u003e /dev/null ;     fi   fi \u0026\u0026   bundle install --quiet \u0026\u0026   gem uninstall --quiet     io-console bundler \u0026\u0026   cp -ar /tmp/ruby-icinga-cert-service/bin /usr/local/ \u0026\u0026   cp -ar /tmp/ruby-icinga-cert-service/lib /usr/local/ \u0026\u0026   apk del --quiet --purge .build-deps \u0026\u0026   rm -rf     /tmp/*     /var/cache/apk/*     /root/.gem     /root/.bundle"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs/",
            "/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "\"/etc/icinga2\""
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/icinga2",
            "/var/lib/icinga2"
          ]
        },
        {
          "Health": {
            "Interval": 5000000000,
            "Retries": 12,
            "StartPeriod": 10000000000,
            "Test": [
              "CMD-SHELL",
              "ps ax | grep -v grep | grep -c \"/usr/lib/icinga2/sbin/icinga2\" || exit 1"
            ],
            "Timeout": 2000000000
          },
          "Name": "healthcheck"
        },
        {
          "CmdLine": [
            "/init/run.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}