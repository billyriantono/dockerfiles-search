{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:9.0-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:9.0-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:9.0-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "TENSORFLOW_VERSION",
              "Value": "1.6.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CUDNN_VERSION",
              "Value": "7.0.5.15-1+cuda9.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NCCL_VERSION",
              "Value": "2.1.15-1+cuda9.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PYTHON_VERSION",
              "Value": "3.5"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" \u003e /etc/apt/sources.list.d/nvidia-ml.list"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y --no-install-recommends         build-essential         cmake         git         curl         vim         wget         ca-certificates         libcudnn7=$CUDNN_VERSION         libnccl2=$NCCL_VERSION         libnccl-dev=$NCCL_VERSION         libjpeg-dev         libpng-dev         python$PYTHON_VERSION         python$PYTHON_VERSION-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -s /usr/bin/python$PYTHON_VERSION /usr/bin/python"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -O https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python get-pip.py \u0026\u0026     rm get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir tensorflow-gpu==$TENSORFLOW_VERSION keras h5py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /tmp/openmpi \u0026\u0026     cd /tmp/openmpi \u0026\u0026     wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz \u0026\u0026     tar zxf openmpi-3.0.0.tar.gz \u0026\u0026     cd openmpi-3.0.0 \u0026\u0026     ./configure --enable-orterun-prefix-by-default \u0026\u0026     make -j $(nproc) all \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf /tmp/openmpi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \u0026\u0026     HOROVOD_GPU_ALLREDUCE=NCCL pip install --no-cache-dir horovod \u0026\u0026     ldconfig"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \u0026\u0026     echo '#!/bin/bash' \u003e /usr/local/bin/mpirun \u0026\u0026     echo 'mpirun.real --allow-run-as-root \"$@\"' \u003e\u003e /usr/local/bin/mpirun \u0026\u0026     chmod a+x /usr/local/bin/mpirun"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"hwloc_base_binding_policy = none\" \u003e\u003e /usr/local/etc/openmpi-mca-params.conf \u0026\u0026     echo \"rmaps_base_mapping_policy = slot\" \u003e\u003e /usr/local/etc/openmpi-mca-params.conf \u0026\u0026     echo \"btl_tcp_if_exclude = lo,docker0\" \u003e\u003e /usr/local/etc/openmpi-mca-params.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo NCCL_DEBUG=INFO \u003e\u003e /etc/nccl.conf \u0026\u0026     echo NCCL_SOCKET_IFNAME=^docker0 \u003e\u003e /etc/nccl.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y --no-install-recommends openssh-client openssh-server \u0026\u0026     mkdir -p /var/run/sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking \u003e /etc/ssh/ssh_config.new \u0026\u0026     echo \"    StrictHostKeyChecking no\" \u003e\u003e /etc/ssh/ssh_config.new \u0026\u0026     mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y --no-install-recommends subversion \u0026\u0026     svn checkout https://github.com/uber/horovod/trunk/examples \u0026\u0026     rm -rf /examples/.svn"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}