MetaArgs: null
Stages:
- As: geoip
  BaseName: ubuntu:18.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Alex Haydock <alex@alexhaydock.co.uk>"'
    Name: label
  - CmdLine:
    - apt-get update && apt-get install geoipupdate -y
    Name: run
    PrependShell: true
  - CmdLine:
    - geoipupdate -v
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:18.04
  Name: geoip
  Platform: ""
  SourceCode: FROM ubuntu:18.04 as geoip
- As: builder
  BaseName: alpine:3.10
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Alex Haydock <alex@alexhaydock.co.uk>"'
    Name: label
  - Env:
    - Key: NGINX_VERSION
      Value: 1.16.0
    Name: env
  - Env:
    - Key: NGINX_GPG
      Value: B0F4253373F8F6F510D42178520A9993A1C052F8
    Name: env
  - Key: NGINX_ID
    Name: arg
    Value: "6666"
  - Key: CONFIG
    Name: arg
    Value: '"    --prefix=/etc/nginx     --sbin-path=/usr/sbin/nginx     --modules-path=/usr/lib/nginx/modules     --conf-path=/etc/nginx/nginx.conf     --error-log-path=/var/log/nginx/error.log     --http-log-path=/var/log/nginx/access.log     --pid-path=/var/run/nginx.pid     --lock-path=/var/run/nginx.lock     --http-client-body-temp-path=/var/cache/nginx/client_temp     --http-proxy-temp-path=/var/cache/nginx/proxy_temp     --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp     --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp     --http-scgi-temp-path=/var/cache/nginx/scgi_temp     --user=nginx     --group=nginx     --with-http_ssl_module     --with-http_realip_module     --with-http_addition_module     --with-http_sub_module     --with-http_dav_module     --with-http_flv_module     --with-http_mp4_module     --with-http_gunzip_module     --with-http_gzip_static_module     --with-http_random_index_module     --with-http_secure_link_module     --with-http_stub_status_module     --with-http_auth_request_module     --with-http_xslt_module=dynamic     --with-http_image_filter_module=dynamic     --with-threads     --with-stream     --with-stream_ssl_module     --with-stream_ssl_preread_module     --with-stream_realip_module     --with-http_slice_module     --with-mail     --with-mail_ssl_module     --with-compat     --with-file-aio     --with-http_v2_module     --with-openssl=/usr/src/boringssl     --with-cc-opt=-I''/usr/src/boringssl/.openssl/include/''     --add-module=/usr/src/modules/ngx_headers_more     --add-module=/usr/src/modules/ngx_subs_filter     --add-module=/usr/src/modules/ngx_http_geoip2_module     --add-module=/usr/src/modules/ngx_brotli
      "'
  - CmdLine:
    - 'set -xe         && apk add --no-cache --virtual .boringssl-deps         build-base         cmake         git         go         perl         &&
      git clone --depth 1 https://boringssl.googlesource.com/boringssl "/usr/src/boringssl"     &&
      mkdir "/usr/src/boringssl/build/"     && cd "/usr/src/boringssl/build/"     &&
      cmake ../     && make     && mkdir -p "/usr/src/boringssl/.openssl/lib"     &&
      cd "/usr/src/boringssl/.openssl"     && ln -s ../include     && cd "/usr/src/boringssl"     &&
      cp "build/crypto/libcrypto.a" "build/ssl/libssl.a" ".openssl/lib"         &&
      mkdir -p /usr/src/modules     && git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git
      /usr/src/modules/ngx_headers_more     && git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git
      /usr/src/modules/ngx_subs_filter     && git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git
      /usr/src/modules/ngx_http_geoip2_module     && git clone --depth 1 https://github.com/google/ngx_brotli.git
      /usr/src/modules/ngx_brotli     && cd /usr/src/modules/ngx_brotli && git submodule
      update --init         && cd /usr/src     && addgroup -S -g $NGINX_ID nginx     &&
      adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx     &&
      apk add --no-cache --virtual .build-deps         gcc         libc-dev         make         pcre-dev         zlib-dev         linux-headers         curl         gnupg         libxslt-dev         gd-dev         libmaxminddb-dev     &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     &&
      export GNUPGHOME="$(mktemp -d)"     && found='''';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ;
      do         echo "Fetching GPG key $NGINX_GPG from $server";         gpg --keyserver
      "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPG" && found=yes
      && break;     done;     test -z "$found" && echo >&2 "error: failed to fetch
      GPG key $NGINX_GPG" && exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     &&
      rm -rf "$GNUPGHOME" nginx.tar.gz.asc     && mkdir -p /usr/src     && tar -zxC
      /usr/src -f nginx.tar.gz     && rm nginx.tar.gz     && mv -v /usr/src/nginx-$NGINX_VERSION
      /usr/src/nginx'
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/src/nginx     && ./configure $CONFIG --with-debug         && mkdir -p
      /usr/src/boringssl/.openssl/include/openssl/     && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h     &&
      make -j$(getconf _NPROCESSORS_ONLN)     && mv objs/nginx objs/nginx-debug     &&
      mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so     &&
      mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/src/nginx     && ./configure $CONFIG         && mkdir -p /usr/src/boringssl/.openssl/include/openssl/     &&
      touch /usr/src/boringssl/.openssl/include/openssl/ssl.h     && make -j$(getconf
      _NPROCESSORS_ONLN)
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /usr/src/boringssl/build
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /tmp/buildsource
    Name: run
    PrependShell: true
  - CmdLine:
    - mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/
    Name: run
    PrependShell: true
  - CmdLine:
    - mv -fv /usr/src/modules/ /tmp/buildsource/modules/
    Name: run
    PrependShell: true
  - CmdLine:
    - mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "$NGINX_ID" > /tmp/buildsource/nginx_id
    Name: run
    PrependShell: true
  From:
    Image: alpine:3.10
  Name: builder
  Platform: ""
  SourceCode: FROM alpine:3.10 as builder
- BaseName: alpine:3.9
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Alex Haydock <alex@alexhaydock.co.uk>"'
    Name: label
  - Chown: ""
    From: builder
    Name: copy
    SourcesAndDest:
    - /tmp/buildsource
    - /usr/src
  - Chown: ""
    From: geoip
    Name: copy
    SourcesAndDest:
    - /var/lib/GeoIP/GeoLite2-Country.mmdb
    - /var/lib/GeoIP/GeoLite2-Country.mmdb
  - CmdLine:
    - "set -xe         && export NGINX_ID=\"$(cat /usr/src/nginx_id)\"         &&
      addgroup -S -g $NGINX_ID nginx     && adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx -u $NGINX_ID nginx \t    && apk add --no-cache --virtual .installdeps
      binutils make wget         && cd /usr/src/nginx     && make install     && rm
      -rf /etc/nginx/html/     && mkdir /etc/nginx/conf.d/     && mkdir -p /usr/share/nginx/html/
      \    && install -m644 html/index.html /usr/share/nginx/html/     && install
      -m644 html/50x.html /usr/share/nginx/html/     && install -m755 objs/nginx-debug
      /usr/sbin/nginx-debug     && install -m755 objs/ngx_http_xslt_filter_module-debug.so
      /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so     && install -m755
      objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so
      \    && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules     && strip /usr/sbin/nginx*
      \    && strip /usr/lib/nginx/modules/*.so         && apk add --no-cache --virtual
      .gettext gettext     && mv /usr/bin/envsubst /tmp/         && runDeps=\"$(         scanelf
      --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so
      /tmp/envsubst             | tr ',' '\\n'             | sort -u             |
      awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\"
      $1 }'     )\"     && apk add --no-cache --virtual .nginx-rundeps $runDeps         &&
      apk add --no-cache tzdata         && wget https://hg.nginx.org/pkg-oss/raw-file/tip/alpine/nginx.conf
      -O /etc/nginx/nginx.conf     && wget https://hg.nginx.org/pkg-oss/raw-file/tip/alpine/default.conf
      -O /etc/nginx/conf.d/default.conf         && apk del .installdeps .gettext     &&
      mv /tmp/envsubst /usr/local/bin/         && rm -rf /usr/src/*         && chown
      -R $NGINX_ID:$NGINX_ID \"/etc/nginx\"     && chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\"
      \    && chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\"     && touch \"/var/run/nginx.pid\"
      \    && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\"     && touch \"/var/run/nginx.lock\"
      \    && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\"         && echo \"\"
      && nginx -V"
    Name: run
    PrependShell: true
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.9
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.9
