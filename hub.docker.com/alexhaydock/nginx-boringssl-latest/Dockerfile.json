{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "geoip",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04 as geoip",
      "Platform": "",
      "As": "geoip",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Alex Haydock \u003calex@alexhaydock.co.uk\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install geoipupdate -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "geoipupdate -v"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "builder",
      "BaseName": "alpine:3.10",
      "SourceCode": "FROM alpine:3.10 as builder",
      "Platform": "",
      "As": "builder",
      "From": {
        "Image": "alpine:3.10"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Alex Haydock \u003calex@alexhaydock.co.uk\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.16.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_GPG",
              "Value": "B0F4253373F8F6F510D42178520A9993A1C052F8"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "NGINX_ID",
          "Name": "arg",
          "Value": "6666"
        },
        {
          "Key": "CONFIG",
          "Name": "arg",
          "Value": "\"    --prefix=/etc/nginx     --sbin-path=/usr/sbin/nginx     --modules-path=/usr/lib/nginx/modules     --conf-path=/etc/nginx/nginx.conf     --error-log-path=/var/log/nginx/error.log     --http-log-path=/var/log/nginx/access.log     --pid-path=/var/run/nginx.pid     --lock-path=/var/run/nginx.lock     --http-client-body-temp-path=/var/cache/nginx/client_temp     --http-proxy-temp-path=/var/cache/nginx/proxy_temp     --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp     --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp     --http-scgi-temp-path=/var/cache/nginx/scgi_temp     --user=nginx     --group=nginx     --with-http_ssl_module     --with-http_realip_module     --with-http_addition_module     --with-http_sub_module     --with-http_dav_module     --with-http_flv_module     --with-http_mp4_module     --with-http_gunzip_module     --with-http_gzip_static_module     --with-http_random_index_module     --with-http_secure_link_module     --with-http_stub_status_module     --with-http_auth_request_module     --with-http_xslt_module=dynamic     --with-http_image_filter_module=dynamic     --with-threads     --with-stream     --with-stream_ssl_module     --with-stream_ssl_preread_module     --with-stream_realip_module     --with-http_slice_module     --with-mail     --with-mail_ssl_module     --with-compat     --with-file-aio     --with-http_v2_module     --with-openssl=/usr/src/boringssl     --with-cc-opt=-I'/usr/src/boringssl/.openssl/include/'     --add-module=/usr/src/modules/ngx_headers_more     --add-module=/usr/src/modules/ngx_subs_filter     --add-module=/usr/src/modules/ngx_http_geoip2_module     --add-module=/usr/src/modules/ngx_brotli \""
        },
        {
          "CmdLine": [
            "set -xe         \u0026\u0026 apk add --no-cache --virtual .boringssl-deps         build-base         cmake         git         go         perl         \u0026\u0026 git clone --depth 1 https://boringssl.googlesource.com/boringssl \"/usr/src/boringssl\"     \u0026\u0026 mkdir \"/usr/src/boringssl/build/\"     \u0026\u0026 cd \"/usr/src/boringssl/build/\"     \u0026\u0026 cmake ../     \u0026\u0026 make     \u0026\u0026 mkdir -p \"/usr/src/boringssl/.openssl/lib\"     \u0026\u0026 cd \"/usr/src/boringssl/.openssl\"     \u0026\u0026 ln -s ../include     \u0026\u0026 cd \"/usr/src/boringssl\"     \u0026\u0026 cp \"build/crypto/libcrypto.a\" \"build/ssl/libssl.a\" \".openssl/lib\"         \u0026\u0026 mkdir -p /usr/src/modules     \u0026\u0026 git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git /usr/src/modules/ngx_headers_more     \u0026\u0026 git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git /usr/src/modules/ngx_subs_filter     \u0026\u0026 git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /usr/src/modules/ngx_http_geoip2_module     \u0026\u0026 git clone --depth 1 https://github.com/google/ngx_brotli.git /usr/src/modules/ngx_brotli     \u0026\u0026 cd /usr/src/modules/ngx_brotli \u0026\u0026 git submodule update --init         \u0026\u0026 cd /usr/src     \u0026\u0026 addgroup -S -g $NGINX_ID nginx     \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx     \u0026\u0026 apk add --no-cache --virtual .build-deps         gcc         libc-dev         make         pcre-dev         zlib-dev         linux-headers         curl         gnupg         libxslt-dev         gd-dev         libmaxminddb-dev     \u0026\u0026 curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     \u0026\u0026 curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     \u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\"     \u0026\u0026 found='';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ; do         echo \"Fetching GPG key $NGINX_GPG from $server\";         gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPG\" \u0026\u0026 found=yes \u0026\u0026 break;     done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $NGINX_GPG\" \u0026\u0026 exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     \u0026\u0026 rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc     \u0026\u0026 mkdir -p /usr/src     \u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz     \u0026\u0026 rm nginx.tar.gz     \u0026\u0026 mv -v /usr/src/nginx-$NGINX_VERSION /usr/src/nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/src/nginx     \u0026\u0026 ./configure $CONFIG --with-debug         \u0026\u0026 mkdir -p /usr/src/boringssl/.openssl/include/openssl/     \u0026\u0026 touch /usr/src/boringssl/.openssl/include/openssl/ssl.h     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 mv objs/nginx objs/nginx-debug     \u0026\u0026 mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so     \u0026\u0026 mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /usr/src/nginx     \u0026\u0026 ./configure $CONFIG         \u0026\u0026 mkdir -p /usr/src/boringssl/.openssl/include/openssl/     \u0026\u0026 touch /usr/src/boringssl/.openssl/include/openssl/ssl.h     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /usr/src/boringssl/build"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /tmp/buildsource"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv -fv /usr/src/modules/ /tmp/buildsource/modules/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$NGINX_ID\" \u003e /tmp/buildsource/nginx_id"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "alpine:3.9",
      "SourceCode": "FROM alpine:3.9",
      "Platform": "",
      "From": {
        "Image": "alpine:3.9"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"Alex Haydock \u003calex@alexhaydock.co.uk\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Chown": "",
          "From": "builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/tmp/buildsource",
            "/usr/src"
          ]
        },
        {
          "Chown": "",
          "From": "geoip",
          "Name": "copy",
          "SourcesAndDest": [
            "/var/lib/GeoIP/GeoLite2-Country.mmdb",
            "/var/lib/GeoIP/GeoLite2-Country.mmdb"
          ]
        },
        {
          "CmdLine": [
            "set -xe         \u0026\u0026 export NGINX_ID=\"$(cat /usr/src/nginx_id)\"         \u0026\u0026 addgroup -S -g $NGINX_ID nginx     \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \t    \u0026\u0026 apk add --no-cache --virtual .installdeps binutils make wget         \u0026\u0026 cd /usr/src/nginx     \u0026\u0026 make install     \u0026\u0026 rm -rf /etc/nginx/html/     \u0026\u0026 mkdir /etc/nginx/conf.d/     \u0026\u0026 mkdir -p /usr/share/nginx/html/     \u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/     \u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/     \u0026\u0026 install -m755 objs/nginx-debug /usr/sbin/nginx-debug     \u0026\u0026 install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so     \u0026\u0026 install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so     \u0026\u0026 ln -s ../../usr/lib/nginx/modules /etc/nginx/modules     \u0026\u0026 strip /usr/sbin/nginx*     \u0026\u0026 strip /usr/lib/nginx/modules/*.so         \u0026\u0026 apk add --no-cache --virtual .gettext gettext     \u0026\u0026 mv /usr/bin/envsubst /tmp/         \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst             | tr ',' '\\n'             | sort -u             | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }'     )\"     \u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps         \u0026\u0026 apk add --no-cache tzdata         \u0026\u0026 wget https://hg.nginx.org/pkg-oss/raw-file/tip/alpine/nginx.conf -O /etc/nginx/nginx.conf     \u0026\u0026 wget https://hg.nginx.org/pkg-oss/raw-file/tip/alpine/default.conf -O /etc/nginx/conf.d/default.conf         \u0026\u0026 apk del .installdeps .gettext     \u0026\u0026 mv /tmp/envsubst /usr/local/bin/         \u0026\u0026 rm -rf /usr/src/*         \u0026\u0026 chown -R $NGINX_ID:$NGINX_ID \"/etc/nginx\"     \u0026\u0026 chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\"     \u0026\u0026 chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\"     \u0026\u0026 touch \"/var/run/nginx.pid\"     \u0026\u0026 chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\"     \u0026\u0026 touch \"/var/run/nginx.lock\"     \u0026\u0026 chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\"         \u0026\u0026 echo \"\" \u0026\u0026 nginx -V"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}