{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "Maintainer": "Rafael RÃ¶mhild \u003crafael@roemhild.de\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "EJABBERD_BRANCH",
              "Value": "17.09"
            },
            {
              "Key": "EJABBERD_USER",
              "Value": "ejabberd"
            },
            {
              "Key": "EJABBERD_HTTPS",
              "Value": "true"
            },
            {
              "Key": "EJABBERD_STARTTLS",
              "Value": "true"
            },
            {
              "Key": "EJABBERD_S2S_SSL",
              "Value": "true"
            },
            {
              "Key": "EJABBERD_HOME",
              "Value": "/opt/ejabberd"
            },
            {
              "Key": "EJABBERD_DEBUG_MODE",
              "Value": "false"
            },
            {
              "Key": "HOME",
              "Value": "$EJABBERD_HOME"
            },
            {
              "Key": "PATH",
              "Value": "$EJABBERD_HOME/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin"
            },
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            },
            {
              "Key": "XMPP_DOMAIN",
              "Value": "localhost"
            },
            {
              "Key": "LC_ALL",
              "Value": "C.UTF-8"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -r $EJABBERD_USER     \u0026\u0026 useradd -r -m        -g $EJABBERD_USER        -d $EJABBERD_HOME        $EJABBERD_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 buildDeps='         git-core         build-essential         automake         libssl-dev         zlib1g-dev         libexpat-dev         libyaml-dev         libsqlite3-dev         erlang-src erlang-dev         libgd-dev         libwebp-dev         dnsutils     '     \u0026\u0026 requiredAptPackages='         wget         locales         ldnsutils         python2.7         python-jinja2         ca-certificates         libyaml-0-2         erlang-base erlang-snmp erlang-ssl erlang-ssh erlang-webtool         erlang-tools erlang-xmerl erlang-corba erlang-diameter erlang-eldap         erlang-eunit erlang-ic erlang-odbc erlang-os-mon         erlang-parsetools erlang-percept erlang-typer         python-mysqldb         imagemagick         libgd3         libwebp5     '     \u0026\u0026 echo \"deb http://packages.erlang-solutions.com/debian wheezy contrib\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 apt-key adv         --keyserver keys.gnupg.net         --recv-keys 434975BD900CCBE4F7EE1B1ED208507CA14F4FCA     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install -y $buildDeps $requiredAptPackages --no-install-recommends     \u0026\u0026 dpkg-reconfigure locales \u0026\u0026         locale-gen C.UTF-8     \u0026\u0026 /usr/sbin/update-locale LANG=C.UTF-8     \u0026\u0026 echo 'en_US.UTF-8 UTF-8' \u003e\u003e /etc/locale.gen     \u0026\u0026 locale-gen     \u0026\u0026 cd /tmp     \u0026\u0026 git clone https://github.com/processone/ejabberd.git         --branch $EJABBERD_BRANCH --single-branch --depth=1     \u0026\u0026 cd ejabberd     \u0026\u0026 chmod +x ./autogen.sh     \u0026\u0026 ./autogen.sh     \u0026\u0026 ./configure --enable-user=$EJABBERD_USER         --enable-all         --disable-tools         --disable-pam     \u0026\u0026 make debug=$EJABBERD_DEBUG_MODE     \u0026\u0026 make install     \u0026\u0026 mkdir $EJABBERD_HOME/ssl     \u0026\u0026 mkdir $EJABBERD_HOME/conf     \u0026\u0026 mkdir $EJABBERD_HOME/backup     \u0026\u0026 mkdir $EJABBERD_HOME/upload     \u0026\u0026 mkdir $EJABBERD_HOME/database     \u0026\u0026 mkdir $EJABBERD_HOME/module_source     \u0026\u0026 cd $EJABBERD_HOME     \u0026\u0026 rm -rf /tmp/ejabberd     \u0026\u0026 rm -rf /etc/ejabberd     \u0026\u0026 ln -sf $EJABBERD_HOME/conf /etc/ejabberd     \u0026\u0026 rm -rf /usr/local/etc/ejabberd     \u0026\u0026 ln -sf $EJABBERD_HOME/conf /usr/local/etc/ejabberd     \u0026\u0026 chown -R $EJABBERD_USER: $EJABBERD_HOME     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 apt-get purge -y --auto-remove $buildDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt;     update-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOSU_VERSION",
              "Value": "1.10"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex;     dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\";     wget -O /usr/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\";     wget -O /usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\";         export GNUPGHOME=\"$(mktemp -d)\";     gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;     gpg --batch --verify /usr/bin/gosu.asc /usr/bin/gosu;     rm -r \"$GNUPGHOME\" /usr/bin/gosu.asc;         chmod +sx /usr/bin/gosu;     gosu nobody true;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/log/ejabberd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "touch /var/log/ejabberd/crash.log /var/log/ejabberd/error.log /var/log/ejabberd/erlang.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./run.sh",
            "/sbin/run"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./scripts",
            "$EJABBERD_HOME/scripts"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "https://raw.githubusercontent.com/rankenstein/ejabberd-auth-mysql/master/auth_mysql.py",
            "$EJABBERD_HOME/scripts/lib/auth_mysql.py"
          ]
        },
        {
          "CmdLine": [
            "chmod a+rx $EJABBERD_HOME/scripts/lib/auth_mysql.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/lib/eimp*/priv/bin/eimp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./conf",
            "/opt/ejabberd/conf"
          ]
        },
        {
          "Name": "user",
          "User": "$EJABBERD_USER"
        },
        {
          "Name": "workdir",
          "Path": "$EJABBERD_HOME"
        },
        {
          "Name": "volume",
          "Volumes": [
            "$EJABBERD_HOME/database",
            "$EJABBERD_HOME/ssl",
            "$EJABBERD_HOME/backup",
            "$EJABBERD_HOME/upload"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "4560",
            "5222",
            "5269",
            "5280",
            "5443"
          ]
        },
        {
          "CmdLine": [
            "start"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "run"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}