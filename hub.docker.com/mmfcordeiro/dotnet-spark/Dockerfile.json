{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "[ -z \"$(apt-get indextargets)\" ]"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -xe    \u0026\u0026  echo '#!/bin/sh' \u003e /usr/sbin/policy-rc.d    \u0026\u0026  echo 'exit 101' \u003e\u003e /usr/sbin/policy-rc.d    \u0026\u0026  chmod +x /usr/sbin/policy-rc.d    \u0026\u0026  dpkg-divert --local --rename --add /sbin/initctl    \u0026\u0026  cp -a /usr/sbin/policy-rc.d /sbin/initctl    \u0026\u0026  sed -i 's/^exit.*/exit 0/' /sbin/initctl    \u0026\u0026  echo 'force-unsafe-io' \u003e /etc/dpkg/dpkg.cfg.d/docker-apt-speedup    \u0026\u0026  echo 'DPkg::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' \u003e /etc/apt/apt.conf.d/docker-clean    \u0026\u0026  echo 'APT::Update::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' \u003e\u003e /etc/apt/apt.conf.d/docker-clean    \u0026\u0026  echo 'Dir::Cache::pkgcache \"\"; Dir::Cache::srcpkgcache \"\";' \u003e\u003e /etc/apt/apt.conf.d/docker-clean    \u0026\u0026  echo 'Acquire::Languages \"none\";' \u003e /etc/apt/apt.conf.d/docker-no-languages    \u0026\u0026  echo 'Acquire::GzipIndexes \"true\"; Acquire::CompressionTypes::Order:: \"gz\";' \u003e /etc/apt/apt.conf.d/docker-gzip-indexes    \u0026\u0026  echo 'Apt::AutoRemove::SuggestsImportant \"false\";' \u003e /etc/apt/apt.conf.d/docker-autoremove-suggests"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /run/systemd    \u0026\u0026  echo 'docker' \u003e /run/systemd/container"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Env": [
            {
              "Key": "DAEMON_RUN",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_VERSION",
              "Value": "2.4.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HADOOP_VERSION",
              "Value": "2.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOTNET_CORE_VERSION",
              "Value": "2.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOTNET_SPARK_VERSION",
              "Value": "0.5.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_HOME",
              "Value": "/spark"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOTNET_WORKER_DIR",
              "Value": "/dotnet/Microsoft.Spark.Worker-${DOTNET_SPARK_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/spark/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_MASTER_PORT",
              "Value": "7077"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_MASTER_WEBUI_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_WORKER_PORT",
              "Value": "7078"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_WORKER_WEBUI_PORT",
              "Value": "8081"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SPARK_WORKER_INSTANCES",
              "Value": "2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update    \u0026\u0026  apt-get install -y wget ca-certificates openjdk-8-jdk bash software-properties-common vim supervisor    \u0026\u0026  mkdir -p /dotnet/HelloSpark    \u0026\u0026  wget http://mirror.netcologne.de/apache.org/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz    \u0026\u0026  tar -xvzf spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz    \u0026\u0026  mv spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION} spark    \u0026\u0026  rm spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz    \u0026\u0026  wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb    \u0026\u0026  dpkg -i packages-microsoft-prod.deb    \u0026\u0026  add-apt-repository universe    \u0026\u0026  apt-get install -y apt-transport-https    \u0026\u0026  apt-get update    \u0026\u0026  apt-get install -y dotnet-sdk-${DOTNET_CORE_VERSION}    \u0026\u0026  apt-get clean    \u0026\u0026  rm -rf /var/lib/apt/lists/*    \u0026\u0026  rm -rf packages-microsoft-prod.deb    \u0026\u0026  wget https://github.com/dotnet/spark/releases/download/v${DOTNET_SPARK_VERSION}/Microsoft.Spark.Worker.netcoreapp${DOTNET_CORE_VERSION}.linux-x64-${DOTNET_SPARK_VERSION}.tar.gz    \u0026\u0026  tar -xvzf Microsoft.Spark.Worker.netcoreapp${DOTNET_CORE_VERSION}.linux-x64-${DOTNET_SPARK_VERSION}.tar.gz    \u0026\u0026  mv Microsoft.Spark.Worker-${DOTNET_SPARK_VERSION} /dotnet/    \u0026\u0026  rm Microsoft.Spark.Worker.netcoreapp${DOTNET_CORE_VERSION}.linux-x64-${DOTNET_SPARK_VERSION}.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./dotnet/HelloSpark",
            "/dotnet/HelloSpark"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./etc/supervisor.conf",
            "/etc/supervisor.conf"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "6066",
            "7077",
            "8080",
            "8081",
            "8082",
            "9900-9999"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord -c /etc/supervisor.conf"
          ],
          "Name": "cmd",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/spark/sbin/start-shuffle-service.sh"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}