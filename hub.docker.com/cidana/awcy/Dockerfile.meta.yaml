MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Env:
    - Key: APP_USER
      Value: xiph
    - Key: APP_DIR
      Value: /opt/app
    - Key: LC_ALL
      Value: C.UTF-8
    - Key: LANG
      Value: C.UTF-8
    - Key: LANGUAGE
      Value: C.UTF-8
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    - Key: GPG_SERVERS
      Value: '"ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com
        hkp://keyserver.ubuntu.com:80 pgp.mit.edu"'
    Name: env
  - CmdLine:
    - "groupadd --gid 1000 ${APP_USER} && \tuseradd --uid 1000 --gid ${APP_USER} --shell
      /bin/bash --create-home ${APP_USER}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"deb http://archive.ubuntu.com/ubuntu/ bionic main restricted universe
      multiverse\"           >/etc/apt/sources.list && \techo \"deb http://security.ubuntu.com/ubuntu
      bionic-security main restricted universe multiverse\" >>/etc/apt/sources.list
      && \techo \"deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted
      universe multiverse\"  >>/etc/apt/sources.list && \tapt-get update && \tapt-get
      install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbuild-essential
      \t\tbzip2 \t\tca-certificates \t\tcheck \t\tcmake \t\tcmake-extras \t\tcurl
      \t\tdirmngr \t\tfile \t\tgettext-base \t\tgit-core \t\tgpg \t\tgpg-agent \t\tiproute2
      \t\tiputils-ping \t\tjq \t\tless \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibogg-dev
      \t\tlibpng-dev \t\tlibtool \t\tlocales \t\tnasm \t\tnetcat-openbsd \t\tnet-tools
      \t\topenjdk-8-jdk-headless \t\topenssl \t\tpkg-config \t\tprocps \t\tpsmisc
      \t\tpython2.7 \t\trsync \t\trunit \t\tsqlite3 \t\tstrace \t\ttcpdump \t\ttzdata
      \t\tunzip \t\tuuid \t\tvim \t\twget \t\txz-utils \t\tyasm \t\tcargo \t\t&& \tapt-get
      clean && \trm -rf /var/lib/apt/lists"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${APP_DIR}
  - Env:
    - Key: CIEDE_DIR
      Value: /opt/dump_ciede2000
    Name: env
  - CmdLine:
    - "mkdir -p $(dirname ${CIEDE_DIR}) && \tgit clone https://github.com/KyleSiefring/dump_ciede2000
      ${CIEDE_DIR} && \tcd ${CIEDE_DIR} && \tcargo build --release"
    Name: run
    PrependShell: true
  - Env:
    - Key: RUSTUP_HOME
      Value: /usr/local/rustup
    - Key: CARGO_HOME
      Value: /usr/local/cargo
    - Key: PATH
      Value: /usr/local/cargo/bin:${PATH}
    Name: env
  - CmdLine:
    - "RUST_VERSION=1.30.1 && \tcurl -sSf --output /tmp/rustup-init https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init
      && \tchmod +x /tmp/rustup-init && \t/tmp/rustup-init -y --no-modify-path --default-toolchain
      ${RUST_VERSION} && \trm -vf /tmp/rustup-init && \tchmod -R a+w ${RUSTUP_HOME}
      ${CARGO_HOME}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "NODE_VERSION=8.12.0 && \tARCH=x64 && \tfor key in \t\t94AE36675C464D64BAFA68DD7434390BDBE9B9C5
      \t\tFD3A5288F042B6850C66B31F09FE44734EB7990E \t\t71DCFD284A79C3B38668286BC97EC7A07EDE3FC1
      \t\tDD8F2338BAE7501E3DD5AC78C273792F7D83545D \t\tC4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8
      \t\tB9AE9905FFD7803F25714661B63B535A4C206CA9 \t\t56730D5401028683275BD23C23EFEFE93C4CFFFE
      \t\t77984A986EBC2AA786BC0F66B01FBB92821C587A \t\t8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600
      \t; do \t\tfor server in $(shuf -e ${GPG_SERVERS}) ; do \t\t\thttp_proxy= gpg
      --keyserver \"$server\" --recv-keys \"${key}\" && break || : ; \t\tdone ; \tdone
      && \tcurl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\"
      && \tcurl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\"
      && \tgpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && \tgrep
      \" node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\\$\" SHASUMS256.txt | sha256sum
      -c - && \ttar xJf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" -C /usr --strip-components=1
      --no-same-owner && \trm -vf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" SHASUMS256.txt.asc
      SHASUMS256.txt && \tln -s /usr/bin/node /usr/bin/nodejs"
    Name: run
    PrependShell: true
  - Env:
    - Key: EMSDK_DIR
      Value: /opt/emsdk
    Name: env
  - CmdLine:
    - "EMSDK_VERSION=sdk-1.38.48-64bit && \tgit clone https://github.com/edmond-zhu/emsdk.git
      ${EMSDK_DIR} && \tcd /opt/emsdk && \t./emsdk install ${EMSDK_VERSION} && \t./emsdk
      activate ${EMSDK_VERSION} && \techo \"hack emscript config getter (em-config)\"
      && \tcp /root/.emscripten /home/${APP_USER}/.emscripten && \tprintf '#!/usr/bin/env
      python\\nimport os, sys\\nexecfile(os.getenv(\"HOME\")+\"/.emscripten\")\\nprint
      eval(sys.argv[1])\\n' >/usr/local/bin/em-config && \tchmod a+x /usr/local/bin/em-config"
    Name: run
    PrependShell: true
  - CmdLine:
    - "TINI_VERSION=v0.18.0 && \tfor server in $(shuf -e ${GPG_SERVERS}) ; do \t\thttp_proxy=
      gpg --keyserver \"$server\" --recv-keys 0527A9B7 && break || : ; \tdone && \twget
      -O/usr/bin/tini     \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\"
      && \twget -O/usr/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\"
      && \tgpg --verify /usr/bin/tini.asc && \trm -f /usr/bin/tini.asc && \tchmod
      a+x /usr/bin/tini"
    Name: run
    PrependShell: true
  - CmdLine:
    - "GOSU_VERSION=1.11 && \tfor server in $(shuf -e ${GPG_SERVERS}); do \t\thttp_proxy=
      gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      && break || : ; \tdone && \twget -O/usr/bin/gosu     \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\"
      && \twget -O/usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\"
      && \tgpg --verify /usr/bin/gosu.asc && \trm -f /usr/bin/gosu.asc && \tchmod
      a+x /usr/bin/gosu"
    Name: run
    PrependShell: true
  - Env:
    - Key: DAALATOOL_DIR
      Value: /opt/daalatool
    Name: env
  - CmdLine:
    - "mkdir -p $(dirname ${DAALATOOL_DIR}) && \tgit clone https://github.com/xiph/daala.git
      ${DAALATOOL_DIR} && \tcd ${DAALATOOL_DIR} && \t./autogen.sh && \t./configure
      --disable-player && \tmake tools -j4"
    Name: run
    PrependShell: true
  - Env:
    - Key: RD_TOOL_DIR
      Value: /opt/rd_tool
    Name: env
  - CmdLine:
    - "apt-get update && \tapt-get install -y --no-install-recommends \t\tbc \t\tpython3-boto3
      \t\tpython3-numpy \t\tpython3-scipy \t\tpython3-tornado \t\tssh \t\ttime \t\t&&
      \tapt-get clean && \trm -rf /var/lib/apt/lists && \trm -vf /etc/ssh/ssh_host_*"
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - rd_tool
    - ${RD_TOOL_DIR}
  - Chown: ""
    Name: add
    SourcesAndDest:
    - package.json
    - '*.ts'
    - tsconfig.json
    - ${APP_DIR}/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - www
    - ${APP_DIR}/www
  - CmdLine:
    - "cd ${APP_DIR} && \texport PYTHON=python2.7 && \tnpm install && \tnpm run tsc
      && \tcd ${APP_DIR}/www && \tnpm install && \tnpm run build"
    Name: run
    PrependShell: true
  - Env:
    - Key: VMAF_DIR
      Value: /opt/vmaf
    Name: env
  - Env:
    - Key: TZ
      Value: UTC
    Name: env
  - CmdLine:
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && \tapt-get install -y --no-install-recommends         build-essential
      \        ninja-build         python3         python3-dev         python3-pip
      \        python3-setuptools         python3-tk         && \tapt-get clean &&
      \trm -rf /var/lib/apt/lists"
    Name: run
    PrependShell: true
  - CmdLine:
    - pip3 install --upgrade pip
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install numpy scipy matplotlib notebook pandas sympy nose scikit-learn scikit-image
      h5py sureal meson
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONPATH
      Value: ${VMAF_DIR}/python/src:${VMAF_DIR}:$PYTHONPATH
    Name: env
  - Env:
    - Key: PATH
      Value: ${VMAF_DIR}:${VMAF_DIR}/src/libvmaf:$PATH
    Name: env
  - CmdLine:
    - "mkdir -p $(dirname ${VMAF_DIR}) &&     git clone --depth 1 -b add_print_vmaf_score
      https://github.com/edmond-zhu/vmaf.git ${VMAF_DIR} &&     cd ${VMAF_DIR} &&
      \tmake"
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - '*.m'
    - '*.sh'
    - '*.py'
    - ${APP_DIR}/
  - Env:
    - Key: CONFIG_DIR
      Value: /data/conf
    - Key: CODECS_SRC_DIR
      Value: /data/src
    - Key: RUNS_DST_DIR
      Value: /data/runs
    - Key: WORK_DIR
      Value: /data/work
    - Key: MEDIAS_SRC_DIR
      Value: /data/media
    - Key: LOCAL_WORKER_ENABLED
      Value: "false"
    - Key: IRC_CHANNEL
      Value: none
    - Key: AWCY_API_KEY
      Value: awcy_api_key
    - Key: AWCY_SERVER_PORT
      Value: "3000"
    - Key: RD_SERVER_PORT
      Value: "4000"
    Name: env
  - CmdLine:
    - /etc/entrypoint
    Name: entrypoint
    PrependShell: false
  - Chown: ""
    Name: add
    SourcesAndDest:
    - etc
    - /etc
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
