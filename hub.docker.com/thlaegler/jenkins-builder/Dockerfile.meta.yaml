MetaArgs: null
Stages:
- BaseName: gcr.io/cloud-builders/gcloud
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"thlaegler"'
    Name: label
  - Labels:
    - Key: package
      Value: '"io.laegler.builder"'
    Name: label
  - Labels:
    - Key: namespace
      Value: '"cloudbuilder"'
    Name: label
  - Labels:
    - Key: version
      Value: '"0.0.1-SNAPSHOT"'
    Name: label
  - Env:
    - Key: GOOGLE_PROJECT_ID
      Value: '"xm-development"'
    Name: env
  - Env:
    - Key: GOOGLE_APPLICATION_CREDENTIALS
      Value: '"service-account.json"'
    Name: env
  - Env:
    - Key: GOOGLE_CLUSTER_NAME
      Value: '"platform-cluster"'
    Name: env
  - Env:
    - Key: GOOGLE_CLUSTER_TIMEZONE
      Value: '"australia-southeast1-c"'
    Name: env
  - Env:
    - Key: GOOGLE_CLUSTER_REGION
      Value: '"australia-southeast1"'
    Name: env
  - Env:
    - Key: GIT_USEREMAIL
      Value: '"test@test.com"'
    Name: env
  - Env:
    - Key: GIT_USERNAME
      Value: '"test"'
    Name: env
  - Env:
    - Key: GIT_PASSWORD
      Value: '"test"'
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: '"17.12.0~ce-0~ubuntu"'
    Name: env
  - Env:
    - Key: DOCKER_SHA
      Value: '"0EBFCD88"'
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: '"3.6.0"'
    Name: env
  - Env:
    - Key: HELM_VERSION
      Value: '"2.9.0"'
    Name: env
  - Env:
    - Key: MAVEN_VERSION
      Value: '"3.5.0"'
    Name: env
  - Env:
    - Key: MAVEN_USER_HOME_DIR
      Value: '"/root"'
    Name: env
  - Env:
    - Key: MAVEN_SHA
      Value: '"beb91419245395bd69a4a6edad5ca3ec1a8b64e41457672dc687c173a495f034"'
    Name: env
  - Env:
    - Key: MAVEN_BASE_URL
      Value: '"https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries"'
    Name: env
  - Env:
    - Key: M2_HOME
      Value: '"/usr/share/maven"'
    Name: env
  - Env:
    - Key: JAVA_HOME
      Value: '"/usr/lib/jvm/java-8-openjdk-amd64/"'
    Name: env
  - Env:
    - Key: JAVA_OPTS
      Value: '"-server -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
        -XX:+UseParallelGC -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=128m"'
    Name: env
  - Env:
    - Key: CLASSPATH
      Value: '"$JAVA_HOME/lib/tools.jar"'
    Name: env
  - Env:
    - Key: HELM_FILENAME
      Value: '"helm-v${HELM_VERSION}-linux-amd64.tar.gz"'
    Name: env
  - Env:
    - Key: DOCKER_HOST
      Value: '"tcp://localhost:2375"'
    Name: env
  - Env:
    - Key: PYENV_ROOT
      Value: '"/root/.pyenv"'
    Name: env
  - Env:
    - Key: PATH
      Value: '"$PATH:$M2_HOME/bin:$JAVA_HOME/bin:/builder/google-cloud-sdk/bin/:$PYENV_ROOT/bin:$PATH"'
    Name: env
  - CmdLine:
    - "apt-get -y update && \tapt-get install --no-install-recommends -qqy --force-yes
      curl wget apt-transport-https build-essential software-properties-common python-software-properties
      && \tcurl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      && \tapt-key fingerprint ${DOCKER_SHA} && \tadd-apt-repository \t\t\"deb [arch=amd64]
      https://download.docker.com/linux/ubuntu \t\t$(lsb_release -cs) \t\tstable\"
      && \tadd-apt-repository ppa:openjdk-r/ppa && \twget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key
      | sudo apt-key add - && \techo deb http://pkg.jenkins.io/debian-stable binary/
      > /etc/apt/sources.list.d/jenkins.list"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update -qqy && \tapt-get install --no-install-recommends -qqy --force-yes
      \t\tca-certificates \t\tca-certificates-java \t\trsync \t\tvim \t\tmaven \t\tjq
      \t\tgit \t\tant \t\tperl \t\topenjdk-8-jdk \t\tgnupg2 \t\tlibssl-dev \t\tlibbz2-dev
      \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibffi-dev \t\tlibxml2 \t\tlibxml2-dev
      \t\tlibxml-libxml-perl \t\tlibwww-perl \t\tliblwp-protocol-https-perl \t\tpython-dev
      \t\tpython3-pip \t\tdocker-ce=${DOCKER_VERSION} \t\tjenkins && \tapt-get clean
      && \tupdate-ca-certificates -f && \trm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "git config --global user.name ${GIT_USERNAME} && \tgit config --global user.email
      ${GIT_USEREMAIL} && \tgit config --global core.editor vim && \tgit config --system
      credential.helper gcloud.sh"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - settings.xml
    - ${M2_HOME}/settings.xml
  - CmdLine:
    - "pip install pip --upgrade && \tcurl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer
      | bash && \teval \"$(pyenv init -)\" && \teval \"$(pyenv virtualenv-init -)\"
      && \tpyenv update && \tpyenv install ${PYTHON_VERSION}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "wget https://storage.googleapis.com/kubernetes-helm/${HELM_FILENAME} -P /tmp
      && \ttar -zxvf /tmp/${HELM_FILENAME} -C /tmp && \tmv /tmp/linux-amd64/helm /usr/local/bin
      && \trm -rf /tmp/${HELM_FILENAME}"
    Name: run
    PrependShell: true
  - CmdLine:
    - "wget -c http://www-us.apache.org/dist//jmeter/binaries/apache-jmeter-4.0.tgz
      && \ttar -zxvf apache-jmeter-4.0.tgz && \trm -rf apache-jmeter-4.0.tgz"
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash
    Name: entrypoint
    PrependShell: false
  From:
    Image: gcr.io/cloud-builders/gcloud
  Name: ""
  Platform: ""
  SourceCode: FROM gcr.io/cloud-builders/gcloud
