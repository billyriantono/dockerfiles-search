MetaArgs: null
Stages:
- BaseName: heroku/heroku:16
  Commands:
  - CmdLine:
    - apt-get update -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get -y install software-properties-common libffi-dev libssl-dev build-essential
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository --yes ppa:libreoffice/libreoffice-5-4
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y wget libgl1-mesa-glx libreoffice-writer libtiff-tools libxdamage1
      libxfixes3
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://cli-assets.heroku.com/install.sh | sh
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&&
      rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.7.0
    Name: env
  - CmdLine:
    - "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --keyserver ha.pool.sks-keyservers.net
      --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local
      -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o
      \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec
      rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: "18.0"
    Name: env
  - CmdLine:
    - "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython
      get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\"
      \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a
      \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name
      '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_VERSION
      Value: 12.10.0
    Name: env
  - CmdLine:
    - buildDeps='xz-utils'     && ARCH= && dpkgArch="$(dpkg --print-architecture)"     &&
      case "${dpkgArch##*-}" in       amd64) ARCH='x64';;       ppc64el) ARCH='ppc64le';;       s390x)
      ARCH='s390x';;       arm64) ARCH='arm64';;       armhf) ARCH='armv7l';;       i386)
      ARCH='x86';;       *) echo "unsupported architecture"; exit 1 ;;     esac     &&
      set -ex     && apt-get update && apt-get install -y ca-certificates curl wget
      gnupg dirmngr $buildDeps --no-install-recommends     && rm -rf /var/lib/apt/lists/*     &&
      for key in       94AE36675C464D64BAFA68DD7434390BDBE9B9C5       FD3A5288F042B6850C66B31F09FE44734EB7990E       71DCFD284A79C3B38668286BC97EC7A07EDE3FC1       DD8F2338BAE7501E3DD5AC78C273792F7D83545D       C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8       B9AE9905FFD7803F25714661B63B535A4C206CA9       77984A986EBC2AA786BC0F66B01FBB92821C587A       8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600       4ED778F539E3634C779C87C6D7062848A1AB005C       A48C2BEE680E841632CD4E44F07496B3EB3C1762       B9E2F5981AA6E0CD28160D9FF13993A75599653C     ;
      do       gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys
      "$key" ||       gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys
      "$key" ||       gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key"
      ;     done     && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz"     &&
      curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"     &&
      gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc     && grep
      " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c -     &&
      tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1
      --no-same-owner     && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc
      SHASUMS256.txt     && apt-get purge -y --auto-remove $buildDeps     && ln -s
      /usr/local/bin/node /usr/local/bin/nodejs
    Name: run
    PrependShell: true
  - Env:
    - Key: YARN_VERSION
      Value: 1.17.3
    Name: env
  - CmdLine:
    - set -ex   && for key in     6A010C5166006599AA17F08146C2130DFD2497F5   ; do     gpg
      --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key"
      ||     gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys
      "$key" ||     gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key"
      ;   done   && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"   &&
      curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc"   &&
      gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz   &&
      mkdir -p /opt   && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/   && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn
      /usr/local/bin/yarn   && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg   &&
      rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -L https://github.com/hasura/graphql-engine/raw/master/cli/get.sh | bash   &&
      hasura version
    Name: run
    PrependShell: true
  - CmdLine:
    - echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90circleci   && echo
      'DPkg::Options "--force-confnew";' >> /etc/apt/apt.conf.d/90circleci
    Name: run
    PrependShell: true
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - CmdLine:
    - apt-get update   && mkdir -p /usr/share/man/man1   && apt-get install -y     git
      mercurial xvfb     locales sudo openssh-client ca-certificates tar gzip parallel     net-tools
      netcat unzip zip bzip2 gnupg curl wget
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen C.UTF-8 || true
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - JQ_URL="https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest"   &&
      curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq
      $JQ_URL   && chmod +x /usr/bin/jq   && jq --version
    Name: run
    PrependShell: true
  - CmdLine:
    - 'set -ex   && export DOCKER_VERSION=$(curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/
      | grep -o -e ''docker-[.0-9]*-ce\.tgz'' | sort -r | head -n 1)   && DOCKER_URL="https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}"   &&
      echo Docker URL: $DOCKER_URL   && curl --silent --show-error --location --fail
      --retry 3 --output /tmp/docker.tgz "${DOCKER_URL}"   && ls -lha /tmp/docker.tgz   &&
      tar -xz -C /tmp -f /tmp/docker.tgz   && mv /tmp/docker/* /usr/bin   && rm -rf
      /tmp/docker /tmp/docker.tgz   && which docker   && (docker version || true)'
    Name: run
    PrependShell: true
  - CmdLine:
    - COMPOSE_URL="https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest"   &&
      curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose
      $COMPOSE_URL   && chmod +x /usr/bin/docker-compose   && docker-compose version
    Name: run
    PrependShell: true
  - CmdLine:
    - DOCKERIZE_URL="https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz"   &&
      curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz
      $DOCKERIZE_URL   && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz   &&
      rm -rf /tmp/dockerize-linux-amd64.tar.gz   && dockerize --version
    Name: run
    PrependShell: true
  - CmdLine:
    - 'groupadd --gid 3434 circleci   && useradd --uid 3434 --gid circleci --shell
      /bin/bash --create-home circleci   && echo ''circleci ALL=NOPASSWD: ALL'' >>
      /etc/sudoers.d/50-circleci   && echo ''Defaults    env_keep += "DEBIAN_FRONTEND"''
      >> /etc/sudoers.d/env_keep'
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo pip install pipenv
    Name: run
    PrependShell: true
  - Name: user
    User: circleci
  From:
    Image: heroku/heroku:16
  Name: ""
  Platform: ""
  SourceCode: FROM heroku/heroku:16
