{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "php:7.1.9-apache",
      "SourceCode": "FROM php:7.1.9-apache",
      "Platform": "",
      "From": {
        "Image": "php:7.1.9-apache"
      },
      "Commands": [
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "gentgrp.crt",
            "/usr/local/share/ca-certificates/"
          ]
        },
        {
          "CmdLine": [
            "update-ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update   \u0026\u0026 apt-get install -y bundler vim curl git unzip libssl-dev libreadline-dev zlib1g-dev gnupg2   \u0026\u0026 curl -sL https://deb.nodesource.com/setup_8.x | bash -   \u0026\u0026 apt-get install nodejs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex   \u0026\u0026 buildDeps='     libjpeg62-turbo-dev     libpng-dev     libpq-dev   '   \u0026\u0026 apt-get install -y --no-install-recommends $buildDeps   \u0026\u0026 rm -rf /var/lib/apt/lists/*   \u0026\u0026 docker-php-ext-configure gd --with-jpeg-dir=/usr --with-png-dir=/usr   \u0026\u0026 docker-php-ext-install -j \"$(nproc)\" gd mbstring pdo pdo_mysql pdo_pgsql zip   \u0026\u0026 apt-mark manual libjpeg62-turbo libpq5   \u0026\u0026 apt-get purge -y --auto-remove $buildDeps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/src"
        },
        {
          "CmdLine": [
            "git clone https://github.com/rbenv/ruby-build.git   \u0026\u0026 PREFIX=/usr/local ./ruby-build/install.sh   \u0026\u0026 ruby-build 1.9.3-p551 /opt/rubies/1.9.3   \u0026\u0026 ruby-build 2.1.9 /opt/rubies/2.1.9   \u0026\u0026 ruby-build 2.2.5 /opt/rubies/2.2.5   \u0026\u0026 ruby-build 2.3.0 /opt/rubies/2.3.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L -o chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz   \u0026\u0026 tar -xzvf chruby-0.3.9.tar.gz   \u0026\u0026 rm chruby-0.3.9.tar.gz   \u0026\u0026 cd chruby-0.3.9   \u0026\u0026 make install   \u0026\u0026 ./scripts/setup.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/bin"
        },
        {
          "CmdLine": [
            "php -r \"copy('https://raw.githubusercontent.com/composer/getcomposer.org/c1ad3667731e9c5c1a21e5835c7e6a7eedc2e1fe/web/installer', 'composer-setup.php');\"   \u0026\u0026 php -r \"if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"   \u0026\u0026 php composer-setup.php   \u0026\u0026 php -r \"unlink('composer-setup.php');\"   \u0026\u0026 mv composer.phar composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/composer"
        },
        {
          "CmdLine": [
            "composer require drush/drush:^8.0   \u0026\u0026 ln -s /usr/local/composer/vendor/bin/drush /usr/local/bin/drush"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "composer require phing/phing:^2.0   \u0026\u0026 ln -s /usr/local/composer/vendor/bin/phing /usr/local/bin/phing   \u0026\u0026 sed -i -e 's#passthru($this-\u003erealCommand, $return);#passthru(\"/bin/bash -c \" . escapeshellarg(\"source /etc/profile.d/chruby.sh; \" . $this-\u003erealCommand), $return);#g' vendor/phing/phing/classes/phing/tasks/system/ExecTask.php   \u0026\u0026 sed -i -e 's#exec($this-\u003erealCommand, $output, $return);#exec(\"/bin/bash -c \" . escapeshellarg(\"source /etc/profile.d/chruby.sh; \" . $this-\u003erealCommand), $output, $return);#g' vendor/phing/phing/classes/phing/tasks/system/ExecTask.php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/phploc"
        },
        {
          "CmdLine": [
            "composer require phploc/phploc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/phpmd"
        },
        {
          "CmdLine": [
            "composer require phpmd/phpmd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/usr/local/phpcpd"
        },
        {
          "CmdLine": [
            "composer require sebastian/phpcpd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "a2enmod rewrite"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}