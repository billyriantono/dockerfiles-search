{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu",
      "SourceCode": "FROM ubuntu",
      "Platform": "",
      "From": {
        "Image": "ubuntu"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "SDK_TOOLS",
              "Value": "\"sdk-tools-linux-4333796.zip\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NDK_DL",
              "Value": "\"https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NDKVER",
              "Value": "r17c"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NDKDIR",
              "Value": "/ndk/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NDKAPI",
              "Value": "21"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROIDAPI",
              "Value": "28"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIP",
              "Value": "pip3"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt update --fix-missing \u0026\u0026 apt upgrade -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y zip python3 python-pip python python3-venv python3-virtualenv python-virtualenv python3-pip curl wget lbzip2 bsdtar \u0026\u0026 dpkg --add-architecture i386 \u0026\u0026 apt update \u0026\u0026 apt install -y build-essential libstdc++6:i386 zlib1g-dev zlib1g:i386 openjdk-8-jdk libncurses5:i386 \u0026\u0026 apt install -y libtool automake autoconf unzip pkg-config git ant gradle rsync"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /sdk-install/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /sdk-install \u0026\u0026 wget https://dl.google.com/android/repository/${SDK_TOOLS} \u0026\u0026  cd /sdk-install \u0026\u0026 unzip ./sdk-tools-*.zip \u0026\u0026 chmod +x ./tools//bin/sdkmanager \u0026\u0026  rm -v sdk-tools-*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/sdk-install/tools/bin/sdkmanager --update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yes | /sdk-install/tools/bin/sdkmanager \"platform-tools\" \"platforms;android-28\" \"build-tools;28.0.3\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /tmp/ndk/ \u0026\u0026 cd /tmp/ndk/ \u0026\u0026 wget ${NDK_DL} \u0026\u0026 unzip -q android-ndk*.zip \u0026\u0026 mv android-*/ /ndk/ \u0026\u0026 rm -v android-ndk*.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt install -y ccache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "USE_CCACHE",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CCACHE_DIR",
              "Value": "/ccache/contents/"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CC",
              "Value": "ccache gcc"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CCACHE_DEBUG",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CCACHE_LOGFILE",
              "Value": "/ccache/contents/cache.debug.txt"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/ccache/"
          ]
        },
        {
          "CmdLine": [
            "if [ -x /sdk-install ]; then chmod a+x /sdk-install/tools/bin/*; fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "${PIP} install -U pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y libffi-dev libssl-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "$PIP install -U Cython"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y cmake"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y nano vim tree"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt update \u0026\u0026 apt install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt install -y psmisc bash sudo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/echo -e '\\nBASH_ENV=\"~/.additional_env\"\\n' \u003e\u003e /etc/environment"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BASH_ENV",
              "Value": "\"~/.additional_env\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p /home/userhome/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/home/userhome"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BUILDUSERNAME",
              "Value": "root"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/home/userhome/workspace/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/home/userhome/output"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/userhome"
        },
        {
          "CmdLine": [
            "$PIP install --user -U 'buildozer' 'https://github.com/kivy/python-for-android/archive/master.zip' #  # p4a build 63768e71-3198-48f7-aa59-bf38dabb2e68"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /tmp/test-app/ \u0026\u0026 cd /tmp/test-app \u0026\u0026 git clone https://github.com/kivy/python-for-android/ ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -R /tmp/test-app/testapps/testapp_keyboard/ /home/userhome/testapp-sdl2-keyboard/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -R /tmp/test-app/testapps/testapp_flask/ /home/userhome/testapp-webview-flask/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cp -R /tmp/test-app/testapps/testapp_nogui/ /home/userhome/testapp-service_only-nogui/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'bash' \u003e /tmp/launchcmd.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/echo -e '#!/usr/bin/python3\\nimport json\\nimport os\\nprint(\"echo \\\"\\\"\")\\nprint(\"echo \\\"  *** WELCOME to p4a-build-spaces ***\\\"\\\\n\")\\nprint(\"echo \\\"\\\"\\\\n\")\\nprint(\"echo \\\"To build a kivy demo app, use this command:\\\"\")\\nprint(\"echo \\\"\\\"\\\\n\")\\ninit_file = \"\"\\nif os.environ[\"PIP\"] == \"pip2\":\\n    demoapp_line = \"echo \\\"$ cd ~/testapp-sdl2-keyboard \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python2 --private .\\\"\\\\n\"\\n    print(demoapp_line)\\n    init_file += \"shopt -s expand_aliases\\\\n\"\\n    init_file += \"alias testbuild=\\\"cd ~/testapp-sdl2-keyboard \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python2 --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\n    init_file += \"alias testbuild_webview=\\\"cd ~/testapp-webview-flask \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap webview --requirements=python2,flask --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\n    init_file += \"alias testbuild_service_only=\\\"cd ~/testapp-service_only-nogui \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python2 --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\nelse:\\n    demoapp_line = \"echo \\\"$ cd ~/testapp-sdl2-keyboard \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python3 --private .\\\"\\\\n\"\\n    print(demoapp_line)\\n    init_file += \"shopt -s expand_aliases\\\\n\"\\n    init_file += \"alias testbuild=\\\"cd ~/testapp-sdl2-keyboard \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python3 --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\n    init_file += \"alias testbuild_webview=\\\"cd ~/testapp-webview-flask \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap webview --requirements=python3,flask --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\n    init_file += \"alias testbuild_service_only=\\\"cd ~/testapp-service_only-nogui \u0026\u0026 p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python3 --private . \u0026\u0026 cp *.apk ~/output\\\"\\\\n\"\\nprint(\"echo \\\"\\\"\\\\n\")\\nprint(\"echo \\\"... or use the shortcut alias \\\\`testbuild\\\\`!\\\"\\\\n\")\\nprint(\"echo \\\"\\\"\\\\n\")\\nwith open(\"/tmp/launchcmd.txt\", \"r\") as f:\\n    import shlex\\n    args = shlex.split(f.read().strip())\\n    print(\"CMD=()\")\\n    i = -1\\n    for arg in args:\\n        i += 1\\n        print(\"CMD[\" + str(i) + \"]=\" + shlex.quote(arg))\\nvars = [\"ANDROIDAP='$ANDROIDAPI'\",\\n    \"ANDROIDNDKVER='$NDKVER'\",\\n    \"NDKAPI='$NDKAPI'\",\\n    \"HOME=/home/userhome\",\\n    \"GRADLE_OPTS=\\\"-Xms1724m -Xmx5048m -Dorg.gradle.jvmargs='\"'\"'-Xms1724m -Xmx5048m'\"'\"'\\\"\",\\n    \"JAVA_OPTS=\\\"-Xms1724m -Xmx5048m\\\"\",\\n    \"TESTPATH=\\\"$PATH:/home/userhome/.local/bin\\\"\",\\n    \"PATH=\\\"$PATH:/home/userhome/.local/bin\\\"\",\\n    \"ANDROIDSDK=/sdk-install/ ANDROIDNDK=\\\"'$NDKDIR'\\\"\",\\n    ]\\nwith open(os.path.expanduser(\"~/.pam_environment\"), \"a\", encoding=\"utf-8\") as f1:\\n    f1.write(\"\\\\n\" + \"\\\\n\".join([\\n        var.partition(\"=\")[0] + \" DEFAULT=\" +\\n        var.partition(\"=\")[2] for var in vars]))\\nwith open(os.path.expanduser(\"~/.bash_profile\"), \"a\", encoding=\"utf-8\") as f2:\\n    f2.write(\"\\\\n\" + init_file + \"\\\\n\")\\n    f2.write(\"\\\\n\" + \"\\\\nexport \".join(vars) + \"\\\\n\")\\nwith open(os.path.expanduser(\"~/.profile\"), \"a\", encoding=\"utf-8\") as f2:\\n    f2.write(\"\\\\n\" + \"\\\\nexport \".join(vars) + \"\\\\n\")\\nwith open(os.path.expanduser(\"~/.bashrc\"), \"a\", encoding=\"utf-8\") as f2:\\n    f2.write(\"\\\\n\" + init_file + \"\\\\n\")\\n    f2.write(\"\\\\n\" + \"\\\\nexport \".join(vars) + \"\\\\n\")\\nwith open(os.path.expanduser(\"~/.additional_env\"), \"a\", encoding=\"utf-8\") as f3:\\n    f3.write(\"\\\\n\" + \"\\\\nexport \".join(vars) + \"\\\\n\")' \u003e /tmp/cmdline.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/echo -e '#!/bin/sh\\npython3 /tmp/cmdline.py \u003e /tmp/launch-prepare.sh\\nsource /tmp/launch-prepare.sh\\nexec -- ${CMD[@]}' \u003e /tmp/launch.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "DOT_VERSION",
          "Name": "arg",
          "Value": "0.0.7"
        },
        {
          "Key": "DOT_PATH",
          "Name": "arg",
          "Value": "https://github.com/homdx/flask-hello/releases/download"
        },
        {
          "Key": "DOT_FILE1",
          "Name": "arg",
          "Value": "local-bin.tar.gz"
        },
        {
          "Key": "DOT_HASH1",
          "Name": "arg",
          "Value": "33133916e5f954615f56e7f68ee4a452dc340eeac4c4a4b2441c91ba297b9489"
        },
        {
          "Key": "DOT_FILE2",
          "Name": "arg",
          "Value": "root-gradle.tar.gz"
        },
        {
          "Key": "DOT_HASH2",
          "Name": "arg",
          "Value": "1291da98392ff9461e5c759aa088c34b22ed8652151c273df0b46fc2191f8f53"
        },
        {
          "Key": "DISABLECACHE",
          "Name": "arg",
          "Value": "${DISABLE_CACHE}"
        },
        {
          "CmdLine": [
            "apt-get install aria2 time --yes"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     if [ -z \"$DISABLECACHE\" ] ;     then echo 'Now enable Cached files for Python2and3 and .gradle files. If you not need cache build with: --build-arg DISABLECACHE=something';     set -ex ;     cd / ; time -p aria2c -x 5 ${DOT_PATH}/${DOT_VERSION}/${DOT_FILE1} ;     echo \"${DOT_HASH1}  ${DOT_FILE1}\" | sha256sum -c ;     time -p tar -xf ${DOT_FILE1} ; rm ${DOT_FILE1} ;     cd /root ; time -p aria2c -x 5 ${DOT_PATH}/${DOT_VERSION}/${DOT_FILE2} ;     echo \"${DOT_HASH2}  ${DOT_FILE2}\" | sha256sum -c ;     time -p tar -xf ${DOT_FILE2} ; rm ${DOT_FILE2} ;     else echo Cache are disabled = $DISABLECACHE;     echo build Full version;     fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "main.py",
            "flask-hello/main.py"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "buildcmd.sh",
            "flask-hello/buildcmd.sh"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/home/userhome/flask-hello"
        },
        {
          "CmdLine": [
            "/home/userhome/flask-hello/buildcmd.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo tail -f testfile \u003e\u003e/home/userhome/flask-hello/buildcmd.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/home/userhome/flask-hello/buildcmd.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}