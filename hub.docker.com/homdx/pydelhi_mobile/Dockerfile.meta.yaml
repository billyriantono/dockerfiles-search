MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Env:
    - Key: USER
      Value: '"user"'
    Name: env
  - Env:
    - Key: HOME_DIR
      Value: '"/home/${USER}"'
    Name: env
  - Env:
    - Key: WORK_DIR
      Value: '"${HOME_DIR}/hostcwd"'
    - Key: PATH
      Value: '"${HOME_DIR}/.local/bin:${PATH}"'
    Name: env
  - CmdLine:
    - apt update -qq > /dev/null &&     apt install -qq --yes --no-install-recommends     locales
      &&     locale-gen en_US.UTF-8 &&     apt install -qq --yes mc openssh-client
      nano wget curl pkg-config autoconf automake libtool time aria2 libffi-dev libssl-dev
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LANGUAGE
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    Name: env
  - CmdLine:
    - apt install -qq --yes --no-install-recommends     sudo python-pip python-setuptools
      file
    Name: run
    PrependShell: true
  - CmdLine:
    - "dpkg --add-architecture i386 && apt update -qq > /dev/null && \tapt install
      -qq --yes --no-install-recommends \tbuild-essential ccache git libncurses5:i386
      libstdc++6:i386 libgtk2.0-0:i386 \tlibpangox-1.0-0:i386 libpangoxft-1.0-0:i386
      libidn11:i386 python2.7 \tpython2.7-dev openjdk-8-jdk unzip zlib1g-dev zlib1g:i386"
    Name: run
    PrependShell: true
  - CmdLine:
    - useradd --create-home --shell /bin/bash ${USER}
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -append --groups sudo ${USER}
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && chown user -R /home/user'
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - Name: workdir
    Path: ${WORK_DIR}
  - CmdLine:
    - pip install --user Cython==0.28.6 buildozer==0.37 sh
    Name: run
    PrependShell: true
  - Key: DOT_VERSION
    Name: arg
    Value: 0.1.4
  - Key: DOT_HASH
    Name: arg
    Value: c238faac1de5109a1553bc3ab80f70f0432e84d3b2c167119608e716f77b4ace
  - Key: DOT_PATH
    Name: arg
    Value: https://github.com/homdx/pydelhi_mobile/releases/download
  - Key: DOT_FILE
    Name: arg
    Value: python3-gradle.tar.gz
  - Env:
    - Key: SDK_TOOLS
      Value: '"sdk-tools-linux-4333796.zip"'
    Name: env
  - Env:
    - Key: NDK_DL
      Value: '"https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip"'
    Name: env
  - Env:
    - Key: NDKVER
      Value: r17c
    Name: env
  - Env:
    - Key: NDKDIR
      Value: /ndk/
    Name: env
  - Env:
    - Key: NDKAPI
      Value: "21"
    Name: env
  - Env:
    - Key: ANDROIDAPI
      Value: "28"
    Name: env
  - Env:
    - Key: PIP
      Value: pip3
    Name: env
  - Name: user
    User: root
  - CmdLine:
    - apt update && apt install -y zip python3 python-pip python python3-virtualenv
      python-virtualenv python3-pip curl wget lbzip2 bsdtar && dpkg --add-architecture
      i386 && apt update && apt install -y build-essential libstdc++6:i386 zlib1g-dev
      zlib1g:i386 openjdk-8-jdk libncurses5:i386 && apt install -y libtool automake
      autoconf unzip pkg-config git ant gradle rsync python3.7-venv
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /sdk-install/ && chown user /sdk-install
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - CmdLine:
    - cd /sdk-install && wget --quiet https://dl.google.com/android/repository/${SDK_TOOLS}
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /sdk-install && unzip ./sdk-tools-*.zip && chmod +x ./tools//bin/sdkmanager
    Name: run
    PrependShell: true
  - CmdLine:
    - yes | /sdk-install/tools/bin/sdkmanager --licenses
    Name: run
    PrependShell: true
  - CmdLine:
    - /sdk-install/tools/bin/sdkmanager --update
    Name: run
    PrependShell: true
  - CmdLine:
    - /sdk-install/tools/bin/sdkmanager "platform-tools" "platforms;android-28" "build-tools;28.0.3"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tmp/ndk/ && cd /tmp/ndk/ && wget --quiet ${NDK_DL} && unzip -q android-ndk*.zip
      && sudo mv android-*/ /ndk/
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - echo '#!/usr/bin/python3\nimport json\nimport os\nprint("echo \"\"")\nprint("echo
      \"To build a kivy demo app, use this command:\"")\nif os.environ["PIP"] == "pip2":\n    print("echo
      \"cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package
      com.example.test --version 1 --requirements=kivy,python2 --private .\"")\n    print("shopt
      -s expand_aliases")\n    print("alias testbuild=\"cd ~/testapp-sdl2-keyboard
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --requirements=kivy,python2 --private . && cp *.apk ~/output\"")\n    print("alias
      testbuild_webview=\"cd ~/testapp-webview-flask && p4a apk --arch=armeabi-v7a
      --name test --package com.example.test --version 1 --bootstrap webview --requirements=python2,flask
      --private . && cp *.apk ~/output\"")\n    print("alias testbuild_service_only=\"cd
      ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a --name test --package
      com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python2
      --private . && cp *.apk ~/output\"")\nelse:\n    print("echo \"cd ~/testapp-sdl2-keyboard
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --requirements=kivy,python3 --private .\"")\n    print("shopt -s expand_aliases")\n    print("alias
      testbuild=\"cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name
      test --package com.example.test --version 1 --requirements=kivy,python3 --private
      . && cp *.apk ~/output\"")\n    print("alias testbuild_webview=\"cd ~/testapp-webview-flask
      && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version
      1 --bootstrap webview --requirements=python3,flask --private . && cp *.apk ~/output\"")\n    print("alias
      testbuild_service_only=\"cd ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a
      --name test --package com.example.test --version 1 --bootstrap service_only
      --requirements=pyjnius,python3 --private . && cp *.apk ~/output\"")\nlaunch_cmd="{LAUNCH_CMD}
      "\nprint("export ANDROIDAP='$ANDROIDAPI'" +\n    " ANDROIDNDKVER='$NDKVER'"
      +\n    " NDKAPI='$NDKAPI'" +\n    " GRADLE_OPTS=\"-Xms1724m -Xmx5048m -Dorg.gradle.jvmargs='"'"'-Xms1724m
      -Xmx5048m'"'"'\""+\n    " JAVA_OPTS=\"-Xms1724m -Xmx5048m\"" +\n    " ANDROIDSDK=/sdk-install/
      ANDROIDNDK=\"'$NDKDIR'\"")\nprint(launch_cmd)' > /cmdline.py && chmod +x /cmdline.py
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - CmdLine:
    - pip3 list
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo apt update && echo sudo apt install -y libwebkit2gtk-4.0-dev gtk+-3.0
    Name: run
    PrependShell: true
  - Name: user
    User: ${USER}
  - Key: DISABLECACHE
    Name: arg
    Value: null
  - CmdLine:
    - 'set -ex &&     if [ -z "$DISABLECACHE" ] ;     then echo ''Now enable Cached
      files for Python2and3 and .gradle files. If you not need cache build with: --build-arg
      DISABLECACHE=something'';     set -ex ;     cd ${HOME_DIR} ; sudo time -p aria2c
      -x 5 ${DOT_PATH}/${DOT_VERSION}/${DOT_FILE} ;     echo "${DOT_HASH}  ${DOT_FILE}"
      | sha256sum -c ;     time -p sudo tar -xf ${DOT_FILE} ; sudo rm ${DOT_FILE}
      ;     cd ${WORK_DIR}/p4acache/python-for-android ;     python3 setup.py build
      ; sudo python3 setup.py install ; pip3 install Cython ; pip3 list ;     else
      echo Cache are disabled = $DISABLECACHE;     cd ${WORK_DIR} ; sudo mkdir p4acache;
      sudo chown user p4acache; cd p4acache; git clone --single-branch -b master https://github.com/kivy/python-for-android
      ;     cd ${WORK_DIR}/p4acache/python-for-android ;     python3 setup.py build
      ; sudo python3 setup.py install ; pip3 install Cython ; pip3 list ;     echo
      build Full version;     fi'
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - app
  - Name: volume
    Volumes:
    - /home/user/result
  - CmdLine:
    - echo Python3 FunCrash && sudo mkdir app2 && sudo chown user app2 && cd app2
      && git clone https://github.com/homdx/funcrash && cd funcrash && git checkout
      test && cp -vf buildozer-python31.spec buildozer.spec && patch -p0 <main-without-cred.patch
      && ANDROIDAP=28 ANDROIDNDKVER=r17c NDKAPI=21 GRADLE_OPTS="-Xms1724m -Xmx5048m
      -Dorg.gradle.jvmargs='-Xms1724m -Xmx5048m'" JAVA_OPTS="-Xms1724m -Xmx5048m"
      ANDROIDSDK=/sdk-install/ ANDROIDNDK="/ndk/" p4a apk --arch=armeabi-v7a --name
      'Fun Crash' --package com.example.test --version 1 --orientation=landscape --presplash=images/splashscreen01.png
      --icon=images/icon01.png --requirements=kivy,python3,paho-mqtt --private . &&
      sudo chmod 777 ${HOME_DIR}/result && cp -v /home/user/.local/share/python-for-android/dists/unnamed_dist_1/build/outputs/apk/debug/*debug.apk
      ${HOME_DIR}/result/py3-funcrash.apk
    Name: run
    PrependShell: true
  - CmdLine:
    - echo Python3 PyDelhi && sudo chown user -R app/ && cd app && cp .p4a pydelhiconf/
      && cd pydelhiconf && ANDROIDAP=28 ANDROIDNDKVER=r17c NDKAPI=21 GRADLE_OPTS="-Xms1724m
      -Xmx5048m -Dorg.gradle.jvmargs='-Xms1724m -Xmx5048m'" JAVA_OPTS="-Xms1724m -Xmx5048m"
      ANDROIDSDK=/sdk-install/ ANDROIDNDK="/ndk/"  p4a apk --private . && sudo cp
      '/home/user/.local/share/python-for-android/dists/unnamed_dist_2/build/outputs/apk/debug/unnamed_dist_2-debug.apk'
      ${HOME_DIR}/result/py3-pydelhi.apk
    Name: run
    PrependShell: true
  - CmdLine:
    - echo Python2 PyDelhi && cd app && cp -vf p4a-py2 .p4a && cp -vf .p4a pydelhiconf/
      && cd pydelhiconf && ANDROIDAP=28 ANDROIDNDKVER=r17c NDKAPI=21 GRADLE_OPTS="-Xms1724m
      -Xmx5048m -Dorg.gradle.jvmargs='-Xms1724m -Xmx5048m'" JAVA_OPTS="-Xms1724m -Xmx5048m"
      ANDROIDSDK=/sdk-install/ ANDROIDNDK="/ndk/" p4a apk --private . && sudo cp '/home/user/.local/share/python-for-android/dists/unnamed_dist_3/build/outputs/apk/debug/unnamed_dist_3-debug.apk'
      ${HOME_DIR}/result/py2-pydelhi.apk
    Name: run
    PrependShell: true
  - CmdLine:
    - tail -f /var/log/faillog
    Name: cmd
    PrependShell: true
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
