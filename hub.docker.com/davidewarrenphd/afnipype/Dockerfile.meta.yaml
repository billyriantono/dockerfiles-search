MetaArgs: null
Stages:
- BaseName: debian:stretch
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: '"noninteractive"'
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - export ND_ENTRYPOINT="/neurodocker/startup.sh"     && apt-get update -qq     &&
      apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && sed
      -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     && dpkg-reconfigure
      --frontend=noninteractive locales     && update-locale LANG="en_US.UTF-8"     &&
      chmod 777 /opt && chmod a+s /opt     && mkdir -p /neurodocker     && if [ !
      -f "$ND_ENTRYPOINT" ]; then          echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"     &&   echo
      'set -e' >> "$ND_ENTRYPOINT"     &&   echo 'if [ -n "$1" ]; then "$@"; else
      /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";     fi     && chmod -R 777 /neurodocker
      && chmod a+s /neurodocker
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            vim            python     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Env:
    - Key: PATH
      Value: '"/opt/afni-latest:$PATH"'
    - Key: AFNI_PLUGINPATH
      Value: '"/opt/afni-latest"'
    Name: env
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            ed            gsl-bin            libglib2.0-0            libglu1-mesa-dev            libglw1-mesa            libgomp1            libjpeg62            libxm4            netpbm            tcsh            xfonts-base            xvfb     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && curl
      -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb     &&
      dpkg -i /tmp/toinstall.deb     && rm /tmp/toinstall.deb     && curl -sSL --retry
      5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb     &&
      dpkg -i /tmp/toinstall.deb     && rm /tmp/toinstall.deb     && apt-get install
      -f     && apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     &&
      gsl2_path="$(find / -name 'libgsl.so.19' || printf '')"     && if [ -n "$gsl2_path"
      ]; then          ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0";     fi     &&
      ldconfig     && echo "Downloading AFNI ..."     && mkdir -p /opt/afni-latest     &&
      curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz     |
      tar -xz -C /opt/afni-latest --strip-components 1
    Name: run
    PrependShell: true
  - CmdLine:
    - test "$(getent passwd neuro)" || useradd --no-user-group --create-home --shell
      /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Env:
    - Key: CONDA_DIR
      Value: '"/opt/miniconda-latest"'
    - Key: PATH
      Value: '"/opt/miniconda-latest/bin:$PATH"'
    Name: env
  - CmdLine:
    - export PATH="/opt/miniconda-latest/bin:$PATH"     && echo "Downloading Miniconda
      installer ..."     && conda_installer="/tmp/miniconda.sh"     && curl -fsSL
      --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      bash "$conda_installer" -b -p /opt/miniconda-latest     && rm -f "$conda_installer"     &&
      conda update -yq -nbase conda     && conda config --system --prepend channels
      conda-forge     && conda config --system --set auto_update_conda false     &&
      conda config --system --set show_channel_urls true     && sync && conda clean
      -tipsy && sync     && conda create -y -q --name neuro_py36     && conda install
      -y -q --name neuro_py36            'python=3.6'            'matplotlib'            'numpy'            'pandas'            'scikit-learn'            'nilearn'            'scipy'            'seaborn'            'traits'     &&
      sync && conda clean -tipsy && sync     && bash -c "source activate neuro_py36     &&   pip
      install --no-cache-dir               'nibabel'              'nipype'"     &&
      rm -rf ~/.cache/pip/*     && sync     && sed -i '$isource activate neuro_py36'
      $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - 'echo ''{     \n  "pkg_manager": "apt",     \n  "instructions": [     \n    [     \n      "base",     \n      "debian:stretch"     \n    ],     \n    [     \n      "install",     \n      [     \n        "vim",     \n        "python"     \n      ]     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "afni",     \n      {     \n        "version":
      "latest",     \n        "method": "binaries"     \n      }     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "conda_install":
      [     \n          "python=3.6",     \n          "matplotlib",     \n          "numpy",     \n          "pandas",     \n          "scikit-learn",     \n          "nilearn",     \n          "scipy",     \n          "seaborn",     \n          "traits"     \n        ],     \n        "pip_install":
      [     \n          "nibabel",     \n          "nipype"     \n        ],     \n        "create_env":
      "neuro_py36",     \n        "activate": true     \n      }     \n    ]     \n  ]     \n}''
      > /neurodocker/neurodocker_specs.json'
    Name: run
    PrependShell: true
  From:
    Image: debian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch
