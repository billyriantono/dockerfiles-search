{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:latest",
      "SourceCode": "FROM centos:latest",
      "Platform": "",
      "From": {
        "Image": "centos:latest"
      },
      "Commands": [
        {
          "Maintainer": "Yi Ou",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "sed -i 's/tsflags=nodocs//g' /etc/yum.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum update -y \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y epel-release \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y man which tree bash-completion vim-enhanced git rpm-build tmux bc wget telnet net-tools lsof socat iotop pdsh ascii \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/gitconfig",
            "/root/.gitconfig"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/vimrc",
            "/root/.vimrc"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/tmux.conf",
            "/root/.tmux.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/bashrc",
            "/tmp/bashrc"
          ]
        },
        {
          "CmdLine": [
            "cat /tmp/bashrc \u003e\u003e /root/.bashrc  \u0026\u0026 rm -f /tmp/bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install python-pip \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --upgrade pip \u0026\u0026 pip install radon pylint pep8 ansible awscli datadog"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install nodejs \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "npm install -g grunt-cli \u0026\u0026 npm install -g bower \u0026\u0026 npm install -g http-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install java-1.8.0-openjdk-devel.x86_64 maven ant \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/java_env.sh",
            "/etc/profile.d/java_env.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/maven_env.sh",
            "/etc/profile.d/maven_env.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/ant_env.sh",
            "/etc/profile.d/ant_env.sh"
          ]
        },
        {
          "Env": [
            {
              "Key": "ANTLR_JAR",
              "Value": "antlr-4.5.3-complete.jar"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl http://www.antlr.org/download/${ANTLR_JAR} -o /usr/local/lib/${ANTLR_JAR}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/antlr4.sh",
            "/etc/profile.d/antlr4.sh"
          ]
        },
        {
          "CmdLine": [
            "wget http://apache.mirrors.pair.com/pig/pig-0.17.0/pig-0.17.0.tar.gz -O /tmp/pig.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar xzf /tmp/pig.tar.gz -C /usr/local/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/pig_env.sh",
            "/etc/profile.d/pig_env.sh"
          ]
        },
        {
          "CmdLine": [
            "wget https://releases.hashicorp.com/packer/1.2.2/packer_1.2.2_linux_amd64.zip -O /tmp/packer.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "unzip /tmp/packer.zip -d /usr/local/packer \u0026\u0026 ln -s /usr/local/packer/packer /usr/local/bin/packer.io \u0026\u0026 rm -f /tmp/packer.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum install -y libXext libXrender libXtst \u0026\u0026 yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\"     \u0026\u0026 curl -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc\"     \u0026\u0026 gpg --verify /usr/local/bin/gosu.asc     \u0026\u0026 rm /usr/local/bin/gosu.asc     \u0026\u0026 chmod +x /usr/local/bin/gosu"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/usr/local/bin/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "groovy_version=2.4.15     \u0026\u0026 wget \"https://bintray.com/artifact/download/groovy/maven/apache-groovy-binary-${groovy_version}.zip\" -O /tmp/groovy.zip     \u0026\u0026 unzip /tmp/groovy.zip -d /opt/groovy     \u0026\u0026 rm -f /tmp/groovy.zip     \u0026\u0026 ln -sfnv \"groovy-${groovy_version}\" /opt/groovy/latest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/groovy_env.sh",
            "/etc/profile.d/groovy_env.sh"
          ]
        },
        {
          "CmdLine": [
            "gradle_version=4.5.1     \u0026\u0026 wget \"http://downloads.gradle.org/distributions/gradle-${gradle_version}-bin.zip\" -O /tmp/gradle.zip     \u0026\u0026 unzip /tmp/gradle.zip -d /opt/gradle     \u0026\u0026 rm -f /tmp/gradle.zip     \u0026\u0026 ln -sfnv \"gradle-${gradle_version}\" /opt/gradle/latest"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/gradle_env.sh",
            "/etc/profile.d/gradle_env.sh"
          ]
        },
        {
          "CmdLine": [
            "spring_boot_cli_version=2.0.1.RELEASE     \u0026\u0026 wget \"https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/${spring_boot_cli_version}/spring-boot-cli-${spring_boot_cli_version}-bin.zip\" -O /tmp/spring-boot-cli.zip     \u0026\u0026 unzip /tmp/spring-boot-cli.zip -d /opt/spring-boot-cli     \u0026\u0026 rm -f /tmp/spring-boot-cli.zip     \u0026\u0026 ln -sfnv \"spring-boot-cli-${spring_boot_cli_version}\" /opt/spring-boot-cli/latest     \u0026\u0026 ln -s /opt/spring-boot-cli/latest/shell-completion/bash/spring /etc/bash_completion.d/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "config/spring_env.sh",
            "/etc/profile.d/spring_env.sh"
          ]
        },
        {
          "CmdLine": [
            "curl -sSL https://rvm.io/mpapis.asc | gpg --import -     \u0026\u0026 curl -L get.rvm.io | bash -s stable     \u0026\u0026 bash -l -c 'source /etc/profile.d/rvm.sh     \u0026\u0026 rvm reload     \u0026\u0026 rvm requirements run     \u0026\u0026 rvm install 2.4.1     \u0026\u0026 rvm use 2.4.1 --default     \u0026\u0026 gem install jekyll bundler sass'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/bin/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}