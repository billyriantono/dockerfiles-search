{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04.3",
      "SourceCode": "FROM ubuntu:14.04.3",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04.3"
      },
      "Commands": [
        {
          "Maintainer": "SimPhoNy Team",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HOME",
              "Value": "/root"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update     \u0026\u0026 apt-get install -y --force-yes --no-install-recommends supervisor         openssh-server pwgen sudo vim-tiny         net-tools         lxde x11vnc xvfb         gtk2-engines-murrine ttf-ubuntu-font-family \twget         python-pip python-dev build-essential         mesa-utils libgl1-mesa-dri         gettext \t\tlibpcre++-dev libpcre++0 libxml2 libxml2-dev \tlibxslt1-dev libxslt1.1 libgd-dev libgd2-xpm-dev \tlibgeoip-dev libgeoip1 libperl-dev libssl-dev     gxmessage \t    \u0026\u0026 apt-get autoclean     \u0026\u0026 apt-get autoremove"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget http://nginx.org/download/nginx-1.10.0.tar.gz      \u0026\u0026 tar xfz nginx-1.10.0.tar.gz      \u0026\u0026 cd nginx-1.10.0      \u0026\u0026 ./configure      --prefix=/etc/nginx      --sbin-path=/usr/sbin/nginx      --conf-path=/etc/nginx/nginx.conf      --error-log-path=/var/log/nginx/error.log      --http-log-path=/var/log/nginx/access.log      --pid-path=/var/run/nginx.pid      --lock-path=/var/run/nginx.lock      --http-client-body-temp-path=/var/cache/nginx/client_temp      --http-proxy-temp-path=/var/cache/nginx/proxy_temp      --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp      --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp      --http-scgi-temp-path=/var/cache/nginx/scgi_temp      --with-debug      --with-pcre-jit      --with-http_ssl_module      --with-http_realip_module      --with-http_addition_module      --with-http_sub_module      --with-http_dav_module      --with-http_flv_module      --with-http_mp4_module      --with-http_geoip_module      --with-http_image_filter_module      --with-http_gunzip_module      --with-http_gzip_static_module      --with-http_random_index_module      --with-http_secure_link_module      --with-http_stub_status_module      --with-http_xslt_module      --with-http_auth_request_module      --with-mail      --with-mail_ssl_module      --with-file-aio      --with-ipv6      \u0026\u0026 make      \u0026\u0026 make install      \u0026\u0026 cd ../      \u0026\u0026 rm -rf nginx-1.10.0*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /var/cache/nginx/uwsgi_temp     /var/cache/nginx/fastcgi_temp     /var/cache/nginx/proxy_temp     /var/cache/nginx/client_temp      /etc/nginx/sites-enabled/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Labels": [
            {
              "Key": "eu.simphony-project.docker.type",
              "Value": "\"webapp\""
            },
            {
              "Key": "eu.simphony-project.docker.env.user",
              "Value": "\"\""
            },
            {
              "Key": "eu.simphony-project.docker.env.jpy-user",
              "Value": "\"\""
            },
            {
              "Key": "eu.simphony-project.docker.env.jpy-base-user-url",
              "Value": "\"\""
            },
            {
              "Key": "eu.simphony-project.docker.env.url-id",
              "Value": "\"\""
            }
          ],
          "Name": "label"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "container-files/",
            "/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "/startup.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}