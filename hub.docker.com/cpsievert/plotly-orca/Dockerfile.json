{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Carson Sievert \"carson@rstudio.com\"",
          "Name": "maintainer"
        },
        {
          "Key": "DEBIAN_FRONTED",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "Key": "CACHEBUST",
          "Name": "arg",
          "Value": "1"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository \"deb http://cran.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran35/\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0x51716619e084dab9"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     sudo     git     vim-tiny     nano     wget     r-base     r-base-dev     r-recommended     fonts-texgyre     texinfo     locales     libcurl4-gnutls-dev     libcairo2-dev     libxt-dev     libssl-dev     libxml2-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e\u003e /etc/locale.gen    \u0026\u0026 locale-gen en_US.utf8    \u0026\u0026 /usr/sbin/update-locale LANG=en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'options(\\n  repos = c(CRAN = \"https://cloud.r-project.org/\"),\\n  download.file.method = \"libcurl\",\\n  Ncpus = parallel::detectCores(logical=FALSE),\\n  shiny.host = \"0.0.0.0\", shiny.port = 3838\\n)' \u003e\u003e /etc/R/Rprofile.site"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"update.packages(ask = F)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('devtools')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('roxygen2')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('testthat')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('vdiffr')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('diffobj')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "add-apt-repository ppa:ubuntugis/ubuntugis-unstable --yes"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get -y update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y libudunits2-dev libproj-dev libgeos-dev libgdal-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "R -e \"install.packages('plotly', dependencies = T)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y     libgtk2.0-0     libgconf-2-4     xvfb     fuse     desktop-file-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \u0026\u0026     sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" \u003e\u003e /etc/apt/sources.list.d/google-chrome.list' \u0026\u0026     apt-get update -y \u0026\u0026     apt-get install -y google-chrome-stable"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget https://github.com/plotly/orca/releases/download/v1.1.1/orca-1.1.1-x86_64.AppImage -P /home"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod 777 /home/orca-1.1.1-x86_64.AppImage"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "printf '#!/bin/bash \\nxvfb-run --auto-servernum --server-args \"-screen 0 640x480x24\" /home/orca-1.1.1-x86_64.AppImage \"$@\"' \u003e /usr/bin/orca"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chmod 777 /usr/bin/orca"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "VDIFFR",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "3838"
          ]
        },
        {
          "CmdLine": [
            "R -e \"update.packages(ask=FALSE)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd /home/plotly \u0026\u0026 R -e \"devtools::install_deps(dep = T);   if (!identical(Sys.getenv('VMODE'), 'ci')) vdiffr::manage_cases();   res \u003c- devtools::test(reporter='summary');   df \u003c- as.data.frame(res);   if (sum(df\\$failed) \u003e 0 || any(df\\$error)) q(status=1)\""
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}