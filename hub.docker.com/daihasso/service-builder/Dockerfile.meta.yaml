MetaArgs: null
Stages:
- BaseName: golang:alpine
  Commands:
  - CmdLine:
    - apk update && apk add openssh git upx git
    Name: run
    PrependShell: true
  - Env:
    - Key: GO111MODULE
      Value: "on"
    Name: env
  - Env:
    - Key: OS
      Value: linux
    Name: env
  - Env:
    - Key: ARCH
      Value: amd64
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - files/build_flags.sh
    - /build_flags.sh
  - CmdLine:
    - go get github.com/markbates/pkger/cmd/pkger
    Name: run
    PrependShell: true
  - Expression: COPY --from=custom_files / /
    Name: onbuild
  - Expression: ARG PACKAGE_NAME
    Name: onbuild
  - Expression: ARG GOPRIVATE
    Name: onbuild
  - Expression: ARG UPX_ARGS
    Name: onbuild
  - Expression: ARG FRAMEWORK_PACKAGE
    Name: onbuild
  - Expression: ARG VERSION
    Name: onbuild
  - Expression: ARG GITHASH
    Name: onbuild
  - Expression: ARG SEMVER
    Name: onbuild
  - Expression: ARG GOPRIVATE
    Name: onbuild
  - Expression: ARG USE_PKGER
    Name: onbuild
  - Expression: RUN if [ -f /root/.ssh/id_rsa ]; then chmod 700 /root/.ssh/id_rsa;
      fi
    Name: onbuild
  - Expression: RUN if [ -f /root/.ssh/config ]; then chmod 600 /root/.ssh/config;
      fi
    Name: onbuild
  - Expression: RUN if [ -z "$PACKAGE_NAME" ]; then echo "NOT SET - ERROR"; exit 1;
      fi
    Name: onbuild
  - Expression: WORKDIR /go/src/${PACKAGE_NAME}
    Name: onbuild
  - Expression: COPY go.mod go.sum ./
    Name: onbuild
  - Expression: RUN echo "Downloading dependencies..."
    Name: onbuild
  - Expression: RUN go mod download
    Name: onbuild
  - Expression: COPY . ./
    Name: onbuild
  - Expression: RUN if [ ! -z "$USE_PKGER" ]; then echo "Running pkger..."; pkger;
      fi
    Name: onbuild
  - Expression: RUN echo "Building package '${PACKAGE_NAME}'..."
    Name: onbuild
  - Expression: RUN sh /build_flags.sh
    Name: onbuild
  - Expression: RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags         "$(cat
      /buildflags)-s -w" -o /app .
    Name: onbuild
  - Expression: 'RUN echo "Compressing binary using upx with args: $UPX_ARGS"'
    Name: onbuild
  - Expression: RUN upx $UPX_ARGS /app &> /tmp/out.log && tail -5 /tmp/out.log |         head
      -3
    Name: onbuild
  - Expression: RUN echo "Copying compiled go binary to final container..."
    Name: onbuild
  From:
    Image: golang:alpine
  Name: ""
  Platform: ""
  SourceCode: FROM golang:alpine
