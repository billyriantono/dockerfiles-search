MetaArgs: null
Stages:
- BaseName: alpine:3.6
  Commands:
  - Env:
    - Key: LANG
      Value: en.US.UTF-8
    - Key: LANGUAGE
      Value: en_US:en
    - Key: LC_ALL
      Value: en_US.UTF-8
    - Key: HOME
      Value: /opt/app
    - Key: TERM
      Value: xterm
    - Key: OTP_VERSION
      Value: "20.0"
    - Key: ELIXIR_VERSION
      Value: 1.5.1
    Name: env
  - Name: workdir
    Path: /tmp/erlang-build
  - CmdLine:
    - set -xe &&     OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz"
      &&     mkdir -p ${HOME} &&     adduser -s /bin/sh -u 1001 -G root -h ${HOME}
      -S -D default &&     chown -R 1001:0 ${HOME} &&     echo "@edge http://nl.alpinelinux.org/alpine/edge/main"
      >> /etc/apk/repositories &&     apk --no-cache --update upgrade &&     apk add
      --no-cache --update ca-certificates &&     apk add --no-cache --virtual .fetch-deps
      curl &&     curl -fSL -o otp-src.tar.gz "${OTP_DOWNLOAD_URL}" &&     apk add
      --no-cache --update --virtual .build-deps       pcre@edge       openssl-dev       ncurses-dev       zlib-dev       gcc       perl-dev       libc-dev       make       autoconf       alpine-sdk       build-base       tar
      &&   export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" &&   mkdir -vp $ERL_TOP
      &&   tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 &&   rm otp-src.tar.gz
      &&   ( cd $ERL_TOP &&     export CPPFlAGS="-D_BSD_SOURCE $CPPFLAGS" &&     ./otp_build
      autoconf &&     ./configure       --prefix=/usr/local       --sysconfdir=/etc       --enable-kernel-poll       --enable-threads       --enable-shared-zlib       --enable-dynamic-ssl-lib       --enable-ssl=dynamic-ssl-lib       --enable-sctp       --enable-hipe       --enable-dirty-schedulers
      &&     make -j$(getconf _NPROCESSORS_ONLN) &&     make install ) &&   rm -rf
      $ERL_TOP &&   runDeps=$(     scanelf --needed --nobanner --recursive /usr/local       |
      awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }'       | sort -u       | xargs
      -r apk info --installed       | sort -u   ) &&   apk add --virtual .erlang-rundeps
      $runDeps &&   apk del .fetch-deps .build-deps &&   rm -rf /var/cache/apk/* &&   update-ca-certificates
      --fresh
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp/elixir-build
  - CmdLine:
    - set -xe;     ELIXIR_DOWNLOAD_URL="https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip"
      &&     apk add --no-cache --update --virtual .elixir-build       unzip       curl       ca-certificates
      &&     curl -fSL -o elixir-precompiled.zip "${ELIXIR_DOWNLOAD_URL}" &&     unzip
      -d /usr/local elixir-precompiled.zip &&     rm elixir-precompiled.zip &&     mix
      local.hex --force &&     mix local.rebar --force &&     cd /tmp &&     rm -rf
      /tmp/elixir-build &&     apk del .elixir-build
    Name: run
    PrependShell: true
  - Name: workdir
    Path: ${HOME}
  - CmdLine:
    - iex
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.6
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.6
