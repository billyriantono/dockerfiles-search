{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:centos6",
      "SourceCode": "FROM centos:centos6",
      "Platform": "",
      "From": {
        "Image": "centos:centos6"
      },
      "Commands": [
        {
          "CmdLine": [
            "yum -y install wget     curl unzip supervisor g++ make mc vim tar gcc pcre-devel openssl-devel patch libmcrypt-devel         libxml2-devel bzip2-devel libcurl-devel readline-devel git \u0026\u0026     yum -y update \u0026\u0026     yum -y install https://mirror.webtatic.com/yum/el6/latest.rpm \u0026\u0026     yum -y install php56w-pecl-memcache php56w-fpm php56w-intl php56w-mcrypt php56w-mbstring         php56w-mysql php56w-pdo php56w-mbstring php56w-soap php56w-pecl-zendopcache php56w-xml         php56w-gd php56w-opcache php56w-pecl-imagick \u0026\u0026     rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm \u0026\u0026     yum -y install mysql-community-server \u0026\u0026     wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm \u0026\u0026     rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm \u0026\u0026     yum -y install nginx \u0026\u0026     yum -y upgrade ca-certificates \u0026\u0026     yum -y install https://repo.varnish-cache.org/redhat/varnish-4.0.el6.rpm \u0026\u0026     yum -y install epel-release \u0026\u0026     yum -y install varnish \u0026\u0026     curl -sS https://getcomposer.org/installer |         php -- --install-dir=/usr/local/bin --filename=composer"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "/magento2-docker"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /etc/nginx/conf \u0026\u0026     cp /magento2-docker/etc/nginx.conf/fastcgi_params.conf /etc/nginx/conf/fastcgi_params.conf \u0026\u0026     cp /magento2-docker/etc/nginx.conf/magento.conf /etc/nginx/conf/magento.conf \u0026\u0026     mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.default \u0026\u0026     cp /magento2-docker/etc/nginx.conf/default.conf /etc/nginx/conf.d/default.conf \u0026\u0026     cp /magento2-docker/etc/php.conf/php.ini /etc/php.ini \u0026\u0026     mv /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.conf.default \u0026\u0026     cp /magento2-docker/etc/php-fpm.conf/www.conf /etc/php-fpm.d/www.conf \u0026\u0026     mkdir -p /var/lib/php/session \u0026\u0026     mkdir -p /var/lib/php/wsdlcache \u0026\u0026     chmod -R 777 /var/lib/php/session \u0026\u0026     chmod -R 777 /var/lib/php/wsdlcache \u0026\u0026     mv /etc/sysconfig/varnish /etc/sysconfig/default.varnish \u0026\u0026     cp /magento2-docker/etc/varnish.conf/varnish /etc/sysconfig/varnish \u0026\u0026     mkdir -p /etc/varnish \u0026\u0026     cp /magento2-docker/etc/varnish.conf/default.vcl /etc/varnish/default.vcl \u0026\u0026     chmod +x -R /magento2-docker/scripts \u0026\u0026     mkdir -p /var/www/app/magento2.docker.loc/magento2 \u0026\u0026     chown -R nginx:nginx /var/www/app/magento2.docker.loc/magento2 \u0026\u0026     usermod -u 1000 nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www/app/magento2.docker.loc/magento2"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/var/www/app/magento2.docker.loc/magento2"
        },
        {
          "CmdLine": [
            "/magento2-docker/scripts/run.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": true
        }
      ]
    }
  ]
}