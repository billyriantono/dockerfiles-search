{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "owasp/modsecurity:v3-ubuntu-nginx",
      "SourceCode": "FROM owasp/modsecurity:v3-ubuntu-nginx",
      "Platform": "",
      "From": {
        "Image": "owasp/modsecurity:v3-ubuntu-nginx"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "CRS_PATH",
              "Value": "/etc/nginx/modsecurity.d/owasp-crs"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get upgrade -y \u0026\u0026     apt-get -y install python git ca-certificates"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/etc/nginx/modsecurity.d"
        },
        {
          "CmdLine": [
            "git clone -b v3.0/master --single-branch https://github.com/SpiderLabs/owasp-modsecurity-crs owasp-crs \u0026\u0026   cd owasp-crs \u0026\u0026   git checkout e4e0497be4d598cce0e0a8fef20d1f1e5578c8d0 \u0026\u0026   rm -rf .git util/regression-tests"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv owasp-crs/crs-setup.conf.example owasp-crs/crs-setup.conf \u0026\u0026   mv owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \u0026\u0026   mv owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "-c"
          ]
        },
        {
          "CmdLine": [
            "sed -i -e 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' modsecurity.conf \u0026\u0026   printf \"\\ninclude owasp-crs/crs-setup.conf\\n\" \u003e\u003e include.conf \u0026\u0026   for i in `ls -v owasp-crs/rules/*.conf`; do if [[ $i != *\"REQUEST-903\"* ]]; then printf \"include $i\\n\" \u003e\u003e include.conf; fi done;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "*.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "chmod u+x /*.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/"
          ]
        },
        {
          "CmdLine": [
            "ln -sf /dev/stdout /var/log/nginx/access.log \u0026\u0026   ln -sf /dev/stderr /var/log/nginx/error.log \u0026\u0026   ln -sf /dev/stdout /var/log/modsec_audit.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/cleanup.sh \u0026\u0026 rm -f /cleanup.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PARANOIA",
              "Value": "3"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SEC_RULE_ENGINE",
              "Value": "On"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SEC_PRCE_MATCH_LIMIT",
              "Value": "500000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SEC_PRCE_MATCH_LIMIT_RECURSION",
              "Value": "500000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROXY_UPSTREAM_HOST",
              "Value": "localhost:3000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CLIENT_MAX_BODY_SIZE",
              "Value": "2M"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PROXY_HEADER_X_FRAME_OPTIONS",
              "Value": "SAMEORIGIN"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "CmdLine": [
            "/main.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/usr/local/nginx/nginx -g \"daemon off;\""
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}