{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:14.04",
      "SourceCode": "FROM ubuntu:14.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:14.04"
      },
      "Commands": [
        {
          "Maintainer": "Derek Bourgeois \u003cderek@ibourgeois.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "APP_NAME",
              "Value": "app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "APP_EMAIL",
              "Value": "spark@websemantics.ca"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "APP_DOMAIN",
              "Value": "spark.dev"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SOLR_VERSION",
              "Value": "4.10.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SOLR",
              "Value": "solr-$SOLR_VERSION"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get upgrade -y"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y     curl     openjdk-7-jre-headless     unzip     wget     lsof     curl     procps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y software-properties-common curl build-essential     dos2unix gcc git libmcrypt4 libpcre3-dev memcached make python2.7-dev     python-pip re2c unattended-upgrades whois vim libnotify-bin nano wget     debconf-utils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-add-repository ppa:nginx/stable -y \u0026\u0026     apt-add-repository ppa:rwky/redis -y \u0026\u0026     apt-add-repository ppa:ondrej/php -y \u0026\u0026     apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 5072E1F5 \u0026\u0026     sh -c 'echo \"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-5.7\" \u003e\u003e /etc/apt/sources.list.d/mysql.list' \u0026\u0026     wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \u0026\u0026     sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\" \u003e\u003e /etc/apt/sources.list.d/postgresql.list' \u0026\u0026     curl -s https://packagecloud.io/gpg.key | apt-key add - \u0026\u0026     echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \u0026\u0026     curl --silent --location https://deb.nodesource.com/setup_5.x | bash - \u0026\u0026     apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"LC_ALL=en_US.UTF-8\" \u003e\u003e /etc/default/locale  \u0026\u0026     locale-gen en_US.UTF-8  \u0026\u0026     ln -sf /usr/share/zoneinfo/UTC /etc/localtime"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/.bash_aliases",
            "/root"
          ]
        },
        {
          "CmdLine": [
            "apt-get install -y --force-yes nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/default.vhost",
            "/etc/nginx/sites-available/"
          ]
        },
        {
          "CmdLine": [
            "rm -rf /etc/nginx/sites-available/default \u0026\u0026     rm -rf /etc/nginx/sites-enabled/default \u0026\u0026     ln -fs \"/etc/nginx/sites-available/default.vhost\" \"/etc/nginx/sites-enabled/default.vhost\" \u0026\u0026     sed -i -e\"s/keepalive_timeout\\s*65/keepalive_timeout 2/\" /etc/nginx/nginx.conf \u0026\u0026     sed -i -e\"s/keepalive_timeout 2/keepalive_timeout 2;\\n\\tclient_max_body_size 100m/\" /etc/nginx/nginx.conf \u0026\u0026     echo \"daemon off;\" \u003e\u003e /etc/nginx/nginx.conf \u0026\u0026     usermod -u 1000 www-data \u0026\u0026     chown -Rf www-data.www-data /var/www/html/ \u0026\u0026     sed -i -e\"s/worker_processes  1/worker_processes 5/\" /etc/nginx/nginx.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/www/html/app"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/cache/nginx"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/log/nginx"
          ]
        },
        {
          "CmdLine": [
            "apt-get install -y --force-yes php7.0-fpm php7.0-cli php7.0-dev php7.0-pgsql php7.0-sqlite3 php7.0-gd     php-apcu php7.0-curl php7.0-mcrypt php7.0-imap php7.0-mysql php7.0-readline php-xdebug php-common     php7.0-mbstring php7.0-xml php7.0-zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i \"s/error_reporting = .*/error_reporting = E_ALL/\" /etc/php/7.0/cli/php.ini \u0026\u0026     sed -i \"s/display_errors = .*/display_errors = On/\" /etc/php/7.0/cli/php.ini \u0026\u0026     sed -i \"s/;date.timezone.*/date.timezone = UTC/\" /etc/php/7.0/cli/php.ini \u0026\u0026     sed -i \"s/error_reporting = .*/error_reporting = E_ALL/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i \"s/display_errors = .*/display_errors = On/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i \"s/upload_max_filesize = .*/upload_max_filesize = 100M/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i \"s/post_max_size = .*/post_max_size = 100M/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i \"s/;date.timezone.*/date.timezone = UTC/\" /etc/php/7.0/fpm/php.ini \u0026\u0026     sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php/7.0/fpm/php-fpm.conf \u0026\u0026     sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/pm.max_children = 5/pm.max_children = 9/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/pm.max_requests = 500/pm.max_requests = 200/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     sed -i -e \"s/;listen.mode = 0660/listen.mode = 0750/g\" /etc/php/7.0/fpm/pool.d/www.conf \u0026\u0026     find /etc/php/7.0/cli/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/fastcgi_params",
            "/etc/nginx/"
          ]
        },
        {
          "CmdLine": [
            "phpenmod mcrypt \u0026\u0026     mkdir -p /run/php/ \u0026\u0026 chown -Rf www-data.www-data /run/php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y sqlite3 libsqlite3-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo mysql-server mysql-server/root_password password $DB_PASS | debconf-set-selections;    echo mysql-server mysql-server/root_password_again password $DB_PASS | debconf-set-selections;    apt-get install -y mysql-server \u0026\u0026     echo \"default_password_lifetime = 0\" \u003e\u003e /etc/mysql/my.cnf \u0026\u0026     sed -i '/^bind-address/s/bind-address.*=.*/bind-address = 0.0.0.0/' /etc/mysql/my.cnf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/sbin/mysqld \u0026     sleep 10s \u0026\u0026     echo \"GRANT ALL ON *.* TO root@'0.0.0.0' IDENTIFIED BY 'secret' WITH GRANT OPTION; CREATE USER 'spark'@'0.0.0.0' IDENTIFIED BY 'secret'; GRANT ALL ON *.* TO 'spark'@'0.0.0.0' IDENTIFIED BY 'secret' WITH GRANT OPTION; GRANT ALL ON *.* TO 'spark'@'%' IDENTIFIED BY 'secret' WITH GRANT OPTION; FLUSH PRIVILEGES; CREATE DATABASE spark;\" | mysql"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/mysql"
          ]
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | php \u0026\u0026     mv composer.phar /usr/local/bin/composer \u0026\u0026     printf \"\\nPATH=\\\"~/.composer/vendor/bin:\\$PATH\\\"\\n\" | tee -a ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "mkdir -p /opt \u0026\u0026     wget --progress=bar:force --output-document=/opt/$SOLR.tgz http://archive.apache.org/dist/lucene/solr/$SOLR_VERSION/$SOLR.tgz \u0026\u0026     tar -C /opt --extract --file /opt/$SOLR.tgz \u0026\u0026     rm /opt/$SOLR.tgz \u0026\u0026     ln -s /opt/$SOLR /opt/solr"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "solr/*",
            "/opt/solr/example/solr/collection1/conf/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/solr/example"
        },
        {
          "CmdLine": [
            "java"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "-Xmx512m",
            "-DSTOP.PORT=8079",
            "-DSTOP.KEY=stopkey",
            "-jar",
            "start.jar"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/solr"
          ]
        },
        {
          "CmdLine": [
            "composer global require \"laravel/envoy\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "composer global require \"laravel/installer\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "composer global require \"laravel/spark-installer\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y nodejs"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/bin/npm install -g gulp"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/bin/npm install -g bower"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y redis-server"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y blackfire-agent blackfire-php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y supervisor \u0026\u0026     mkdir -p /var/log/supervisor"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src/supervisord.conf",
            "/etc/supervisor/conf.d/supervisord.conf"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/log/supervisor"
          ]
        },
        {
          "CmdLine": [
            "apt-get remove --purge -y software-properties-common \u0026\u0026     apt-get autoremove -y \u0026\u0026     apt-get clean \u0026\u0026     apt-get autoclean \u0026\u0026     echo -n \u003e /var/lib/apt/extended_states \u0026\u0026     rm -rf /var/lib/apt/lists/* \u0026\u0026     rm -rf /usr/share/man/?? \u0026\u0026     rm -rf /usr/share/man/??_*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "3306",
            "443",
            "6379",
            "80",
            "8983"
          ]
        },
        {
          "CmdLine": [
            "/bin/bash",
            "-c"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}