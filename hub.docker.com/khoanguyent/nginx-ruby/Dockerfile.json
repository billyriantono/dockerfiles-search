{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3",
      "SourceCode": "FROM alpine:3",
      "Platform": "",
      "From": {
        "Image": "alpine:3"
      },
      "Commands": [
        {
          "Key": "NGINX_VER",
          "Name": "arg",
          "Value": "1.16.1"
        },
        {
          "Key": "RUBY_VER",
          "Name": "arg",
          "Value": "2.6.5"
        },
        {
          "Labels": [
            {
              "Key": "description",
              "Value": "\"nginx + unicorn + ruby image based on Alpine\""
            },
            {
              "Key": "maintainer",
              "Value": "\"Khoa Nguyen \u003ckhoa.tan.nguyen.96@gmail.com\u003e\""
            },
            {
              "Key": "nginx_version",
              "Value": "\"nginx v$NGINX_VER built from source\""
            },
            {
              "Key": "ruby_version",
              "Value": "\"ruby v$RUBY_VER built from source\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "UID",
              "Value": "991"
            },
            {
              "Key": "GID",
              "Value": "991"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "NGINX_CONF",
          "Name": "arg",
          "Value": "\"  --prefix=/nginx   --sbin-path=/usr/local/sbin/nginx   --http-log-path=/nginx/logs/access.log   --error-log-path=/nginx/logs/error.log   --pid-path=/nginx/run/nginx.pid   --lock-path=/nginx/run/nginx.lock   --with-threads   --with-file-aio   --without-http_geo_module   --without-http_autoindex_module   --without-http_split_clients_module   --without-http_memcached_module   --without-http_empty_gif_module   --without-http_browser_module\""
        },
        {
          "Key": "RUBY_CONF",
          "Name": "arg",
          "Value": "\"  --disable-install-doc   --disable-install-rdoc   --disable-install-capi\""
        },
        {
          "Key": "BUILD_DEPS",
          "Name": "arg",
          "Value": "\"   linux-headers   libtool   build-base   pcre-dev   zlib-dev   wget   gnupg   autoconf   gcc   g++   libc-dev   make   pkgconf   curl-dev\""
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "rootfs",
            "/"
          ]
        },
        {
          "CmdLine": [
            "apk -U add    ${BUILD_DEPS}    ca-certificates    openssl    openssl-dev    s6    su-exec    curl    pcre    zlib   \u0026\u0026 mkdir -p /usr/src   \u0026\u0026 NB_CORES=$(getconf _NPROCESSORS_CONF) \u0026\u0026 RUBY_VER_ONE=$(echo $RUBY_VER | cut -d. -f1-2)   \u0026\u0026 wget http://nginx.org/download/nginx-${NGINX_VER}.tar.gz -O /tmp/nginx-${NGINX_VER}.tar.gz   \u0026\u0026 wget http://nginx.org/download/nginx-${NGINX_VER}.tar.gz.asc -O /tmp/nginx-${NGINX_VER}.tar.gz.asc   \u0026\u0026 wget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER_ONE}/ruby-${RUBY_VER}.tar.gz -O /tmp/ruby-${RUBY_VER}.tar.gz   \u0026\u0026 tar xzf /tmp/nginx-${NGINX_VER}.tar.gz -C /usr/src   \u0026\u0026 tar xzf /tmp/ruby-${RUBY_VER}.tar.gz -C /usr/src   \u0026\u0026 cd /usr/src/nginx-${NGINX_VER}   \u0026\u0026 ./configure --with-cc-opt=\"-O3 -fPIE -fstack-protector-strong\" ${NGINX_CONF}   \u0026\u0026 make -j ${NB_CORES}   \u0026\u0026 make install   \u0026\u0026 cd /usr/src/ruby-${RUBY_VER}   \u0026\u0026 ./configure ${RUBY_CONF}   \u0026\u0026 make -j ${NB_CORES}   \u0026\u0026 make install   \u0026\u0026 gem install unicorn   \u0026\u0026 chmod u+x /usr/local/bin/* /etc/s6.d/*/*   \u0026\u0026 apk del ${BUILD_DEPS}   \u0026\u0026 rm -rf /tmp/* /var/cache/apk/* /usr/src/*   \u0026\u0026 mkdir -p /nginx/logs /nginx/run /unicorn/logs /unicorn/run"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "run.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        }
      ]
    }
  ]
}