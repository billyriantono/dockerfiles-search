MetaArgs: null
Stages:
- BaseName: ubuntu:16.04
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Joel Gilley jgilley@chegg.com"'
    Name: label
  - Key: RUBY_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: RUBY_VERSION
      Value: ${RUBY_VERSION:-2.5.0}
    Name: env
  - Key: NODE_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: NODE_VERSION
      Value: ${NODE_VERSION:-8.6.0}
    Name: env
  - Key: YARN_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: YARN_VERSION
      Value: ${YARN_VERSION:-latest}
    Name: env
  - Key: DUMBINIT_VERSION
    Name: arg
    Value: null
  - Env:
    - Key: DUMBINIT_VERSION
      Value: ${DUMBINIT_VERSION:-1.2.1}
    Name: env
  - Key: TZ
    Name: arg
    Value: null
  - Env:
    - Key: TZ
      Value: ${TZ:-Etc/UTC}
    Name: env
  - Env:
    - Key: RBENV_ROOT
      Value: /usr/local/rbenv
    - Key: NENV_ROOT
      Value: /usr/local/n
    - Key: YARNENV_ROOT
      Value: /usr/local/yarn
    - Key: RUBY_CONFIGURE_OPTS
      Value: --disable-install-doc
    - Key: APP_ENV
      Value: development
    - Key: RAILS_ENV
      Value: development
    Name: env
  - Env:
    - Key: PATH
      Value: ${RBENV_ROOT}/shims:${RBENV_ROOT}/bin:${YARNENV_ROOT}/bin:${NENV_ROOT}/bin:$PATH
    Name: env
  - Env:
    - Key: ac_cv_func_isnan
      Value: "yes"
    - Key: ac_cv_func_isinf
      Value: "yes"
    Name: env
  - CmdLine:
    - "apt-get update && \tapt-get -y install tzdata build-essential git curl autoconf
      bison \tlibssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev \tlibffi-dev
      libgdbm3 libgdbm-dev python nginx"
    Name: run
    PrependShell: true
  - CmdLine:
    - echo $TZ > /etc/timezone &&     rm /etc/localtime &&     ln -snf /usr/share/zoneinfo/$TZ
      /etc/localtime &&     dpkg-reconfigure -f noninteractive tzdata &&     apt-get
      clean
    Name: run
    PrependShell: true
  - CmdLine:
    - "rm -rf /etc/nginx/nginx.conf /etc/nginx/sites-enabled/default && \tmkdir -p
      /app /run/nginx /run/puma && \tchown -R :www-data /run/nginx /run/puma /app
      && \tchmod -R g+rw /run/nginx /run/puma /app"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /app
  - CmdLine:
    - "cd /tmp && \tcurl -fsSL https://github.com/Yelp/dumb-init/releases/download/v${DUMBINIT_VERSION}/dumb-init_${DUMBINIT_VERSION}_amd64.deb
      -o dumb-init_${DUMBINIT_VERSION}_amd64.deb && \tdpkg -i dumb-init_${DUMBINIT_VERSION}_amd64.deb
      && \trm -f dumb-init_${DUMBINIT_VERSION}_amd64.deb"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fsSL https://git.io/n-install | N_PREFIX=${NENV_ROOT} bash -s -- -y ${NODE_VERSION}
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /tmp && \tcurl -fsSL https://yarnpkg.com/${YARN_VERSION}.tar.gz -o yarn-${YARN_VERSION}.tgz
      && \tmkdir ${YARNENV_ROOT} && \ttar -xf yarn-${YARN_VERSION}.tgz -C ${YARNENV_ROOT}
      --strip 1 && \trm yarn-${YARN_VERSION}.tgz;"
    Name: run
    PrependShell: true
  - CmdLine:
    - "git clone --depth 1 https://github.com/rbenv/rbenv.git ${RBENV_ROOT} && \tcd
      ${RBENV_ROOT} && \tsrc/configure && \tmake -C src && \techo 'export RUBY_CONFIGURE_OPTS=--disable-install-doc'
      >> ~/.profile && \techo 'export PATH=\"${RBENV_ROOT}/bin:$PATH\"' >> ~/.profile
      && \techo 'eval \"$(rbenv init -)\"' >> ~/.profile && \techo 'gem: --no-document'
      >> ~/.gemrc && \tgit clone --depth 1 https://github.com/rbenv/ruby-build.git
      \"$(rbenv root)\"/plugins/ruby-build  && \tcurl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor
      | bash && \trbenv install -v ${RUBY_VERSION} && \trbenv global ${RUBY_VERSION}
      && \tgem install bundler puma && \tbundle config git.allow_insecure true &&
      \tbundle config --global silence_root_warning 1"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./container_configs
    - /
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./code/Gemfile
    - ./
  - CmdLine:
    - "chmod a+x /start-servers.sh && \tbundle install"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./code/
    - ./
  - Name: expose
    Ports:
    - "80"
  - CmdLine:
    - /usr/bin/dumb-init
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /bin/sh
    - -c
    - /start-servers.sh
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
