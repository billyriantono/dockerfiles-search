MetaArgs: null
Stages:
- As: go_builder
  BaseName: golang:1.11
  Commands:
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /go/src/github.com/malice-plugins/kaspersky
  - Name: workdir
    Path: /go/src/github.com/malice-plugins/kaspersky
  - CmdLine:
    - go get -u github.com/golang/dep/cmd/dep && dep ensure
    Name: run
    PrependShell: true
  - CmdLine:
    - go build -ldflags "-s -w -X main.Version=v$(cat VERSION) -X main.BuildTime=$(date
      -u +%Y%m%d)" -o /bin/avscan
    Name: run
    PrependShell: true
  From:
    Image: golang:1.11
  Name: go_builder
  Platform: ""
  SourceCode: FROM golang:1.11 as go_builder
- BaseName: ubuntu:bionic
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"https://github.com/blacktop"'
    Name: label
  - Labels:
    - Key: malice.plugin.repository
      Value: = "https://github.com/malice-plugins/kaspersky.git"
    Name: label
  - Labels:
    - Key: malice.plugin.category
      Value: '"av"'
    Name: label
  - Labels:
    - Key: malice.plugin.mime
      Value: '"*"'
    Name: label
  - Labels:
    - Key: malice.plugin.docker.engine
      Value: '"*"'
    Name: label
  - CmdLine:
    - mkdir -p /opt/malice
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r malice   && useradd --no-log-init -r -g malice malice   && mkdir
      /malware   && chown -R malice:malice /malware
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: TERM
      Value: screen-256color
    Name: env
  - CmdLine:
    - apt-get update   && apt-get install -yq locales   && locale-gen en_US.UTF-8   &&
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Key: KASPERSKY_KEY
    Name: arg
    Value: null
  - Env:
    - Key: KASPERSKY_KEY
      Value: $KASPERSKY_KEY
    Name: env
  - CmdLine:
    - if [ "x$KASPERSKY_KEY" != "x" ]; then   echo "===> Adding Kaspersky License
      Key...";   mkdir -p /etc/kaspersky;   echo -n "$KASPERSKY_KEY" | base64 -d >
      /etc/kaspersky/license.key ;   fi
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/docker.conf
    - /etc/kaspersky/docker.conf
  - CmdLine:
    - buildDeps='ca-certificates libc6-dev:i386 unzip wget'   && set -x   && dpkg
      --add-architecture i386   && apt-get update   && apt-get install -yq $buildDeps
      libc6-i386 libcurl4-openssl-dev curlftpfs   && echo "===> Install Kaspersky..."   &&
      wget --progress=bar:force https://products.s.kaspersky-labs.com/multilanguage/file_servers/kavlinuxserver8.0/kav4fs_8.0.4-312_i386.deb
      -P /tmp   && DEBIAN_FRONTEND=noninteractive dpkg --force-architecture -i /tmp/kav4fs_8.0.4-312_i386.deb   &&
      chmod a+s /opt/kaspersky/kav4fs/bin/kav4fs-setup.pl   && chmod a+s /opt/kaspersky/kav4fs/bin/kav4fs-control   &&
      chmod 0777 /etc/kaspersky/license.key   && /opt/kaspersky/kav4fs/bin/kav4fs-control
      -L --validate-on-install /etc/kaspersky/license.key; sleep 3    && /opt/kaspersky/kav4fs/bin/kav4fs-control
      -L --install-on-install /etc/kaspersky/license.key; sleep 3    && echo "===>
      Setup Kaspersky..."   && /opt/kaspersky/kav4fs/bin/kav4fs-setup.pl --auto-install=/etc/kaspersky/docker.conf;
      sleep 10   && echo "===> Clean up unnecessary files..."   && apt-get purge -y
      --auto-remove $buildDeps   && apt-get clean   && rm -rf /var/lib/apt/lists/*
      /var/cache/apt/archives /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends ca-certificates   &&
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - http://www.eicar.org/download/eicar.com.txt
    - /malware/EICAR
  - Chown: ""
    From: go_builder
    Name: copy
    SourcesAndDest:
    - /bin/avscan
    - /bin/avscan
  - Name: workdir
    Path: /malware
  - CmdLine:
    - /bin/avscan
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - --help
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
