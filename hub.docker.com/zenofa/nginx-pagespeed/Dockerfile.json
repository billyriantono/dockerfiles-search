{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "zenofa/ubuntu:bionic",
      "SourceCode": "FROM zenofa/ubuntu:bionic",
      "Platform": "",
      "From": {
        "Image": "zenofa/ubuntu:bionic"
      },
      "Commands": [
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.14.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_PAGESPEED_VERSION",
              "Value": "latest"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_PAGESPEED_RELEASE_STATUS",
              "Value": "stable"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "HEADERS_MORE_VERSION",
              "Value": "0.33"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "OPENSSL_VERSION",
              "Value": "1.1.1a"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./bin/download_pagespeed.sh",
            "/app/bin/download_pagespeed.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /app/bin/*.sh \u0026\u0026 useradd -r -s /usr/sbin/nologin nginx \u0026\u0026 mkdir -p /var/log/nginx /var/cache/nginx \u0026\u0026 apt-get update \u0026\u0026 apt-get -o Dpkg::Options::=\"--force-confold\" -yq --no-install-recommends install  wget git-core autoconf automake make gcc libtool build-essential zlib1g-dev libpcre3-dev libxslt1-dev libxml2-dev libgd-dev libgeoip-dev libgoogle-perftools-dev libperl-dev uuid-dev \u0026\u0026 echo \"Downloading nginx ${NGINX_VERSION} from http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz ...\" \u0026\u0026 wget --no-check-certificate -O - http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz --progress=bar --tries=3 | tar zxf - -C /tmp \u0026\u0026 echo \"Downloading headers-more ${HEADERS_MORE_VERSION} from https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_VERSION}.tar.gz ...\" \u0026\u0026 wget --no-check-certificate -O - https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_VERSION}.tar.gz --progress=bar --tries=3 | tar zxf - -C /tmp \u0026\u0026 /app/bin/download_pagespeed.sh \u0026\u0026 echo \"Downloading openssl v${OPENSSL_VERSION} from https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz ...\" \u0026\u0026 wget --no-check-certificate -O - https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz --progress=bar --tries=3 | tar xzf - -C /tmp \u0026\u0026 cd /tmp/openssl-${OPENSSL_VERSION} \u0026\u0026 ./config \u0026\u0026 make install \u0026\u0026 mv /usr/bin/openssl ~/tmp \u0026\u0026 ln -s /usr/local/bin/openssl /usr/bin/openssl \u0026\u0026 ldconfig \u0026\u0026cd /tmp/nginx-${NGINX_VERSION} \u0026\u0026 ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --without-http_autoindex_module --without-http_ssi_module --with-threads --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-file-aio --with-http_v2_module --with-cc-opt='-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed' --with-ipv6 --with-pcre-jit --with-openssl=/tmp/openssl-${OPENSSL_VERSION} --add-module=/tmp/headers-more-nginx-module-${HEADERS_MORE_VERSION} --add-module=/tmp/incubator-pagespeed-ngx-${NGINX_PAGESPEED_VERSION}-${NGINX_PAGESPEED_RELEASE_STATUS} \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 apt-get purge -yqq automake make gcc autoconf libtool git-core build-essential zlib1g-dev libpcre3-dev libxslt1-dev libxml2-dev libgd-dev libgeoip-dev libgoogle-perftools-dev libperl-dev \u0026\u0026 apt-get autoremove -yqq \u0026\u0026 apt-get clean \u0026\u0026 rm -Rf /tmp/* /var/tmp/* /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_APP_USER",
              "Value": "app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_APP_GROUP",
              "Value": "app"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_APP_UID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_APP_GID",
              "Value": "1000"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_CHOWN_APP_DIR",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_UPLOAD_MAX_SIZE",
              "Value": "30M"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_NGINX_MAX_WORKER_PROCESSES",
              "Value": "8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEFAULT_PAGESPEED_REBEACON_KEY",
              "Value": "uwuudeL7iedoo7Meengi"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SSL_ENABLED",
              "Value": "true"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/app"
          ]
        },
        {
          "CmdLine": [
            "chmod a+x /app/bin/*.sh \u0026\u0026 sync \u0026\u0026 /app/bin/init_nginx.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/sbin/my_init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}