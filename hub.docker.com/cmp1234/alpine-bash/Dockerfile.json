{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "cmp1234/alpine-base:latest",
      "SourceCode": "FROM cmp1234/alpine-base:latest",
      "Platform": "",
      "From": {
        "Image": "cmp1234/alpine-base:latest"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "_BASH_GPG_KEY",
              "Value": "7C0135FB088AAF6C66C650B9BB5869F064EA74AB"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "_BASH_VERSION",
              "Value": "4.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "_BASH_PATCH_LEVEL",
              "Value": "0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "_BASH_LATEST_PATCH",
              "Value": "12"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\tbison \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tmake \t\tncurses-dev \t\topenssl \t\tpatch \t\ttar \t; \t\tversion=\"$_BASH_VERSION\"; \tif [ \"$_BASH_PATCH_LEVEL\" -gt 0 ]; then \t\tversion=\"$version.$_BASH_PATCH_LEVEL\"; \tfi; \twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz\"; \twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz.sig\"; \t\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_PATCH_LEVEL\" ]; then \t\tmkdir -p bash-patches; \t\tfirst=\"$(printf '%03d' \"$(( _BASH_PATCH_LEVEL + 1 ))\")\"; \t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \t\tfor patch in $(seq -w \"$first\" \"$last\"); do \t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$_BASH_VERSION-patches/bash${_BASH_VERSION//./}-$patch\"; \t\t\twget -O \"bash-patches/$patch\" \"$url\"; \t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \t\tdone; \tfi; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$_BASH_GPG_KEY\"; \tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \trm bash.tar.gz.sig; \tif [ -d bash-patches ]; then \t\tfor sig in bash-patches/*.sig; do \t\t\tp=\"${sig%.sig}\"; \t\t\tgpg --batch --verify \"$sig\" \"$p\"; \t\t\trm \"$sig\"; \t\tdone; \tfi; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p /usr/src/bash; \ttar \t\t--extract \t\t--file=bash.tar.gz \t\t--strip-components=1 \t\t--directory=/usr/src/bash \t; \trm bash.tar.gz; \t\tif [ -d bash-patches ]; then \t\tfor p in bash-patches/*; do \t\t\tpatch \t\t\t\t--directory=/usr/src/bash \t\t\t\t--input=\"$(readlink -f \"$p\")\" \t\t\t\t--strip=0 \t\t\t; \t\t\trm \"$p\"; \t\tdone; \t\trmdir bash-patches; \tfi; \t\tcd /usr/src/bash; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tfor f in config.guess config.sub; do \t\twget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \tdone; \t./configure \t\t--build=\"$gnuArch\" \t\t--enable-readline \t\t--with-curses \t\t--without-bash-malloc \t|| { \t\tcat \u003e\u00262 config.log; \t\tfalse; \t}; \tmake -j \"$(nproc)\"; \tmake install; \tcd /; \trm -r /usr/src/bash; \t\trm -r \t\t/usr/local/share/doc/bash/*.html \t\t/usr/local/share/info \t\t/usr/local/share/locale \t\t/usr/local/share/man \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\"; \tapk add --no-cache --virtual .bash-rundeps $runDeps; \tapk del .build-deps; \t\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \tbash --version; \tln -s /usr/local/bin/bash /bin/bash; \t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"$_BASH_VERSION.$_BASH_LATEST_PATCH\" ];"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/docker-entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}