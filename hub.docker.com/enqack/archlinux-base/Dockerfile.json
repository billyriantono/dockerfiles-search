{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "dock0/arch",
      "SourceCode": "FROM dock0/arch",
      "Platform": "",
      "From": {
        "Image": "dock0/arch"
      },
      "Commands": [
        {
          "Maintainer": "enqack \u003cenqack@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "pacman -Syyu --noconfirm \u0026\u0026     dirmngr \u003c/dev/null \u003e /dev/null 2\u003e\u00261 \u0026\u0026     sed -i \"s/#Color/Color/\" /etc/pacman.conf \u0026\u0026     echo \"[archlinuxcn]\" \u003e\u003e /etc/pacman.conf \u0026\u0026     echo \"SigLevel = Optional TrustAll\" \u003e\u003e /etc/pacman.conf \u0026\u0026     echo \"Server = http://repo.archlinuxcn.org/\\$arch\" \u003e\u003e /etc/pacman.conf \u0026\u0026     sed -i '/#\\[multilib\\]/,/#Include = \\/etc\\/pacman.d\\/mirrorlist/ s/#//' /etc/pacman.conf \u0026\u0026     sed -i '/#\\[multilib\\]/,/#Include = \\/etc\\/pacman.d\\/mirrorlist/ s/#//' /etc/pacman.conf \u0026\u0026     sed -i 's/#\\[multilib\\]/\\[multilib\\]/g' /etc/pacman.conf \u0026\u0026     pacman -Syyu --noconfirm \u0026\u0026     pacman --noconfirm -S     archlinuxcn-keyring \u0026\u0026     pacman -S --noconfirm yaourt package-query cower"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pacman -S reflector --noconfirm \u0026\u0026     reflector --verbose -l 5 --protocol https --sort rate --save /etc/pacman.d/mirrorlist \u0026\u0026     pacman -Rs reflector --noconfirm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/EUID == 0/EUID == -1/' /usr/bin/makepkg \u0026\u0026     pacman --noconfirm -S wget file patch binutils gcc autoconf make fakeroot \u0026\u0026     wget --content-disposition \"https://projects.archlinux.org/svntogit/packages.git/plain/trunk/ca-dir.patch?h=packages/openssl\" \u0026\u0026     wget --content-disposition \"https://projects.archlinux.org/svntogit/packages.git/plain/trunk/no-rpath.patch?h=packages/openssl\" \u0026\u0026     wget --content-disposition \"https://projects.archlinux.org/svntogit/packages.git/plain/trunk/PKGBUILD?h=packages/openssl\" \u0026\u0026     sed -i \"s/depends=('zlib' 'perl')/depends=('zlib')/\" PKGBUILD \u0026\u0026     sed -i \"s/make test//\" PKGBUILD \u0026\u0026     makepkg --noconfirm -si --skippgpcheck \u0026\u0026     sed -i 's/EUID == -1/EUID == 0/' /usr/bin/makepkg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "useradd --create-home docker \u0026\u0026     echo -e \"docker\\ndocker\" | passwd docker \u0026\u0026     pacman --noconfirm -S sudo \u0026\u0026     echo \"docker ALL=(ALL) NOPASSWD: ALL\" \u003e\u003e /etc/sudoers \u0026\u0026     runuser -l docker -c \"yaourt --noconfirm -Rdd texinfo\" \u0026\u0026     runuser -l docker -c \"yaourt --noconfirm -S texinfo-fake\" \u0026\u0026     runuser -l docker -c \"yaourt --noconfirm -S localepurge\" \u0026\u0026     sed -i \"s/NEEDSCONFIGFIRST/#NEEDSCONFIGFIRST/\" /etc/locale.nopurge \u0026\u0026     sed -i \"s/#DONTBOTHERNEWLOCALE/DONTBOTHERNEWLOCALE/\" /etc/locale.nopurge"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pacman --noconfirm -Rs      binutils      gcc     make     autoconf     file     patch     fakeroot     perl     yaourt     diffutils     gettext     util-linux     shadow     sudo     sysfsutils     git     iproute2     procps-ng     iputils"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -r /.ducktape /.shim \u0026\u0026     rm /tmp/.root.mirrorstatus.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "localepurge \u0026\u0026     rm -r /usr/share/info/* \u0026\u0026     rm -r /usr/share/man/* \u0026\u0026     rm -r /usr/share/doc/* \u0026\u0026     rm -r /usr/share/zoneinfo/* \u0026\u0026     rm -r /usr/share/i18n/* \u0026\u0026     find /. -name \"*~\" -type f -delete \u0026\u0026     find /usr/share/terminfo/. ! -name \"*xterm*\" ! -name \"*screen*\" ! -name \"*screen*\" -type f -delete \u0026\u0026     rm -r /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c \"echo 'y' | pacman -Scc \u003e/dev/null 2\u003e\u00261\" \u0026\u0026     paccache -rk0 \u003e/dev/null 2\u003e\u00261 \u0026\u0026      pacman-optimize \u0026\u0026     rm -r /var/lib/pacman/sync/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "/usr/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}