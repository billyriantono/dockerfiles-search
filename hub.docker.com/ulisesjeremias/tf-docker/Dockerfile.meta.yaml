MetaArgs:
- DefaultValue: latest
  Key: UBUNTU_VERSION
  ProvidedValue: null
  Value: latest
Stages:
- As: base
  BaseName: ubuntu:${UBUNTU_VERSION}
  Commands:
  - CmdLine:
    - "apt-get update -q && apt-get install -y --no-install-recommends     build-essential
      \    curl     git     libcurl3-dev     libfreetype6-dev     libhdf5-serial-dev
      \    libzmq3-dev     pkg-config     rsync     software-properties-common \tsudo
      \    unzip     zip     zlib1g-dev     openjdk-8-jdk     openjdk-8-jre-headless
      \    &&     apt-get clean &&     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
    Name: run
    PrependShell: true
  - Key: USE_PYTHON_3_NOT_2
    Name: arg
    Value: "ON"
  - Key: _PY_SUFFIX
    Name: arg
    Value: ${USE_PYTHON_3_NOT_2:+3}
  - Key: PYTHON
    Name: arg
    Value: python${_PY_SUFFIX}
  - Key: PIP
    Name: arg
    Value: pip${_PY_SUFFIX}
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - starterfile.py
    - /tf/starterfile.py
  - CmdLine:
    - apt-get update -q
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y ${PYTHON} ${PYTHON}-pip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get clean
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} --no-cache-dir install --upgrade     pip     setuptools
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s $(which ${PYTHON}) /usr/local/bin/python
    Name: run
    PrependShell: true
  - Key: TF_PACKAGE
    Name: arg
    Value: tensorflow
  - Key: TF_PACKAGE_VERSION
    Name: arg
    Value: 2.0.0-alpha0
  - CmdLine:
    - ${PIP} install ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -q && apt-get install -y     build-essential     curl     git     wget     openjdk-8-jdk     ${PYTHON}-dev     virtualenv     swig
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} --no-cache-dir install     Pillow     h5py     keras_applications     keras_preprocessing     matplotlib     mock     numpy     scipy     sklearn     pandas     portpicker     &&
      test "${USE_PYTHON_3_NOT_2}" -eq 1 && true || ${PIP} --no-cache-dir install     enum34
    Name: run
    PrependShell: true
  - Key: BAZEL_VERSION
    Name: arg
    Value: 0.24.1
  - CmdLine:
    - mkdir /bazel &&     wget -O /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
      &&     wget -O /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE"
      &&     chmod +x /bazel/installer.sh &&     /bazel/installer.sh &&     rm -f
      /bazel/installer.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - bashrc
    - /etc/bash.bashrc
  - CmdLine:
    - chmod a+rwx /etc/bash.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} install jupyter matplotlib
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PIP} install jupyter_http_over_ws
    Name: run
    PrependShell: true
  - CmdLine:
    - jupyter serverextension enable --py jupyter_http_over_ws
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /tf/tensorflow-tutorials && chmod -R a+rwx /tf/
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /.local && chmod a+rwx /.local
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends wget
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tf/tensorflow-tutorials
  - CmdLine:
    - wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get autoremove -y && apt-get remove -y wget
    Name: run
    PrependShell: true
  - CmdLine:
    - ${PYTHON} --version
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tf
  - Name: expose
    Ports:
    - "8888"
  - CmdLine:
    - ${PYTHON} -m ipykernel.kernelspec
    Name: run
    PrependShell: true
  - CmdLine:
    - bash
    - -c
    - source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0
      --no-browser --allow-root
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:${UBUNTU_VERSION}
  Name: base
  Platform: ""
  SourceCode: FROM ubuntu:${UBUNTU_VERSION} as base
