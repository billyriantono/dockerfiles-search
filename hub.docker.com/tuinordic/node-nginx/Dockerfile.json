{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.5",
      "SourceCode": "FROM alpine:3.5",
      "Platform": "",
      "From": {
        "Image": "alpine:3.5"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "NODE_VERSION",
              "Value": "7.9.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup -g 1000 node     \u0026\u0026 adduser -u 1000 -G node -s /bin/sh -D node     \u0026\u0026 apk add --no-cache         libstdc++     \u0026\u0026 apk add --no-cache --virtual .build-deps         binutils-gold         curl         g++         gcc         gnupg         libgcc         linux-headers         make         python   \u0026\u0026 for key in     9554F04D7259F04124DE6B476D5A82AC7E37093B     94AE36675C464D64BAFA68DD7434390BDBE9B9C5     FD3A5288F042B6850C66B31F09FE44734EB7990E     71DCFD284A79C3B38668286BC97EC7A07EDE3FC1     DD8F2338BAE7501E3DD5AC78C273792F7D83545D     B9AE9905FFD7803F25714661B63B535A4C206CA9     C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8     56730D5401028683275BD23C23EFEFE93C4CFFFE   ; do     gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ||     gpg --keyserver pgp.mit.edu --recv-keys \"$key\" ||     gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ;   done     \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz\"     \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"     \u0026\u0026 gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc     \u0026\u0026 grep \" node-v$NODE_VERSION.tar.xz\\$\" SHASUMS256.txt | sha256sum -c -     \u0026\u0026 tar -xf \"node-v$NODE_VERSION.tar.xz\"     \u0026\u0026 cd \"node-v$NODE_VERSION\"     \u0026\u0026 ./configure     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make install     \u0026\u0026 apk del .build-deps     \u0026\u0026 cd ..     \u0026\u0026 rm -Rf \"node-v$NODE_VERSION\"     \u0026\u0026 rm \"node-v$NODE_VERSION.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "YARN_VERSION",
              "Value": "0.23.2"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps-yarn curl gnupg   \u0026\u0026 for key in     6A010C5166006599AA17F08146C2130DFD2497F5   ; do     gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ||     gpg --keyserver pgp.mit.edu --recv-keys \"$key\" ||     gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ;   done   \u0026\u0026 curl -fSL -o yarn.js \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-legacy-$YARN_VERSION.js\"   \u0026\u0026 curl -fSL -o yarn.js.asc \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-legacy-$YARN_VERSION.js.asc\"   \u0026\u0026 gpg --batch --verify yarn.js.asc yarn.js   \u0026\u0026 rm yarn.js.asc   \u0026\u0026 mv yarn.js /usr/local/bin/yarn   \u0026\u0026 chmod +x /usr/local/bin/yarn   \u0026\u0026 apk del .build-deps-yarn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.11.13"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "CONFIG=\"\t\t--prefix=/home/node/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/home/node/nginx/nginx.conf \t\t--error-log-path=/home/node/nginx/log/error.log \t\t--http-log-path=/home/node/nginx/log/access.log \t\t--pid-path=/home/node/nginx/nginx.pid \t\t--lock-path=/home/node/nginx/nginx.lock \t\t--http-client-body-temp-path=/home/node/nginx/cache/client_temp \t\t--http-proxy-temp-path=/home/node/nginx/cache/proxy_temp \t\t--http-fastcgi-temp-path=/home/node/nginx/cache/fastcgi_temp \t\t--http-uwsgi-temp-path=/home/node/nginx/cache/uwsgi_temp \t\t--http-scgi-temp-path=/home/node/nginx/cache/scgi_temp \t\t--user=node \t\t--group=node \t\t--with-http_ssl_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module \t\t--with-threads \t\t--with-stream \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module \t\" \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg \t\u0026\u0026 curl -fSL https://github.com/rdngr/nginx-background/archive/v$NGINX_VERSION-bgpatch.tar.gz -o nginx.tar.gz \t\u0026\u0026 mkdir -p /usr/src \t\u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz \t\u0026\u0026 rm nginx.tar.gz   \u0026\u0026 ls -al /usr/src \t\u0026\u0026 cd /usr/src/nginx-background-$NGINX_VERSION-bgpatch   \u0026\u0026 ls -al \t\u0026\u0026 ./configure $CONFIG --with-debug \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 mv objs/nginx objs/nginx-debug \t\u0026\u0026 ./configure $CONFIG \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 make install \t\u0026\u0026 rm -rf /home/node/nginx/html/ \t\u0026\u0026 mkdir /home/node/nginx/conf.d/ \t\u0026\u0026 mkdir -p /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/ \t\u0026\u0026 install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t\u0026\u0026 strip /usr/sbin/nginx* \t\u0026\u0026 rm -rf /usr/src/nginx-background-$NGINX_VERSION-bgpatch \t\t\u0026\u0026 apk add --no-cache --virtual .gettext gettext \t\u0026\u0026 mv /usr/bin/envsubst /tmp/ \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps \t\u0026\u0026 apk del .build-deps \t\u0026\u0026 apk del .gettext \t\u0026\u0026 mv /tmp/envsubst /usr/local/bin/ \t\t\u0026\u0026 ln -sf /dev/stdout /home/node/nginx/log/access.log \t\u0026\u0026 ln -sf /dev/stderr /home/node/nginx/log/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "chown -R node:node /home/node/nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NODE_PORT",
              "Value": "8081"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/home/node/nginx/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/home/node/"
          ]
        },
        {
          "Expression": "WORKDIR /home/node/app",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY package.json yarn.lock ./",
          "Name": "onbuild"
        },
        {
          "Expression": "RUN yarn install --production   \u0026\u0026 yarn cache clean",
          "Name": "onbuild"
        },
        {
          "Expression": "COPY . .",
          "Name": "onbuild"
        },
        {
          "Expression": "USER node",
          "Name": "onbuild"
        },
        {
          "CmdLine": [
            "../start.sh"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}