MetaArgs: null
Stages:
- BaseName: alpine:3.8
  Commands:
  - Labels:
    - Key: Description
      Value: '"Clair Container Scanning"'
    - Key: Vendor
      Value: '"Platform Engineering"'
    - Key: Version
      Value: '"0.0"'
    Name: label
  - CmdLine:
    - "apk add --no-cache \t\tca-certificates git make musl-dev go curl"
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ ! -e /etc/nsswitch.conf ] && echo ''hosts: files dns'' > /etc/nsswitch.conf'
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_CHANNEL
      Value: stable
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: 18.09.0
    Name: env
  - CmdLine:
    - "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64)
      dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\taarch64) dockerArch='aarch64'
      ;; \t\tppc64le) dockerArch='ppc64le' ;; \t\ts390x) dockerArch='s390x' ;; \t\t*)
      echo >&2 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif
      ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\";
      then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from
      '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract
      \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/
      \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOVERSION
      Value: 1.10.7
    Name: env
  - CmdLine:
    - mkdir /goroot && mkdir -p /gopath/src && mkdir -p /gopath/bin && mkdir -p /gopath/pkg
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz            |
      tar xvzf - -C /goroot --strip-components=1
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /gopath
    Name: env
  - Env:
    - Key: GOROOT
      Value: /goroot
    Name: env
  - Env:
    - Key: PATH
      Value: $GOROOT/bin:$GOPATH/bin:$PATH
    Name: env
  - CmdLine:
    - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /gopath/src/
  - CmdLine:
    - git clone https://github.com/arminc/clair-scanner.git
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /gopath/src/clair-scanner
  - CmdLine:
    - "make ensure && \tmake build && \tmv clair-scanner /clair-scanner && \trm -rf
      /gopath/src/clair-scanner"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - sh
    - -c
    - ./clair-scanner --ip localhost -c ${CLAIR_URL} ${SCAN}
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.8
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.8
