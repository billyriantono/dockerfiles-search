{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.8",
      "SourceCode": "FROM alpine:3.8",
      "Platform": "",
      "From": {
        "Image": "alpine:3.8"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "Description",
              "Value": "\"Clair Container Scanning\""
            },
            {
              "Key": "Vendor",
              "Value": "\"Platform Engineering\""
            },
            {
              "Key": "Version",
              "Value": "\"0.0\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "apk add --no-cache \t\tca-certificates git make musl-dev go curl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "[ ! -e /etc/nsswitch.conf ] \u0026\u0026 echo 'hosts: files dns' \u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_CHANNEL",
              "Value": "stable"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "18.09.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\taarch64) dockerArch='aarch64' ;; \t\tppc64le) dockerArch='ppc64le' ;; \t\ts390x) dockerArch='s390x' ;; \t\t*) echo \u003e\u00262 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo \u003e\u00262 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOVERSION",
              "Value": "1.10.7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /goroot \u0026\u0026 mkdir -p /gopath/src \u0026\u0026 mkdir -p /gopath/bin \u0026\u0026 mkdir -p /gopath/pkg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz            | tar xvzf - -C /goroot --strip-components=1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/gopath"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "/goroot"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$GOROOT/bin:$GOPATH/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/gopath/src/"
        },
        {
          "CmdLine": [
            "git clone https://github.com/arminc/clair-scanner.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/gopath/src/clair-scanner"
        },
        {
          "CmdLine": [
            "make ensure \u0026\u0026 \tmake build \u0026\u0026 \tmv clair-scanner /clair-scanner \u0026\u0026 \trm -rf /gopath/src/clair-scanner"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "CmdLine": [
            "sh",
            "-c",
            "./clair-scanner --ip localhost -c ${CLAIR_URL} ${SCAN}"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}