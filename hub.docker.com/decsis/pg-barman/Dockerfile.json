{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:jessie",
      "SourceCode": "FROM debian:jessie",
      "Platform": "",
      "From": {
        "Image": "debian:jessie"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y wget cron"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" \u003e /etc/apt/sources.list.d/pgdg.list' \u0026\u0026 \twget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \u0026\u0026 \tapt-get update \u0026\u0026 apt-get install -y postgresql-client barman python-pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install prometheus_client"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GOSU_VERSION",
              "Value": "1.7"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x \t\u0026\u0026 wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t\u0026\u0026 wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t\u0026\u0026 gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t\u0026\u0026 rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t\u0026\u0026 chmod +x /usr/local/bin/gosu \t\u0026\u0026 gosu nobody true"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKERIZE_VERSION",
              "Value": "v0.5.0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     \u0026\u0026 tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz     \u0026\u0026 rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/barman.d/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/barman/"
          ]
        },
        {
          "Env": [
            {
              "Key": "BARMAN_LOG_FILE",
              "Value": "/var/log/barman.log"
            },
            {
              "Key": "BARMAN_BARMAN_HOME",
              "Value": "/var/lib/barman"
            },
            {
              "Key": "BARMAN_BARMAN_LOCK_DIRECTORY",
              "Value": "/tmp"
            },
            {
              "Key": "BARMAN_CONFIGURATION_FILES_DIRECTORY",
              "Value": "/etc/barman.d"
            },
            {
              "Key": "BARMAN_PRE_BACKUP_SCRIPT",
              "Value": "/opt/barman/scripts/pre_backup.sh"
            },
            {
              "Key": "BARMAN_POST_BACKUP_SCRIPT",
              "Value": "/opt/barman/scripts/post_backup.sh"
            },
            {
              "Key": "PROM_EXPORTER_LOG_FILE",
              "Value": "\"/var/log/barman_prom_exporter.log\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "scripts",
            "/opt/barman/scripts"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "Name": "workdir",
          "Path": "$BARMAN_BARMAN_HOME"
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "barman"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}