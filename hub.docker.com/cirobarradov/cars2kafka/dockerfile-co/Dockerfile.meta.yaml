MetaArgs: null
Stages:
- BaseName: alpine:3.11
  Commands:
  - Key: NODE_ENV
    Name: arg
    Value: '"production"'
  - Env:
    - Key: NODE_ENV
      Value: ${NODE_ENV}
    Name: env
  - Key: CP_DOMAIN
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_DOMAIN
      Value: ${CP_DOMAIN}
    Name: env
  - Key: CP_DOMAIN_
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_DOMAIN_
      Value: ${CP_DOMAIN_}
    Name: env
  - Key: CP_LANG
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_LANG
      Value: ${CP_LANG}
    Name: env
  - Key: CP_THEME
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_THEME
      Value: ${CP_THEME}
    Name: env
  - Key: CP_PASSWD
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_PASSWD
      Value: ${CP_PASSWD}
    Name: env
  - Key: CP_MIRROR
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_MIRROR
      Value: ${CP_MIRROR}
    Name: env
  - Key: CP_MIRROR_
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_MIRROR_
      Value: ${CP_MIRROR_}
    Name: env
  - Key: CP_KEY
    Name: arg
    Value: '""'
  - Env:
    - Key: CP_KEY
      Value: ${CP_KEY}
    Name: env
  - Key: RCLONE_CONFIG
    Name: arg
    Value: '""'
  - Env:
    - Key: RCLONE_CONFIG
      Value: ${RCLONE_CONFIG}
    Name: env
  - Env:
    - Key: TZ
      Value: Europe/Moscow
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - mkdir -p /var/cinemapress
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/cinemapress
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - package.json
    - /var/cinemapress/package.json
  - CmdLine:
    - set -o pipefail     && apk update     && apk --no-cache add --virtual .build-dependencies
      make g++ gcc gtk-doc gobject-introspection expat-dev glib-dev libpng-dev libjpeg-turbo-dev
      giflib-dev librsvg-dev     && apk add -u --no-cache sudo python wget curl tar
      gzip unzip git sed bash nano openrc openssl dos2unix busybox-extras tzdata     &&
      apk add -u --no-cache npm mysql-client memcached sphinx=2.2.11-r1     && wget
      -qO - https://rclone.org/install.sh | bash     && cp /usr/share/zoneinfo/Europe/Moscow
      /etc/localtime     && echo "Europe/Moscow" > /etc/timezone     && npm i node-gyp
      -g     && npm i pm2 -g     && npm i     && mkdir -p         /var/ngx_pagespeed_cache         /etc/sphinx         /var/lib/sphinx/data         /var/local/images         /var/local/balancer     &&
      npm cache clean --force     && apk del .build-dependencies     && rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /var/cinemapress
  - CmdLine:
    - set -o pipefail     && rm -rf package-lock.json doc .dockerignore .gitignore
      .prettierignore .prettierrc Dockerfile LICENSE.txt README.md     && dos2unix
      cinemapress.sh     && cp cinemapress.sh /usr/bin/cinemapress && chmod +x /usr/bin/cinemapress     &&
      rm -rf cinemapress.sh     && cp -rf themes/default/public/admin/favicon.ico
      favicon.ico     && cp -rf themes/default/public/desktop/img/player$(( ( RANDOM
      % 7 ) + 1 )).png         themes/default/public/desktop/img/player.png     &&
      echo -e "#!/bin/bash\n/usr/bin/cinemapress container backup create >> /home/\${CP_DOMAIN}/log/backup_\$(date
      '+%d_%m_%Y').log"         > /etc/periodic/daily/backup     && chmod a+x /etc/periodic/daily/backup     &&
      echo -e "#!/bin/bash\n/usr/bin/cinemapress container cron >> /home/\${CP_DOMAIN}/log/cron_\$(date
      '+%d_%m_%Y').log"         > /etc/periodic/hourly/cron     && chmod a+x /etc/periodic/hourly/cron
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "3000"
  - CmdLine:
    - /usr/bin/cinemapress
    - container
    - run
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.11
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.11
