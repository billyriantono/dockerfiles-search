{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "build",
      "BaseName": "nvidia/cuda:8.0-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-devel-ubuntu16.04 as build",
      "Platform": "",
      "As": "build",
      "From": {
        "Image": "nvidia/cuda:8.0-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y     git     autoconf     build-essential     libass-dev     libtool     pkg-config     texinfo     zlib1g-dev     mkvtoolnix     ruby-full     git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install     glew-utils     libglew-dbg     libglew-dev     libglew1.13     libglewmx-dev     libglewmx-dbg     freeglut3     freeglut3-dev     freeglut3-dbg     libghc-glut-dev     libghc-glut-doc     libghc-glut-prof     libalut-dev     libxmu-dev     libxmu-headers     libxmu6     libxmu6-dbg     libxmuu-dev     libxmuu1     libxmuu1-dbg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install     autoconf     automake     build-essential     cmake     git     libass-dev     libfreetype6-dev     libsdl2-dev     libtheora-dev     libtool     libva-dev     libvpx-dev     libvdpau-dev     libvorbis-dev     libmp3lame-dev     libxcb1-dev     libxcb-shm0-dev     libxcb-xfixes0-dev     mercurial     pkg-config     texinfo     wget     zlib1g-dev     yasm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /src/deps /install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "\"/install/usr/bin:/install/bin:${PATH}\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -y install     asciidoc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.02/nasm-2.13.02.tar.gz         --output-document=/src/deps/nasm.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar -xvf /src/deps/nasm.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv /src/deps/nasm-* /src/deps/nasm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps/nasm"
        },
        {
          "CmdLine": [
            "./autogen.sh \u0026\u0026     ./configure --prefix=/install \u0026\u0026     make -j$(nproc) \u0026\u0026     make -j$(nproc) install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "git clone --depth=1 https://github.com/mstorsjo/fdk-aac.git /src/deps/fdk-aac"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps/fdk-aac"
        },
        {
          "CmdLine": [
            "autoreconf -fiv \u0026\u0026     ./configure         --prefix=/install         --disable-shared         \u0026\u0026     make -j$(nproc) \u0026\u0026     make -j$(nproc) install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "git clone --depth=1 http://git.videolan.org/git/x264.git /src/deps/x264"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps/x264"
        },
        {
          "CmdLine": [
            "./configure         --prefix=\"/install\"         --enable-static         --disable-shared         --enable-pic         --disable-opencl         \u0026\u0026     make -j$(nproc) \u0026\u0026     make -j$(nproc) install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "hg clone https://bitbucket.org/multicoreware/x265"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps/x265"
        },
        {
          "CmdLine": [
            "cd build/linux \u0026\u0026     cmake -G \"Unix Makefiles\"         -DCMAKE_INSTALL_PREFIX=\"/install\"         -DENABLE_SHARED:bool=off         ../../source         \u0026\u0026     make -j$(nproc) \u0026\u0026     make -j$(nproc) install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "wget https://github.com/jniltinho/oficinadotux/raw/master/ffmpeg_nvenc/Video_Codec_SDK_8.0.14.zip     -O /src/deps/Video_Codec_SDK_8.0.14.zip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "unzip Video_Codec_SDK_8.0.14 \u0026\u0026     cp -r Video_Codec_SDK_8.0.14/Samples/common/inc/           /install/include/nvenc_sdk_9.0 \u0026\u0026     cp -r Video_Codec_SDK_8.0.14/Samples/common/lib/           /install/lib/nvenc_sdk_8.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps"
        },
        {
          "CmdLine": [
            "git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/deps/nv-codec-headers"
        },
        {
          "CmdLine": [
            "PREFIX=/install make install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src"
        },
        {
          "CmdLine": [
            "git clone --depth=1 https://github.com/FFmpeg/FFmpeg.git /src/ffmpeg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/src/ffmpeg"
        },
        {
          "Key": "NVCC_ARCH",
          "Name": "arg",
          "Value": "\"compute_60\""
        },
        {
          "Key": "NVCC_CODE",
          "Name": "arg",
          "Value": "\"sm_60,sm_61,sm_62\""
        },
        {
          "CmdLine": [
            "export PKG_CONFIG_PATH=\"/install/lib/pkgconfig\" \u0026\u0026     ./configure         --prefix=\"/install\"         --pkg-config-flags=\"--static\"         --extra-cflags=\"-I/install/include\"         --extra-ldflags=\"-L/install/lib\"         --extra-cflags=\"-I/usr/local/cuda-${CUDA_VERSION%.*}/include\"         --extra-ldflags=-L/usr/local/cuda-${CUDA_VERSION%.*}/lib         --extra-ldflags=-L/usr/local/cuda-${CUDA_VERSION%.*}/lib64         --extra-cflags=\"-I/install/include/nvenc_sdk_8.0\"         --extra-ldflags=\"-L/install/lib/nvenc_sdk_8.0\"         --extra-libs=\"-lpthread -lm\"         --nvccflags=\"--generate-code arch=$NVCC_ARCH,code=[$NVCC_CODE] -O2\"         --enable-gpl         --enable-libass         --enable-libfdk-aac         --enable-libfreetype         --enable-libmp3lame         --enable-libtheora         --enable-libvorbis         --enable-libvpx         --enable-libx264         --enable-libx265         --enable-nonfree         --enable-cuda-sdk         --enable-cuvid         --enable-libnpp         --enable-nvenc         --enable-xlib         --disable-doc         --disable-debug         --disable-ffplay         \u0026\u0026     make -j$(nproc) \u0026\u0026     make -j$(nproc) install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "tar -cvf /src/ffmpeg-dynamic-deps.tar     $(ldd /install/bin/ffmpeg |       grep / |       awk '{ print $3 }' |       xargs readlink -f)"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-runtime-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-runtime-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-runtime-ubuntu16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y          \u0026\u0026 rm -rf /var/cache/apt"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/install/lib/*",
            "/usr/local/lib/"
          ]
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/install/bin/*",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "build",
          "Name": "copy",
          "SourcesAndDest": [
            "/src/ffmpeg-dynamic-deps.tar",
            "/"
          ]
        },
        {
          "CmdLine": [
            "tar -xvf /ffmpeg-dynamic-deps.tar \u0026\u0026     rm /ffmpeg-dynamic-deps.tar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_VISIBLE_DEVICES",
              "Value": "all"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NVIDIA_DRIVER_CAPABILITIES",
              "Value": "video,compute,utility"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/workspace"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/workspace"
        },
        {
          "CmdLine": [
            "/usr/local/bin/ffmpeg"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "-h"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}