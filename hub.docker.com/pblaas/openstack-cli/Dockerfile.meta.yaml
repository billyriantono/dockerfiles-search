MetaArgs: null
Stages:
- BaseName: alpine:3.11.2
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"patrick@kite4fun.nl"'
    Name: label
  - Key: TERRAFORM_VERSION
    Name: arg
    Value: '''0.12.18'''
  - Key: HELM_VERSION
    Name: arg
    Value: '''2.16.1'''
  - Env:
    - Key: OS_AUTH_URL
      Value: '"https://identity.openstack.cloudvps.com/v3"'
    Name: env
  - Env:
    - Key: OS_PROJECT_ID
      Value: '""'
    Name: env
  - Env:
    - Key: OS_TENANT_ID
      Value: '""'
    Name: env
  - Env:
    - Key: OS_PROJECT_NAME
      Value: '""'
    Name: env
  - Env:
    - Key: OS_TENANT_NAME
      Value: '""'
    Name: env
  - Env:
    - Key: OS_USER_DOMAIN_NAME
      Value: '"Default"'
    Name: env
  - Env:
    - Key: OS_USERNAME
      Value: '""'
    Name: env
  - Env:
    - Key: OS_PASSWORD
      Value: '""'
    Name: env
  - Env:
    - Key: OS_REGION_NAME
      Value: '"AMS"'
    Name: env
  - Env:
    - Key: OS_INTERFACE
      Value: '"public"'
    Name: env
  - Env:
    - Key: OS_IDENTITY_API_VERSION
      Value: "3"
    Name: env
  - Env:
    - Key: TERM
      Value: xterm-256color
    Name: env
  - CmdLine:
    - apk add --no-cache --update   tzdata   bash   zsh   zsh-vcs   less   git   curl   vim   coreutils   perl   openssh-client   openssl   openssl-dev   python-dev   py-pip   py-setuptools   util-linux   ca-certificates   gcc   make   musl-dev   linux-headers   libffi-dev   docker   ansible   &&
      pip install --upgrade pip   && pip install --upgrade --no-cache-dir pip jinja2==2.9.5
      setuptools python-openstackclient python-cinderclient==4.0.1 openstack-interpreter   &&
      apk del gcc musl-dev linux-headers   && rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing etcd-ctl   &&
      rm -rf /var/cache/apk/*
    Name: run
    PrependShell: true
  - CmdLine:
    - cp /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime   && echo "Europe/Amsterdam"
      > /etc/timezone   && apk del tzdata
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - install.sh
    - /root/
  - CmdLine:
    - sh /root/install.sh && rm -f /root/install.sh && sed -i s/robbyrussell/agnoster/g
      /root/.zshrc
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -OL https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh   &&
      sh gitflow-installer.sh   && rm -f gitflow-installer.sh   && rm -rf gitflow
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL https://run.linkerd.io/install | sh
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip   &&
      unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin   &&
      rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s
      https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      && chmod +x kubectl && mv kubectl /usr/bin
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://kubernetes-helm.storage.googleapis.com/helm-v${HELM_VERSION}-linux-amd64.tar.gz   &&
      tar xf helm-v${HELM_VERSION}-linux-amd64.tar.gz   && cp /linux-amd64/helm /usr/local/bin   &&
      chmod +x /usr/local/bin/helm   && rm -rvf linux-amd64   && rm helm-v${HELM_VERSION}-linux-amd64.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sSL https://cli.openfaas.com | sh
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /blueprints
  - Name: workdir
    Path: /blueprints
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - run.sh
    - /usr/local/bin/run.sh
  - CmdLine:
    - /usr/local/bin/run.sh
    Name: entrypoint
    PrependShell: false
  From:
    Image: alpine:3.11.2
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.11.2
