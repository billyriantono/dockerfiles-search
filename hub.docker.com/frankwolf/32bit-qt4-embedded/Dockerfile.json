{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "frankwolf/32bit-ubuntu:xenial",
      "SourceCode": "FROM frankwolf/32bit-ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "frankwolf/32bit-ubuntu:xenial"
      },
      "Commands": [
        {
          "Maintainer": "\"Frank Wolf \u003cFrankWolf@gmx.de\u003e\"",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "Maintainer",
              "Value": "\"Frank Wolf \u003cFrankWolf@gmx.de\u003e\""
            },
            {
              "Key": "Name",
              "Value": "\"Qt 4 embedded on x86\""
            },
            {
              "Key": "Version",
              "Value": "0.1.0"
            }
          ],
          "Name": "label"
        },
        {
          "Name": "shell",
          "Shell": [
            "/usr/bin/linux32",
            "sh",
            "-c"
          ]
        },
        {
          "Key": "QT_VERSION",
          "Name": "arg",
          "Value": "4.8.6"
        },
        {
          "Key": "QT_CONFIGURE_OPTIONS",
          "Name": "arg",
          "Value": ""
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "qt/",
            "/opt"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends       ca-certificates       build-essential       gdbserver       liblog4cxx-dev       patch       qt4-dev-tools       wget     \u0026\u0026 apt-get build-dep -y       qt4-x11     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "export QT_MAJOR_MINOR=$(echo $QT_VERSION | cut -d'.' -f 1,2)     \u0026\u0026 if $(wget -q -S --spider https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/${QT_VERSION}/qt-everywhere-opensource-src-${QT_VERSION}.tar.gz \u003e /dev/null 2\u003e\u00261); then          wget https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/${QT_VERSION}/qt-everywhere-opensource-src-${QT_VERSION}.tar.gz;        else          wget https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/qt-everywhere-opensource-src-${QT_VERSION}.tar.gz;        fi     \u0026\u0026 tar -xzf qt-everywhere-opensource-src-${QT_VERSION}.tar.gz     \u0026\u0026 rm qt-everywhere-opensource-src-${QT_VERSION}.tar.gz     \u0026\u0026 chmod +x *.sh     \u0026\u0026 if [ -x ./qt-everywhere-opensource-src-${QT_VERSION}-apply-patches.sh ]; then          ./qt-everywhere-opensource-src-${QT_VERSION}-apply-patches.sh;        fi     \u0026\u0026 cd qt-everywhere-opensource-src-${QT_VERSION}     \u0026\u0026 ../build-qt.sh ${QT_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "USER",
          "Name": "arg",
          "Value": "user"
        },
        {
          "Key": "UID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "GID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "$USER"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /home/$USER     \u0026\u0026 groupadd -r $USER -g $GID     \u0026\u0026 useradd -u $UID -r -g $USER -d /home/$USER -s /sbin/nologin -c \"Docker User\" $USER     \u0026\u0026 chown -R $USER:$USER /home/$USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$USER"
        },
        {
          "Env": [
            {
              "Key": "QVFB",
              "Value": ""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/data"
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.d/*",
            "/docker-entrypoint.d/"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}