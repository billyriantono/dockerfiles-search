{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:xenial",
      "SourceCode": "FROM ubuntu:xenial",
      "Platform": "",
      "From": {
        "Image": "ubuntu:xenial"
      },
      "Commands": [
        {
          "Maintainer": "\"Frank Wolf \u003cFrankWolf@gmx.de\u003e\"",
          "Name": "maintainer"
        },
        {
          "Labels": [
            {
              "Key": "Maintainer",
              "Value": "\"Frank Wolf \u003cFrankWolf@gmx.de\u003e\""
            },
            {
              "Key": "Name",
              "Value": "\"Qt for Android\""
            },
            {
              "Key": "Version",
              "Value": "0.1.0"
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "dpkg --add-architecture i386 \u0026\u0026 apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get -qq install -y --no-install-recommends       ant       autoconf       autogen       automake       ca-certificates       curl       build-essential       dbus       dbus-x11       expect       file       git-core       libglib2.0-0       libtool       libtool-bin       make       openjdk-8-jdk       qt5-default       tightvncserver       unzip       wget       x11-utils       x11-xserver-utils       xfonts-base       libgcc1:i386       libncurses5:i386       libsdl1.2debian:i386       libstdc++6:i386       zlib1g:i386     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "download/",
            "./"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/opt/android"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "android-accept-licenses.sh",
            "./"
          ]
        },
        {
          "Key": "ANDROID_TOOLS_VERSION",
          "Name": "arg",
          "Value": "25.2.5"
        },
        {
          "Key": "ANDROID_NDK_VERSION",
          "Name": "arg",
          "Value": "12b"
        },
        {
          "Key": "ANDROID_PLATFORM_VERSION",
          "Name": "arg",
          "Value": "24"
        },
        {
          "Key": "ANDROID_BUILDTOOLS_VERSION",
          "Name": "arg",
          "Value": "24.0.3"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_TOOLS_URL",
              "Value": "https://dl.google.com/android/repository/tools_r${ANDROID_TOOLS_VERSION}-linux.zip"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_NDK_URL",
              "Value": "https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_VERSION}-linux-x86_64.zip"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_HOME",
              "Value": "/opt/android/android-sdk-linux"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_NDK_ROOT",
              "Value": "/opt/android/android-ndk"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "if [ -e /opt/android-ndk-r${ANDROID_NDK_VERSION}-linux-x86_64.zip ]; then       mv /opt/android-ndk-r${ANDROID_NDK_VERSION}-linux-x86_64.zip . ;     else       wget -q ${ANDROID_NDK_URL};     fi     \u0026\u0026 unzip -q android-ndk*.zip     \u0026\u0026 rm android-ndk*.zip     \u0026\u0026 ln -s android-ndk-r${ANDROID_NDK_VERSION} android-ndk     \u0026\u0026 if [ ! -e /opt/android/android-ndk/RELEASE.TXT ]; then          echo r${ANDROID_NDK_VERSION} \u003e /opt/android/android-ndk/RELEASE.TXT ;        fi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-8-openjdk-amd64"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p ${ANDROID_HOME}     \u0026\u0026 cd ${ANDROID_HOME}     \u0026\u0026 if [ -e /opt/tools_r${ANDROID_TOOLS_VERSION}-linux.zip ]; then          mv /opt/tools_r${ANDROID_TOOLS_VERSION}-linux.zip .;        else          wget -q ${ANDROID_TOOLS_URL};        fi     \u0026\u0026 unzip -q tools*.zip     \u0026\u0026 rm tools*.zip     \u0026\u0026 echo y | ${ANDROID_HOME}/tools/bin/sdkmanager \"platform-tools\"     \u0026\u0026 find ${ANDROID_HOME}/tools -maxdepth 1 -type f -perm 744 -print0 | xargs -0 chmod +x"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo y | ${ANDROID_HOME}/tools/bin/sdkmanager --include_obsolete       \"extras;android;m2repository\"       \"extras;google;google_play_services\"       \"extras;google;m2repository\"       \"extras;google;market_apk_expansion\"       \"extras;google;market_licensing\"       \"extras;google;play_billing\"       \"extras;google;simulators\"       \"extras;google;webdriver\"       \"platforms;android-${ANDROID_PLATFORM_VERSION}\"       \"platforms;android-13\"       \"system-images;android-${ANDROID_PLATFORM_VERSION};default;armeabi-v7a\"       \"build-tools;${ANDROID_BUILDTOOLS_VERSION}\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ANDROID_NDK_PLATFORM",
              "Value": "android-9"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ANDROID_NDK_TOOLCHAIN_VERSION",
              "Value": "4.9"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "root"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "VNC_PASSWD",
              "Value": "password"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "QT_VERSION",
          "Name": "arg",
          "Value": "5.6.2"
        },
        {
          "Env": [
            {
              "Key": "QTDIR",
              "Value": "/opt/Qt/5.6/android_armv7"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "qt-installer-noninteractive.qs",
            "./"
          ]
        },
        {
          "CmdLine": [
            "export QT_MAJOR_MINOR=$(echo $QT_VERSION | cut -d'.' -f 1,2)     \u0026\u0026 if [ ! -e *.run ]; then          if $(wget -q -S --spider https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/${QT_VERSION}/qt-opensource-linux-x64-android-${QT_VERSION}.run \u003e /dev/null 2\u003e\u00261); then            wget -q https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/${QT_VERSION}/qt-opensource-linux-x64-android-${QT_VERSION}.run;          else            wget -q https://download.qt.io/archive/qt/${QT_MAJOR_MINOR}/${QT_VERSION}/qt-linux-opensource-${QT_VERSION}-android-x86_64-offline.run;          fi        fi     \u0026\u0026 chmod +x *.run     \u0026\u0026 mkdir ~/.vnc     \u0026\u0026 printf \"${VNC_PASSWD}\\n${VNC_PASSWD}\\nn\\n\" | vncpasswd     \u0026\u0026 tightvncserver     \u0026\u0026 export DISPLAY=:1     \u0026\u0026 ./*.run --script qt-installer-noninteractive.qs     \u0026\u0026 rm *.run"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "user"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "USER",
          "Name": "arg",
          "Value": "user"
        },
        {
          "Key": "UID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Key": "GID",
          "Name": "arg",
          "Value": "1000"
        },
        {
          "Env": [
            {
              "Key": "USER",
              "Value": "$USER"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /home/$USER     \u0026\u0026 groupadd -r $USER -g $GID     \u0026\u0026 useradd -u $UID -r -g $USER -d /home/$USER -s /usr/sbin/nologin -c \"Docker User\" $USER     \u0026\u0026 chown -R $USER:$USER /home/$USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "${USER}"
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "qt.config.tgz",
            "/home/$USER/"
          ]
        },
        {
          "CmdLine": [
            "echo no | android create avd -n default-android -t 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/data"
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}