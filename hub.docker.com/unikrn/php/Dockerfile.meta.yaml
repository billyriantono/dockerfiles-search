MetaArgs: null
Stages:
- BaseName: php:7.4-fpm
  Commands:
  - Env:
    - Key: TERM
      Value: xterm
    Name: env
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Env:
    - Key: MYSQL_SERVER_VERSION
      Value: mysql-5.7
    Name: env
  - Env:
    - Key: COMPOSER_ALLOW_SUPERUSER
      Value: "1"
    Name: env
  - Env:
    - Key: COMPOSER_HOME
      Value: /home/composer
    Name: env
  - Env:
    - Key: COMPOSER_PROCESS_TIMEOUT
      Value: "600"
    Name: env
  - Key: INSTALL_PROFILER
    Name: arg
    Value: "true"
  - Key: CLEAN_BINARIES
    Name: arg
    Value: "true"
  - CmdLine:
    - 'apt-get update && apt-get install -y wget gnupg iputils-ping iproute2 curl     &&
      echo deb http://httpredir.debian.org/debian stable main contrib >>/etc/apt/sources.list     &&
      echo deb http://security.debian.org/ stable/updates main contrib >>/etc/apt/sources.list     &&
      apt-get update && apt-get install -y gnupg     && apt-get upgrade -y    && curl
      -sL https://d2buw04m05mirl.cloudfront.net/setup_11.x | sed "s/deb.nodesource.com/d2buw04m05mirl.cloudfront.net/"
      | sed "s/\(deb\(-src\)\? http\)s/\1/" | bash -     && apt-get install -y         debian-archive-keyring         libfreetype6-dev         libjpeg62-turbo-dev         libmcrypt-dev         zlib1g-dev         libzip-dev
      libbz2-dev         libgeoip-dev         expect-dev         libgmp-dev         libmagickwand-dev
      libmagickcore-dev imagemagick         libsodium-dev         python         locales         nodejs         git
      zip unzip         redis-server redis-tools         procps nano mc    && apt-key
      adv --keyserver keys.gnupg.net --recv-keys 8C718D3B5072E1F5     && curl -fsSL
      https://unikrn-tools.s3-accelerate.amazonaws.com/docker/mysql-apt-config_0.8.3-1_all.deb
      -o /tmp/mysql.deb         && dpkg -i /tmp/mysql.deb         && rm /tmp/mysql.deb        &&
      apt-get update && apt-get install -y mysql-community-server     && ln -s /usr/include/x86_64-linux-gnu/gmp.h
      /usr/include/gmp.h     && mkdir -p /tmp/oniguruma         && TMP_ORIG_PATH=$(pwd)         &&
      cd /tmp/oniguruma         && curl -Ls https://unikrn-tools.s3-accelerate.amazonaws.com/docker/onig-6.9.4.tar.gz
      | tar xzC /tmp/oniguruma --strip-components=1         && ./configure --prefix=/usr/local         &&
      make -j $(nproc)         && make install         && cd "$TMP_ORIG_PATH"     &&
      docker-php-ext-install -j$(nproc) iconv     && docker-php-ext-configure gd --with-freetype
      --with-jpeg     && docker-php-ext-install -j$(nproc) gd pdo pdo_mysql mysqli
      bcmath mbstring bz2 zip gmp soap intl sodium sysvmsg sysvsem sysvshm ffi posix
      opcache shmop     && apt-get upgrade -y    && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && curl -sS https://unikrn-tools.s3-accelerate.amazonaws.com/docker/geo.tgz
      | tar -xz -C /     && EXPECTED_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig)
      &&     curl -s -f -L -o /tmp/composer-setup.php https://getcomposer.org/installer
      &&     ACTUAL_SIGNATURE=$(php -r "echo hash_file(''SHA384'', ''/tmp/composer-setup.php'');")
      &&     if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then         >&2
      echo ''ERROR: Invalid installer signature'' &&         rm /tmp/composer-setup.php
      &&         exit 1;     fi &&     php /tmp/composer-setup.php --no-ansi --install-dir=/usr/bin
      --filename=composer &&     rm -rf /tmp/* /var/tmp/* &&     composer --ansi --version
      --no-interaction &&     composer global require hirak/prestissimo     && pecl
      install uuid && docker-php-ext-enable uuid     && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && pecl install redis && docker-php-ext-enable redis     &&
      apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && pecl install
      apcu apcu_bc-beta && docker-php-ext-enable apcu  && docker-php-ext-enable apc     &&
      apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && mv /usr/local/etc/php/conf.d/docker-php-ext-apc.ini
      /usr/local/etc/php/conf.d/zz-docker-php-ext-apc.ini     && pecl install xdebug-beta
      && docker-php-ext-enable xdebug     && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && rm -rf /usr/share/GeoIP && ln -s /var/lib/geoip-database-contrib
      /usr/share/GeoIP     && update-alternatives --install /usr/share/GeoIP/GeoIPCity.dat
      GeoIPCity.dat /usr/share/GeoIP/GeoLiteCity.dat 50     && pecl install geoip-beta
      && docker-php-ext-enable geoip     && echo "<?php var_dump(geoip_record_by_name(''141.30.225.1''));
      " | php  | grep Dresden -cq || (echo "Geo not working" && exit 1)     && apt-get
      clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && pecl install imagick
      && docker-php-ext-enable imagick     && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*     && if [ "${INSTALL_PROFILER}" = "true" ]; then         TMP_ORIG_PATH=$(pwd)
      &&         mkdir -p /tmp/phpspy &&         cd /tmp/phpspy &&         git clone
      https://github.com/adsr/phpspy.git . &&         make &&         cp ./phpspy
      /usr/bin/ &&         chmod +x /usr/bin/phpspy &&         cd "$TMP_ORIG_PATH"
      &&         rm -rf /tmp/*;     fi     && apt-get remove "*-dev*" binutils cpp
      libbinutils x11-common  binutils-common cpp-8 libcairo-gobject2 libcairo-script-interpreter2
      libcc1-0 libcroco3 -y --purge     && if [ "${INSTALL_PROFILER}" = "true" ];
      then         TMP_ORIG_PATH=$(pwd) &&         cd /usr/bin/ && rm mysql_embedded
      myisam* mysqlslap mysqladmin mysqlpump &&         rm /usr/sbin/mysqld-debug
      &&         cd "$TMP_ORIG_PATH" &&         echo "binaries cleaned";     fi'
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - '*.sh'
    - /
  - CmdLine:
    - npm install pm2 -g
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .npmrc
    - /root
  - CmdLine:
    - echo "de_DE.UTF-8 UTF-8\nde_DE ISO-8859-1\nde_DE@euro ISO-8859-15\nen_US.UTF-8
      UTF-8" >> /etc/locale.gen
    Name: run
    PrependShell: true
  - CmdLine:
    - locale-gen && /usr/sbin/update-locale LANG=en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Name: volume
    Volumes:
    - /var/lib/redis
  - Name: expose
    Ports:
    - "6379"
    - "9000"
  - Chown: ""
    Name: add
    SourcesAndDest:
    - zzz-unikrn-fpm.conf
    - /usr/local/etc/php-fpm.d/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - unikrn-php.ini
    - /usr/local/etc/php/conf.d/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - unikrn-xdebug.ini
    - /usr/local/etc/php/conf.d/
  - Chown: ""
    Name: add
    SourcesAndDest:
    - mysql-tmpfs.cnf
    - /etc/mysql/mysql.conf.d/zzz-mysql-tmpfs.cnf
  - CmdLine:
    - chmod go-w /etc/mysql/mysql.conf.d/zzz-mysql-tmpfs.cnf && chown mysql /etc/mysql/mysql.conf.d/zzz-mysql-tmpfs.cnf
    Name: run
    PrependShell: true
  - CmdLine:
    - /run.sh
    Name: entrypoint
    PrependShell: false
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - tests.php
    - /
  - CmdLine:
    - php -d apc.enable_cli=1 /tests.php || exit 1
    Name: run
    PrependShell: true
  From:
    Image: php:7.4-fpm
  Name: ""
  Platform: ""
  SourceCode: FROM php:7.4-fpm
