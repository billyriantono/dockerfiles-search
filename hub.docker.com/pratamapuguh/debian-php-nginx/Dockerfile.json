{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stretch-slim",
      "SourceCode": "FROM debian:stretch-slim",
      "Platform": "",
      "From": {
        "Image": "debian:stretch-slim"
      },
      "Commands": [
        {
          "Key": "BUILD_TIMEZONE",
          "Name": "arg",
          "Value": "Asia/Jakarta"
        },
        {
          "Env": [
            {
              "Key": "TIMEZONE",
              "Value": "$BUILD_TIMEZONE"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_MEMORY_LIMIT",
              "Value": "512M"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAX_UPLOAD",
              "Value": "50M"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_MAX_FILE_UPLOAD",
              "Value": "200"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_MAX_POST",
              "Value": "100M"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "IGBINARY_VERSION",
              "Value": "2.0.8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHPREDIS_VERSION",
              "Value": "3.1.4"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHPYAML_VERSION",
              "Value": "1.3.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} \u003e /etc/apt/preferences.d/no-debian-php"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BUILD_DEPS",
              "Value": "\"zip unzip locales autoconf g++ gcc make git tzdata libmemcached-dev re2c file re2c dpkg-dev dpkg libc-dev pkgconf re2c\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHPIZE_DEPS",
              "Value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tpkg-config         libpcre3         libpcre3-dev         zlib1g-dev         libssl-dev         zlib1g \t\tre2c"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t\ttar \t; \trm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_INI_DIR",
              "Value": "/usr/local/etc/php"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PHP_EXTRA_CONFIGURE_ARGS",
              "Value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CFLAGS",
              "Value": "\"-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_CPPFLAGS",
              "Value": "\"$PHP_CFLAGS\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_LDFLAGS",
              "Value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GPG_KEYS",
              "Value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "7.2.24"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_URL",
              "Value": "\"https://www.php.net/get/php-7.2.24.tar.xz/from/this/mirror\""
            },
            {
              "Key": "PHP_ASC_URL",
              "Value": "\"https://www.php.net/get/php-7.2.24.tar.xz.asc/from/this/mirror\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PHP_SHA256",
              "Value": "\"a6a6cc03388060aa5f8f9e45799b72bce1c7ed7b9d7b3f1187787202aad91d25\""
            },
            {
              "Key": "PHP_MD5",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir ~/.gnupg \u0026\u0026 echo \"disable-ipv6\" \u003e\u003e ~/.gnupg/dirmngr.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends gnupg dirmngr; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\tcurl -fsSL -o php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\tcurl -fsSL -o php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tgpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-mark auto '.*' \u003e /dev/null; \tapt-mark manual $savedAptMark \u003e /dev/null; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/docker-php-source",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/docker-php-source"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list \u003e /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} \u003e /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y \t\tlibargon2-dev \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev         libmcrypt-dev         libfreetype6         libfreetype6-dev         libwebp-dev         libjpeg62-turbo-dev         libpng-dev libxpm-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t--with-pdo-sqlite=/usr \t\t--with-sqlite3=/usr \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' \u0026\u0026 echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' \u003e /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=\u003e/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/docker-php-ext-*",
            "/usr/local/bin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/bin/docker-php-ext-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -fsSL -o /tmp/${IGBINARY_VERSION}.tar.gz https://github.com/igbinary/igbinary/archive/${IGBINARY_VERSION}.tar.gz \u0026\u0026     cd /tmp \u0026\u0026     tar -xzvf ${IGBINARY_VERSION}.tar.gz \u0026\u0026     cd igbinary-${IGBINARY_VERSION} \u0026\u0026     phpize \u0026\u0026 ./configure CFLAGS=\"-O2 -g\" --enable-igbinary \u0026\u0026 make \u0026\u0026 make install \u0026\u0026     cd .. \u0026\u0026 rm -rf /tmp/igbinary-${IGBINARY_VERSION}/ \u0026\u0026     echo 'extension=igbinary.so' \u003e\u003e ${PHP_INI_DIR}/conf.d/igbinary.ini \u0026\u0026         curl -fsSL -o /tmp/${PHPREDIS_VERSION}.tar.gz https://github.com/phpredis/phpredis/archive/${PHPREDIS_VERSION}.tar.gz \u0026\u0026     cd /tmp \u0026\u0026     tar -xzvf ${PHPREDIS_VERSION}.tar.gz \u0026\u0026     cd /tmp/phpredis-${PHPREDIS_VERSION} \u0026\u0026     phpize \u0026\u0026  ./configure --enable-redis-igbinary \u0026\u0026 make \u0026\u0026 make install \u0026\u0026     cd .. \u0026\u0026 rm -rf /tmp/phpredis-${PHPREDIS_VERSION}/ \u0026\u0026     echo 'extension=redis.so' \u003e\u003e ${PHP_INI_DIR}/conf.d/redis.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-enable sodium"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux; \tcd /usr/local/etc; \tif [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf \u003e /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi; \t{ \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf; \t{ \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update;     apt-get install -y     libargon2-dev \tlibcurl4-openssl-dev \tlibedit-dev \tlibsodium-dev \tlibsqlite3-dev \tlibssl-dev \tlibxml2-dev \tzlib1g-dev     libmcrypt-dev     libfreetype6     libfreetype6-dev     libwebp-dev     libjpeg62-turbo-dev     libpng-dev libxpm-dev"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "docker-php-ext-configure bcmath --enable-bcmath;     docker-php-ext-configure pcntl --enable-pcntl;     docker-php-ext-configure soap --enable-soap;     docker-php-ext-configure pdo_mysql --with-pdo-mysql;     docker-php-ext-install         bcmath         pcntl         soap         sockets         zip         opcache         mysqli         pdo_mysql   \u0026\u0026 docker-php-ext-configure gd     --with-jpeg-dir=/usr/lib     --with-freetype-dir=/usr/include/freetype2 \u0026\u0026     docker-php-ext-install gd   \u0026\u0026 docker-php-ext-install opcache   \u0026\u0026 docker-php-ext-enable opcache"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \u0026\u0026     sed -i \"s/ -n / /\" $(which pecl)"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mv $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" ${PHP_INI_DIR}/php.ini                                           \u0026\u0026     sed -i \"s|;*date.timezone =.*|date.timezone = ${TIMEZONE}|i\" ${PHP_INI_DIR}/php.ini                                     \u0026\u0026     sed -i \"s|;*memory_limit =.*|memory_limit = ${PHP_MEMORY_LIMIT}|i\" ${PHP_INI_DIR}/php.ini                               \u0026\u0026     sed -i \"s|;*upload_max_filesize =.*|upload_max_filesize = ${MAX_UPLOAD}|i\" ${PHP_INI_DIR}/php.ini                       \u0026\u0026     sed -i \"s|;*max_file_uploads =.*|max_file_uploads = ${PHP_MAX_FILE_UPLOAD}|i\" ${PHP_INI_DIR}/php.ini                    \u0026\u0026     sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" ${PHP_INI_DIR}/php.ini                                      \u0026\u0026     sed -i -e \"s/variables_order = \\\"GPCS\\\"/variables_order = \\\"EGPCS\\\"/g\" ${PHP_INI_DIR}/php.ini                           \u0026\u0026     sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /usr/local/etc/php-fpm.conf                                         \u0026\u0026     sed -i -e \"s/error_log = \\/var\\/log\\/php-fpm.log;/error_log = \\/proc\\/self\\/fd\\/2;/g\" /usr/local/etc/php-fpm.conf       \u0026\u0026     sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" /usr/local/etc/php-fpm.conf                  \u0026\u0026     sed -i -e \"s/pm.max_children = 5/pm.max_children = 24/g\" /usr/local/etc/php-fpm.conf                                     \u0026\u0026     sed -i -e \"s/pm.start_servers = 2/pm.start_servers = 5/g\" /usr/local/etc/php-fpm.conf                                   \u0026\u0026     sed -i -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 5/g\" /usr/local/etc/php-fpm.conf                           \u0026\u0026     sed -i -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 5/g\" /usr/local/etc/php-fpm.conf                           \u0026\u0026     sed -i -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" /usr/local/etc/php-fpm.conf                                \u0026\u0026     sed -i -e \"s/user = nobody/user = www-data/g\" /usr/local/etc/php-fpm.conf                                                  \u0026\u0026     sed -i -e \"s/group = nobody/group = www-data/g\" /usr/local/etc/php-fpm.conf                                                \u0026\u0026     sed -i -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" /usr/local/etc/php-fpm.conf                                      \u0026\u0026     sed -i -e \"s/;listen.owner = nobody/listen.owner = www-data/g\" /usr/local/etc/php-fpm.conf                                 \u0026\u0026     sed -i -e \"s/;listen.group = nobody/listen.group = www-data/g\" /usr/local/etc/php-fpm.conf                                 \u0026\u0026     sed -i -e \"s/;pm.status_path = \\/status/pm.status_path = \\/status/g\" /usr/local/etc/php-fpm.conf                           \u0026\u0026     sed -i -e \"s/;ping.path = \\/ping/ping.path = \\/ping/g\" /usr/local/etc/php-fpm.conf                                         \u0026\u0026     sed -i -e \"s/;ping.response = pong /ping.response = pong g/g\" /usr/local/etc/php-fpm.conf                                  \u0026\u0026     sed -i -e \"s/;opcache.enable_cli=.*/opcache.enable_cli=1/\" ${PHP_INI_DIR}/php.ini                                        \u0026\u0026     sed -i -e \"s/;opcache.memory_consumption=.*/opcache.memory_consumption=512/\" ${PHP_INI_DIR}/php.ini                      \u0026\u0026     sed -i -e \"s/;opcache.interned_strings_buffer=.*/opcache.interned_strings_buffer=8/\" ${PHP_INI_DIR}/php.ini            \u0026\u0026     sed -i -e \"s/;opcache.max_accelerated_files=.*/opcache.max_accelerated_files=8192/\" ${PHP_INI_DIR}/php.ini            \u0026\u0026     sed -i -e \"s/;opcache.revalidate_path=.*/opcache.revalidate_path=1/\" ${PHP_INI_DIR}/php.ini                              \u0026\u0026     sed -i -e \"s/;opcache.fast_shutdown=.*/opcache.fast_shutdown=1/\" ${PHP_INI_DIR}/php.ini                                  \u0026\u0026     sed -i -e \"s/;opcache.enable_file_override=.*/opcache.enable_file_override=1/\" ${PHP_INI_DIR}/php.ini                    \u0026\u0026     sed -i -e \"s/;opcache.validate_timestamps=.*/;opcache.validate_timestamps=1/\" ${PHP_INI_DIR}/php.ini                     \u0026\u0026     sed -i -e \"s/;opcache.revalidate_freq=.*/opcache.revalidate_freq=0/\" ${PHP_INI_DIR}/php.ini                              \u0026\u0026     rm -Rf /etc/nginx/conf.d/*                \u0026\u0026     rm -Rf /etc/nginx/sites-available/default \u0026\u0026     mkdir -p /etc/nginx/ssl/                  \u0026\u0026     find ${PHP_INI_DIR}/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/nginx-install.sh",
            "./docker/nginx.patch",
            "/usr/local/src/"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/src/nginx-install.sh   \u0026\u0026 rm -rf /usr/local/src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime  \u0026\u0026 echo Asia/Jakarta \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update;     apt-get install -y locales"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen  sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen  \u0026\u0026 locale-gen en_US.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y ansible; \trm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"123123\" \u003e /tmp/.ansible"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./docker/nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "CmdLine": [
            "mkdir -p /var/www/vendor \u0026\u0026     mkdir -p /var/cache/nginx/ \u0026\u0026     chown -R www-data:www-data /var/cache/nginx/ \u0026\u0026     touch /var/log/php-fpm.log \u0026\u0026     chown -R www-data:www-data /var/www \u0026\u0026     chown -R www-data:www-data /var/log/nginx/ \u0026\u0026     chown -R www-data:www-data /var/run/nginx/ \u0026\u0026     chown -R www-data:www-data /var/log/php-fpm.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./scripts/compress",
            "/bin/compress"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /bin/compress"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker/rootfs",
            "/"
          ]
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "./scripts/entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}