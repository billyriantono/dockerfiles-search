MetaArgs: null
Stages:
- BaseName: node:8-stretch
  Commands:
  - Env:
    - Key: APP_DIRECTORY
      Value: /app
    Name: env
  - Name: workdir
    Path: $APP_DIRECTORY
  - Env:
    - Key: POLYFILL_SERVICE_VERSION
      Value: 3.25.1
    Name: env
  - CmdLine:
    - wget https://github.com/Financial-Times/polyfill-service/archive/v$POLYFILL_SERVICE_VERSION.tar.gz
      -P /tmp   && tar -xzf /tmp/v$POLYFILL_SERVICE_VERSION.tar.gz -C /app/ --strip-components=1   &&
      rm -f /tmp/v$POLYFILL_SERVICE_VERSION.tar.gz
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_ENV
      Value: production
    Name: env
  - CmdLine:
    - npm install --production
    Name: run
    PrependShell: true
  - CmdLine:
    - npm run build
    Name: run
    PrependShell: true
  - Env:
    - Key: NGINX_VERSION
      Value: 1.12.1-1~stretch
    Name: env
  - Env:
    - Key: NJS_VERSION
      Value: 1.12.1.0.1.10-1~stretch
    Name: env
  - CmdLine:
    - 'set -x   && apt-get update   && apt-get install --no-install-recommends --no-install-suggests
      -y gnupg2   &&   NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62;   found='''';   for
      server in   ha.pool.sks-keyservers.net   hkp://keyserver.ubuntu.com:80   hkp://p80.pool.sks-keyservers.net:80   pgp.mit.edu   ;
      do   echo "Fetching GPG key $NGINX_GPGKEY from $server";   apt-key adv --keyserver
      "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes
      && break;   done;   test -z "$found" && echo >&2 "error: failed to fetch GPG
      key $NGINX_GPGKEY" && exit 1;   apt-get remove --purge --auto-remove -y gnupg2
      && rm -rf /var/lib/apt/lists/*   && dpkgArch="$(dpkg --print-architecture)"   &&
      nginxPackages="   nginx=${NGINX_VERSION}   nginx-module-xslt=${NGINX_VERSION}   nginx-module-geoip=${NGINX_VERSION}   nginx-module-image-filter=${NGINX_VERSION}   nginx-module-njs=${NJS_VERSION}   "   &&
      case "$dpkgArch" in   amd64|i386)   echo "deb http://nginx.org/packages/debian/
      stretch nginx" >> /etc/apt/sources.list   && apt-get update   ;;   *)   echo
      "deb-src http://nginx.org/packages/debian/ stretch nginx" >> /etc/apt/sources.list     &&
      tempDir="$(mktemp -d)"   && chmod 777 "$tempDir"     && savedAptMark="$(apt-mark
      showmanual)"     && apt-get update   && apt-get build-dep -y $nginxPackages   &&
      (   cd "$tempDir"   && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"   apt-get
      source --compile $nginxPackages   )     && apt-mark showmanual | xargs apt-mark
      auto > /dev/null   && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;
      }     && ls -lAFh "$tempDir"   && ( cd "$tempDir" && dpkg-scanpackages . > Packages
      )   && grep ''^Package: '' "$tempDir/Packages"   && echo "deb [ trusted=yes
      ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list   && apt-get -o Acquire::GzipIndexes=false
      update   ;;   esac     && apt-get install --no-install-recommends --no-install-suggests
      -y   $nginxPackages   gettext-base   && rm -rf /var/lib/apt/lists/*     && if
      [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove   && rm -rf "$tempDir"
      /etc/apt/sources.list.d/temp.list;   fi'
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -sf /dev/stdout /var/log/nginx/access.log   && ln -sf /dev/stderr /var/log/nginx/error.log
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - etc/nginx/
    - /etc/nginx/
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker.sh
    - $APP_DIRECTORY
  - CmdLine:
    - sh
    - docker.sh
    Name: cmd
    PrependShell: false
  From:
    Image: node:8-stretch
  Name: ""
  Platform: ""
  SourceCode: FROM node:8-stretch
