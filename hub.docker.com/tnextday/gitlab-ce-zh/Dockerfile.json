{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "gitlab/gitlab-ce:10.1.1-ce.0",
      "SourceCode": "FROM gitlab/gitlab-ce:10.1.1-ce.0",
      "Platform": "",
      "From": {
        "Image": "gitlab/gitlab-ce:10.1.1-ce.0"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_VERSION",
              "Value": "v10.1.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GITLAB_ZH_VERSION",
              "Value": "${GITLAB_VERSION}-zh"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -xe     \u0026\u0026 export DEBIAN_FRONTEND=noninteractive     \u0026\u0026 apt-get update     \u0026\u0026 apt-get install -yqq locales tzdata     \u0026\u0026 locale-gen en_US.UTF-8     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US:en"
            },
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Shanghai"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GITLAB_DIR",
              "Value": "/opt/gitlab/embedded/service/gitlab-rails"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GITLAB_ZH_GIT",
              "Value": "https://gitlab.com/xhang/gitlab.git"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -xe     \u0026\u0026 echo \" # Preparing ...\"     \u0026\u0026 export DEBIAN_FRONTEND=noninteractive     \u0026\u0026 export SSL_CERT_DIR=/etc/ssl/certs/     \u0026\u0026 export GIT_SSL_CAPATH=/etc/ssl/certs/     \u0026\u0026 curl -sL https://deb.nodesource.com/setup_6.x | bash -     \u0026\u0026 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -     \u0026\u0026 echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list     \u0026\u0026 apt-get update     \u0026\u0026 export buildDeps='lsb-release patch nodejs python build-essential yarn cmake'     \u0026\u0026 apt-get install -yqq $buildDeps     \u0026\u0026 echo \" # Generating translation patch ...\"     \u0026\u0026 cd /tmp     \u0026\u0026 git clone ${GITLAB_ZH_GIT} gitlab     \u0026\u0026 cd gitlab     \u0026\u0026 export IGNORE_DIRS=':!spec :!features :!.gitignore :!locale :!app/assets/javascripts/locale'     \u0026\u0026 git diff ${GITLAB_VERSION}..${GITLAB_ZH_VERSION} -- .  ${IGNORE_DIRS} \u003e ../zh_CN.diff     \u0026\u0026 echo \" # Patching ...\"     \u0026\u0026 patch -d ${GITLAB_DIR} -p1 \u003c ../zh_CN.diff     \u0026\u0026 echo \" # Copy locale files ...\"     \u0026\u0026 cp -R locale ${GITLAB_DIR}/     \u0026\u0026 echo \" # Regenerating the assets\"     \u0026\u0026 cd ${GITLAB_DIR}     \u0026\u0026 cp config/gitlab.yml.example config/gitlab.yml     \u0026\u0026 cp config/database.yml.postgresql config/database.yml     \u0026\u0026 cp config/secrets.yml.example config/secrets.yml     \u0026\u0026 export NODE_ENV=production     \u0026\u0026 export RAILS_ENV=production     \u0026\u0026 export SETUP_DB=false     \u0026\u0026 export USE_DB=false     \u0026\u0026 export SKIP_STORAGE_VALIDATION=true     \u0026\u0026 export WEBPACK_REPORT=true     \u0026\u0026 export NO_COMPRESSION=true     \u0026\u0026 export NO_PRIVILEGE_DROP=true     \u0026\u0026 bundle exec rake gettext:pack     \u0026\u0026 bundle exec rake gettext:po_to_json     \u0026\u0026 yarn install --production --pure-lockfile     \u0026\u0026 bundle exec rake gitlab:assets:compile     \u0026\u0026 echo \" # Cleaning ...\"     \u0026\u0026 yarn cache clean     \u0026\u0026 rm -rf log         tmp         config/gitlab.yml         config/database.yml         config/secrets.yml         .secret         .gitlab_shell_secret         .gitlab_workhorse_secret         node_modules     \u0026\u0026 apt-get purge -y --auto-remove         -o APT::AutoRemove::RecommendsImportant=false         -o APT::AutoRemove::SuggestsImportant=false         $buildDeps     \u0026\u0026 find /usr/lib/ -name __pycache__ | xargs rm -rf     \u0026\u0026 rm -rf /tmp/gitlab /tmp/*.diff /root/.cache /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}