{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:7",
      "SourceCode": "FROM centos:7",
      "Platform": "",
      "From": {
        "Image": "centos:7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "Maintainer": "ManageIQ https://github.com/ManageIQ/manageiq-appliance-build",
          "Name": "maintainer"
        },
        {
          "Key": "REF",
          "Name": "arg",
          "Value": "master"
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RUBY_GEMS_ROOT",
              "Value": "/opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "APP_ROOT",
              "Value": "/var/www/miq/vmdb"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "APPLIANCE_ROOT",
              "Value": "/opt/manageiq/manageiq-appliance"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SUI_ROOT",
              "Value": "/opt/manageiq/manageiq-ui-service"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGRTMIN+3"
        },
        {
          "CmdLine": [
            "curl -sSLko /etc/yum.repos.d/manageiq-ManageIQ-Fine-epel-7.repo       https://copr.fedorainfracloud.org/coprs/manageiq/ManageIQ-Fine/repo/epel-7/manageiq-ManageIQ-Fine-epel-7.repo"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \u0026\u0026     yum -y install centos-release-scl-rh \u0026\u0026     yum -y install --setopt=tsflags=nodocs                    bison                                      bzip2                                      cmake                                      file                                       gcc-c++                                    git                                        libcurl-devel                              libffi-devel                               libtool                                    libxml2-devel                              libxslt-devel                              libyaml-devel                              make                                       memcached                                  net-tools                                  nodejs                                     openssl-devel                              openscap-scanner                           patch                                      rh-postgresql95-postgresql-server                    rh-postgresql95-postgresql-devel                     rh-postgresql95-postgresql-pglogical                    rh-postgresql95-repmgr                     readline-devel                             sqlite-devel                               sysvinit-tools                             which                                      httpd                                      mod_ssl                                    mod_auth_kerb                              mod_authnz_pam                             mod_intercept_form_submit                    mod_lookup_identity                        initscripts                                npm                                        chrony                                     psmisc                                     lvm2                                       openldap-clients                           gdbm-devel                                 cronie                                     logrotate                                  http-parser                                openssh-clients                            openssh-server                             \u0026\u0026                          yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/opt/rh/rh-postgresql95/lib/pgsql/data"
          ]
        },
        {
          "CmdLine": [
            "(cd /lib/systemd/system/sysinit.target.wants \u0026\u0026 for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -vf $i; done) \u0026\u0026     rm -vf /lib/systemd/system/multi-user.target.wants/* \u0026\u0026     rm -vf /etc/systemd/system/*.wants/* \u0026\u0026     rm -vf /lib/systemd/system/local-fs.target.wants/* \u0026\u0026     rm -vf /lib/systemd/system/sockets.target.wants/*udev* \u0026\u0026     rm -vf /lib/systemd/system/sockets.target.wants/*initctl* \u0026\u0026     rm -vf /lib/systemd/system/basic.target.wants/* \u0026\u0026     rm -vf /lib/systemd/system/anaconda.target.wants/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ssh-keygen -q -t dsa -N '' -f /etc/ssh/ssh_host_dsa_key \u0026\u0026     ssh-keygen -q -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key \u0026\u0026     ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \u0026\u0026     cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \u0026\u0026     for key in /etc/ssh/ssh_host_*_key.pub; do echo \"localhost $(cat ${key})\" \u003e\u003e /root/.ssh/known_hosts; done \u0026\u0026     echo \"root:smartvm\" | chpasswd \u0026\u0026     chmod 700 /root/.ssh \u0026\u0026     chmod 600 /root/.ssh/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -sL https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz | tar xz \u0026\u0026     cd chruby-0.3.9 \u0026\u0026     make install \u0026\u0026     scripts/setup.sh \u0026\u0026     echo \"gem: --no-ri --no-rdoc --no-document\" \u003e ~/.gemrc \u0026\u0026     echo \"source /usr/local/share/chruby/chruby.sh\" \u003e\u003e ~/.bashrc \u0026\u0026     curl -sL https://github.com/postmodern/ruby-install/archive/v0.6.0.tar.gz | tar xz \u0026\u0026     cd ruby-install-0.6.0 \u0026\u0026     make install \u0026\u0026     ruby-install ruby 2.3.1 -- --disable-install-doc \u0026\u0026     echo \"chruby ruby-2.3.1\" \u003e\u003e ~/.bash_profile \u0026\u0026     rm -rf /chruby-* \u0026\u0026     rm -rf /usr/local/src/* \u0026\u0026     yum clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ${APP_ROOT} \u0026\u0026     mkdir -p ${APPLIANCE_ROOT} \u0026\u0026     mkdir -p ${SUI_ROOT} \u0026\u0026     ln -vs ${APP_ROOT} /opt/manageiq/manageiq \u0026\u0026     curl -L https://github.com/ManageIQ/manageiq-appliance/tarball/${REF} | tar vxz -C ${APPLIANCE_ROOT} --strip 1 \u0026\u0026     curl -L https://github.com/ManageIQ/manageiq-ui-service/tarball/${REF} | tar vxz -C ${SUI_ROOT} --strip 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".",
            "${APP_ROOT}"
          ]
        },
        {
          "CmdLine": [
            "${APPLIANCE_ROOT}/setup \u0026\u0026     echo \"export PATH=\\$PATH:/opt/rubies/ruby-2.3.1/bin\" \u003e\u003e /etc/default/evm \u0026\u0026     mkdir ${APP_ROOT}/log/apache \u0026\u0026     mv /etc/httpd/conf.d/ssl.conf{,.orig} \u0026\u0026     echo \"# This file intentionally left blank. ManageIQ maintains its own SSL configuration\" \u003e /etc/httpd/conf.d/ssl.conf \u0026\u0026     cp ${APP_ROOT}/config/cable.yml.sample ${APP_ROOT}/config/cable.yml \u0026\u0026     echo \"export APP_ROOT=${APP_ROOT}\" \u003e\u003e /etc/default/evm \u0026\u0026     echo \"export CONTAINER=true\" \u003e\u003e /etc/default/evm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "${APP_ROOT}"
        },
        {
          "CmdLine": [
            "source /etc/default/evm \u0026\u0026     export RAILS_USE_MEMORY_STORE=\"true\" \u0026\u0026     npm install bower yarn -g \u0026\u0026     gem install bundler --conservative \u0026\u0026     bundle install \u0026\u0026     rake update:ui \u0026\u0026     bin/rails log:clear tmp:clear \u0026\u0026     rake evm:compile_assets \u0026\u0026     rake evm:compile_sti_loader \u0026\u0026     npm cache clean \u0026\u0026     bower cache clean \u0026\u0026     find ${RUBY_GEMS_ROOT}/gems/ -name .git | xargs rm -rvf \u0026\u0026     find ${RUBY_GEMS_ROOT}/gems/ | grep \"\\.s\\?o$\" | xargs rm -rvf \u0026\u0026     rm -rvf ${RUBY_GEMS_ROOT}/gems/rugged-*/vendor/libgit2/build \u0026\u0026     rm -rvf ${RUBY_GEMS_ROOT}/cache/* \u0026\u0026     rm -rvf /root/.bundle/cache \u0026\u0026     rm -rvf ${APP_ROOT}/tmp/cache/assets \u0026\u0026     rm -vf ${APP_ROOT}/log/*.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "source /etc/default/evm \u0026\u0026     cd ${SUI_ROOT} \u0026\u0026     yarn install \u0026\u0026     yarn run build \u0026\u0026     yarn cache clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-assets/appliance-initialize.service",
            "/usr/lib/systemd/system"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-assets/appliance-initialize.sh",
            "/bin"
          ]
        },
        {
          "CmdLine": [
            "ln -s /var/www/miq/vmdb/docker-assets/docker_initdb /usr/bin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "systemctl enable memcached appliance-initialize evmserverd evminit evm-watchdog miqvmstat miqtop crond sshd"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22",
            "443",
            "80"
          ]
        },
        {
          "Labels": [
            {
              "Key": "name",
              "Value": "\"manageiq\""
            },
            {
              "Key": "vendor",
              "Value": "\"ManageIQ\""
            },
            {
              "Key": "version",
              "Value": "\"Master\""
            },
            {
              "Key": "release",
              "Value": "${REF}"
            },
            {
              "Key": "architecture",
              "Value": "\"x86_64\""
            },
            {
              "Key": "url",
              "Value": "\"http://manageiq.org/\""
            },
            {
              "Key": "summary",
              "Value": "\"ManageIQ appliance image\""
            },
            {
              "Key": "description",
              "Value": "\"ManageIQ is a management and automation platform for virtual, private, and hybrid cloud infrastructures.\""
            },
            {
              "Key": "INSTALL",
              "Value": "'docker run -ti                 --name ${NAME}_volume                 --entrypoint /usr/bin/docker_initdb                 $IMAGE'"
            },
            {
              "Key": "RUN",
              "Value": "'docker run -di             --name ${NAME}_run             -v /etc/localtime:/etc/localtime:ro             --volumes-from ${NAME}_volume             -p 80:80             -p 443:443             $IMAGE'"
            },
            {
              "Key": "STOP",
              "Value": "'docker stop ${NAME}_run \u0026\u0026 echo \"Container ${NAME}_run has been stopped\"'"
            },
            {
              "Key": "UNINSTALL",
              "Value": "'docker rm -v ${NAME}_volume ${NAME}_run \u0026\u0026 echo \"Uninstallation complete\"'"
            }
          ],
          "Name": "label"
        },
        {
          "Labels": [
            {
              "Key": "io.k8s.description",
              "Value": "\"ManageIQ is a management and automation platform for virtual, private, and hybrid cloud infrastructures.\""
            },
            {
              "Key": "io.k8s.display-name",
              "Value": "\"ManageIQ\""
            },
            {
              "Key": "io.openshift.expose-services",
              "Value": "\"443:https\""
            },
            {
              "Key": "io.openshift.tags",
              "Value": "\"ManageIQ,miq,manageiq\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "/usr/sbin/init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}