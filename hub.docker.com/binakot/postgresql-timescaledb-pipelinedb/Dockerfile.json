{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "postgres:11.3-alpine",
      "SourceCode": "FROM postgres:11.3-alpine",
      "Platform": "",
      "From": {
        "Image": "postgres:11.3-alpine"
      },
      "Commands": [
        {
          "Maintainer": "Ivan Muratov, binakot@gmail.com",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "TIMESCALEDB_VERSION",
              "Value": "1.3.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "TIMESCALEDB_SHA256",
              "Value": "9a773f40c7109694ffb9f2eb2c306e70dd04079c010d276c4d60ae88433a6b4c"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk add --no-cache --virtual .fetch-deps         ca-certificates         openssl         openssl-dev         tar     \u0026\u0026 apk add --no-cache --virtual .build-deps         make         cmake         gcc         dpkg         dpkg-dev         util-linux-dev         libc-dev         coreutils         \u0026\u0026 wget -O timescaledb.tar.gz \"https://github.com/timescale/timescaledb/archive/$TIMESCALEDB_VERSION.tar.gz\"     \u0026\u0026 echo \"$TIMESCALEDB_SHA256 *timescaledb.tar.gz\" | sha256sum -c -     \u0026\u0026 mkdir -p /usr/src/timescaledb     \u0026\u0026 tar         --extract         --file timescaledb.tar.gz         --directory /usr/src/timescaledb         --strip-components 1     \u0026\u0026 rm timescaledb.tar.gz         \u0026\u0026 cd /usr/src/timescaledb     \u0026\u0026 ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\"     \u0026\u0026 cd ./build \u0026\u0026 make install         \u0026\u0026 cd /     \u0026\u0026 rm -rf /usr/src/timescaledb     \u0026\u0026 apk del .fetch-deps .build-deps     \u0026\u0026 sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'timescaledb,\\2'/;s/,'/'/\" /usr/local/share/postgresql/postgresql.conf.sample"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PIPELINEDB_VERSION",
              "Value": "1.0.0-13"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PIPELINEDB_SHA256",
              "Value": "b97142df8d6a9dff90e7233abe3d9c2005ff9c6b5deee32ce2f4262344f5efa0"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex     \u0026\u0026 apk add --no-cache --virtual .fetch-deps         ca-certificates         openssl         openssl-dev         tar     \u0026\u0026 apk add --no-cache --virtual .build-deps         make         g++         libc-dev         libexecinfo-dev         postgresql-dev         zeromq-dev         \u0026\u0026 wget -O pipelinedb.tar.gz \"https://github.com/pipelinedb/pipelinedb/archive/$PIPELINEDB_VERSION.tar.gz\"     \u0026\u0026 echo \"$PIPELINEDB_SHA256 *pipelinedb.tar.gz\" | sha256sum -c -     \u0026\u0026 mkdir -p /usr/src/pipelinedb     \u0026\u0026 tar         --extract         --file pipelinedb.tar.gz         --directory /usr/src/pipelinedb         --strip-components 1     \u0026\u0026 rm pipelinedb.tar.gz         \u0026\u0026 cd /usr/src/pipelinedb         \u0026\u0026 sed -i -e 's#/usr/lib/libzmq.a -lstdc++#-lzmq -lstdc++ -fPIC#g' Makefile     \u0026\u0026 sed -i -e '/^\\s*size_t size = backtrace(array, 32);$/i #ifdef GLIBC' src/scheduler.c     \u0026\u0026 sed -i -e '/^\\s*backtrace_symbols_fd(array, size, STDERR_FILENO);$/a #endif' src/scheduler.c     \u0026\u0026 sed -n 126,138p src/scheduler.c         \u0026\u0026 make USE_PGXS=1     \u0026\u0026 make install         \u0026\u0026 cd /     \u0026\u0026 rm -rf /usr/src/pipelinedb     \u0026\u0026 apk del .fetch-deps .build-deps     \u0026\u0026 apk add --no-cache libexecinfo libzmq     \u0026\u0026 sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'pipelinedb,\\2'/;s/,'/'/\" /usr/local/share/postgresql/postgresql.conf.sample"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./init-timescaledb.sh",
            "/docker-entrypoint-initdb.d/1.timescaledb.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./init-pipelinedb.sh",
            "/docker-entrypoint-initdb.d/2.pipelinedb.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./init-postgres.sh",
            "/docker-entrypoint-initdb.d/3.postgres.sh"
          ]
        }
      ]
    }
  ]
}