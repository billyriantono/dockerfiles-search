{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "nvidia/cuda:8.0-cudnn7-devel-ubuntu16.04",
      "SourceCode": "FROM nvidia/cuda:8.0-cudnn7-devel-ubuntu16.04",
      "Platform": "",
      "From": {
        "Image": "nvidia/cuda:8.0-cudnn7-devel-ubuntu16.04"
      },
      "Commands": [
        {
          "CmdLine": [
            "apt update -qq \u0026\u0026     apt install -qqy software-properties-common \u0026\u0026     add-apt-repository ppa:jonathonf/python-3.6 \u0026\u0026     apt update -qq \u0026\u0026     apt install -qqy python3.6 python3.6-dev curl git nginx"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -Os https://bootstrap.pypa.io/get-pip.py \u0026\u0026     python3.6 get-pip.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3.6 install setuptools colorama simplejson falcon gunicorn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/snobu/azure-documentdb-python \u0026\u0026     cd azure-documentdb-python \u0026\u0026 python3.6 -m easy_install ."
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /app"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /app/frontend/results /app/frontend/uploads"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "api/",
            "/app/api"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "api/data/",
            "/app/data"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "api/libdarknet/",
            "/app/api/libdarknet"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "frontend/",
            "/app/frontend"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "bootstrap.sh",
            "/app/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "LICENSE",
            "/app/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "Makefile.patch",
            "/app/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/app/"
          ]
        },
        {
          "CmdLine": [
            "git clone --depth 1 https://github.com/pjreddie/darknet"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "darknet"
        },
        {
          "CmdLine": [
            "patch -p1 Makefile \u003c /app/Makefile.patch \u0026\u0026     echo '\\n\\nCompiling Darknet53 (Yolov3) with CUDA...\\n' \u0026\u0026     make \u0026\u0026     echo '______ libdarknet (with CUDA) ______' \u0026\u0026     echo 'ldd: ' \u0026\u0026     du -sh libdarknet.so \u0026\u0026     ldd libdarknet.so \u0026\u0026     echo '____________________________________' \u0026\u0026     cp -v libdarknet.so /app/api/libdarknet/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/app/api"
        },
        {
          "CmdLine": [
            "/bin/sh",
            "/app/bootstrap.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        }
      ]
    }
  ]
}