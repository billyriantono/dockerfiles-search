{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "kaggle/juliabuild",
      "SourceCode": "FROM kaggle/juliabuild",
      "Platform": "",
      "From": {
        "Image": "kaggle/juliabuild"
      },
      "Commands": [
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "package_installs.jl",
            "/tmp/package_installs.jl"
          ]
        },
        {
          "CmdLine": [
            "cd /usr/local/src/julia \u0026\u0026 make \u0026\u0026 make install \u0026\u0026      ln -s /usr/local/src/julia/julia /usr/local/bin/julia \u0026\u0026      julia /tmp/package_installs.jl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "julia -e \"Base.compilecache(\\\"BinDeps\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Cairo\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Calculus\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Clustering\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Compose\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"DataArrays\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"DataFrames\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"DataFramesMeta\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Dates\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"DecisionTree\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Distributions\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Distances\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"GLM\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"HDF5\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"HypothesisTests\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"JSON\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"KernelDensity\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Loess\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Lora\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"MLBase\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"MultivariateStats\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"NMF\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Optim\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"PDMats\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"RDatasets\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"SQLite\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"StatsBase\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"TextAnalysis\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"TimeSeries\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"ZipFile\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Gadfly\\\")\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "julia -e \"Base.compilecache(\\\"MachineLearning\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Lora\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"MLBase\\\")\" \u0026\u0026     julia -e \"Base.compilecache(\\\"Clustering\\\")\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y python-pip python-dev libcurl4-openssl-dev \u0026\u0026         pip install jupyter pycurl \u0026\u0026         cd /usr/local/src \u0026\u0026 git clone https://github.com/jupyter/nbconvert.git \u0026\u0026         cd nbconvert \u0026\u0026 python setup.py install \u0026\u0026         julia -e \"Pkg.add(\\\"IJulia\\\")\" \u0026\u0026         julia -e \"Pkg.build(\\\"IJulia\\\")\" \u0026\u0026         mkdir -p /root/.jupyter/kernels \u0026\u0026         cp -r /root/.local/share/jupyter/kernels/julia-0.5 /root/.jupyter/kernels \u0026\u0026         touch /root/.jupyter/jupyter_nbconvert_config.py \u0026\u0026 touch /root/.jupyter/migrated \u0026\u0026         julia -e \"Base.compilecache(\\\"IJulia\\\")\" \u0026\u0026         julia -e \"Base.compilecache(\\\"ZMQ\\\")\" \u0026\u0026         julia -e \"Base.compilecache(\\\"Nettle\\\")\" \u0026\u0026         julia -e \"using IJulia\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "julia"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}