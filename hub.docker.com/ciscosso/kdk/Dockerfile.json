{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "build-cache-base",
      "BaseName": "debian:9.5",
      "SourceCode": "FROM debian:9.5 AS build-cache-base",
      "Platform": "",
      "As": "build-cache-base",
      "From": {
        "Image": "debian:9.5"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"rluckie@cisco.com\""
            },
            {
              "Key": "kdk",
              "Value": "\"\""
            }
          ],
          "Name": "label"
        },
        {
          "CmdLine": [
            "echo \"Install OS packages\" \u0026\u0026     apt-get -y update \u0026\u0026 apt-get --no-install-recommends -y install         apache2-utils         apt-transport-https         bash-completion         bc         bridge-utils         ca-certificates         colordiff         ctags         curl         dc         dhcpdump         dialog         dnsutils         dos2unix         fonts-powerline         gcc         gettext         gnupg         gnupg2         htop         less         libcurl4-openssl-dev         libevent-2.0-5         locales         make         man         moreutils         nmap         ntp         ntpdate         openssh-server         perl         python         python-dev         python3         python3-dev         qemu-user-static         ruby         screen         socat         software-properties-common         sudo         systemd         systemd-sysv         tcl         telnet         traceroute         tree         unzip         wget         whois         xauth \u0026\u0026     curl -sSL https://download.docker.com/linux/debian/gpg | apt-key add - \u0026\u0026        add-apt-repository          \"deb [arch=amd64] https://download.docker.com/linux/debian          $(lsb_release -cs)          stable\" \u0026\u0026      export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" \u0026\u0026          echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \u0026\u0026          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \u0026\u0026          apt-get update -y \u0026\u0026 apt-get --no-install-recommends -y install            docker-ce            google-cloud-sdk \u0026\u0026    apt-get -y clean \u0026\u0026 apt-get -y autoremove \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Configuring systemd\" \u0026\u0026         cd /lib/systemd/system/sysinit.target.wants/ \u0026\u0026         ls | grep -v systemd-tmpfiles-setup.service | xargs rm -f \u0026\u0026         rm -f /lib/systemd/system/sockets.target.wants/*udev* \u0026\u0026         systemctl mask --             tmp.mount             etc-hostname.mount             etc-hosts.mount             etc-resolv.conf.mount             -.mount             swap.target             getty.target             getty-static.service             dev-mqueue.mount             cgproxy.service             systemd-tmpfiles-setup-dev.service             systemd-remount-fs.service             systemd-ask-password-wall.path             systemd-logind.service \u0026\u0026                 systemctl mask --                         cron.service                         dbus.service                         exim4.service                         ntp.service \u0026\u0026         systemctl set-default multi-user.target || true \u0026\u0026         sed -ri /etc/systemd/journald.conf -e 's!^#?Storage=.*!Storage=volatile!' \u0026\u0026         localedef -i en_US -f UTF-8 en_US.UTF-8 \u0026\u0026         sed -i 's/#Port 22/Port 2022/' /etc/ssh/sshd_config \u0026\u0026         mkdir /etc/docker \u0026\u0026 echo '{\"storage-driver\": \"vfs\"}' \u003e /etc/docker/daemon.json"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install python-based utils and libs\" \u0026\u0026     curl -sSL https://bootstrap.pypa.io/get-pip.py | python2 \u0026\u0026     pip2.7 install --no-cache-dir -U setuptools \u0026\u0026     pip2.7 install         --no-cache-dir         --ignore-installed six         'ansible==2.6.4'         'awscli==1.16.14'         'boto==2.49.0'         'boto3==1.9.4'         'docker-compose==1.22.0'         'idna==2.6'         'Jinja2==2.10'         'jinja2-cli[yaml]==0.6.0'         'openshift==0.7.1'         'passlib==1.7.1'         'python-neutronclient==6.10.0'         'python-openstackclient==3.16.1'         'pyvmomi==6.7.0.2018.9'         'urllib3==1.22'         'virtualenv==16.0.0'         'yq==2.7.0' \u0026\u0026     curl -sSL https://bootstrap.pypa.io/get-pip.py | python3 \u0026\u0026     pip3.5 install --no-cache-dir -U setuptools \u0026\u0026     pip3.5 install          --no-cache-dir          'ansible==2.6.4'          'awscli==1.16.14'          'boto==2.49.0'          'boto3==1.9.4'          'docker-compose==1.22.0'          'idna==2.6'          'Jinja2==2.10'          'jinja2-cli[yaml]==0.6.0'          'openshift==0.7.1'          'passlib==1.7.1'          'python-neutronclient==6.10.0'          'python-openstackclient==3.16.1'          'pyvmomi==6.7.0.2018.9'          'urllib3==1.22'          'virtualenv==16.0.0'          'yq==2.7.0' \u0026\u0026     rm -rf /root/.cache/pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install apps (with pinned version) that are not provided by the OS packages.\" \u0026\u0026         curl -sSLo dep https://github.com/golang/dep/releases/download/v0.5.0/dep-linux-amd64 \u0026\u0026         chmod a+x dep \u0026\u0026 mv dep /usr/local/bin \u0026\u0026         curl -sSLo direnv https://github.com/direnv/direnv/releases/download/v2.17.0/direnv.linux-amd64 \u0026\u0026         chmod a+x direnv \u0026\u0026 mv direnv /usr/local/bin \u0026\u0026         curl -sSL https://github.com/drone/drone-cli/releases/download/v0.8.6/drone_linux_amd64.tar.gz | tar xz \u0026\u0026         chmod a+x drone \u0026\u0026 mv drone /usr/local/bin \u0026\u0026         curl -sSL https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.4/EasyRSA-3.0.4.tgz | tar xz \u0026\u0026         chmod a+x EasyRSA-* \u0026\u0026 mv EasyRSA-* /usr/local/bin/easyrsa \u0026\u0026         curl -sSLo gomplate https://github.com/hairyhenderson/gomplate/releases/download/v2.8.0/gomplate_linux-amd64 \u0026\u0026         chmod a+x gomplate \u0026\u0026 mv gomplate /usr/local/bin \u0026\u0026         curl -sSL https://github.com/joelpurra/gitslave/archive/v2.0.2-joelpurra-51-g203467d.tar.gz | tar xz \u0026\u0026         chmod a+x gitslave-*/gits \u0026\u0026 cp gitslave-*/gits /usr/local/bin \u0026\u0026 rm -rf gitslave-* \u0026\u0026         curl -sSL https://dl.google.com/go/go1.10.4.linux-amd64.tar.gz | tar -C /usr/local -xz \u0026\u0026         mkdir -p /go \u0026\u0026 chmod a+rw /go \u0026\u0026         curl -sSLO https://github.com/goreleaser/goreleaser/releases/download/v0.86.0/goreleaser_Linux_arm64.tar.gz \u0026\u0026         tar -C /usr/local/bin -xzf goreleaser*.tar.gz goreleaser \u0026\u0026 rm goreleaser*.tar.gz \u0026\u0026         curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz | tar xz \u0026\u0026           chmod a+x linux-amd64/helm \u0026\u0026 mv linux-amd64/helm /usr/local/bin/helm-2.9.1 \u0026\u0026 rm -fr linux-amd64 \u0026\u0026         curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-linux-amd64.tar.gz | tar xz \u0026\u0026           chmod a+x linux-amd64/helm \u0026\u0026 mv linux-amd64/helm /usr/local/bin/helm-2.10.0 \u0026\u0026 rm -fr linux-amd64 \u0026\u0026         ln -s /usr/local/bin/helm-2.10.0 /usr/local/bin/helm \u0026\u0026         curl -sSL https://github.com/gohugoio/hugo/releases/download/v0.48/hugo_0.48_Linux-ARM64.tar.gz | tar xz \u0026\u0026         chmod a+x hugo \u0026\u0026 mv hugo /usr/local/bin/hugo \u0026\u0026         curl -sSLo jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \u0026\u0026         chmod a+x jq \u0026\u0026 mv jq /usr/local/bin/ \u0026\u0026         curl -sSLo kops-1.9.2 https://github.com/kubernetes/kops/releases/download/1.9.2/kops-linux-amd64 \u0026\u0026         chmod a+x kops-1.9.2 \u0026\u0026 mv kops-1.9.2 /usr/local/bin/ \u0026\u0026         curl -sSLo kops-1.10.0 https://github.com/kubernetes/kops/releases/download/1.10.0/kops-linux-amd64 \u0026\u0026         chmod a+x kops-1.10.0 \u0026\u0026 mv kops-1.10.0 /usr/local/bin/ \u0026\u0026         ln -s /usr/local/bin/kops-1.10.0 /usr/local/bin/kops \u0026\u0026         curl -sSLo /usr/local/bin/kubectl-1.10.6 https://storage.googleapis.com/kubernetes-release/release/v1.10.6/bin/linux/amd64/kubectl \u0026\u0026         chmod a+x /usr/local/bin/kubectl-1.10.6 \u0026\u0026         curl -sSLo /usr/local/bin/kubectl-1.11.2 https://storage.googleapis.com/kubernetes-release/release/v1.11.2/bin/linux/amd64/kubectl \u0026\u0026         chmod a+x /usr/local/bin/kubectl-1.11.2 \u0026\u0026         ln -s /usr/local/bin/kubectl-1.11.2 /usr/local/bin/kubectl \u0026\u0026         curl -sSLo kubetail.zip https://github.com/johanhaleby/kubetail/archive/1.6.1.zip \u0026\u0026         unzip -qq kubetail.zip \u0026\u0026 chmod a+x kubetail-1.6.1/kubetail \u0026\u0026 mv kubetail-1.6.1/kubetail /usr/local/bin \u0026\u0026         rm -f kubetail.zip \u0026\u0026         curl -sSLo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64 \u0026\u0026         chmod a+x minikube \u0026\u0026  mv minikube /usr/local/bin/ \u0026\u0026         curl -sSLo terraform.zip https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip \u0026\u0026         unzip -qq terraform.zip \u0026\u0026 chmod a+x terraform \u0026\u0026 mv terraform /usr/local/bin \u0026\u0026 rm -f terraform.zip \u0026\u0026         curl -sSL https://github.com/drwetter/testssl.sh/archive/v2.9.5-7.tar.gz | tar xz \u0026\u0026         mv testssl* /usr/local/share/testssl \u0026\u0026 ln -s /usr/local/share/testssl/testssl.sh /usr/local/bin/testssl \u0026\u0026 chmod a+x /usr/local/bin/testssl \u0026\u0026         curl -sSL https://github.com/TheLocehiliosan/yadm/archive/1.12.0.tar.gz | tar xz \u0026\u0026         mv yadm* /usr/local/share/yadm \u0026\u0026 ln -s /usr/local/share/yadm/yadm /usr/local/bin/yadm \u0026\u0026 chmod a+x /usr/local/bin/yadm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install apps (without pinned version) that are not provided by the OS packages.\" \u0026\u0026         curl -sSLO https://dl.minio.io/client/mc/release/linux-amd64/mc \u0026\u0026         chmod a+x mc \u0026\u0026 mv mc /usr/local/bin"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "build-cache-multistage-goinstall",
      "BaseName": "build-cache-base",
      "SourceCode": "FROM build-cache-base AS build-cache-multistage-goinstall",
      "Platform": "",
      "As": "build-cache-multistage-goinstall",
      "From": {
        "Stage": {
          "Named": "build-cache-base",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Key": "GOPATH",
          "Name": "arg",
          "Value": "/go"
        },
        {
          "CmdLine": [
            "echo \"go get installs\" \u0026\u0026    apt-get -y update \u0026\u0026 apt-get --no-install-recommends -y install git \u0026\u0026    apt-get -y clean \u0026\u0026 apt-get -y autoremove \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/spf13/cobra/cobra"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/kubernetes-incubator/cri-tools/cmd/crictl"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/golang/lint/golint"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/gpmgo/gopm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/vmware/govmomi/govc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/github/hub"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/cisco-sso/mh \u0026\u0026 ln -sf /go/bin/mh /go/bin/multihelm"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/usr/local/go/bin/go get github.com/mikefarah/yq"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf /root/.cache/go-build"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "build-cache-multistage-compiler",
      "BaseName": "build-cache-multistage-goinstall",
      "SourceCode": "FROM build-cache-multistage-goinstall AS build-cache-multistage-compiler",
      "Platform": "",
      "As": "build-cache-multistage-compiler",
      "From": {
        "Stage": {
          "Named": "build-cache-multistage-goinstall",
          "Index": 1
        }
      },
      "Commands": [
        {
          "CmdLine": [
            "echo \"Install OS BUILD packages\" \u0026\u0026     apt-get -y update \u0026\u0026 apt-get --no-install-recommends -y install         autoconf         build-essential         libgnutls28-dev         libncurses5-dev         libz-dev \u0026\u0026    apt-get -y clean \u0026\u0026 apt-get -y autoremove \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Clean out /usr/local\" \u0026\u0026     rm -rf /usr/local/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install git (needs to build first as a dependency).\" \u0026\u0026     curl -sSL https://github.com/git/git/archive/v2.19.0.tar.gz | tar xz \u0026\u0026 cd git-* \u0026\u0026     make configure \u0026\u0026 ./configure --prefix=/usr/local \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd .. \u0026\u0026 rm -fr git-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install emacs.\" \u0026\u0026     curl -sSL http://mirrors.ibiblio.org/gnu/ftp/gnu/emacs/emacs-26.1.tar.gz | tar xz \u0026\u0026 cd emacs-* \u0026\u0026     CANNOT_DUMP=yes ./configure         --prefix=/usr/local         --disable-build-details         --without-all         --without-x         --without-x-toolkit         --without-sound         --with-xml2         --with-zlib         --with-modules         --with-file-notification         --with-gnutls         --with-compress-install \u0026\u0026     make \u0026\u0026 make install \u0026\u0026 cd .. \u0026\u0026 rm -fr emacs-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install vim.\" \u0026\u0026     curl -sSL https://github.com/vim/vim/archive/v8.1.0290.tar.gz | tar xz \u0026\u0026 cd vim-* \u0026\u0026     ./configure        --with-features=huge        --enable-multibyte        --enable-rubyinterp=yes        --enable-pythoninterp=yes        --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu        --enable-python3interp=yes        --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu        --enable-perlinterp=yes        --enable-luainterp=yes        --enable-cscope       --prefix=/usr/local \u0026\u0026     make VIMRUNTIMEDIR=/usr/local/share/vim/vim81 \u0026\u0026 make install \u0026\u0026 cd .. \u0026\u0026 rm -fr vim-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install tmux.\" \u0026\u0026     curl -sSL https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz | tar xz \u0026\u0026 cd libevent-* \u0026\u0026     ./configure \u0026\u0026 make \u0026\u0026  make install \u0026\u0026 cd .. \u0026\u0026 rm -fr libevent-* \u0026\u0026     curl -sSL https://github.com/tmux/tmux/releases/download/2.7/tmux-2.7.tar.gz | tar xz \u0026\u0026 cd tmux-* \u0026\u0026     ./configure --prefix=/usr/local \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 cd .. \u0026\u0026 rm -fr tmux-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install zsh.\" \u0026\u0026     curl -sSL https://sourceforge.net/projects/zsh/files/zsh/5.5.1/zsh-5.5.1.tar.gz/download | tar xz \u0026\u0026 cd zsh-* \u0026\u0026     ./configure --with-tcsetpgrp --prefix=/usr/local \u0026\u0026 make \u0026\u0026 make install \u0026\u0026 echo \"/usr/local/bin/zsh\" \u003e\u003e /etc/shells \u0026\u0026 cd .. \u0026\u0026 rm -fr zsh-*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"Install redis-cli tools.\" \u0026\u0026     curl -sSL http://download.redis.io/releases/redis-4.0.10.tar.gz | tar xz \u0026\u0026 cd redis-* \u0026\u0026     make \u0026\u0026 cp src/redis-cli src/redis-benchmark /usr/local/bin \u0026\u0026 cd .. \u0026\u0026 rm -fr redis-*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "the-final-image",
      "BaseName": "build-cache-base",
      "SourceCode": "FROM build-cache-base AS the-final-image",
      "Platform": "",
      "As": "the-final-image",
      "From": {
        "Stage": {
          "Named": "build-cache-base",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Chown": "",
          "From": "build-cache-multistage-goinstall",
          "Name": "copy",
          "SourcesAndDest": [
            "/go/bin/",
            "/go/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "build-cache-multistage-compiler",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/",
            "/usr/local/"
          ]
        },
        {
          "Chown": "",
          "From": "build-cache-multistage-compiler",
          "Name": "copy",
          "SourcesAndDest": [
            "/etc/shells",
            "/etc/shells"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "usr/local/bin/",
            "/usr/local/bin/"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "2022"
          ]
        },
        {
          "CmdLine": [
            "/lib/systemd/systemd"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}