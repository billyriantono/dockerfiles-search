{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "postgres:10.7",
      "SourceCode": "FROM postgres:10.7",
      "Platform": "",
      "From": {
        "Image": "postgres:10.7"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Shanghai"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "zombodb_jessie_pg10-10-1.0.3_amd64.deb",
            "/"
          ]
        },
        {
          "CmdLine": [
            "apt-get update  \u0026\u0026 apt-get install -y wget  \u0026\u0026 apt-get install -y apt-transport-https  \u0026\u0026 apt-get install -y libcurl4-openssl-dev  \u0026\u0026 apt-get install -y libcurl4-nss-dev  \u0026\u0026 apt-get install -y libcurl4-gnutls-dev  \u0026\u0026 dpkg -i zombodb_jessie_pg10-10-1.0.3_amd64.deb  \u0026\u0026 rm -f zombodb_jessie_pg10-10-1.0.3_amd64.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sh -c \"echo 'deb https://packagecloud.io/timescale/timescaledb/debian/ `lsb_release -c -s` main' \u003e /etc/apt/sources.list.d/timescaledb.list\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | apt-key add -"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y timescaledb-postgresql-10"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONF",
              "Value": "/usr/share/postgresql/postgresql.conf.sample"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "sed -i 's/^#log_destination = '\\''stderr'\\''/log_destination = '\\''stderr'\\''/g' $CONF  \u0026\u0026 sed -i 's/^#log_directory = '\\''log'\\''/log_directory = '\\''\\/log'\\''/g' $CONF  \u0026\u0026 sed -i 's/^#log_rotation_age = 1d/log_rotation_age = 1d/g' $CONF  \u0026\u0026 sed -i 's/^#log_rotation_size = 10MB/log_rotation_size = 100MB/g' $CONF  \u0026\u0026 sed -i 's/^#log_statement = '\\''none'\\''/log_statement = '\\''mod'\\''/g' $CONF  \u0026\u0026 sed -i 's/^#log_lock_waits = off/log_lock_waits = on/g' $CONF  \u0026\u0026 sed -i 's/^#log_min_duration_statement = -1/log_min_duration_statement = 0/g' $CONF  \u0026\u0026 sed -i 's/^#log_checkpoints = off/log_checkpoints = on/g' $CONF  \u0026\u0026 sed -i 's/^#log_duration = off/log_duration = on/g' $CONF  \u0026\u0026 sed -i 's/^#log_min_messages = warning/log_min_messages = warning/g' $CONF  \u0026\u0026 sed -i 's/^#log_min_error_statement = error/log_min_error_statement = error/g' $CONF  \u0026\u0026 sed -i 's/^#log_line_prefix = '\\''%m \\[%p\\] '\\''/log_line_prefix = '\\''%m \\[%p\\] %q%u@%d '\\''/g' $CONF"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i 's/^#wal_level = replica/wal_level = hot_standby/g' $CONF  \u0026\u0026 sed -i 's/^#fsync = on/fsync = off/g' $CONF  \u0026\u0026 sed -i 's/^#hot_standby = on/hot_standby = on/g' $CONF  \u0026\u0026 sed -i 's/^#max_standby_streaming_delay = 30s/max_standby_streaming_delay = 30s/g' $CONF  \u0026\u0026 sed -i 's/^#wal_receiver_status_interval = 10s/wal_receiver_status_interval = 10s/g' $CONF  \u0026\u0026 sed -i 's/^#hot_standby_feedback = off/hot_standby_feedback = on/g' $CONF  \u0026\u0026 sed -i 's/^#archive_command = '\\'''\\''/archive_command = '\\''cp %p \\/var\\/lib\\/postgresql\\/data\\/pg_archive\\/%f'\\''/g' $CONF"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start.sh",
            "/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "init.sh",
            "/docker-entrypoint-initdb.d/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "recovery.conf",
            "/docker-entrypoint-initdb.d"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "docker-entrypoint.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "postgresql.ex.conf",
            "/docker-entrypoint-initdb.d/"
          ]
        },
        {
          "CmdLine": [
            "chown postgres:root /root  \u0026\u0026 chown postgres:root /var/spool/cron/crontabs  \u0026\u0026 chmod +x /usr/local/bin/docker-entrypoint.sh  \u0026\u0026 chmod +x /start.sh  \u0026\u0026 mkdir -p /log \u0026\u0026 chown postgres:postgres /log  \u0026\u0026 mkdir -p /backups \u0026\u0026 chown postgres:postgres /backups"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "BACKUPS",
              "Value": "/backups"
            }
          ],
          "Name": "env"
        }
      ]
    }
  ]
}