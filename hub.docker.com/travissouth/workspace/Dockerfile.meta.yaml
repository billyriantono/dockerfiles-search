MetaArgs: null
Stages:
- BaseName: phusion/baseimage:0.10.1
  Commands:
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_CTYPE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: TERM
      Value: xterm
    Name: env
  - Name: user
    User: root
  - Key: PUID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PUID
      Value: ${PUID}
    Name: env
  - Key: PGID
    Name: arg
    Value: "1000"
  - Env:
    - Key: PGID
      Value: ${PGID}
    Name: env
  - CmdLine:
    - echo ${PGID} && echo ${PUID}
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -g ${PGID} -o daker &&     useradd -o -u ${PUID} -g daker -m daker
      -G docker_env &&     usermod -p "*" daker
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean -y software-properties-common &&     add-apt-repository -y ppa:ondrej/php
    Name: run
    PrependShell: true
  - CmdLine:
    - install_clean -y --allow-downgrades --allow-remove-essential         --allow-change-held-packages         php7.2-cli         php7.2-common         php7.2-curl         php7.2-intl         php7.2-json         php7.2-xml         php7.2-mbstring         php7.2-mysql         php7.2-pgsql         php7.2-sqlite         php7.2-sqlite3         php7.2-zip         php7.2-bcmath         php7.2-memcached         php7.2-gd         php7.2-dev         pkg-config         libcurl4-openssl-dev         libedit-dev         libssl-dev         libxml2-dev         xz-utils         libsqlite3-dev         sqlite3         git         curl         vim         nano         postgresql-client         htop         libmcrypt-dev         openssh-client         libxml2-dev         libpng-dev         g++         make         autoconf
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -s http://getcomposer.org/installer | php &&     echo "export PATH=${PATH}:/var/www/vendor/bin:/usr/local/bin:/home/daker/.composer/vendor/bin"
      > ~/.bashrc &&     mv composer.phar /usr/local/bin/composer &&     chmod +x
      /usr/local/bin/composer
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/var/www/vendor/bin:/usr/local/bin:/home/daker/.composer/vendor/bin
    Name: env
  - Name: user
    User: daker
  - CmdLine:
    - mkdir -p /home/daker/.docker-workspace/.composer/cache
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export PATH=${PATH}:/var/www/vendor/bin:/usr/local/bin:/home/daker/.composer/vendor/bin"
      > ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export COMPOSER_CACHE_DIR=/home/daker/.docker-workspace/.composer/cache"
      >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/var/www/vendor/bin:/usr/local/bin:/home/daker/.composer/vendor/bin
    Name: env
  - Env:
    - Key: COMPOSER_CACHE_DIR
      Value: /home/daker/.docker-workspace/.composer/cache
    Name: env
  - CmdLine:
    - mkdir -p ~/.composer
    Name: run
    PrependShell: true
  - CmdLine:
    - composer global require hirak/prestissimo && composer --version
    Name: run
    PrependShell: true
  - CmdLine:
    - composer global require symfony/config:^3     symfony/console:^3     symfony/event-dispatcher:^3     symfony/finder:^3     symfony/process:^3     symfony/var-dumper:^3     symfony/yaml:^3     symfony/filesystem:^3     travis-south/phpqatools:^3.0     behat/mink-extension     behat/mink-goutte-driver     behat/mink-selenium2-driver     behat/mink-zombie-driver     drupal/coder:^8.2.0     endouble/symfony3-custom-coding-standard     rregeer/phpunit-coverage-check
    Name: run
    PrependShell: true
  - CmdLine:
    - phpcs --config-set installed_paths     $HOME/.composer/vendor/endouble/symfony3-custom-coding-standard,$HOME/.composer/vendor/drupal/coder/coder_sniffer
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - composer global require drush/drush:^9.0 && drush --version
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - composer global require laravel/installer && laravel --version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - curl -sL https://deb.nodesource.com/setup_8.x | bash - &&     install_clean
      nodejs &&     nodejs --version
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - echo "export NPM_CONFIG_USERCONFIG=/home/daker/.docker-workspace/.npmrc" >>
      ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: NPM_CONFIG_USERCONFIG
      Value: /home/daker/.docker-workspace/.npmrc
    Name: env
  - CmdLine:
    - echo "cache=/home/daker/.docker-workspace/npm-cache" >> ~/.docker-workspace/.npmrc
    Name: run
    PrependShell: true
  - CmdLine:
    - nodejs --version &&     npm --version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&     echo
      "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      &&     install_clean yarn &&     yarn --version
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - yarn --version &&     echo "export YARN_CACHE_FOLDER=/home/daker/.docker-workspace/.yarn/cache"
      >> ~/.bashrc &&     echo "export PATH=${PATH}:/home/daker/.yarn/bin" >> ~/.bashrc
      &&     . ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: YARN_CACHE_FOLDER
      Value: /home/daker/.docker-workspace/.yarn/cache
    Name: env
  - Env:
    - Key: PATH
      Value: ${PATH}:/home/daker/.yarn/bin
    Name: env
  - Name: user
    User: root
  - CmdLine:
    - install_clean python-pip &&     python --version &&     pip --version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - pip install --upgrade setuptools &&     pip install ansible &&     ansible --version
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - ansible --version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean groff
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - pip install awscli --upgrade --user
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/home/daker/.local/bin
    Name: env
  - CmdLine:
    - echo "export PATH=${PATH}:/home/daker/.local/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export AWS_CONFIG_FILE=/home/daker/.docker-workspace/.aws/config" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export AWS_SHARED_CREDENTIALS_FILE=/home/daker/.docker-workspace/.aws/credentials"
      >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: AWS_CONFIG_FILE
      Value: /home/daker/.docker-workspace/.aws/config
    Name: env
  - Env:
    - Key: AWS_SHARED_CREDENTIALS_FILE
      Value: /home/daker/.docker-workspace/.aws/credentials
    Name: env
  - CmdLine:
    - . ~/.bashrc &&     aws --version
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean wget &&     export WODBY_CLI_LATEST_URL=$(curl -s https://api.github.com/repos/wodby/wodby-cli/releases/latest
      | grep linux-amd64 | grep browser_download_url | cut -d '"' -f 4) &&     wget
      -qO- "${WODBY_CLI_LATEST_URL}" | tar xz -C /usr/local/bin
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - wodby --help
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - yarn global add babel-eslint eslint typescript tslint
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean unzip     xz-utils     openjdk-8-jre-headless
    Name: run
    PrependShell: true
  - CmdLine:
    - java -version
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /
  - CmdLine:
    - curl -o sonar-scanner-cli.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - unzip sonar-scanner-cli.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - mv sonar-scanner-3.2.0.1227-linux sonar-scanner &&     chmod 777 -R /sonar-scanner
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/local/bin && ln -s /sonar-scanner/bin/sonar-scanner sonar-scanner
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - sonar-scanner.properties
    - /sonar-scanner/conf/sonar-scanner.properties
  - CmdLine:
    - rm -rf /sonar-scanner-cli.zip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /var/www/app
  - Name: user
    User: daker
  - CmdLine:
    - yarn global add tslint-sonarts
    Name: run
    PrependShell: true
  - Env:
    - Key: NODE_PATH
      Value: /usr/lib/node_modules
    Name: env
  - CmdLine:
    - echo "export NODE_PATH=/usr/lib/node_modules" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: SONAR_USER_HOME
      Value: /home/daker/.docker-workspace/.sonar
    Name: env
  - CmdLine:
    - echo "export SONAR_USER_HOME=/home/daker/.docker-workspace/.sonar" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Env:
    - Key: JMETER_HOME
      Value: /opt/jmeter
    - Key: JMETER_VERSION
      Value: "3.3"
    - Key: PATH
      Value: /opt/jmeter/bin/:$PATH
    - Key: PLUGINS_PATH
      Value: /tmp/plugins
    Name: env
  - CmdLine:
    - mkdir -p ${JMETER_HOME}     && wget -O /tmp/jmeter.tgz https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz     &&
      tar -C /tmp -xvzf /tmp/jmeter.tgz     && mv /tmp/apache-jmeter-${JMETER_VERSION}/*
      ${JMETER_HOME}     && rm -rf /tmp/jmeter.tgz /tmp/apache-jmeter-${JMETER_VERSION}
      /var/cache/apk/*     && mkdir -p $PLUGINS_PATH     && wget https://jmeter-plugins.org/files/packages/jpgc-cmd-2.1.zip     &&
      unzip -o -d $PLUGINS_PATH jpgc-cmd-2.1.zip     && cp $PLUGINS_PATH/lib/*.jar
      $JMETER_HOME/lib/     && cp $PLUGINS_PATH/bin/* $JMETER_HOME/bin/     && cp
      $PLUGINS_PATH/lib/ext/*.jar $JMETER_HOME/lib/ext/     && rm -rf $PLUGINS_PATH
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/jmeter/bin/jmeter.sh -n -v     && java -cp /opt/jmeter/lib/ext/jmeter-plugins-manager-0.20.jar
      org.jmeterplugins.repository.PluginManagerCMDInstaller
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/jmeter/bin/PluginsManagerCMD.sh install jpgc-oauth,jpgc-json,jpgc-casutg,jpgc-graphs-additional,jpgc-synthesis
      &&      chmod -R 777 /opt/jmeter
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - Env:
    - Key: JMETER_HOME
      Value: /opt/jmeter
    Name: env
  - CmdLine:
    - echo "export JMETER_HOME=/opt/jmeter" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/opt/jmeter/bin
    Name: env
  - CmdLine:
    - echo "export PATH=${PATH}:/opt/jmeter/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - jmeter -n -v
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean apache2-utils &&     ab -V
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: workdir
    Path: /
  - CmdLine:
    - install_clean openssl libssl-dev zlib1g zlib1g-dev
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -o siege.tar.gz -L http://download.joedog.org/siege/siege-4.0.4.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -zxf siege.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mv siege-4.0.4 siege
    Name: run
    PrependShell: true
  - CmdLine:
    - chmod 777 -R siege
    Name: run
    PrependShell: true
  - CmdLine:
    - cd siege &&     ./configure &&     make &&     make install
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean apt-transport-https &&     curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg
      | apt-key add - &&     touch /etc/apt/sources.list.d/kubernetes.list &&     echo
      "deb http://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
      &&     install_clean kubectl
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - mkdir -p /home/daker/.docker-workspace/.kube &&     touch /home/daker/.docker-workspace/.kube/config
    Name: run
    PrependShell: true
  - Env:
    - Key: KUBECONFIG
      Value: /home/daker/.docker-workspace/.kube/config
    Name: env
  - CmdLine:
    - echo "export KUBECONFIG=/home/daker/.docker-workspace/.kube/config" >> ~/.bashrc
      &&     . ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - curl -o helm-v2.9.1-linux-amd64.tar.gz -L https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz
      &&     tar -zxf helm-v2.9.1-linux-amd64.tar.gz &&     mv linux-amd64/helm /usr/local/bin/
      &&     chmod a+x /usr/local/bin/helm
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - mkdir -p /home/daker/.docker-workspace/.helm
    Name: run
    PrependShell: true
  - Env:
    - Key: HELM_HOME
      Value: /home/daker/.docker-workspace/.helm
    Name: env
  - CmdLine:
    - echo "export HELM_HOME=/home/daker/.docker-workspace/.helm" >> ~/.bashrc &&     .
      ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-get update -y && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g polymer-cli --unsafe-perm
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g @angular/cli
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "8001"
  - Name: user
    User: root
  - CmdLine:
    - npm install -g karma-cli
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g lite-server
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz &&     tar -C /usr/local
      -xzf go1.10.3.linux-amd64.tar.gz
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - Env:
    - Key: PATH
      Value: ${PATH}:/usr/local/go/bin:/home/daker/golang/bin
    Name: env
  - CmdLine:
    - echo "export PATH=${PATH}:/usr/local/go/bin:/home/daker/golang/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /home/daker/golang
    Name: env
  - CmdLine:
    - echo "export GOPATH=/home/daker/golang" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - go get github.com/jsha/minica
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - add-apt-repository ppa:certbot/certbot &&     install_clean certbot
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g source-map-explorer
    Name: run
    PrependShell: true
  - CmdLine:
    - curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - &&     curl
      https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list
      > /etc/apt/sources.list.d/dart_stable.list &&     install_clean dart
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - Env:
    - Key: PATH
      Value: ${PATH}:/usr/lib/dart/bin
    Name: env
  - CmdLine:
    - echo "export PATH=${PATH}:/usr/lib/dart/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/home/daker/.pub-cache/bin
    Name: env
  - CmdLine:
    - echo "export PATH=${PATH}:/home/daker/.pub-cache/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - . ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - pub global activate stagehand &&     pub global activate webdev
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - usermod -a -G tty daker
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g gatsby-cli
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g grunt-cli
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean mysql-client
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g jest
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean jq
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean ca-certificates         software-properties-common         iputils-ping
      &&         curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key
      add - &&         apt-key fingerprint 0EBFCD88 &&         add-apt-repository                 "deb
      [arch=amd64] https://download.docker.com/linux/ubuntu                 $(lsb_release
      -cs)                 stable"
    Name: run
    PrependShell: true
  - CmdLine:
    - install_clean docker-ce
    Name: run
    PrependShell: true
  - CmdLine:
    - usermod -aG docker,root daker
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname
      -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&         chmod +x /usr/local/bin/docker-compose
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - install_clean whois dnsutils
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g react-native-cli create-react-native-app
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - npm install -g expo-cli
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - apt-add-repository -y ppa:rael-gc/rvm &&        install_clean rvm
    Name: run
    PrependShell: true
  - CmdLine:
    - /usr/share/rvm/bin/rvm install ruby 2.6.0
    Name: run
    PrependShell: true
  - Name: user
    User: daker
  - CmdLine:
    - echo "source /usr/share/rvm/scripts/rvm" >> ~/.bashrc
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "export PATH=${PATH}:/usr/share/rvm/rubies/ruby-2.6.0/bin" >> ~/.bashrc
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: ${PATH}:/usr/share/rvm/rubies/ruby-2.6.0/bin
    Name: env
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - workspace-list
    - /usr/local/bin/workspace-list
  - CmdLine:
    - chmod +x /usr/local/bin/workspace-list
    Name: run
    PrependShell: true
  - CmdLine:
    - /usr/local/bin/workspace-list
    Name: cmd
    PrependShell: false
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - entrypoint.sh
    - /entrypoint.sh
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: user
    User: root
  - CmdLine:
    - apt-get update -y && apt-get upgrade -y --allow-unauthenticated && apt-get clean
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  From:
    Image: phusion/baseimage:0.10.1
  Name: ""
  Platform: ""
  SourceCode: FROM phusion/baseimage:0.10.1
