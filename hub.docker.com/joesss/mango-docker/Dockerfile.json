{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "joesss/mango-base:crash",
      "SourceCode": "FROM joesss/mango-base:crash",
      "Platform": "",
      "From": {
        "Image": "joesss/mango-base:crash"
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "DEVICE",
              "Value": "\"Nexus 5X\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "apt-get -qqy update \u0026\u0026 apt-get -qqy install --no-install-recommends     supervisor     socat     x11vnc     openbox     python-numpy     qemu-kvm     ubuntu-vm-builder     libssl1.0-dev     libreadline-dev     cpu-checker  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "API_LEVEL",
          "Name": "arg",
          "Value": "27"
        },
        {
          "Key": "SYS_IMG",
          "Name": "arg",
          "Value": "x86"
        },
        {
          "Key": "IMG_TYPE",
          "Name": "arg",
          "Value": "google_apis"
        },
        {
          "Env": [
            {
              "Key": "API_LEVEL",
              "Value": "$API_LEVEL"
            },
            {
              "Key": "SYS_IMG",
              "Value": "$SYS_IMG"
            },
            {
              "Key": "IMG_TYPE",
              "Value": "$IMG_TYPE"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo y | sdkmanager \"system-images;android-${API_LEVEL};${IMG_TYPE};${SYS_IMG}\" \u0026\u0026     echo y | sdkmanager \"emulator\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "git clone https://github.com/sstephenson/rbenv.git /usr/local/rbenv \u0026\u0026  git clone https://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build \u0026\u0026  git clone https://github.com/jf/rbenv-gemset.git /usr/local/rbenv/plugins/rbenv-gemset \u0026\u0026  /usr/local/rbenv/plugins/ruby-build/install.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/rbenv/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "RBENV_ROOT",
              "Value": "/usr/local/rbenv"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo 'export RBENV_ROOT=/usr/local/rbenv' \u003e\u003e /etc/profile.d/rbenv.sh \u0026\u0026  echo 'export PATH=/usr/local/rbenv/bin:$PATH' \u003e\u003e /etc/profile.d/rbenv.sh \u0026\u0026  echo 'eval \"$(rbenv init -)\"' \u003e\u003e /etc/profile.d/rbenv.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo 'export RBENV_ROOT=/usr/local/rbenv' \u003e\u003e /root/.bashrc \u0026\u0026  echo 'export PATH=/usr/local/rbenv/bin:$PATH' \u003e\u003e /root/.bashrc \u0026\u0026  echo 'eval \"$(rbenv init -)\"' \u003e\u003e /root/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONFIGURE_OPTS",
              "Value": "--disable-install-doc"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/usr/local/rbenv/bin:/usr/local/rbenv/shims:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "eval \"$(rbenv init -)\"; rbenv install 2.3.1 \u0026\u0026  eval \"$(rbenv init -)\"; rbenv global 2.3.1 \u0026\u0026  eval \"$(rbenv init -)\"; gem update --system"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DOCKER_ENV",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget -nv -O noVNC.zip \"https://github.com/novnc/noVNC/archive/v1.0.0.zip\"  \u0026\u0026 unzip -x noVNC.zip  \u0026\u0026 rm noVNC.zip   \u0026\u0026 mv noVNC-1.0.0 noVNC  \u0026\u0026 wget -nv -O websockify.zip \"https://github.com/novnc/websockify/archive/v0.8.0.zip\"  \u0026\u0026 unzip -x websockify.zip  \u0026\u0026 mv websockify-0.8.0 ./noVNC/utils/websockify  \u0026\u0026 rm websockify.zip  \u0026\u0026 ln noVNC/vnc.html noVNC/index.html"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "DISPLAY",
              "Value": ":0"
            },
            {
              "Key": "SCREEN",
              "Value": "0"
            },
            {
              "Key": "SCREEN_WIDTH",
              "Value": "1600"
            },
            {
              "Key": "SCREEN_HEIGHT",
              "Value": "900"
            },
            {
              "Key": "SCREEN_DEPTH",
              "Value": "16"
            },
            {
              "Key": "LOCAL_PORT",
              "Value": "5900"
            },
            {
              "Key": "TARGET_PORT",
              "Value": "6080"
            },
            {
              "Key": "TIMEOUT",
              "Value": "1"
            },
            {
              "Key": "VIDEO_PATH",
              "Value": "/tmp/video"
            },
            {
              "Key": "LOG_PATH",
              "Value": "/var/log/supervisor"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "6080"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "devices",
            "/root/devices"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "src",
            "/root/src"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "supervisord.conf",
            "/root/"
          ]
        },
        {
          "CmdLine": [
            "chmod -R +x /root/src \u0026\u0026 chmod +x /root/supervisord.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Health": {
            "Test": [
              "CMD-SHELL",
              "timeout 40 adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'"
            ],
            "Timeout": 10000000000
          },
          "Name": "healthcheck"
        },
        {
          "CmdLine": [
            "/usr/bin/supervisord --configuration supervisord.conf"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}