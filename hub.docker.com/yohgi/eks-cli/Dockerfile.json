{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "python:3",
      "SourceCode": "FROM python:3",
      "Platform": "",
      "From": {
        "Image": "python:3"
      },
      "Commands": [
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "Env": [
            {
              "Key": "KUBECONFIG",
              "Value": "\"/root/.kube/config\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./scripts",
            "/opt/scripts"
          ]
        },
        {
          "CmdLine": [
            "set -x   \u0026\u0026 KUBECTL_VERSION=\"1.10.3\"   \u0026\u0026 AWS_KUBECTL_RELEASEDATE=\"2018-06-05\"   \u0026\u0026 HELM_VERSION=\"v2.9.1\"   \u0026\u0026 STERN_VERSION=\"1.6.0\"   \u0026\u0026 JQ_VERSION=\"1.5\"   \u0026\u0026 pip install awscli   \u0026\u0026 apt upgrade -y \u0026\u0026 apt update   \u0026\u0026 apt install -y curl bash-completion groff-base less jq git vim   \u0026\u0026 : \"--- kubectl\"   \u0026\u0026 curl -L -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_VERSION}/${AWS_KUBECTL_RELEASEDATE}/bin/linux/amd64/kubectl   \u0026\u0026 chmod +x /usr/local/bin/kubectl   \u0026\u0026 : \"--- heptio-authenticator-aws\"   \u0026\u0026 curl -L -o /usr/local/bin/heptio-authenticator-aws https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_VERSION}/${AWS_KUBECTL_RELEASEDATE}/bin/linux/amd64/heptio-authenticator-aws   \u0026\u0026 chmod +x /usr/local/bin/heptio-authenticator-aws   \u0026\u0026 : \"--- kubectx \u0026 kubens\"   \u0026\u0026 git clone https://github.com/ahmetb/kubectx /tmp/kubectx   \u0026\u0026 mv /tmp/kubectx/kubectx /usr/local/bin/kubectx   \u0026\u0026 mv /tmp/kubectx/kubens /usr/local/bin/kubens   \u0026\u0026 mv /tmp/kubectx/completion/kubectx.bash /etc/bash_completion.d/kubectx   \u0026\u0026 mv /tmp/kubectx/completion/kubens.bash /etc/bash_completion.d/kubens   \u0026\u0026 : \"--- helm\"   \u0026\u0026 curl -L https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar zxv -C /tmp   \u0026\u0026 mv /tmp/linux-amd64/helm /usr/local/bin/helm   \u0026\u0026 : \"--- kube_ps1\"   \u0026\u0026 curl -L -o /usr/local/bin/kube-ps1.sh https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh   \u0026\u0026 : \"--- stern\"   \u0026\u0026 curl -L -o /usr/local/bin/stern https://github.com/wercker/stern/releases/download/${STERN_VERSION}/stern_linux_amd64 \u0026\u0026 chmod +x /usr/local/bin/stern   \u0026\u0026 : \"--- jq\"   \u0026\u0026 curl -L -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64   \u0026\u0026 : \"--- fzf\"   \u0026\u0026 git clone --depth 1 https://github.com/junegunn/fzf.git /root/.fzf   \u0026\u0026 yes y | /root/.fzf/install   \u0026\u0026 : \"--- clean cache\"   \u0026\u0026 rm -rf /tmp/*   \u0026\u0026 : \"--- /root/.bashrc\"   \u0026\u0026 cat /dev/null \u003e /root/.bashrc   \u0026\u0026 echo '. /etc/bash_completion' \u003e\u003e /root/.bashrc   \u0026\u0026 echo '. \u003c(kubectl completion bash)' \u003e\u003e /root/.bashrc   \u0026\u0026 echo '. /usr/local/bin/kube-ps1.sh' \u003e\u003e /root/.bashrc   \u0026\u0026 echo '# . ~/.fzf.bash' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PS1=\"\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PS1+=\"[\\$(date +'\\''%Y-%m-%dT%H:%M:%S%z'\\'')] \"'\u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PS1+=\"\\$(kube_ps1) \"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PS1+=\"\\w \"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PS1+=\"\\\\n# \"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export LC_ALL=\"C.UTF-8\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export HISTSIZE=500000' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export HISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export PATH=\"$PATH:/root/.fzf/bin\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'export FZF_DEFAULT_OPTS=\"--height 40% --reverse --border --ansi\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias rm=\"rm -i\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias cp=\"cp -i\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias mv=\"mv -i\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias ls=\"ls --color=auto\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias ll=\"ls -lat --color=always\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias grep=\"grep --color\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias ..=\"cd ..\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias d=\"docker\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'alias k=\"kubectl\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo \"bind '\\\"\\eh\\\": backward-kill-word'\" \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo ====================================================================================================' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo Sample Commands.' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* Create EKS Cluster\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ /opt/scripts/create-cluster.sh \u003cCLUSTER_NAME\u003e\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* Delete EKS Cluster\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ /opt/scripts/delete-cluster.sh \u003cCLUSTER_NAME\u003e\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* list existing clusters\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ aws eks list-clusters\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* If authenticating to an existing cluster\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ /opt/scripts/create-context.sh \u003cCLUSTER_NAME\u003e\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* list existing Kubernetes resources\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ kubectl get all\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* rename current context\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ kubectx \u003cNEW CONTEXT NAME\u003e=.\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"* change Kubernetes Namespace\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo \"  - $ kubens \u003cNAMESPACE\u003e\"' \u003e\u003e /root/.bashrc   \u0026\u0026 echo 'echo ====================================================================================================' \u003e\u003e /root/.bashrc   \u0026\u0026 : \"--- /root/.vimrc\"   \u0026\u0026 echo 'set encoding=utf-8\"' \u003e\u003e /root/.vimrc   \u0026\u0026 echo 'set fenc=utf-8\"' \u003e\u003e /root/.vimrc   \u0026\u0026 echo ':syntax on\"' \u003e\u003e /root/.vimrc   \u0026\u0026  : \"--- /root/.kube/config\"   \u0026\u0026 mkdir -p /root/.kube \u0026\u0026 {       echo 'apiVersion: v1';       echo 'kind: Config';       echo 'preferences: {}';       echo 'current-context: aws';       echo 'clusters:';        echo '- cluster:';       echo '    server: \u003cendpoint-url\u003e';       echo '    certificate-authority-data: \u003cbase64-encoded-ca-cert\u003e';       echo '  name: kubernetes';       echo 'contexts:';       echo '- context:';       echo '    cluster: kubernetes';       echo '    user: aws';       echo '  name: aws';       echo 'users:';       echo '- name: aws';       echo '  user:';       echo '    exec:';       echo '      apiVersion: client.authentication.k8s.io/v1alpha1';       echo '      command: heptio-authenticator-aws';       echo '      args:';       echo '        - \"token\"';       echo '        - \"-i\"';       echo '        - \"\u003ccluster-name\u003e\"';       echo '        # - \"-r\"';       echo '        # - \"\u003crole-arn\u003e\"';     } | tee /root/.kube/config.org"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}