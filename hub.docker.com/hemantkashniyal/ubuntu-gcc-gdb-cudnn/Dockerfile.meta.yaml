MetaArgs: null
Stages:
- BaseName: nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04
  Commands:
  - Maintainer: Hemant Kashniyal <hemantkashniyal@gmail.com>
    Name: maintainer
  - CmdLine:
    - apt-get update && apt-get install -y software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y gcc gdb libc6-dbg gdb valgrind
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y vim git cmake tmux screen
    Name: run
    PrependShell: true
  - Key: INSTALL_LOCATION
    Name: arg
    Value: '''/usr/local'''
  - Key: SETUP_LOCATION
    Name: arg
    Value: '''/tmp/setup'''
  - Key: CPU_CORE
    Name: arg
    Value: "4"
  - CmdLine:
    - mkdir -p ${INSTALL_LOCATION}
    Name: run
    PrependShell: true
  - Key: PROTOBUF_REPO
    Name: arg
    Value: '''https://github.com/google/protobuf.git'''
  - Key: PROTOBUF_CHECKOUT
    Name: arg
    Value: '''tags/v3.6.1'''
  - Key: G3LOG_REPO
    Name: arg
    Value: '''https://github.com/KjellKod/g3log.git'''
  - Key: G3LOG_CHECKOUT
    Name: arg
    Value: '''tags/1.3.2'''
  - Key: ZMQ_REPO
    Name: arg
    Value: '''https://github.com/zeromq/libzmq'''
  - Key: ZMQ_CHECKOUT
    Name: arg
    Value: '''tags/v4.3.0'''
  - Key: CPPZMQ_REPO
    Name: arg
    Value: '''https://github.com/zeromq/cppzmq'''
  - Key: CPPZMQ_CHECKOUT
    Name: arg
    Value: '''tags/v4.3.0'''
  - Key: POCO_REPO
    Name: arg
    Value: '''https://github.com/pocoproject/poco.git'''
  - Key: POCO_CHECKOUT
    Name: arg
    Value: '''tags/poco-1.9.0-release'''
  - Key: OPENCV_REPO
    Name: arg
    Value: '''https://github.com/opencv/opencv.git'''
  - Key: OPENCV_CHECKOUT
    Name: arg
    Value: '''3.4'''
  - Key: PROTOBUF_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/PROTOBUF'
  - CmdLine:
    - apt-get install -y autoconf automake libtool curl make g++ unzip &&     git
      clone ${PROTOBUF_REPO} ${PROTOBUF_SETUP_PATH} &&     cd ${PROTOBUF_SETUP_PATH}
      && git checkout ${PROTOBUF_CHECKOUT} && git submodule update --init --recursive
      &&     ./autogen.sh &&     ./configure --prefix=${INSTALL_LOCATION} &&     make
      -j${CPU_CORE} &&     make -j${CPU_CORE} check &&     make install &&     ldconfig
      &&     rm -rf ${PROTOBUF_SETUP_PATH}
    Name: run
    PrependShell: true
  - Key: G3LOG_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/G3LOG'
  - CmdLine:
    - apt-get install -y libjsoncpp-dev autoconf automake libtool curl make g++ unzip
      &&     git clone ${G3LOG_REPO} ${G3LOG_SETUP_PATH} &&     cd ${G3LOG_SETUP_PATH}
      && git checkout ${G3LOG_CHECKOUT} && git submodule update --init --recursive
      &&     cd 3rdParty/gtest && unzip -u -o gtest-1.7.0.zip && cd ../../ &&     mkdir
      -p ./cmake_build && cd ./cmake_build &&     cmake .. -DCMAKE_BUILD_TYPE=Release
      -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION} &&     make -j${CPU_CORE}
      package &&     make install &&     ldconfig &&     rm -rf ${G3LOG_SETUP_PATH}
    Name: run
    PrependShell: true
  - Key: ZMQ_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/ZMQ'
  - CmdLine:
    - apt-get install -y autoconf automake libtool curl make g++ unzip &&     git
      clone ${ZMQ_REPO} ${ZMQ_SETUP_PATH} &&     cd ${ZMQ_SETUP_PATH} && git checkout
      ${ZMQ_CHECKOUT} && git submodule update --init --recursive &&     mkdir -p ./cmake_build
      && cd ./cmake_build &&     cmake .. -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION}
      &&     make -j${CPU_CORE} &&     make install &&     ldconfig &&     rm -rf
      ${ZMQ_SETUP_PATH}
    Name: run
    PrependShell: true
  - Key: CPPZMQ_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/CPPZMQ'
  - CmdLine:
    - apt-get install -y autoconf automake libtool curl make g++ unzip &&     git
      clone ${CPPZMQ_REPO} ${CPPZMQ_SETUP_PATH} &&     cd ${CPPZMQ_SETUP_PATH} &&
      git checkout ${CPPZMQ_CHECKOUT} && git submodule update --init --recursive &&     mkdir
      -p ./cmake_build && cd ./cmake_build &&     cmake .. -DCMAKE_BUILD_TYPE=Release
      -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION} &&     make -j${CPU_CORE}
      &&     make install &&     ldconfig &&     rm -rf ${CPPZMQ_SETUP_PATH}
    Name: run
    PrependShell: true
  - Key: POCO_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/POCO'
  - CmdLine:
    - apt-get install -y libssl-dev &&     git clone ${POCO_REPO} ${POCO_SETUP_PATH}
      &&     cd ${POCO_SETUP_PATH} && git checkout ${POCO_CHECKOUT} && git submodule
      update --init --recursive &&     mkdir -p ./cmake_build && cd ./cmake_build
      &&     cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_LOCATION} &&     make -j${CPU_CORE}
      &&     make install &&     ldconfig &&     rm -rf ${POCO_SETUP_PATH}
    Name: run
    PrependShell: true
  - Key: OPENCV_SETUP_PATH
    Name: arg
    Value: ${SETUP_LOCATION}'/OPENCV'
  - CmdLine:
    - apt-get install -y libssl-dev &&     git clone ${OPENCV_REPO} ${OPENCV_SETUP_PATH}
      &&     cd ${OPENCV_SETUP_PATH} && git checkout ${OPENCV_CHECKOUT} && git submodule
      update --init --recursive &&     mkdir -p ./cmake_build && cd ./cmake_build
      &&     cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_LOCATION} &&     make -j${CPU_CORE}
      &&     make install &&     ldconfig &&     rm -rf ${OPENCV_SETUP_PATH}
    Name: run
    PrependShell: true
  From:
    Image: nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04
  Name: ""
  Platform: ""
  SourceCode: FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04
