{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Hemant Kashniyal \u003chemantkashniyal@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -y software-properties-common"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y gcc gdb libc6-dbg gdb valgrind"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get install -y vim git cmake tmux screen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "INSTALL_LOCATION",
          "Name": "arg",
          "Value": "'/usr/local'"
        },
        {
          "Key": "SETUP_LOCATION",
          "Name": "arg",
          "Value": "'/tmp/setup'"
        },
        {
          "Key": "CPU_CORE",
          "Name": "arg",
          "Value": "4"
        },
        {
          "CmdLine": [
            "mkdir -p ${INSTALL_LOCATION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "PROTOBUF_REPO",
          "Name": "arg",
          "Value": "'https://github.com/google/protobuf.git'"
        },
        {
          "Key": "PROTOBUF_CHECKOUT",
          "Name": "arg",
          "Value": "'tags/v3.6.1'"
        },
        {
          "Key": "G3LOG_REPO",
          "Name": "arg",
          "Value": "'https://github.com/KjellKod/g3log.git'"
        },
        {
          "Key": "G3LOG_CHECKOUT",
          "Name": "arg",
          "Value": "'tags/1.3.2'"
        },
        {
          "Key": "ZMQ_REPO",
          "Name": "arg",
          "Value": "'https://github.com/zeromq/libzmq'"
        },
        {
          "Key": "ZMQ_CHECKOUT",
          "Name": "arg",
          "Value": "'tags/v4.3.0'"
        },
        {
          "Key": "CPPZMQ_REPO",
          "Name": "arg",
          "Value": "'https://github.com/zeromq/cppzmq'"
        },
        {
          "Key": "CPPZMQ_CHECKOUT",
          "Name": "arg",
          "Value": "'tags/v4.3.0'"
        },
        {
          "Key": "POCO_REPO",
          "Name": "arg",
          "Value": "'https://github.com/pocoproject/poco.git'"
        },
        {
          "Key": "POCO_CHECKOUT",
          "Name": "arg",
          "Value": "'tags/poco-1.9.0-release'"
        },
        {
          "Key": "OPENCV_REPO",
          "Name": "arg",
          "Value": "'https://github.com/opencv/opencv.git'"
        },
        {
          "Key": "OPENCV_CHECKOUT",
          "Name": "arg",
          "Value": "'3.4'"
        },
        {
          "Key": "PROTOBUF_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/PROTOBUF'"
        },
        {
          "CmdLine": [
            "apt-get install -y autoconf automake libtool curl make g++ unzip \u0026\u0026     git clone ${PROTOBUF_REPO} ${PROTOBUF_SETUP_PATH} \u0026\u0026     cd ${PROTOBUF_SETUP_PATH} \u0026\u0026 git checkout ${PROTOBUF_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     ./autogen.sh \u0026\u0026     ./configure --prefix=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} \u0026\u0026     make -j${CPU_CORE} check \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${PROTOBUF_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "G3LOG_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/G3LOG'"
        },
        {
          "CmdLine": [
            "apt-get install -y libjsoncpp-dev autoconf automake libtool curl make g++ unzip \u0026\u0026     git clone ${G3LOG_REPO} ${G3LOG_SETUP_PATH} \u0026\u0026     cd ${G3LOG_SETUP_PATH} \u0026\u0026 git checkout ${G3LOG_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     cd 3rdParty/gtest \u0026\u0026 unzip -u -o gtest-1.7.0.zip \u0026\u0026 cd ../../ \u0026\u0026     mkdir -p ./cmake_build \u0026\u0026 cd ./cmake_build \u0026\u0026     cmake .. -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} package \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${G3LOG_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "ZMQ_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/ZMQ'"
        },
        {
          "CmdLine": [
            "apt-get install -y autoconf automake libtool curl make g++ unzip \u0026\u0026     git clone ${ZMQ_REPO} ${ZMQ_SETUP_PATH} \u0026\u0026     cd ${ZMQ_SETUP_PATH} \u0026\u0026 git checkout ${ZMQ_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     mkdir -p ./cmake_build \u0026\u0026 cd ./cmake_build \u0026\u0026     cmake .. -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${ZMQ_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "CPPZMQ_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/CPPZMQ'"
        },
        {
          "CmdLine": [
            "apt-get install -y autoconf automake libtool curl make g++ unzip \u0026\u0026     git clone ${CPPZMQ_REPO} ${CPPZMQ_SETUP_PATH} \u0026\u0026     cd ${CPPZMQ_SETUP_PATH} \u0026\u0026 git checkout ${CPPZMQ_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     mkdir -p ./cmake_build \u0026\u0026 cd ./cmake_build \u0026\u0026     cmake .. -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGING_INSTALL_PREFIX=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${CPPZMQ_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "POCO_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/POCO'"
        },
        {
          "CmdLine": [
            "apt-get install -y libssl-dev \u0026\u0026     git clone ${POCO_REPO} ${POCO_SETUP_PATH} \u0026\u0026     cd ${POCO_SETUP_PATH} \u0026\u0026 git checkout ${POCO_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     mkdir -p ./cmake_build \u0026\u0026 cd ./cmake_build \u0026\u0026     cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${POCO_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "OPENCV_SETUP_PATH",
          "Name": "arg",
          "Value": "${SETUP_LOCATION}'/OPENCV'"
        },
        {
          "CmdLine": [
            "apt-get install -y libssl-dev \u0026\u0026     git clone ${OPENCV_REPO} ${OPENCV_SETUP_PATH} \u0026\u0026     cd ${OPENCV_SETUP_PATH} \u0026\u0026 git checkout ${OPENCV_CHECKOUT} \u0026\u0026 git submodule update --init --recursive \u0026\u0026     mkdir -p ./cmake_build \u0026\u0026 cd ./cmake_build \u0026\u0026     cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_LOCATION} \u0026\u0026     make -j${CPU_CORE} \u0026\u0026     make install \u0026\u0026     ldconfig \u0026\u0026     rm -rf ${OPENCV_SETUP_PATH}"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}