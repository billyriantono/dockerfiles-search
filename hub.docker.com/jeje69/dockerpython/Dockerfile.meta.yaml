MetaArgs: null
Stages:
- BaseName: python:3-alpine
  Commands:
  - CmdLine:
    - "apk add --no-cache \t\tca-certificates"
    Name: run
    PrependShell: true
  - CmdLine:
    - '[ ! -e /etc/nsswitch.conf ] && echo ''hosts: files dns'' > /etc/nsswitch.conf'
    Name: run
    PrependShell: true
  - Env:
    - Key: DOCKER_CHANNEL
      Value: stable
    Name: env
  - Env:
    - Key: DOCKER_VERSION
      Value: 19.03.1
    Name: env
  - CmdLine:
    - "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64)
      dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\tarmv7) dockerArch='armhf'
      ;; \t\taarch64) dockerArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported
      architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\";
      then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from
      '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract
      \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/
      \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - modprobe.sh
    - /usr/local/bin/modprobe
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin/
  - Env:
    - Key: DOCKER_TLS_CERTDIR
      Value: /certs
    Name: env
  - CmdLine:
    - mkdir /certs /certs/client && chmod 1777 /certs /certs/client
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - sh
    Name: cmd
    PrependShell: false
  - CmdLine:
    - set -xe     && apk add --no-cache --purge -u sudo curl ca-certificates openssh-client
      openssl     && apk --update add --virtual .build-dependencies python-dev libffi-dev
      openssl-dev build-base     && pip install --no-cache --upgrade pyyaml ansible
      ara docker-py     && apk del --purge .build-dependencies     && mkdir -p /etc/ansible     &&
      mkdir -p /cip     && echo 'localhost' > /etc/ansible/hosts     && rm -rf /var/cache/apk/*
      /tmp/*
    Name: run
    PrependShell: true
  - Env:
    - Key: ARA_API_CLIENT
      Value: http
    Name: env
  - Env:
    - Key: ARA_API_SERVER
      Value: '"http://localhost:8000"'
    Name: env
  - Env:
    - Key: ARA_API_TIMEOUT
      Value: "15"
    Name: env
  - Env:
    - Key: ARA_IGNORED_FACTS
      Value: '''["ansible_env", "ansible_all_ipv4_addresses"]'''
    Name: env
  - Env:
    - Key: ARA_IGNORED_ARGUMENTS
      Value: '''["extra_vars", "vault_password_files"]'''
    Name: env
  - Env:
    - Key: ANSIBLE_ACTION_PLUGINS
      Value: /usr/local/lib/python3.7/site-packages/ara/plugins/action
    Name: env
  - Env:
    - Key: ANSIBLE_CALLBACK_PLUGINS
      Value: /usr/local/lib/python3.7/site-packages/ara/plugins/callback
    Name: env
  - Name: workdir
    Path: /cip
  From:
    Image: python:3-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM python:3-alpine
