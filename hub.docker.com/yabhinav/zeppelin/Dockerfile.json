{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:stable",
      "SourceCode": "FROM debian:stable",
      "Platform": "",
      "From": {
        "Image": "debian:stable"
      },
      "Commands": [
        {
          "Maintainer": "yabhinav \u003cyabhinav.github.com\u003e",
          "Name": "maintainer"
        },
        {
          "Key": "Z_VERSION",
          "Name": "arg",
          "Value": "\"0.7.3\""
        },
        {
          "Key": "LOG_TAG",
          "Name": "arg",
          "Value": "\"[ZEPPELIN_${Z_VERSION}]:\""
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "C.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "workdir",
          "Path": "/tmp"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG : Install dependency packages\" \u0026\u0026     apt-get update \u0026\u0026 apt-get install -y --no-install-recommends \t\tbuild-essential sudo vim curl less openssh-server wget vim iputils-ping telnet dnsutils bzip2 ntp   \u0026\u0026 sleep 1   \u0026\u0026 rm -rf /var/lib/apt/list/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} \u003e /usr/local/bin/docker-java-home \t\u0026\u0026 chmod +x /usr/local/bin/docker-java-home"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/docker-java-home"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_VERSION",
              "Value": "8u162"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_DEBIAN_VERSION",
              "Value": "8u162-b12-1~deb9u1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CA_CERTIFICATES_JAVA_VERSION",
              "Value": "20170531+nmu1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex; \t\tif [ ! -d /usr/share/man/man1 ]; then \t\tmkdir -p /usr/share/man/man1; \tfi; \t\tapt-get update; \tapt-get install -y \t\topenjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" \t\tca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" \t; \trm -rf /var/lib/apt/lists/*; \t\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \t\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \tupdate-alternatives --query java | grep -q 'Status: manual'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/var/lib/dpkg/info/ca-certificates-java.postinst configure"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG : Install miniconda2 related packages\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y bzip2 ca-certificates     libglib2.0-0 libxext6 libsm6 libxrender1     git mercurial subversion \u0026\u0026     echo 'export PATH=/opt/conda/bin:$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.11-Linux-x86_64.sh -O ~/miniconda.sh \u0026\u0026     /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026\u0026     rm ~/miniconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG : Install python related packages\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y python-dev python-pip \u0026\u0026     apt-get install -y gfortran \u0026\u0026     apt-get install -y libblas-dev libatlas-dev liblapack-dev \u0026\u0026     apt-get install -y libpng-dev libfreetype6-dev libxft-dev \u0026\u0026     apt-get install -y python-tk libxml2-dev libxslt-dev zlib1g-dev \u0026\u0026     conda install -y numpy pandas matplotlib seaborn scipy py4j scikit-learn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_VERSION",
              "Value": "${Z_VERSION}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_HOME",
              "Value": "/opt/zeppelin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_DATA",
              "Value": "/zeppelin"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_LOG_DIR",
              "Value": "${ZEPPELIN_DATA}/log"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_PID_DIR",
              "Value": "${ZEPPELIN_DATA}/run"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_NOTEBOOK_DIR",
              "Value": "${ZEPPELIN_DATA}/notebook"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "groupadd -r --gid 501 zeppelin   \u0026\u0026 useradd -r --uid 501 --home-dir ${ZEPPELIN_HOME} --create-home -g zeppelin zeppelin"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$JAVA_HOME/bin:$ZEPPELIN_HOME/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"PATH=$PATH:$JAVA_HOME/bin:$ZEPPELIN_HOME/bin\" \u003e\u003e ~/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ${ZEPPELIN_DATA} \u0026\u0026 chown zeppelin:zeppelin ${ZEPPELIN_DATA}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "${ZEPPELIN_DATA}"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/tmp"
          ]
        },
        {
          "Name": "user",
          "User": "zeppelin"
        },
        {
          "Name": "workdir",
          "Path": "${ZEPPELIN_HOME}"
        },
        {
          "CmdLine": [
            "set -xe   \u0026\u0026 cd /tmp   \u0026\u0026 wget -q http://www.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-netinst.tgz   \u0026\u0026 tar -zxvf zeppelin-${Z_VERSION}-bin-netinst.tgz -C ${ZEPPELIN_HOME} --strip-components=1   \u0026\u0026 rm *.tgz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "set -xe   \u0026\u0026 apt-get update   \u0026\u0026 apt-get install -y r-base r-base-dev r-recommended r-cran-knitr r-cran-caret r-cran-data.table r-cran-glmnet   \u0026\u0026 chmod a+wx /usr/local/lib/R/site-library || true   \u0026\u0026 sleep 1   \u0026\u0026 rm -rf /var/lib/apt/list/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "zeppelin"
        },
        {
          "CmdLine": [
            "set -xe   \u0026\u0026 mkdir -p ${ZEPPELIN_LOG_DIR}   \u0026\u0026 export ZEPPELIN_MEM='-Xmx256m'   \u0026\u0026 install-interpreter.sh --list \u0026\u0026 install-interpreter.sh --all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "ZEPPELIN_PORT",
              "Value": "8080"
            }
          ],
          "Name": "env"
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "4040"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG : Cleanup\" \u0026\u0026     apt-get autoclean \u0026\u0026     apt-get clean \u0026\u0026     rm -rf /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "zeppelin"
        },
        {
          "Name": "workdir",
          "Path": "${ZEPPELIN_DATA}"
        },
        {
          "CmdLine": [
            "${ZEPPELIN_HOME}/bin/zeppelin.sh \u0026\u0026 /bin/bash"
          ],
          "Name": "entrypoint",
          "PrependShell": true
        }
      ]
    }
  ]
}