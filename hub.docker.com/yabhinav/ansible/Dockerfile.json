{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "yabhinav \u003cyabhinav.github.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "container",
              "Value": "docker"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "noninteractive"
        },
        {
          "Name": "shell",
          "Shell": [
            "/bin/bash",
            "-c"
          ]
        },
        {
          "CmdLine": [
            "echo 'Dpkg::Progress-Fancy \"1\";' | tee -a /etc/apt/apt.conf.d/99progressbar"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"===\u003e Installing Ansible prerequisites...\"      \u0026\u0026     apt-get -y update                                    \u0026\u0026     apt-get purge virtualenvwrapper                      \u0026\u0026     apt-get install -y --no-install-recommends                      sudo bash-completion software-properties-common             python-pkg-resources git python-pip iproute2                libssl-dev libffi-dev python-dev build-essential            python-virtualenv virtualenvwrapper"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"===\u003e Preparing virtualenvwrapper...\"                         \u0026\u0026     pip install -U --force-reinstall virtualenvwrapper                 \u0026\u0026     sed --in-place '/[ -z \"$PS1\" ] \u0026\u0026 return/d' $HOME/.bashrc          \u0026\u0026     sed --in-place \"s|/usr/share/virtualenvwrapper/|/usr/local/bin/|g\" /etc/bash_completion.d/virtualenvwrapper                           \u0026\u0026     echo 'export WORKON_HOME=~/.virtualenvs' \u003e\u003e $HOME/.bashrc          \u0026\u0026     source $HOME/.bashrc                                               \u0026\u0026     mkdir -p $WORKON_HOME                                              \u0026\u0026     echo 'source /etc/bash_completion.d/virtualenvwrapper' \u003e\u003e $HOME/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "source $HOME/.bashrc;                                mkvirtualenv ansible_latest;                         echo \"===\u003e Installing Ansible latest ...\";           pip install --upgrade pip;                           pip install --upgrade                                    PyCrypto ndg-httpsclient urllib3[secure]             pyasn1 pyyaml pyOpenSSL httplib2                     Jinja2==2.8.1 paramiko==1.10  ansible;           ansible --version;                                   deactivate;                                                  echo \"===\u003e Installing stable 2.x.0.0 ansible releases...\";     for version in 2.0.0.0 2.1.0.0 2.2.0.0 2.3.0.0 2.4.0.0 2.5.0.0 2.6.0.0;        do                                                                 mkvirtualenv ansible_$version;                                 echo \"===\u003e Installing Ansible-$version ...\";                   pip install --upgrade pip;                                     pip install --upgrade                                              PyCrypto urllib3[secure] pyOpenSSL                             pyyaml httplib2 pyasn1 ndg-httpsclient                         paramiko==1.10 Jinja2==2.2 ansible==$version;              ansible --version;                                             deactivate;                                                done;                                                                  echo \"===\u003e Adding hosts for convenience...\"                                   \u0026\u0026     mkdir -p /etc/ansible                                                         \u0026\u0026     echo -e '[local]\\nlocalhost ansible_connection=local' \u003e /etc/ansible/hosts    \u0026\u0026     echo -e '[defaults]\\nretry_files_enabled = False' \u003e /etc/ansible/ansible.cfg  \u0026\u0026     echo -e '\\nansible_managed = Ansible managed, all changes will be lost' \u003e\u003e /etc/ansible/ansible.cfg"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"===\u003e Removing unused APT resources...\"              \u0026\u0026     apt-get -f -y --auto-remove remove                                   ubuntu-minimal eject isc-dhcp-client                             kbd console-setup xkb-data bzip2 keyboard-configuration          python3.4 python3-minimal python3.4-minimal                      gcc build-essential python-dev                                   libffi-dev libssl-dev                                 \u0026\u0026     apt-get clean                                             \u0026\u0026     rm -rf /var/lib/apt/lists/*  /tmp/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -fr /usr/share/dh-python/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for x in `ls /usr/share/locale | grep -v en_GB`; do rm -fr /usr/share/locale/$x; done;"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "for x in `ls /usr/share/i18n/locales/ | grep -v en_`; do rm -fr /usr/share/i18n/locales/$x; done"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -fr /usr/share/doc/* /usr/share/man/* /usr/share/groff/* /usr/share/info/* \u0026\u0026 rm -rf /usr/share/lintian/* /usr/share/linda/* /var/cache/man/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"# This config file will prevent packages from install docs that are not needed.\" \u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/doc/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"# we need to keep copyright files for legal reasons\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"# path-include /usr/share/doc/*/copyright\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/man/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/groff/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/info/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"# lintian stuff is small, but really unnecessary\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/lintian/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc \u0026\u0026     echo \"path-exclude /usr/share/linda/*\" \u003e\u003e /etc/dpkg/dpkg.cfg.d/01_nodoc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"net.ipv6.conf.all.disable_ipv6=1\" \u003e /etc/sysctl.d/disableipv6.conf \u0026\u0026     echo \"net.ipv6.conf.all.disable_ipv6 = 1\" \u003e\u003e /etc/sysctl.conf \u0026\u0026     echo \"net.ipv6.conf.default.disable_ipv6 = 1\" \u003e\u003e /etc/sysctl.conf \u0026\u0026     echo \"net.ipv6.conf.lo.disable_ipv6 = 1\" \u003e\u003e /etc/sysctl.conf \u0026\u0026     echo \"net.ipv6.conf.eth0.disable_ipv6 = 1\" \u003e\u003e /etc/sysctl.conf \u0026\u0026     echo \"net.ipv6.conf.eth1.disable_ipv6 = 1\" \u003e\u003e /etc/sysctl.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo -e  '\\nif [[ -n \\\"\\$SSH_CLIENT\\\" || -n \\\"\\$SSH_TTY\\\" ]]; then\\n\\treturn;\\nfi\\n' \u003e\u003e /root/.bashrc \u0026\u0026     echo -e  '\\nif [[ -n \\\"\\$SSH_CLIENT\\\" || -n \\\"\\$SSH_TTY\\\" ]]; then\\n\\treturn;\\nfi\\n' \u003e\u003e /etc/skel/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/bin/bash"
          ],
          "Name": "cmd",
          "PrependShell": true
        }
      ]
    }
  ]
}