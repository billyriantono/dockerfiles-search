MetaArgs: null
Stages:
- BaseName: ubuntu:14.04
  Commands:
  - CmdLine:
    - apt-get --assume-yes update &&     apt-get --assume-yes install apt-utils alien
      lsb git dos2unix wget bzip2 unzip cpulimit build-essential &&     apt-get --assume-yes
      clean all
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /opt && mkdir -p /opt/spark/runtime && mkdir -p /fire/simulators
    Name: run
    PrependShell: true
  - CmdLine:
    - wget -O /tmp/spark.zip https://storage.googleapis.com/evaluation/ftp/spark.zip
      &&     cd /tmp/ && unzip spark.zip  &&     tar xf "/tmp/Spark Docker/spark_install/opencl_runtime_16.1_x64_ubuntu_5.2.0.10002.tgz"
      -C /opt/spark/runtime &&     mv "/tmp/Spark Docker/spark_install/silent.cfg"
      /opt/spark/silent.cfg &&     mv "/tmp/Spark Docker/spark_install/csiro.au-spark_batch_fsp-0.8.0-38884.x86_64.rpm"
      /opt/spark/ &&     rm /tmp/spark.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "deb http://download.mono-project.com/repo/debian wheezy main" | tee /etc/apt/sources.list.d/mono-xamarin.list
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y mono-complete mono-devel mono-vbnc
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /opt/spark/runtime/opencl_runtime_16.1_x64_ubuntu_5.2.0.10002/ && ./install.sh
      -s /opt/spark/silent.cfg
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /opt/spark/ && alien -ikcv --bump==0 csiro.au-spark_batch_fsp-0.8.0-38884.x86_64.rpm
    Name: run
    PrependShell: true
  - CmdLine:
    - mv /opt/csiro.au/spark_batch_fsp /fire/simulators/spark
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - environment.yml
    - /opt
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - notebook.sh
    - /opt
  - CmdLine:
    - cd /opt &&     wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      &&     /bin/bash /opt/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda &&     rm
      Miniconda3-latest-Linux-x86_64.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/conda/bin/conda config --add channels conda-forge
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/conda/bin/conda update conda --yes
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/conda/bin/conda install conda-env --yes
    Name: run
    PrependShell: true
  - CmdLine:
    - /opt/conda/bin/conda env create -f /opt/environment.yml
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y curl grep sed dpkg &&     TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest
      | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` &&     curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb"
      > tini.deb &&     dpkg -i tini.deb &&     rm tini.deb &&     apt-get clean
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - /usr/bin/tini
    - --
    Name: entrypoint
    PrependShell: false
  From:
    Image: ubuntu:14.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:14.04
