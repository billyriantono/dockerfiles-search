MetaArgs: null
Stages:
- BaseName: ubuntu:bionic
  Commands:
  - Labels:
    - Key: MAINTAINER
      Value: '"cxucheng@outlook.com"'
    Name: label
  - Env:
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    Name: env
  - Name: workdir
    Path: /usr/include/
  - Key: BOOST_VERSION
    Name: arg
    Value: null
  - Key: BOOST_VERSION_
    Name: arg
    Value: null
  - Env:
    - Key: BOOST_VERSION
      Value: '"1.68.0"'
    Name: env
  - Env:
    - Key: BOOST_VERSION_
      Value: '"1_68_0"'
    Name: env
  - Env:
    - Key: BOOST_ROOT
      Value: /usr/include/boost
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: /usr/local/lib
    Name: env
  - CmdLine:
    - apt-get -qq update && apt-get install -qy software-properties-common
    Name: run
    PrependShell: true
  - CmdLine:
    - add-apt-repository ppa:ubuntu-toolchain-r/test -y
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -qy --fix-missing     gcc     git     wget     vim     g++     apt-utils     libevent-dev     libdouble-conversion-dev     libgoogle-glog-dev     libgflags-dev     libiberty-dev     liblz4-dev     liblzma-dev     libsnappy-dev     make     zlib1g-dev     binutils-dev     libssl-dev     pkg-config     unzip     libunwind8-dev     libelf-dev     libdwarf-dev     libgflags-dev     libsnappy-dev     zlib1g-dev     libbz2-dev     liblz4-dev     libzstd-dev     libsdl2-dev     autoconf     python3-pip     python-pip     libnuma-dev     curl     libomp-dev     tmux
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -xjf jemalloc-5.1.0.tar.bz2 &&     rm jemalloc-5.1.0.tar.bz2
    Name: run
    PrependShell: true
  - CmdLine:
    - cd jemalloc-5.1.0 &&     ./configure &&     make -j $(nproc) &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/Kitware/CMake/releases/download/v3.13.3/cmake-3.13.3.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -xzf cmake-3.13.3.tar.gz &&     rm cmake-3.13.3.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd cmake-3.13.3 &&     ./bootstrap -- -DCMAKE_BUILD_TYPE:STRING=Release &&     make
      -j $(nproc) &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - wget --max-redirect 3 https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_}.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /usr/include/boost &&     tar zxf boost_${BOOST_VERSION_}.tar.gz -C
      /usr/include/boost --strip-components=1 &&     rm /usr/include/boost_${BOOST_VERSION_}.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/include/boost &&     ./bootstrap.sh &&     ./b2 cxxflags="-std=c++14"
      install
    Name: run
    PrependShell: true
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar zxf release-1.8.0.tar.gz &&     rm /usr/include/release-1.8.0.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd googletest-release-1.8.0 &&     cmake . &&     make -j $(nproc) &&     make
      install
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/facebook/folly/archive/master.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - unzip master.zip && rm master.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - cd folly-master &&     mkdir _build &&     cd _build &&     cmake .. -DCMAKE_INCLUDE_PATH=/usr/include/boost-${BOOST_VERSION}
      -DCMAKE_LIBRARY_PATH=/usr/include/lib &&     make -j $(nproc) &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/open-source-parsers/jsoncpp.git
    Name: run
    PrependShell: true
  - CmdLine:
    - cd jsoncpp &&     mkdir -p build/debug &&     cd build/debug &&     cmake -DCMAKE_BUILD_TYPE=debug
      -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G "Unix
      Makefiles" ../.. &&     make -j $(nproc) &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://software.intel.com/sites/landingpage/pintool/downloads/pin-3.7-97619-g0d0c92f4f-gcc-linux.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -xzf pin-3.7-97619-g0d0c92f4f-gcc-linux.tar.gz &&     rm /usr/include/pin-3.7-97619-g0d0c92f4f-gcc-linux.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://github.com/facebook/rocksdb/archive/master.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - unzip master.zip && rm master.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - cd rocksdb-master &&     make -j $(nproc) static_lib &&     cd examples &&     make
      -j $(nproc) all
    Name: run
    PrependShell: true
  - CmdLine:
    - wget http://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -C /usr/local -xvf clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz
      --strip 1 &&     rm clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://static.rust-lang.org/dist/rust-1.32.0-x86_64-unknown-linux-gnu.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar xzvf rust-1.32.0-x86_64-unknown-linux-gnu.tar.gz &&     rm rust-1.32.0-x86_64-unknown-linux-gnu.tar.gz
    Name: run
    PrependShell: true
  - CmdLine:
    - cd rust-1.32.0-x86_64-unknown-linux-gnu &&     ./install.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/include &&     git clone https://github.com/jonasmr/microprofile.git
    Name: run
    PrependShell: true
  - CmdLine:
    - wget https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz
    Name: run
    PrependShell: true
  - CmdLine:
    - tar -xvf node-v10.15.0-linux-x64.tar.xz &&     rm node-v10.15.0-linux-x64.tar.xz
    Name: run
    PrependShell: true
  - Env:
    - Key: NODEJS_HOME
      Value: /usr/include/node-v10.15.0-linux-x64/bin
    Name: env
  - Env:
    - Key: PATH
      Value: $NODEJS_HOME:$PATH
    Name: env
  - CmdLine:
    - git clone https://github.com/google/benchmark.git
    Name: run
    PrependShell: true
  - CmdLine:
    - cd benchmark &&     mkdir build &&     cd build &&     cmake .. -DCMAKE_BUILD_TYPE=RELEASE
      -DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON &&     make -j $(nproc) &&     make install
    Name: run
    PrependShell: true
  - CmdLine:
    - /bin/bash
    Name: entrypoint
    PrependShell: true
  From:
    Image: ubuntu:bionic
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:bionic
