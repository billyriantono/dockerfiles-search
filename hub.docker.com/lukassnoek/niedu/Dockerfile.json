{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "neurodebian:stretch-non-free",
      "SourceCode": "FROM neurodebian:stretch-non-free",
      "Platform": "",
      "From": {
        "Image": "neurodebian:stretch-non-free"
      },
      "Commands": [
        {
          "Key": "DEBIAN_FRONTEND",
          "Name": "arg",
          "Value": "\"noninteractive\""
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "LC_ALL",
              "Value": "\"en_US.UTF-8\""
            },
            {
              "Key": "ND_ENTRYPOINT",
              "Value": "\"/neurodocker/startup.sh\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export ND_ENTRYPOINT=\"/neurodocker/startup.sh\"     \u0026\u0026 apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     \u0026\u0026 dpkg-reconfigure --frontend=noninteractive locales     \u0026\u0026 update-locale LANG=\"en_US.UTF-8\"     \u0026\u0026 chmod 777 /opt \u0026\u0026 chmod a+s /opt     \u0026\u0026 mkdir -p /neurodocker     \u0026\u0026 if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env bash' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'set -e' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'export USER=\"${USER:=`whoami`}\"' \u003e\u003e \"$ND_ENTRYPOINT\"     \u0026\u0026   echo 'if [ -n \"$1\" ]; then \"$@\"; else /usr/bin/env bash; fi' \u003e\u003e \"$ND_ENTRYPOINT\";     fi     \u0026\u0026 chmod -R 777 /neurodocker \u0026\u0026 chmod a+s /neurodocker"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/neurodocker/startup.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            vim     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "FSLDIR",
              "Value": "\"/opt/fsl-6.0.1\""
            },
            {
              "Key": "PATH",
              "Value": "\"/opt/fsl-6.0.1/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            bc            dc            file            libfontconfig1            libfreetype6            libgl1-mesa-dev            libgl1-mesa-dri            libglu1-mesa-dev            libgomp1            libice6            libxcursor1            libxft2            libxinerama1            libxrandr2            libxrender1            libxt6            sudo            wget     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 echo \"Downloading FSL ...\"     \u0026\u0026 mkdir -p /opt/fsl-6.0.1     \u0026\u0026 curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.1-centos6_64.tar.gz     | tar -xz -C /opt/fsl-6.0.1 --strip-components 1     \u0026\u0026 sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT     \u0026\u0026 sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT     \u0026\u0026 sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT     \u0026\u0026 sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT     \u0026\u0026 echo \"Installing FSL conda environment ...\"     \u0026\u0026 bash /opt/fsl-6.0.1/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.1     \u0026\u0026 echo \"Downgrading deprecation module per https://github.com/kaczmarj/neurodocker/issues/271#issuecomment-514523420\"     \u0026\u0026 /opt/fsl-6.0.1/fslpython/bin/conda install -n fslpython -c conda-forge -y deprecation==1.*     \u0026\u0026 echo \"Removing bundled with FSLeyes libz likely incompatible with the one from OS\"     \u0026\u0026 rm -f /opt/fsl-6.0.1/bin/FSLeyes/libz.so.1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "apt-get update -qq     \u0026\u0026 apt-get install -y -q --no-install-recommends            openbox            tightvncserver            xfonts-base            xterm            xvfb     \u0026\u0026 apt-get clean     \u0026\u0026 rm -rf /var/lib/apt/lists/*     \u0026\u0026 echo 'Configuring VNC password ...'     \u0026\u0026 mkdir -p ~/.vnc     \u0026\u0026 echo neuroimg | vncpasswd -f \u003e ~/.vnc/passwd     \u0026\u0026 chmod 0600 ~/.vnc/passwd     \u0026\u0026 sed -i '$iexport USER=$(whoami)' $ND_ENTRYPOINT     \u0026\u0026 sed -i '$iexport DISPLAY=$HOSTNAME:1' $ND_ENTRYPOINT     \u0026\u0026 sed -i '$ivncserver -geometry 1600x1200' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "test \"$(getent passwd neuro)\" || useradd --no-user-group --create-home --shell /bin/bash neuro"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "neuro"
        },
        {
          "Name": "workdir",
          "Path": "/home/neuro"
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "\"/opt/miniconda-latest\""
            },
            {
              "Key": "PATH",
              "Value": "\"/opt/miniconda-latest/bin:$PATH\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "export PATH=\"/opt/miniconda-latest/bin:$PATH\"     \u0026\u0026 echo \"Downloading Miniconda installer ...\"     \u0026\u0026 conda_installer=\"/tmp/miniconda.sh\"     \u0026\u0026 curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     \u0026\u0026 bash \"$conda_installer\" -b -p /opt/miniconda-latest     \u0026\u0026 rm -f \"$conda_installer\"     \u0026\u0026 conda update -yq -nbase conda     \u0026\u0026 conda config --system --prepend channels conda-forge     \u0026\u0026 conda config --system --set auto_update_conda false     \u0026\u0026 conda config --system --set show_channel_urls true     \u0026\u0026 sync \u0026\u0026 conda clean --all \u0026\u0026 sync     \u0026\u0026 conda create -y -q --name neuro_py37     \u0026\u0026 conda install -y -q --name neuro_py37            \"python=3.7\"            \"jupyter\"            \"nbgrader\"            \"jupyter_contrib_nbextensions\"            \"matplotlib\"            \"scikit-learn\"            \"seaborn\"     \u0026\u0026 sync \u0026\u0026 conda clean --all \u0026\u0026 sync     \u0026\u0026 bash -c \"source activate neuro_py37     \u0026\u0026   pip install --no-cache-dir               \"nilearn\"              \"nibabel\"\"     \u0026\u0026 rm -rf ~/.cache/pip/*     \u0026\u0026 sync     \u0026\u0026 sed -i '$isource activate neuro_py37' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini \u003e tini \u0026\u0026 chmod +x tini"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -i '$i~/tini -- jupyter notebook --ip=0.0.0.0 --port 9999 \u0026\u003e /dev/null \u0026' $ND_ENTRYPOINT"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            ".",
            "/home/neuro/"
          ]
        },
        {
          "CmdLine": [
            "mv course_settings_container.yml course_settings.yml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p ~/.jupyter \u0026\u0026 echo c.NotebookApp.ip = \\\"0.0.0.0\\\" \u003e ~/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "bash -c 'source activate neuro_py37 \u0026\u0026 pip install . \u0026\u0026 jupyter nbextension install --sys-prefix --py nbgrader --overwrite \u0026\u0026 jupyter nbextension enable --sys-prefix --py nbgrader \u0026\u0026 jupyter serverextension enable --sys-prefix --py nbgrader'"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "9999"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5901"
          ]
        },
        {
          "CmdLine": [
            "echo '{     \\n  \"pkg_manager\": \"apt\",     \\n  \"instructions\": [     \\n    [     \\n      \"base\",     \\n      \"neurodebian:stretch-non-free\"     \\n    ],     \\n    [     \\n      \"install\",     \\n      [     \\n        \"vim\"     \\n      ]     \\n    ],     \\n    [     \\n      \"fsl\",     \\n      {     \\n        \"version\": \"6.0.1\"     \\n      }     \\n    ],     \\n    [     \\n      \"vnc\",     \\n      {     \\n        \"passwd\": \"neuroimg\",     \\n        \"start_at_runtime\": true     \\n      }     \\n    ],     \\n    [     \\n      \"user\",     \\n      \"neuro\"     \\n    ],     \\n    [     \\n      \"workdir\",     \\n      \"/home/neuro\"     \\n    ],     \\n    [     \\n      \"miniconda\",     \\n      {     \\n        \"conda_install\": [     \\n          \"python=3.7\",     \\n          \"jupyter\",     \\n          \"nbgrader\",     \\n          \"jupyter_contrib_nbextensions\",     \\n          \"matplotlib\",     \\n          \"scikit-learn\",     \\n          \"seaborn\"     \\n        ],     \\n        \"pip_install\": [     \\n          \"nilearn\",     \\n          \"nibabel\"     \\n        ],     \\n        \"create_env\": \"neuro_py37\",     \\n        \"activate\": true     \\n      }     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini \u003e tini \u0026\u0026 chmod +x tini\"     \\n    ],     \\n    [     \\n      \"add_to_entrypoint\",     \\n      \"~/tini -- jupyter notebook --ip=0.0.0.0 --port 9999 \u0026\u003e /dev/null \u0026\"     \\n    ],     \\n    [     \\n      \"copy\",     \\n      [     \\n        \".\",     \\n        \"/home/neuro/\"     \\n      ]     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"mv course_settings_container.yml course_settings.yml\"     \\n    ],     \\n    [     \\n      \"run\",     \\n      \"mkdir -p ~/.jupyter \u0026\u0026 echo c.NotebookApp.ip = \\\\\\\"0.0.0.0\\\\\\\" \u003e ~/.jupyter/jupyter_notebook_config.py\"     \\n    ],     \\n    [     \\n      \"run_bash\",     \\n      \"source activate neuro_py37 \u0026\u0026 pip install . \u0026\u0026 jupyter nbextension install --sys-prefix --py nbgrader --overwrite \u0026\u0026 jupyter nbextension enable --sys-prefix --py nbgrader \u0026\u0026 jupyter serverextension enable --sys-prefix --py nbgrader\"     \\n    ],     \\n    [     \\n      \"expose\",     \\n      [     \\n        \"9999\"     \\n      ]     \\n    ],     \\n    [     \\n      \"expose\",     \\n      [     \\n        \"5901\"     \\n      ]     \\n    ]     \\n  ]     \\n}' \u003e /neurodocker/neurodocker_specs.json"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}