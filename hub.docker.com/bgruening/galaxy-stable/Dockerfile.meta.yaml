MetaArgs: null
Stages:
- BaseName: ubuntu:18.04
  Commands:
  - Maintainer: Björn A. Grüning, bjoern.gruening@gmail.com
    Name: maintainer
  - Key: GALAXY_RELEASE
    Name: arg
    Value: null
  - Key: GALAXY_REPO
    Name: arg
    Value: null
  - Env:
    - Key: GALAXY_RELEASE
      Value: ${GALAXY_RELEASE:-release_19.05}
    - Key: GALAXY_REPO
      Value: ${GALAXY_REPO:-https://github.com/galaxyproject/galaxy}
    - Key: GALAXY_ROOT
      Value: /galaxy-central
    - Key: GALAXY_CONFIG_DIR
      Value: /etc/galaxy
    - Key: EXPORT_DIR
      Value: /export
    - Key: DEBIAN_FRONTEND
      Value: noninteractive
    - Key: PG_VERSION
      Value: "11"
    Name: env
  - Env:
    - Key: GALAXY_CONFIG_FILE
      Value: $GALAXY_CONFIG_DIR/galaxy.yml
    - Key: GALAXY_CONFIG_JOB_CONFIG_FILE
      Value: $GALAXY_CONFIG_DIR/job_conf.xml
    - Key: GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE
      Value: $GALAXY_CONFIG_DIR/job_metrics_conf.xml
    - Key: GALAXY_CONFIG_TOOL_DATA_TABLE_CONFIG_PATH
      Value: /etc/galaxy/tool_data_table_conf.xml
    - Key: GALAXY_CONFIG_WATCH_TOOL_DATA_DIR
      Value: "True"
    - Key: GALAXY_CONFIG_TOOL_DEPENDENCY_DIR
      Value: $EXPORT_DIR/tool_deps
    - Key: GALAXY_CONFIG_TOOL_PATH
      Value: $EXPORT_DIR/galaxy-central/tools
    - Key: GALAXY_VIRTUAL_ENV
      Value: /galaxy_venv
    - Key: GALAXY_USER
      Value: galaxy
    - Key: GALAXY_UID
      Value: "1450"
    - Key: GALAXY_GID
      Value: "1450"
    - Key: GALAXY_POSTGRES_UID
      Value: "1550"
    - Key: GALAXY_POSTGRES_GID
      Value: "1550"
    - Key: GALAXY_HOME
      Value: /home/galaxy
    - Key: GALAXY_LOGS_DIR
      Value: /home/galaxy/logs
    - Key: GALAXY_DEFAULT_ADMIN_USER
      Value: admin@galaxy.org
    - Key: GALAXY_DEFAULT_ADMIN_PASSWORD
      Value: admin
    - Key: GALAXY_DEFAULT_ADMIN_KEY
      Value: admin
    - Key: GALAXY_DESTINATIONS_DEFAULT
      Value: slurm_cluster
    - Key: GALAXY_RUNNERS_ENABLE_SLURM
      Value: "True"
    - Key: GALAXY_RUNNERS_ENABLE_CONDOR
      Value: "False"
    - Key: GALAXY_CONFIG_DATABASE_CONNECTION
      Value: postgresql://galaxy:galaxy@localhost:5432/galaxy?client_encoding=utf8
    - Key: GALAXY_CONFIG_ADMIN_USERS
      Value: admin@galaxy.org
    - Key: GALAXY_CONFIG_MASTER_API_KEY
      Value: HSNiugRFvgT574F43jZ7N9F3
    - Key: GALAXY_CONFIG_BRAND
      Value: '"Galaxy Docker Build"'
    - Key: GALAXY_CONFIG_STATIC_ENABLED
      Value: "False"
    - Key: PG_DATA_DIR_DEFAULT
      Value: /var/lib/postgresql/$PG_VERSION/main/
    - Key: PG_CONF_DIR_DEFAULT
      Value: /etc/postgresql/$PG_VERSION/main/
    - Key: PG_DATA_DIR_HOST
      Value: $EXPORT_DIR/postgresql/$PG_VERSION/main/
    - Key: UWSGI_PROCESSES
      Value: "2"
    - Key: UWSGI_THREADS
      Value: "4"
    - Key: USE_HTTPS
      Value: "False"
    - Key: USE_HTTPS_LETSENCRYPT
      Value: "False"
    - Key: GALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL
      Value: http://localhost
    - Key: GALAXY_HANDLER_NUMPROCS
      Value: "2"
    - Key: LC_ALL
      Value: en_US.UTF-8
    - Key: LANG
      Value: en_US.UTF-8
    - Key: GALAXY_CONDA_PREFIX
      Value: /tool_deps/_conda
    Name: env
  - CmdLine:
    - echo "force-unsafe-io" > /etc/dpkg/dpkg.cfg.d/02apt-speedup     && echo "Acquire::http
      {No-Cache=True;};" > /etc/apt/apt.conf.d/no-cache     && apt-get -qq update
      && apt-get install --no-install-recommends -y locales     && locale-gen en_US.UTF-8
      && dpkg-reconfigure locales     && apt-get autoremove -y && apt-get clean &&
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ~/.cache/     && rm -rf /tmp/*
      /root/.cache/ /var/cache/* /galaxy-central/client/node_modules/ $GALAXY_VIRTUAL_ENV/src/
      /home/galaxy/.cache/ /home/galaxy/.npm/
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r postgres -g $GALAXY_POSTGRES_GID     && adduser --system --quiet
      --home /var/lib/postgresql --no-create-home --shell /bin/bash --gecos "" --uid
      $GALAXY_POSTGRES_UID --gid $GALAXY_POSTGRES_GID postgres     && apt-get -qq
      update && apt-get install --no-install-recommends -y software-properties-common
      gpg-agent curl sudo     && curl -fsSL https://download.docker.com/linux/ubuntu/gpg
      | sudo apt-key add -     && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu
      $(lsb_release -cs) stable"     && sudo add-apt-repository ppa:natefoo/slurm-drmaa     &&
      apt-get update -qq     && apt-get install nginx-extras nginx-common --no-install-recommends
      -y     && apt-get install docker-ce-cli --no-install-recommends -y     && apt-get
      install slurm-client slurmd slurmctld slurm-drmaa1 --no-install-recommends -y     &&
      ln -s /usr/lib/slurm-drmaa/lib/libdrmaa.so.1 /usr/lib/slurm-drmaa/lib/libdrmaa.so     &&
      apt-get install proftpd proftpd-mod-pgsql --no-install-recommends -y     &&
      apt-get install munge libmunge-dev --no-install-recommends -y     && apt-get
      install nano --no-install-recommends -y     && apt-get install htcondor --no-install-recommends
      -y     && apt-get install git --no-install-recommends -y     && apt-get install
      gridengine-common gridengine-drmaa1.0 --no-install-recommends -y     && apt-get
      install rabbitmq-server --no-install-recommends -y     && apt-get install --no-install-recommends
      -y libswitch-perl supervisor     && apt-get purge -y software-properties-common
      gpg-agent apt-transport-https python3-minimal      && apt-get autoremove -y
      && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm -rf
      ~/.cache/     && mkdir -p /etc/supervisor/conf.d/ /var/log/supervisor/     &&
      groupadd -r $GALAXY_USER -g $GALAXY_GID     && useradd -u $GALAXY_UID -r -g
      $GALAXY_USER -d $GALAXY_HOME -c "Galaxy user" $GALAXY_USER     && mkdir $EXPORT_DIR
      $GALAXY_HOME $GALAXY_LOGS_DIR && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_HOME
      $EXPORT_DIR $GALAXY_LOGS_DIR     && find /usr/lib/ -name '*.pyc' -delete     &&
      rm -rf /tmp/* /root/.cache/ /var/cache/* $GALAXY_ROOT/client/node_modules/ $GALAXY_VIRTUAL_ENV/src/
      /home/galaxy/.cache/ /home/galaxy/.npm/
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./bashrc
    - $GALAXY_HOME/.bashrc
  - CmdLine:
    - curl -s -L https://repo.continuum.io/miniconda/Miniconda2-4.7.10-Linux-x86_64.sh
      > ~/miniconda.sh     && /bin/bash ~/miniconda.sh -b -p $GALAXY_CONDA_PREFIX/     &&
      rm ~/miniconda.sh     && ln -s $GALAXY_CONDA_PREFIX/etc/profile.d/conda.sh /etc/profile.d/conda.sh     &&
      echo ". $GALAXY_CONDA_PREFIX/etc/profile.d/conda.sh" >> $GALAXY_HOME/.bashrc     &&
      echo "conda activate base" >> $GALAXY_HOME/.bashrc     && export PATH=$GALAXY_CONDA_PREFIX/bin/:$PATH     &&
      conda config --add channels defaults     && conda config --add channels bioconda     &&
      conda config --add channels conda-forge     && conda install virtualenv pip
      ephemeris     && chown $GALAXY_USER:$GALAXY_USER -R /tool_deps/ /etc/profile.d/conda.sh     &&
      conda clean --packages -t -i     && find $GALAXY_ROOT -name '*.pyc' -delete
      | true     && find /usr/lib/ -name '*.pyc' -delete | true     && find $GALAXY_CONDA_PREFIX/
      -name '*.pyc' -delete | true     && find $GALAXY_VIRTUAL_ENV -name '*.pyc' -delete
      | true     && rm -rf /tmp/* /root/.cache/ /var/cache/* $GALAXY_ROOT/client/node_modules/
      $GALAXY_VIRTUAL_ENV/src/ /home/galaxy/.cache/ /home/galaxy/.npm
    Name: run
    PrependShell: true
  - CmdLine:
    - cp $GALAXY_HOME/.bashrc ~/
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir $GALAXY_ROOT     && curl -L -s $GALAXY_REPO/archive/$GALAXY_RELEASE.tar.gz
      | tar xzf - --strip-components=1 -C $GALAXY_ROOT     && PATH=$GALAXY_CONDA_PREFIX/bin/:$PATH
      virtualenv $GALAXY_VIRTUAL_ENV     && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_VIRTUAL_ENV     &&
      chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_ROOT     && mkdir -p $GALAXY_CONFIG_DIR
      $GALAXY_CONFIG_DIR/web     && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_CONFIG_DIR     &&
      rm -rf /tmp/* /root/.cache/ /var/cache/* $GALAXY_ROOT/client/node_modules/ $GALAXY_VIRTUAL_ENV/src/
      /home/galaxy/.cache/ /home/galaxy/.npm     && su $GALAXY_USER -c "cp $GALAXY_ROOT/config/galaxy.yml.sample
      $GALAXY_CONFIG_FILE"     && find $GALAXY_ROOT -name '*.pyc' -delete | true     &&
      find /usr/lib/ -name '*.pyc' -delete | true     && find $GALAXY_CONDA_PREFIX/
      -name '*.pyc' -delete | true     && find $GALAXY_VIRTUAL_ENV -name '*.pyc' -delete
      | true     && rm -rf /tmp/* /root/.cache/ /var/cache/* $GALAXY_ROOT/client/node_modules/
      $GALAXY_VIRTUAL_ENV/src/ /home/galaxy/.cache/ /home/galaxy/.npm
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./reports_wsgi.ini.sample
    - $GALAXY_CONFIG_DIR/reports_wsgi.ini
  - Chown: ""
    Name: add
    SourcesAndDest:
    - sample_tool_list.yaml
    - $GALAXY_HOME/ephemeris/sample_tool_list.yaml
  - Chown: ""
    Name: add
    SourcesAndDest:
    - roles/
    - /ansible/roles
  - Chown: ""
    Name: add
    SourcesAndDest:
    - provision.yml
    - /ansible/provision.yml
  - Chown: ""
    Name: add
    SourcesAndDest:
    - postgresql_provision.yml
    - /ansible/postgresql_provision.yml
  - CmdLine:
    - apt update -qq && apt install --no-install-recommends -y ansible dirmngr gpg
      gpg-agent     && ansible-playbook /ansible/postgresql_provision.yml     && apt
      purge ansible dirmngr gpg gpg-agent -y && apt-get autoremove -y && apt-get clean
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && find $GALAXY_ROOT/ -name
      '*.pyc' -delete | true     && find /usr/lib/ -name '*.pyc' -delete | true     &&
      find $GALAXY_CONDA_PREFIX/ -name '*.pyc' -delete | true     && find $GALAXY_VIRTUAL_ENV
      -name '*.pyc' -delete | true     && rm -rf /tmp/* /root/.cache/ /var/cache/*
      $GALAXY_ROOT/client/node_modules/ $GALAXY_VIRTUAL_ENV/src/ /home/galaxy/.cache/
      /home/galaxy/.npm
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./setup_postgresql.py
    - /usr/local/bin/setup_postgresql.py
  - CmdLine:
    - mkdir -p /shed_tools $EXPORT_DIR/ftp/     && chown $GALAXY_USER:$GALAXY_USER
      /shed_tools $EXPORT_DIR/ftp     && ln -s /tool_deps/ $EXPORT_DIR/tool_deps     &&
      chown $GALAXY_USER:$GALAXY_USER $EXPORT_DIR/tool_deps     && apt update -qq
      && apt install --no-install-recommends -y ansible     && ansible-playbook /ansible/provision.yml         --extra-vars
      galaxy_venv_dir=$GALAXY_VIRTUAL_ENV         --extra-vars galaxy_log_dir=$GALAXY_LOGS_DIR         --extra-vars
      galaxy_user_name=$GALAXY_USER         --extra-vars galaxy_config_file=$GALAXY_CONFIG_FILE         --extra-vars
      galaxy_config_dir=$GALAXY_CONFIG_DIR         --extra-vars galaxy_job_conf_path=$GALAXY_CONFIG_JOB_CONFIG_FILE         --extra-vars
      galaxy_job_metrics_conf_path=$GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE         --extra-vars
      supervisor_manage_slurm=""         --extra-vars galaxy_extras_config_condor=True         --extra-vars
      galaxy_extras_config_condor_docker=True         --extra-vars galaxy_extras_config_rabbitmq=True         --extra-vars
      galaxy_extras_config_cvmfs=True         --extra-vars proftpd_db_connection=galaxy@galaxy         --extra-vars
      proftpd_files_dir=$EXPORT_DIR/ftp         --extra-vars proftpd_use_sftp=True         --extra-vars
      galaxy_extras_docker_legacy=False         --extra-vars galaxy_minimum_version=19.01         --extra-vars
      supervisor_postgres_config_path=$PG_CONF_DIR_DEFAULT/postgresql.conf         --extra-vars
      supervisor_postgres_autostart=false         --extra-vars nginx_use_remote_header=True         --tags=galaxyextras,cvmfs
      -c local     && cd $GALAXY_ROOT && ./scripts/common_startup.sh     && cd /     &&
      rm $PG_DATA_DIR_DEFAULT -rf     && python /usr/local/bin/setup_postgresql.py
      --dbuser galaxy --dbpassword galaxy --db-name galaxy --dbpath $PG_DATA_DIR_DEFAULT
      --dbversion $PG_VERSION     && service postgresql start     && . $GALAXY_VIRTUAL_ENV/bin/activate     &&
      sh $GALAXY_ROOT/create_db.sh -c "$GALAXY_CONFIG_FILE"     && python /usr/local/bin/create_galaxy_user.py
      --user $GALAXY_DEFAULT_ADMIN_USER --password $GALAXY_DEFAULT_ADMIN_PASSWORD
      -c $GALAXY_CONFIG_FILE --key $GALAXY_DEFAULT_ADMIN_KEY     && service postgresql
      stop     && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*
      /tmp/* /var/tmp/* && rm -rf ~/.cache/     && find $GALAXY_ROOT/ -name '*.pyc'
      -delete | true     && find /usr/lib/ -name '*.pyc' -delete | true     && find
      /var/log/ -name '*.log' -delete | true     && find $GALAXY_CONDA_PREFIX/ -name
      '*.pyc' -delete | true     && find $GALAXY_VIRTUAL_ENV -name '*.pyc' -delete
      | true     && rm -rf /tmp/* /root/.cache/ /var/cache/* $GALAXY_ROOT/client/node_modules/
      $GALAXY_VIRTUAL_ENV/src/ /home/galaxy/.cache/ /home/galaxy/.npm
    Name: run
    PrependShell: true
  - CmdLine:
    - 'touch /var/log/condor/StartLog /var/log/condor/StarterLog /var/log/condor/CollectorLog
      /var/log/condor/NegotiatorLog &&     mkdir -p /var/run/condor/ /var/lock/condor/
      &&     chown -R condor: /var/log/condor/StartLog /var/log/condor/StarterLog
      /var/log/condor/CollectorLog /var/log/condor/NegotiatorLog /var/run/condor/
      /var/lock/condor/'
    Name: run
    PrependShell: true
  - Name: user
    User: $GALAXY_USER
  - Name: workdir
    Path: $GALAXY_ROOT
  - Env:
    - Key: GALAXY_CONFIG_JOB_WORKING_DIRECTORY
      Value: $EXPORT_DIR/galaxy-central/database/job_working_directory
    - Key: GALAXY_CONFIG_FILE_PATH
      Value: $EXPORT_DIR/galaxy-central/database/files
    - Key: GALAXY_CONFIG_NEW_FILE_PATH
      Value: $EXPORT_DIR/galaxy-central/database/files
    - Key: GALAXY_CONFIG_TEMPLATE_CACHE_PATH
      Value: $EXPORT_DIR/galaxy-central/database/compiled_templates
    - Key: GALAXY_CONFIG_CITATION_CACHE_DATA_DIR
      Value: $EXPORT_DIR/galaxy-central/database/citations/data
    - Key: GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY
      Value: $EXPORT_DIR/galaxy-central/database/pbs
    - Key: GALAXY_CONFIG_FTP_UPLOAD_DIR
      Value: $EXPORT_DIR/ftp
    - Key: GALAXY_CONFIG_FTP_UPLOAD_SITE
      Value: galaxy.docker.org
    - Key: GALAXY_CONFIG_USE_PBKDF2
      Value: "False"
    - Key: GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE
      Value: /_x_accel_redirect
    - Key: GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE
      Value: /_x_accel_redirect
    - Key: GALAXY_CONFIG_DYNAMIC_PROXY_MANAGE
      Value: "False"
    - Key: GALAXY_CONFIG_VISUALIZATION_PLUGINS_DIRECTORY
      Value: config/plugins/visualizations
    - Key: GALAXY_CONFIG_TRUST_IPYTHON_NOTEBOOK_CONVERSION
      Value: "True"
    - Key: GALAXY_CONFIG_TOOLFORM_UPGRADE
      Value: "True"
    - Key: GALAXY_CONFIG_SANITIZE_ALL_HTML
      Value: "False"
    - Key: GALAXY_CONFIG_TOOLFORM_UPGRADE
      Value: "True"
    - Key: GALAXY_CONFIG_WELCOME_URL
      Value: $GALAXY_CONFIG_DIR/web/welcome.html
    - Key: GALAXY_CONFIG_OVERRIDE_DEBUG
      Value: "False"
    - Key: GALAXY_CONFIG_ENABLE_QUOTAS
      Value: "True"
    - Key: HOME
      Value: $GALAXY_HOME
    - Key: GALAXY_CONDA_PREFIX
      Value: $GALAXY_CONFIG_TOOL_DEPENDENCY_DIR/_conda
    Name: env
  - Chown: ""
    Name: add
    SourcesAndDest:
    - GalaxyDocker.png
    - $GALAXY_CONFIG_DIR/web/welcome_image.png
  - Chown: ""
    Name: add
    SourcesAndDest:
    - welcome.html
    - $GALAXY_CONFIG_DIR/web/welcome.html
  - CmdLine:
    - sed -i 's|database|..|' $GALAXY_ROOT/config/shed_tool_conf.xml
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - Chown: ""
    Name: add
    SourcesAndDest:
    - ./tool_sheds_conf.xml
    - $GALAXY_HOME/tool_sheds_conf.xml
  - Chown: ""
    Name: add
    SourcesAndDest:
    - install_tools_wrapper.sh
    - /usr/bin/install-tools
  - Chown: ""
    Name: add
    SourcesAndDest:
    - install_biojs_vis.sh
    - /usr/bin/install-biojs
  - CmdLine:
    - chmod +x /usr/bin/install-tools /usr/bin/install-biojs &&     cd /usr/bin/ &&
      curl https://git.embl.de/grp-gbcs/galaxy-dir-sync/raw/master/src/galaxy-dir-sync.py
      > galaxy-dir-sync.py &&     chmod +x galaxy-dir-sync.py
    Name: run
    PrependShell: true
  - CmdLine:
    - echo "DISCARD_SESSION_KEYRING_ON_STARTUP=False" > /etc/condor/condor_config.local
      &&     echo "TRUST_UID_DOMAIN=true" >> /etc/condor/condor_config.local
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://github.com/krallin/tini/releases/download/v0.18.0/tini
    - /sbin/tini
  - CmdLine:
    - chmod +x /sbin/tini
    Name: run
    PrependShell: true
  - Env:
    - Key: GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG
      Value: $EXPORT_DIR/galaxy-central/integrated_tool_panel.xml
    Name: env
  - Name: expose
    Ports:
    - :21
  - Name: expose
    Ports:
    - :80
  - Name: expose
    Ports:
    - :443
  - Name: expose
    Ports:
    - :8800
  - Name: expose
    Ports:
    - :9002
  - Name: volume
    Volumes:
    - /export/
    - /data/
    - /var/lib/docker
  - Chown: ""
    Name: add
    SourcesAndDest:
    - install_db.sh
    - /usr/bin/install_db.sh
  - Chown: ""
    Name: add
    SourcesAndDest:
    - startup.sh
    - /usr/bin/startup
  - Env:
    - Key: SUPERVISOR_POSTGRES_AUTOSTART
      Value: "True"
    - Key: SUPERVISOR_MANAGE_POSTGRES
      Value: "True"
    - Key: SUPERVISOR_MANAGE_CRON
      Value: "True"
    - Key: SUPERVISOR_MANAGE_PROFTP
      Value: "True"
    - Key: SUPERVISOR_MANAGE_REPORTS
      Value: "True"
    - Key: SUPERVISOR_MANAGE_IE_PROXY
      Value: "True"
    - Key: SUPERVISOR_MANAGE_CONDOR
      Value: "True"
    - Key: SUPERVISOR_MANAGE_SLURM
      Value: ""
    - Key: HOST_DOCKER_LEGACY
      Value: ""
    - Key: GALAXY_EXTRAS_CONFIG_POSTGRES
      Value: "True"
    - Key: STARTUP_EXPORT_USER_FILES
      Value: "True"
    Name: env
  - CmdLine:
    - chmod +x /usr/bin/install_db.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - /sbin/tini
    - --
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - /usr/bin/startup
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:18.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:18.04
