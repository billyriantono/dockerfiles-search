{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:16.04",
      "SourceCode": "FROM ubuntu:16.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:16.04"
      },
      "Commands": [
        {
          "Maintainer": "Vaggelis Kapartzianis \u003cvkapartzianis@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "Z_VERSION",
              "Value": "\"0.7.3\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LOG_TAG",
              "Value": "\"[ZEPPELIN_${Z_VERSION}]:\""
            },
            {
              "Key": "Z_HOME",
              "Value": "\"/usr/local/zeppelin\""
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG update and install basic packages\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y locales \u0026\u0026     locale-gen $LANG \u0026\u0026     apt-get install -y software-properties-common \u0026\u0026     apt -y autoclean \u0026\u0026     apt -y dist-upgrade \u0026\u0026     apt-get install -y build-essential"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG install tini related packages\" \u0026\u0026     apt-get install -y wget curl grep sed dpkg \u0026\u0026     TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` \u0026\u0026     curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" \u003e tini.deb \u0026\u0026     dpkg -i tini.deb \u0026\u0026     rm tini.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "/usr/lib/jvm/java-8-openjdk-amd64"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Install java8\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y openjdk-8-jdk \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Install miniconda2 related packages\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y bzip2 ca-certificates     libglib2.0-0 libxext6 libsm6 libxrender1     git mercurial subversion \u0026\u0026     echo 'export PATH=/opt/conda/bin:$PATH' \u003e /etc/profile.d/conda.sh \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.11-Linux-x86_64.sh -O ~/miniconda.sh \u0026\u0026     /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026\u0026     rm ~/miniconda.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "/opt/conda/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Install python related packages\" \u0026\u0026     apt-get -y update \u0026\u0026     apt-get install -y python-dev python-pip \u0026\u0026     apt-get install -y gfortran \u0026\u0026     apt-get install -y libblas-dev libatlas-dev liblapack-dev \u0026\u0026     apt-get install -y libpng-dev libfreetype6-dev libxft-dev \u0026\u0026     apt-get install -y python-tk libxml2-dev libxslt-dev zlib1g-dev \u0026\u0026     pip install numpy \u0026\u0026     pip install matplotlib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Install R related packages\" \u0026\u0026     echo \"deb http://cran.rstudio.com/bin/linux/ubuntu xenial/\" | tee -a /etc/apt/sources.list \u0026\u0026     gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 \u0026\u0026     gpg -a --export E084DAB9 | apt-key add - \u0026\u0026     apt-get -y update \u0026\u0026     apt-get -y install r-base r-base-dev \u0026\u0026     R -e \"install.packages('knitr', repos='http://cran.us.r-project.org')\" \u0026\u0026     R -e \"install.packages('ggplot2', repos='http://cran.us.r-project.org')\" \u0026\u0026     R -e \"install.packages('googleVis', repos='http://cran.us.r-project.org')\" \u0026\u0026     R -e \"install.packages('data.table', repos='http://cran.us.r-project.org')\" \u0026\u0026     apt-get -y install libcurl4-gnutls-dev libssl-dev \u0026\u0026     R -e \"install.packages('devtools', repos='http://cran.us.r-project.org')\" \u0026\u0026     R -e \"install.packages('Rcpp', repos='http://cran.us.r-project.org')\" \u0026\u0026     Rscript -e \"library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')\" \u0026\u0026     R -e \"install.packages('kableExtra', repos='http://cran.us.r-project.org')\" \u0026\u0026     Rscript -e \"library('devtools'); install_github('vkapartzianis/formattable')\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Set up Hadoop\" \u0026\u0026     cd ~ \u0026\u0026     apt-get install -y openssh-client openssh-server \u0026\u0026     wget http://archive.apache.org/dist/hadoop/core/hadoop-2.8.2/hadoop-2.8.2.tar.gz \u0026\u0026     tar -zxvf hadoop-2.8.2.tar.gz \u0026\u0026     mv hadoop-2.8.2 /usr/local \u0026\u0026     ln -s hadoop-2.8.2 /usr/local/hadoop \u0026\u0026     rm hadoop-2.8.2.tar.gz \u0026\u0026     echo \"JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" \u003e\u003e /usr/local/hadoop/etc/hadoop/hadoop-env.sh \u0026\u0026     echo \"HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop\" \u003e\u003e /usr/local/hadoop/etc/hadoop/hadoop-env.sh \u0026\u0026     apt install xmlstarlet \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration\" -t elem -n \"property\" /usr/local/hadoop/etc/hadoop/core-site.xml \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration/property\" -t elem -n \"name\" -v \"fs.defaultFS\" /usr/local/hadoop/etc/hadoop/core-site.xml \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration/property\" -t elem -n \"value\" -v \"hdfs://127.0.0.1:8020\" /usr/local/hadoop/etc/hadoop/core-site.xml \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration\" -t elem -n \"property\" /usr/local/hadoop/etc/hadoop/hdfs-site.xml \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration/property\" -t elem -n \"name\" -v \"dfs.replication\" /usr/local/hadoop/etc/hadoop/hdfs-site.xml \u0026\u0026     xmlstarlet ed -P -L -s \"/configuration/property\" -t elem -n \"value\" -v \"1\" /usr/local/hadoop/etc/hadoop/hdfs-site.xml"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Set up Zeppelin\" \u0026\u0026     cd ~ \u0026\u0026     wget http://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-netinst.tgz \u0026\u0026     tar -zxvf zeppelin-${Z_VERSION}-bin-netinst.tgz \u0026\u0026     zeppelin-${Z_VERSION}-bin-netinst/bin/install-interpreter.sh --name flink,md,pig,python,shell \u0026\u0026     mv zeppelin-${Z_VERSION}-bin-netinst /usr/local/zeppelin-${Z_VERSION} \u0026\u0026     ln -s zeppelin-${Z_VERSION} /usr/local/zeppelin \u0026\u0026     rm zeppelin-${Z_VERSION}-bin-netinst.tgz \u0026\u0026     /usr/bin/pip install numpy \u0026\u0026     /usr/bin/pip install matplotlib \u0026\u0026     apt-get install r-cran-scatterplot3d \u0026\u0026     /usr/bin/pip install py4j \u0026\u0026     /opt/conda/bin/pip install py4j"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Set up shiro-aad\" \u0026\u0026     cd ~ \u0026\u0026     mkdir shiro-aad \u0026\u0026 cd shiro-aad \u0026\u0026     wget https://repo.maven.apache.org/maven2/com/nitorcreations/shiro-aad/1.0.1/shiro-aad-1.0.1.jar \u0026\u0026     wget -O pom.xml https://repo.maven.apache.org/maven2/com/nitorcreations/shiro-aad/1.0.1/shiro-aad-1.0.1.pom \u0026\u0026     apt-get -y install maven \u0026\u0026     mvn dependency:copy-dependencies -DoutputDirectory=. \u0026\u0026     yes | cp *.jar /usr/local/zeppelin/lib"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/etc/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "echo \"$LOG_TAG Cleanup\" \u0026\u0026     chown root:root /etc/entrypoint.sh \u0026\u0026     chmod 700 /etc/entrypoint.sh \u0026\u0026     apt-get autoclean \u0026\u0026     apt-get clean"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8080"
          ]
        },
        {
          "CmdLine": [
            "/usr/bin/tini",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "workdir",
          "Path": "${Z_HOME}"
        },
        {
          "CmdLine": [
            "/etc/entrypoint.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}