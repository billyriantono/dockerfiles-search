{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:18.04",
      "SourceCode": "FROM ubuntu:18.04",
      "Platform": "",
      "From": {
        "Image": "ubuntu:18.04"
      },
      "Commands": [
        {
          "Maintainer": "Taewan Kim \u003ctaewanme@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update    \u0026\u0026  apt-get install -y curl apt-utils git make build-essential                libssl-dev libffi-dev zlib1g-dev libbz2-dev libreadline-dev                  libsqlite3-dev python3.6 python-pip python3-pip libjpeg8-dev python-dev                language-pack-ko python3-dev libxml2 libxml2-dev libxslt1-dev                fonts-nanum fonts-nanum-coding fonts-nanum-extra                cmake git wget unzip yasm pkg-config libswscale-dev                libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libavformat-dev libpq-dev    \u0026\u0026 apt-get clean    \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "MV",
              "Value": "8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "UV",
              "Value": "181"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "BV",
              "Value": "13"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JDK_TAR_NAME",
              "Value": "jdk-${MV}u${UV}-linux-x64.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_DIR_NAME",
              "Value": "jdk1.${MV}.0_${UV}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "INSTALL_HOME",
              "Value": "/usr/local/java"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME_DIR",
              "Value": "${INSTALL_HOME}/${JAVA_DIR_NAME}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOWNLOAD_URL",
              "Value": "http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JAVA_HOME",
              "Value": "${JAVA_HOME_DIR}"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:$MAVEN_HOME/bin:$JAVA_HOME/bin"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "curl -b \"oraclelicense=accept-securebackup-cookie\" -L -C - -O ${DOWNLOAD_URL} \u0026\u0026  mkdir -p ${INSTALL_HOME} \u0026\u0026  tar xvfz ./${JDK_TAR_NAME} -C ${INSTALL_HOME} \u0026\u0026  rm -f ./${JDK_TAR_NAME}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "update-alternatives --install \"/usr/bin/java\" \"java\" \"${JAVA_HOME_DIR}/bin/java\" 1 \u0026\u0026  update-alternatives --install \"/usr/bin/javac\" \"javac\" \"${JAVA_HOME_DIR}/bin/javac\" 1 \u0026\u0026  update-alternatives --install \"/usr/bin/javaws\" \"javaws\" \"${JAVA_HOME_DIR}/bin/javaws\" 1"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "locale-gen ko_KR.UTF-8"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LANG",
              "Value": "ko_KR.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LANGUAGE",
              "Value": "ko_KR.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "LC_ALL",
              "Value": "ko_KR.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "python3 -m pip install --upgrade pip"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip3 install xlrd             \u0026\u0026 pip3 install numpy           \u0026\u0026 pip3 install pillow          \u0026\u0026 pip3 install matplotlib      \u0026\u0026 pip3 install scikit-learn    \u0026\u0026 pip3 install Pandas          \u0026\u0026 pip3 install scrapy          \u0026\u0026 pip3 install NLTK            \u0026\u0026 pip3 install bokeh           \u0026\u0026 pip3 install NetworkX        \u0026\u0026 pip3 install scipy           \u0026\u0026 pip3 install Seaborn         \u0026\u0026 pip3 install jupyter          \u0026\u0026 pip3 install beautifulsoup4   \u0026\u0026 pip3 install keras            \u0026\u0026 pip3 install http://download.pytorch.org/whl/cpu/torch-0.4.1-cp36-cp36m-linux_x86_64.whl  \u0026\u0026 pip3 install torchvision     \u0026\u0026 pip3 install --upgrade tensorflow  \u0026\u0026 pip3 install jpype1  \u0026\u0026 pip3 install konlpy==0.4.4  \u0026\u0026 pip3 install torchtext  \u0026\u0026 pip3 install mglearn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/"
        },
        {
          "Env": [
            {
              "Key": "OPENCV_VERSION",
              "Value": "\"3.4.3\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \u0026\u0026 unzip ${OPENCV_VERSION}.zip \u0026\u0026 mkdir /opencv-${OPENCV_VERSION}/cmake_binary \u0026\u0026 cd /opencv-${OPENCV_VERSION}/cmake_binary \u0026\u0026 cmake -DBUILD_TIFF=ON   -DBUILD_opencv_java=OFF   -DWITH_CUDA=OFF   -DWITH_OPENGL=ON   -DWITH_OPENCL=ON   -DWITH_IPP=ON   -DWITH_TBB=ON   -DWITH_EIGEN=ON   -DWITH_V4L=ON   -DBUILD_TESTS=OFF   -DBUILD_PERF_TESTS=OFF   -DCMAKE_BUILD_TYPE=RELEASE   -DCMAKE_INSTALL_PREFIX=$(python3.6 -c \"import sys; print(sys.prefix)\")   -DPYTHON_EXECUTABLE=$(which python3)   -DPYTHON_INCLUDE_DIR=$(python3.6 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")   -DPYTHON_PACKAGES_PATH=$(python3.6 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\")   .. \u0026\u0026 make install \u0026\u0026 rm /${OPENCV_VERSION}.zip \u0026\u0026 rm -r /opencv-${OPENCV_VERSION}"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /root/.jupyter/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "jupyter_notebook_config.py",
            "/root/.jupyter/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "start-notebook.sh",
            "/usr/local/bin"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "6006"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/root/ipython"
          ]
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "/bin/bash",
            "start-notebook.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}