{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.6",
      "SourceCode": "FROM alpine:3.6",
      "Platform": "",
      "From": {
        "Image": "alpine:3.6"
      },
      "Commands": [
        {
          "Maintainer": "Jermine \u003cJermine.hu@qq.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "GOLANG_VERSION",
              "Value": "1.9"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOPATH",
              "Value": "/go"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \u0026\u0026 chmod -R 777 \"$GOPATH\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "$GOPATH"
        },
        {
          "Name": "expose",
          "Ports": [
            "4150",
            "4151",
            "4160",
            "4161",
            "4170",
            "4171"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/data"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/etc/ssl/certs"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "build.sh",
            "/build.sh"
          ]
        },
        {
          "CmdLine": [
            "set -eux; \tapk add --no-cache --virtual .build-deps \t   ca-certificates \t    git \t\tmake \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo ; \t    export \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGO386=\"$(go env GO386)\" \t\tGOARM=\"$(go env GOARM)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" ; \twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo 'a4ab229028ed167ba1986825751463605264e44868362ca8e7accc8be057e993 *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \tcd /usr/local/go/src; \tfor p in /go-alpine-patches/*.patch; do \t\t[ -f \"$p\" ] || continue; \t\tpatch -p2 -i \"$p\"; \tdone; \t./make.bash; \trm -rf /go-alpine-patches; \texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version ;wget https://raw.githubusercontent.com/pote/gpm/v1.4.0/bin/gpm \u0026\u0026 chmod +x gpm \u0026\u0026 mv gpm /usr/local/bin ;go get github.com/nsqio/nsq/... ;     cd /go/src/github.com/nsqio/nsq ;     gpm install ;     pwd ;    ls -alh ;    mv /build.sh . ;    bash build.sh ;     ls -alh /usr/local/bin ;      pwd ;    ls -alh ;   ln -s /usr/local/bin/*nsq* / ;  ln -s /usr/local/bin/*nsq* /bin/ ;  ls /usr/local/bin -alh ;   make clean ; \trm -r /var/cache/apk ; \trm -r /usr/share/man ; \trm -rf /go /usr/local/go ;   apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}