{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "node:12-alpine3.10",
      "SourceCode": "FROM node:12-alpine3.10",
      "Platform": "",
      "From": {
        "Image": "node:12-alpine3.10"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "Maintainer",
              "Value": "\"Ansley Leung\""
            },
            {
              "Key": "Description",
              "Value": "\"Hexo with theme NexT: Auto generate and deploy website use GITHUB webhook\""
            },
            {
              "Key": "License",
              "Value": "\"MIT License\""
            },
            {
              "Key": "Version",
              "Value": "\"12.14.0\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Shanghai"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk update \u0026\u0026     apk upgrade \u0026\u0026     apk add --no-cache tzdata \u0026\u0026     cp /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026     echo $TZ \u003e /etc/timezone \u0026\u0026     apk del tzdata \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     apk add --no-cache coreutils ca-certificates curl openssl git openssh \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.17.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NJS_VERSION",
              "Value": "0.3.7"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PKG_RELEASE",
              "Value": "1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 addgroup -g 101 -S nginx     \u0026\u0026 adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx     \u0026\u0026 apkArch=\"$(cat /etc/apk/arch)\"     \u0026\u0026 nginxPackages=\"         nginx=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE}     \"     \u0026\u0026 case \"$apkArch\" in         x86_64)             set -x             \u0026\u0026 KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\"             \u0026\u0026 apk add --no-cache --virtual .cert-deps                 openssl             \u0026\u0026 wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub             \u0026\u0026 if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then                 echo \"key verification succeeded!\";                 mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/;             else                 echo \"key verification failed!\";                 exit 1;             fi             \u0026\u0026 apk del .cert-deps             \u0026\u0026 apk add -X \"https://nginx.org/packages/mainline/alpine/v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages             ;;         *)             set -x             \u0026\u0026 tempDir=\"$(mktemp -d)\"             \u0026\u0026 chown nobody:nobody $tempDir             \u0026\u0026 apk add --no-cache --virtual .build-deps                 gcc                 libc-dev                 make                 openssl-dev                 pcre-dev                 zlib-dev                 linux-headers                 libxslt-dev                 gd-dev                 geoip-dev                 perl-dev                 libedit-dev                 mercurial                 bash                 alpine-sdk                 findutils             \u0026\u0026 su nobody -s /bin/sh -c \"                 export HOME=${tempDir}                 \u0026\u0026 cd ${tempDir}                 \u0026\u0026 hg clone https://hg.nginx.org/pkg-oss                 \u0026\u0026 cd pkg-oss                 \u0026\u0026 hg up ${NGINX_VERSION}-${PKG_RELEASE}                 \u0026\u0026 cd alpine                 \u0026\u0026 make all                 \u0026\u0026 apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk                 \u0026\u0026 abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz                 \"             \u0026\u0026 cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/             \u0026\u0026 apk del .build-deps             \u0026\u0026 apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages             ;;     esac     \u0026\u0026 if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi     \u0026\u0026 if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi     \u0026\u0026 if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi     \u0026\u0026 apk add --no-cache --virtual .gettext gettext     \u0026\u0026 mv /usr/bin/envsubst /tmp/         \u0026\u0026 runDeps=\"$(         scanelf --needed --nobanner /tmp/envsubst             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )\"     \u0026\u0026 apk add --no-cache $runDeps     \u0026\u0026 apk del .gettext     \u0026\u0026 mv /tmp/envsubst /usr/local/bin/     \u0026\u0026 apk add --no-cache tzdata     \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log     \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "LE_WORKING_DIR",
              "Value": "/opt/acme.sh"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     curl -sSL https://get.acme.sh | sh \u0026\u0026     crontab -l | sed \"s|acme.sh --cron|acme.sh --cron --renew-hook \\\"nginx -s reload\\\"|g\" | crontab - \u0026\u0026     ln -s /opt/acme.sh/acme.sh /usr/bin/acme.sh \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     npm install hexo-cli -g \u0026\u0026     npm install pm2 -g \u0026\u0026     mkdir -p /opt/hexo /var/lib/hexo \u0026\u0026     cd /opt/hexo \u0026\u0026     hexo init . \u0026\u0026     npm install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     cd /opt/hexo \u0026\u0026     git clone https://github.com/theme-next/hexo-theme-next themes/next \u0026\u0026     git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace \u0026\u0026     git clone https://github.com/theme-next/theme-next-pdf themes/next/source/lib/pdf \u0026\u0026     git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest \u0026\u0026     git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three \u0026\u0026     git clone https://github.com/theme-next/theme-next-canvas-ribbon themes/next/source/lib/canvas-ribbon"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     cd /opt/hexo \u0026\u0026     : \u0026\u0026     npm install hexo-tag-aplayer --save \u0026\u0026     npm install hexo-tag-dplayer --save \u0026\u0026     npm install hexo-filter-flowchart --save \u0026\u0026     : \u0026\u0026     npm uninstall hexo-renderer-marked --save \u0026\u0026     npm install hexo-renderer-markdown-it --save"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     cd /opt/hexo \u0026\u0026     npm install hexo-filter-emoji --save \u0026\u0026     npm install hexo-filter-optimize --save \u0026\u0026     npm install hexo-filter-mathjax --save \u0026\u0026     npm install hexo-symbols-count-time --save \u0026\u0026     : \u0026\u0026     npm install hexo-generator-feed --save \u0026\u0026     npm install hexo-generator-seo-friendly-sitemap --save \u0026\u0026     npm install hexo-generator-searchdb --save \u0026\u0026     : \u0026\u0026     npm uninstall hexo-generator-index --save \u0026\u0026     npm install hexo-generator-indexed --save \u0026\u0026     : \u0026\u0026     npm install theme-next/theme-next-calendar --save \u0026\u0026     npm install theme-next/hexo-next-coauthor --save \u0026\u0026     npm install theme-next/hexo-next-utteranc --save \u0026\u0026     npm install theme-next/hexo-next-share --save \u0026\u0026     npm install theme-next/hexo-next-title --save \u0026\u0026     npm install 1v9/hexo-next-nightmode --save"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     cd /opt/hexo \u0026\u0026     npm install github-webhook-handler \u0026\u0026     npm install gogs-webhook-handler \u0026\u0026     npm install node-gitlab-webhook"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/hexo"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./nginx.vh.default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./404.html",
            "/usr/share/nginx/html/404.html"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./svg404.html",
            "/usr/share/nginx/html/svg404.html"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./50x.html",
            "/usr/share/nginx/html/50x.html"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./nginxBlocksIP.sh",
            "/nginxBlocksIP.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./nginxLogRotate.sh",
            "/nginxLogRotate.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./index.js",
            "/var/lib/hexo/index.js"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./gulpfile.js",
            "/var/lib/hexo/gulpfile.js"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./deploy.sh",
            "/var/lib/hexo/deploy.sh"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "set -ex \u0026\u0026     mkdir -p /etc/nginx/snippets \u0026\u0026     touch /etc/nginx/snippets/BlocksIP.conf \u0026\u0026     chmod +x /var/lib/hexo/deploy.sh /entrypoint.sh \u0026\u0026     chmod +x /nginxBlocksIP.sh /nginxLogRotate.sh \u0026\u0026     (crontab -l 2\u003e/dev/null || true; echo \"0 0 * * * /nginxLogRotate.sh \u003e /dev/null\") | crontab - \u0026\u0026     rm -rf /tmp/* /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "80"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "5000"
          ]
        },
        {
          "Name": "stopsignal",
          "Signal": "SIGTERM"
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}