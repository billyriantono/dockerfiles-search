{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "quantumobject/docker-baseimage:18.04",
      "SourceCode": "FROM quantumobject/docker-baseimage:18.04",
      "Platform": "",
      "From": {
        "Image": "quantumobject/docker-baseimage:18.04"
      },
      "Commands": [
        {
          "Maintainer": "Angel Rodriguez  \"angel@quantumobject.com\"",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y -q --no-install-recommends apt-utils                     git                     build-essential                     bzip2                     unzip                     libcairo2-dev libpango1.0-0 libpango1.0-dev zlib1g-dev tk-dev tcl-dev                     glib2.0                     file                     python3                     python3-dev                      file                     ca-certificates                     libsm6                     pandoc                     texlive-latex-base                     texlive-latex-extra                     texlive-fonts-extra                     texlive-fonts-recommended                     libxrender1                     gfortran                     gcc                     fonts-dejavu                     libglib2.0-dev                     librsvg2-dev                     libpixman-1-dev                     hdf5-tools                     glpk-utils                     libnlopt0                     imagemagick                     inkscape                     gettext                     libreadline-dev                     libncurses-dev                     libpcre3-dev                     libgnutls28-dev                     tmux                     pkg-config                     pdf2svg                     libc6                     libc6-dev                     python-distribute                     python3-software-properties                     software-properties-common                     python3-setuptools                     python3-yaml                     python-m2crypto                     python-poppler                     python3-crypto                     python3-msgpack                     libffi-dev                     libssl-dev                     libzmq3-dev                     python3-pip                     python3-zmq                     python3-jinja2                     python3-requests                     python3-numpy                     python3-isodate                     libsundials-cvodes2                     libsundials-ida2                     libnlopt-dev                     openmpi-bin                     libopenmpi-dev                     libblosc-dev                     ffmpeg  tzdata                    libgmp-dev libglpk-dev                     libmumps-dev                     \u0026\u0026 apt-get clean                     \u0026\u0026 rm -rf /tmp/* /var/tmp/*                      \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "JULIA_PKGDIR",
              "Value": "/opt/julia"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JULIA_VERSION",
              "Value": "1.1.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /opt/julia-${JULIA_VERSION} \u0026\u0026     cd /tmp \u0026\u0026     wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \u0026\u0026     echo \"f0a83a139a89a2ccf2316814e5ee1c0c809fca02cbaf4baf3c1fd8eb71594f06 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - \u0026\u0026     tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 \u0026\u0026     rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/opt/conda"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONDA_JL_HOME",
              "Value": "$CONDA_DIR/conda_jl"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir /etc/julia \u0026\u0026     echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" \u003e\u003e /etc/julia/juliarc.jl \u0026\u0026     mkdir $JULIA_PKGDIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir -p /etc/my_init.d"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "startup.sh",
            "/etc/my_init.d/startup.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /etc/my_init.d/startup.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "mkdir /etc/service/ijulia"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "ijulia.sh",
            "/etc/service/ijulia/run"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /etc/service/ijulia/run"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "pre-conf.sh",
            "/sbin/pre-conf"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /sbin/pre-conf  ; sync     \u0026\u0026 /bin/bash -c /sbin/pre-conf     \u0026\u0026 rm /sbin/pre-conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "after_install.sh",
            "/sbin/after_install"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /sbin/after_install"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8998"
          ]
        },
        {
          "CmdLine": [
            "/sbin/my_init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}