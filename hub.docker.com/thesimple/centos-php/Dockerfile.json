{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "centos:7",
      "SourceCode": "FROM centos:7",
      "Platform": "",
      "From": {
        "Image": "centos:7"
      },
      "Commands": [
        {
          "Maintainer": "Aleksandr Lykhouzov \u003clykhouzov@gmail.com\u003e",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "PHP_VERSION",
              "Value": "71"
            },
            {
              "Key": "XDEBUG_VERSION",
              "Value": "2.6.0"
            },
            {
              "Key": "IONCUBE_VERSION",
              "Value": "7.1"
            },
            {
              "Key": "PHPREDIS_VERSION",
              "Value": "4.0.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "MAGE_ROOT",
              "Value": "/var/www/html/magento"
            },
            {
              "Key": "MAGE_CRON_EXPR",
              "Value": "\"*/10 * * * *\""
            },
            {
              "Key": "HOSTNAME",
              "Value": "magento.loc"
            },
            {
              "Key": "SERVER_LISTEN_PORT",
              "Value": "80"
            },
            {
              "Key": "TERM",
              "Value": "xterm"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "./docker-entrypoint.sh",
            "/"
          ]
        },
        {
          "CmdLine": [
            "rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;     rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7;    rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm;     rpm --import https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-el7;    yum -y swap -- remove fakesystemd -- install systemd systemd-libs;     yum -y update;    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i ==     systemd-tmpfiles-setup.service ] || rm -f $i; done);     rm -f /lib/systemd/system/multi-user.target.wants/*;    rm -f /etc/systemd/system/*.wants/*;    rm -f /lib/systemd/system/local-fs.target.wants/*;     rm -f /lib/systemd/system/sockets.target.wants/*udev*;     rm -f /lib/systemd/system/sockets.target.wants/*initctl*;     rm -f /lib/systemd/system/basic.target.wants/*;    rm -f /lib/systemd/system/anaconda.target.wants/*;    yum install -y --enablerepo=webtatic-testing re2c crontabs which logrotate rsyslog rsyslog-elasticsearch     php${PHP_VERSION}w-fpm php${PHP_VERSION}w-devel php${PHP_VERSION}w-ftp php${PHP_VERSION}w-opcache php${PHP_VERSION}w-imap php${PHP_VERSION}w-mysql     php${PHP_VERSION}w-curl php${PHP_VERSION}w-gd php${PHP_VERSION}w-mcrypt php${PHP_VERSION}w-xmlrpc     php${PHP_VERSION}w-xsl php${PHP_VERSION}w-pear php${PHP_VERSION}w-phar php${PHP_VERSION}w-posix php${PHP_VERSION}w-mbstring     php${PHP_VERSION}w-soap php${PHP_VERSION}w-xmlreader php${PHP_VERSION}w-xmlwriter     php${PHP_VERSION}w-zlib php${PHP_VERSION}w-zip php${PHP_VERSION}w-dom     php${PHP_VERSION}w-tokenizer php${PHP_VERSION}w-ctype php${PHP_VERSION}w-intl     g++ make gcc gcc-c++ sqlite-devel     \u0026\u0026 pecl channel-update pecl.php.net     \u0026\u0026 /usr/bin/yum clean all     \u0026\u0026 curl -O https://xdebug.org/files/xdebug-${XDEBUG_VERSION}.tgz     \u0026\u0026 tar -zxvf xdebug-${XDEBUG_VERSION}.tgz \u0026\u0026 rm -f xdebug-${XDEBUG_VERSION}.tgz     \u0026\u0026 cd xdebug-${XDEBUG_VERSION} \u0026\u0026 phpize     \u0026\u0026 ./configure \u0026\u0026 make \u0026\u0026 make install     \u0026\u0026 echo 'zend_extension=xdebug.so;' \u003e\u003e  /etc/php.d/xdebug.ini     \u0026\u0026 echo 'xdebug.remote_enable=1;' \u003e\u003e  /etc/php.d/xdebug.ini     \u0026\u0026 echo 'xdebug.remote_host=127.0.0.1;' \u003e\u003e /etc/php.d/xdebug.ini     \u0026\u0026 echo 'xdebug.remote_connect_back=1 # Not safe for production servers;' \u003e\u003e /etc/php.d/xdebug.ini    \u0026\u0026 echo 'xdebug.remote_port=9900;' \u003e\u003e /etc/php.d/xdebug.ini    \u0026\u0026 echo 'xdebug.remote_handler=dbgp;' \u003e\u003e /etc/php.d/xdebug.ini    \u0026\u0026 echo 'xdebug.remote_mode=req;' \u003e\u003e /etc/php.d/xdebug.ini    \u0026\u0026 echo 'xdebug.remote_autostart=0;' \u003e\u003e /etc/php.d/xdebug.ini    \u0026\u0026 cd ../ \u0026\u0026 rm -rf  xdebug-${XDEBUG_VERSION}     \u0026\u0026 sed -i 's/listen = 127.0.0.1:9000/listen = 0.0.0.0:9000/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;error_log = \\/var\\/log\\/php-fpm\\/error.log/error_log = syslog/g' /etc/php-fpm.conf     \u0026\u0026 sed -i 's/max_execution_time = 30/max_execution_time = 60/g' /etc/php.ini     \u0026\u0026 sed -i 's/;error_log = syslog/error_log = syslog/g' /etc/php.ini     \u0026\u0026 sed -i 's/memory_limit = 128M/memory_limit = 512M/g' /etc/php.ini     \u0026\u0026 sed -i 's/listen.allowed_clients = 127.0.0.1/;listen.allowed_clients = 127.0.0.1/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;php_flag\\[display_errors\\] = off/php_flag\\[display_errors\\] = on/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;php_admin_flag\\[log_errors\\] = on/php_admin_flag\\[log_errors\\] = on/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;catch_workers_output = yes/catch_workers_output = yes/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;access.log = \\/var\\/log\\/php-fpm\\/$pool.access.log/access.log = \\/var\\/log\\/php-fpm\\/$pool.access.log/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;access.format = \"%p %P %R - %u %t \\\\\"%m %{HTTP_HOST}%{REQUEST_URI}e\\\\\" %s %f %{mili}d %{kilo}M %C%%\"/access.format = \"%p %P %R - %u %t \\\\\"%m %{HTTP_HOST}%{REQUEST_URI}e\\\\\" %s %f %{mili}d %{kilo}M %C%%\"/g' /etc/php-fpm.d/www.conf     \u0026\u0026 sed -i 's/;request_slowlog_timeout = 0/request_slowlog_timeout = 30/g' /etc/php-fpm.d/www.conf     \u0026\u0026 curl -O http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz     \u0026\u0026 tar -zxvf ioncube_loaders_lin_x86-64.tar.gz     \u0026\u0026 cp ioncube/ioncube_loader_lin_${IONCUBE_VERSION}.so ioncube/ioncube_loader_lin_${IONCUBE_VERSION}_ts.so /usr/lib64/php/modules/     \u0026\u0026 rm -rf ioncube ioncube_loaders_lin_x86-64.tar.gz     \u0026\u0026 echo \"zend_extension=ioncube_loader_lin_${IONCUBE_VERSION}.so\" \u003e /etc/php.d/ioncube.ini     \u0026\u0026 rm -f /var/log/php-fpm/www-error.log     \u0026\u0026 ln -sf /dev/stdout  /var/log/php-fpm/www-error.log     \u0026\u0026 systemctl enable php-fpm.service     \u0026\u0026 chown root:root /docker-entrypoint.sh \u0026\u0026 chmod 777 /docker-entrypoint.sh     \u0026\u0026 curl http://files.magerun.net/n98-magerun-latest.phar -o /usr/bin/magerun     \u0026\u0026 chmod +x /usr/bin/magerun     \u0026\u0026 curl -L -O https://github.com/phpredis/phpredis/archive/${PHPREDIS_VERSION}.tar.gz     \u0026\u0026 tar -zxvf ${PHPREDIS_VERSION}.tar.gz     \u0026\u0026 cd phpredis-${PHPREDIS_VERSION}     \u0026\u0026 /usr/bin/phpize     \u0026\u0026 ./configure \u0026\u0026 make \u0026\u0026 make install     \u0026\u0026 cp ./modules/redis.so /usr/lib64/php/modules/     \u0026\u0026 echo 'extension=redis.so' \u003e /etc/php.d/redis.ini     \u0026\u0026 cd ../ \u0026\u0026 rm -rf phpredis-${PHPREDIS_VERSION} ${PHPREDIS_VERSION}.tar.gz     \u0026\u0026 curl https://getcomposer.org/composer.phar -o /usr/bin/composer     \u0026\u0026 chmod +x /usr/bin/composer     \u0026\u0026 echo $'compress\\n    \"/var/www/html/magento/var/log/*.log\"{\\n    rotate 15\\n    size 5M\\n    daily\\n    missingok\\n    notifempty\\n    sharedscripts\\n    olddir archive/\\n    }\\n    ' | tee /etc/logrotate.d/magento;    systemctl enable rsyslog"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "volume",
          "Volumes": [
            "/sys/fs/cgroup"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "9000",
            "9900"
          ]
        },
        {
          "CmdLine": [
            "/docker-entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "/usr/sbin/init"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}