MetaArgs: null
Stages:
- BaseName: neurodebian:stretch-non-free
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: '"noninteractive"'
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"en_US.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - export ND_ENTRYPOINT="/neurodocker/startup.sh"     && apt-get update -qq     &&
      apt-get install -y -q --no-install-recommends            apt-utils            bzip2            ca-certificates            curl            locales            unzip     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && sed
      -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen     && dpkg-reconfigure
      --frontend=noninteractive locales     && update-locale LANG="en_US.UTF-8"     &&
      chmod 777 /opt && chmod a+s /opt     && mkdir -p /neurodocker     && if [ !
      -f "$ND_ENTRYPOINT" ]; then          echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"     &&   echo
      'set -e' >> "$ND_ENTRYPOINT"     &&   echo 'if [ -n "$1" ]; then "$@"; else
      /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";     fi     && chmod -R 777 /neurodocker
      && chmod a+s /neurodocker
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends            fsl            nano     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - test "$(getent passwd neuro)" || useradd --no-user-group --create-home --shell
      /bin/bash neuro
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - Env:
    - Key: CONDA_DIR
      Value: '"/opt/miniconda-latest"'
    - Key: PATH
      Value: '"/opt/miniconda-latest/bin:$PATH"'
    Name: env
  - CmdLine:
    - export PATH="/opt/miniconda-latest/bin:$PATH"     && echo "Downloading Miniconda
      installer ..."     && conda_installer="/tmp/miniconda.sh"     && curl -fsSL
      --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      bash "$conda_installer" -b -p /opt/miniconda-latest     && rm -f "$conda_installer"     &&
      conda update -yq -nbase conda     && conda config --system --prepend channels
      conda-forge     && conda config --system --set auto_update_conda false     &&
      conda config --system --set show_channel_urls true     && sync && conda clean
      --all && sync     && conda create -y -q --name neuro     && conda install -y
      -q --name neuro            'python=3.6'            'jupyter'            'jupyterlab'            'jupyter_contrib_nbextensions'            'traits'            'pandas'            'matplotlib'            'scikit-learn'            'scikit-image'            'seaborn'            'nbformat'            'nb_conda'     &&
      sync && conda clean --all && sync     && bash -c "source activate neuro     &&   pip
      install --no-cache-dir               'https://github.com/nipy/nipype/tarball/master'              'https://github.com/INCF/pybids/tarball/master'              'nilearn'              'nipy'              'duecredit'              'nitime'              'nibabel'"     &&
      rm -rf ~/.cache/pip/*     && sync     && sed -i '$isource activate neuro' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - bash -c 'source activate neuro && jupyter nbextension enable exercise2/main
      && jupyter nbextension enable spellchecker/main'
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - mkdir /data && chmod 777 /data && chmod a+s /data
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /output && chmod 777 /output && chmod a+s /output
    Name: run
    PrependShell: true
  - Name: user
    User: root
  - CmdLine:
    - chown -R neuro /home/neuro/
    Name: run
    PrependShell: true
  - CmdLine:
    - rm -rf /opt/conda/pkgs/*
    Name: run
    PrependShell: true
  - Name: user
    User: neuro
  - CmdLine:
    - mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > ~/.jupyter/jupyter_notebook_config.py
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /home/neuro/
  - CmdLine:
    - jupyter-notebook
    Name: cmd
    PrependShell: false
  - CmdLine:
    - 'echo ''{     \n  "pkg_manager": "apt",     \n  "instructions": [     \n    [     \n      "base",     \n      "neurodebian:stretch-non-free"     \n    ],     \n    [     \n      "install",     \n      [     \n        "fsl",     \n        "nano"     \n      ]     \n    ],     \n    [     \n      "add_to_entrypoint",     \n      "source
      /etc/fsl/fsl.sh"     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "conda_install":
      [     \n          "python=3.6",     \n          "jupyter",     \n          "jupyterlab",     \n          "jupyter_contrib_nbextensions",     \n          "traits",     \n          "pandas",     \n          "matplotlib",     \n          "scikit-learn",     \n          "scikit-image",     \n          "seaborn",     \n          "nbformat",     \n          "nb_conda"     \n        ],     \n        "pip_install":
      [     \n          "https://github.com/nipy/nipype/tarball/master",     \n          "https://github.com/INCF/pybids/tarball/master",     \n          "nilearn",     \n          "nipy",     \n          "duecredit",     \n          "nitime",     \n          "nibabel"     \n        ],     \n        "create_env":
      "neuro",     \n        "activate": true     \n      }     \n    ],     \n    [     \n      "run_bash",     \n      "source
      activate neuro && jupyter nbextension enable exercise2/main && jupyter nbextension
      enable spellchecker/main"     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "run",     \n      "mkdir
      /data && chmod 777 /data && chmod a+s /data"     \n    ],     \n    [     \n      "run",     \n      "mkdir
      /output && chmod 777 /output && chmod a+s /output"     \n    ],     \n    [     \n      "user",     \n      "root"     \n    ],     \n    [     \n      "run",     \n      "chown
      -R neuro /home/neuro/"     \n    ],     \n    [     \n      "run",     \n      "rm
      -rf /opt/conda/pkgs/*"     \n    ],     \n    [     \n      "user",     \n      "neuro"     \n    ],     \n    [     \n      "run",     \n      "mkdir
      -p ~/.jupyter && echo c.NotebookApp.ip = \\\"0.0.0.0\\\" > ~/.jupyter/jupyter_notebook_config.py"     \n    ],     \n    [     \n      "workdir",     \n      "/home/neuro/"     \n    ],     \n    [     \n      "cmd",     \n      [     \n        "jupyter-notebook"     \n      ]     \n    ]     \n  ]     \n}''
      > /neurodocker/neurodocker_specs.json'
    Name: run
    PrependShell: true
  From:
    Image: neurodebian:stretch-non-free
  Name: ""
  Platform: ""
  SourceCode: FROM neurodebian:stretch-non-free
