MetaArgs: null
Stages:
- BaseName: ubuntu:xenial
  Commands:
  - CmdLine:
    - apt-get update && apt-get -y install software-properties-common curl ca-certificates
      tar gzip gnupg dirmngr bzip2 unzip xz-utils p11-kit fontconfig libfreetype6
      wget libnss-wrapper bash sudo
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/local/openjdk-8
    Name: env
  - Env:
    - Key: PATH
      Value: $JAVA_HOME/bin:$PATH
    Name: env
  - CmdLine:
    - '{ echo ''#/bin/sh''; echo ''echo "$JAVA_HOME"''; } > /usr/local/bin/docker-java-home
      && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)"
      ]'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_VERSION
      Value: 8u212-b04
    Name: env
  - Env:
    - Key: JAVA_BASE_URL
      Value: https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
    Name: env
  - Env:
    - Key: JAVA_URL_VERSION
      Value: 8u212b04
    Name: env
  - CmdLine:
    - 'set -eux && dpkgArch="$(dpkg --print-architecture)" && case "$dpkgArch" in
      amd64) upstreamArch=''x64'' ;; arm64) upstreamArch=''aarch64'' ;; *) echo >&2
      "error: unsupported architecture: $dpkgArch" ;; esac && wget -O openjdk.tgz.asc
      "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign" && wget
      -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"
      --progress=dot:giga;'
    Name: run
    PrependShell: true
  - CmdLine:
    - "export GNUPGHOME=\"$(mktemp -d)\"; \tfor keyserver in $(shuf -e \t\t\tha.pool.sks-keyservers.net
      \t\t\thkp://p80.pool.sks-keyservers.net:80 \t\t\tkeyserver.ubuntu.com \t\t\thkp://keyserver.ubuntu.com:80
      \t\t\tpgp.mit.edu) ; do \t\tgpg --keyserver $keyserver --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F
      && break || true ; \tdone \t&& for keyserver in $(shuf -e \t\t\tha.pool.sks-keyservers.net
      \t\t\thkp://p80.pool.sks-keyservers.net:80 \t\t\tkeyserver.ubuntu.com \t\t\thkp://keyserver.ubuntu.com:80
      \t\t\tpgp.mit.edu) ; do \t\tgpg --keyserver $keyserver --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671
      && break || true ; \tdone && \tgpg --batch --list-sigs --keyid-format 0xLONG
      CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep
      'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf
      --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract
      \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components
      1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t{ \t\techo '#!/usr/bin/env
      bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ];
      then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi';
      \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\";
      do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if
      [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error:
      failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract
      --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth
      \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod
      +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk;
      \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u >
      /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac -version; \tjava
      -version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "groupadd -r mongodb --gid=999 && useradd -r -g mongodb --uid=999 mongodb &&
      usermod -aG sudo mongodb && echo '%sudo\tALL=NOPASSWD: ALL' >> /etc/sudoers"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates
      \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install
      -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.11"
    Name: env
  - Env:
    - Key: JSYAML_VERSION
      Value: 3.13.0
    Name: env
  - CmdLine:
    - "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null;
      then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\tsavedAptMark=\"$savedAptMark
      gnupg dirmngr\"; \telif gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\tapt-get
      install -y --no-install-recommends gnupg-curl; \tfi; \trm -rf /var/lib/apt/lists/*;
      \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget
      -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\";
      \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\";
      \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor keyserver in $(shuf -e \t\t\tha.pool.sks-keyservers.net
      \t\t\thkp://p80.pool.sks-keyservers.net:80 \t\t\tkeyserver.ubuntu.com \t\t\thkp://keyserver.ubuntu.com:80
      \t\t\tpgp.mit.edu) ; do \t\tgpg --keyserver $keyserver --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      && break || true ; \tdone; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;
      \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc;
      \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget
      -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\";
      \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark > /dev/null;
      \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /docker-entrypoint-initdb.d
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEYS
      Value: 9DA31620334BD75D9DCB49F368818C72E52529D4
    Name: env
  - CmdLine:
    - "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tfor
      keyserver in $(shuf -e \t\t\tha.pool.sks-keyservers.net \t\t\thkp://p80.pool.sks-keyservers.net:80
      \t\t\tkeyserver.ubuntu.com \t\t\thkp://keyserver.ubuntu.com:80 \t\t\tpgp.mit.edu)
      ; do \t\tgpg --keyserver $keyserver --recv-keys \"$key\" && break || true ;
      \t\tdone; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;
      \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key
      list"
    Name: run
    PrependShell: true
  - Key: MONGO_PACKAGE
    Name: arg
    Value: mongodb-org
  - Key: MONGO_REPO
    Name: arg
    Value: repo.mongodb.org
  - Env:
    - Key: MONGO_PACKAGE
      Value: ${MONGO_PACKAGE}
    - Key: MONGO_REPO
      Value: ${MONGO_REPO}
    Name: env
  - Env:
    - Key: MONGO_MAJOR
      Value: "4.0"
    Name: env
  - Env:
    - Key: MONGO_VERSION
      Value: 4.0.13
    Name: env
  - CmdLine:
    - echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR
      multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION
      \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION
      \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION
      \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf
      /etc/mongod.conf.orig"
    Name: run
    PrependShell: true
  - Env:
    - Key: CATALINA_HOME
      Value: /usr/local/tomcat
    Name: env
  - Env:
    - Key: PATH
      Value: $CATALINA_HOME/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$CATALINA_HOME"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $CATALINA_HOME
  - Env:
    - Key: TOMCAT_NATIVE_LIBDIR
      Value: $CATALINA_HOME/native-jni-lib
    Name: env
  - Env:
    - Key: LD_LIBRARY_PATH
      Value: ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
    Name: env
  - Env:
    - Key: GPG_KEYS
      Value: 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42
        47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7
        61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7
        79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE
        A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7
        DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE
        F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
    Name: env
  - Env:
    - Key: TOMCAT_MAJOR
      Value: "8"
    Name: env
  - Env:
    - Key: TOMCAT_VERSION
      Value: 8.5.47
    Name: env
  - Env:
    - Key: TOMCAT_SHA512
      Value: 079b85f3dfca2b137634859208fae6012860201d720d12ff0add3473f1e267d332cb12803958754e1f922599e0d42b7e97f00bcd62584d9148a6f45fde091716
    Name: env
  - CmdLine:
    - "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends \t\tgnupg dirmngr \t\twget ca-certificates
      \t; \t\tddist() { \t\tlocal f=\"$1\"; shift; \t\tlocal distFile=\"$1\"; shift;
      \t\tlocal success=; \t\tlocal distUrl=; \t\tfor distUrl in \t\t\t'https://www.apache.org/dyn/closer.cgi?action=download&filename='
      \t\t\thttps://www-us.apache.org/dist/ \t\t\thttps://www.apache.org/dist/ \t\t\thttps://archive.apache.org/dist/
      \t\t; do \t\t\tif wget -O \"$f\" \"$distUrl$distFile\" && [ -s \"$f\" ]; then
      \t\t\t\tsuccess=1; \t\t\t\tbreak; \t\t\tfi; \t\tdone; \t\t[ -n \"$success\"
      ]; \t}; \t\tddist 'tomcat.tar.gz' \"tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz\";
      \techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \tddist
      'tomcat.tar.gz.asc' \"tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc\";
      \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tfor keyserver
      in $(shuf -e \t\t\tha.pool.sks-keyservers.net \t\t\thkp://p80.pool.sks-keyservers.net:80
      \t\t\tkeyserver.ubuntu.com \t\t\thkp://keyserver.ubuntu.com:80 \t\t\tpgp.mit.edu)
      ; do \t\tgpg --keyserver $keyserver --recv-keys \"$key\" && break || true ;
      \t\tdone; \tdone; \tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar
      -xf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*;
      \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp
      -d)\"; \ttar -xf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1;
      \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev
      \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\";
      \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(command
      -v apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\"
      \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\"
      \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm
      -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*'
      > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null;
      \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t|
      awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search
      \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get
      purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf
      /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env
      bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs temp work"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo
      \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo
      \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO:
      Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\";
      \t\texit 1; \tfi"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends unzip ca-certificates fontconfig
      wget sudo curl
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /data/db
    - /data/configdb
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin/docker-entrypoint.sh
  - CmdLine:
    - chmod 777 /usr/local/bin/docker-entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -s usr/local/bin/docker-entrypoint.sh /
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: expose
    Ports:
    - "27017"
  - Name: expose
    Ports:
    - "28017"
  - Name: expose
    Ports:
    - "8080"
  - Name: expose
    Ports:
    - "8443"
  - CmdLine:
    - mongod
    Name: cmd
    PrependShell: false
  From:
    Image: ubuntu:xenial
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:xenial
