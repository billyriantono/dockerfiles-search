MetaArgs: null
Stages:
- BaseName: debian:stretch
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Env:
    - Key: LANG
      Value: '"en_US.UTF-8"'
    - Key: LC_ALL
      Value: '"C.UTF-8"'
    - Key: ND_ENTRYPOINT
      Value: '"/neurodocker/startup.sh"'
    Name: env
  - CmdLine:
    - "apt-get update -qq && apt-get install -yq --no-install-recommends      \tapt-utils
      bzip2 ca-certificates curl locales unzip     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && localedef --force --inputfile=en_US
      --charmap=UTF-8 C.UTF-8     && chmod 777 /opt && chmod a+s /opt     && mkdir
      -p /neurodocker     && if [ ! -f \"$ND_ENTRYPOINT\" ]; then          echo '#!/usr/bin/env
      bash' >> $ND_ENTRYPOINT          && echo 'set +x' >> $ND_ENTRYPOINT          &&
      echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT;
      \       fi     && chmod -R 777 /neurodocker && chmod a+s /neurodocker"
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - apt-get update -qq     && apt-get install -y -q --no-install-recommends git                                                      gcc                                                      pigz     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /tmp
  - CmdLine:
    - deps='cmake g++ gcc git make pigz zlib1g-dev'     && apt-get update -qq && apt-get
      install -yq --no-install-recommends $deps     && apt-get clean     && rm -rf
      /var/lib/apt/lists/* /tmp/* /var/tmp/*     && mkdir dcm2niix     && curl -sSL
      https://github.com/rordenlab/dcm2niix/tarball/v1.0.20171017 | tar xz -C dcm2niix
      --strip-components 1     && mkdir dcm2niix/build && cd dcm2niix/build     &&
      cmake .. && make     && make install     && rm -rf /tmp/*
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - .
    - /src/heudiconv
  - Env:
    - Key: CONDA_DIR
      Value: /opt/conda
    - Key: PATH
      Value: /opt/conda/bin:$PATH
    Name: env
  - CmdLine:
    - echo "Downloading Miniconda installer ..."     && miniconda_installer=/tmp/miniconda.sh     &&
      curl -sSL --retry 5 -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh     &&
      /bin/bash $miniconda_installer -b -p $CONDA_DIR     && rm -f $miniconda_installer     &&
      conda config --system --prepend channels conda-forge     && conda config --system
      --set auto_update_conda false     && conda config --system --set show_channel_urls
      true     && conda clean -tipsy && sync
    Name: run
    PrependShell: true
  - CmdLine:
    - conda create -y -q --name neuro python=2                                     traits=4.6.0     &&
      sync && conda clean -tipsy && sync     && /bin/bash -c "source activate neuro       &&
      pip install -q --no-cache-dir https://github.com/moloney/dcmstack/tarball/master                                        /src/heudiconv[all]"     &&
      sync     && sed -i '$isource activate neuro' $ND_ENTRYPOINT
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends dirmngr gnupg     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && curl
      -sSL http://neuro.debian.net/lists/stretch.us-nh.full     > /etc/apt/sources.list.d/neurodebian.sources.list     &&
      curl -sSL https://dl.dropbox.com/s/zxs209o955q6vkg/neurodebian.gpg     | apt-key
      add -     && (apt-key adv --refresh-keys --keyserver hkp://pool.sks-keyservers.net:80
      0xA5D32F012649A5A9 || true)     && apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update -qq && apt-get install -yq --no-install-recommends git-annex-standalone     &&
      apt-get clean     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*     && mkdir
      /cluster /tsd /work /scratch /state
    Name: run
    PrependShell: true
  - CmdLine:
    - /neurodocker/startup.sh
    - heudiconv
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - 'echo ''{     \n  "pkg_manager": "apt",     \n  "check_urls": true,     \n  "instructions":
      [     \n    [     \n      "base",     \n      "debian:stretch"     \n    ],     \n    [     \n      "install",     \n      [     \n        "git",     \n        "gcc",     \n        "pigz"     \n      ]     \n    ],     \n    [     \n      "dcm2niix",     \n      {     \n        "version":
      "v1.0.20171017"     \n      }     \n    ],     \n    [     \n      "copy",     \n      [     \n        ".",     \n        "/src/heudiconv"     \n      ]     \n    ],     \n    [     \n      "miniconda",     \n      {     \n        "env_name":
      "neuro",     \n        "conda_install": "python=2 traits=4.6.0",     \n        "pip_install":
      "https://github.com/moloney/dcmstack/tarball/master /src/heudiconv[all]",     \n        "activate":
      true     \n      }     \n    ],     \n    [     \n      "neurodebian",     \n      {     \n        "os_codename":
      "stretch",     \n        "download_server": "usa-nh",     \n        "pkgs":
      "git-annex-standalone"     \n      }     \n    ],     \n    [     \n      "entrypoint",     \n      "/neurodocker/startup.sh
      heudiconv"     \n    ]     \n  ],     \n  "generation_timestamp": "2017-12-26
      18:41:41",     \n  "neurodocker_version": "0.3.2"     \n}'' > /neurodocker/neurodocker_specs.json'
    Name: run
    PrependShell: true
  From:
    Image: debian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch
