{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "gitlab-base-packages-builder",
      "BaseName": "debian:buster-slim",
      "SourceCode": "FROM debian:buster-slim AS gitlab-base-packages-builder",
      "Platform": "",
      "As": "gitlab-base-packages-builder",
      "From": {
        "Image": "debian:buster-slim"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"genshenchu@gmail.com\""
            },
            {
              "Key": "description",
              "Value": "\"base image for build gitlab images.\""
            }
          ],
          "Name": "label"
        },
        {
          "Key": "RUBY_DOWNLOAD_RUL",
          "Name": "arg",
          "Value": "\"https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.5.tar.gz\""
        },
        {
          "Key": "GOLANG_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz\""
        },
        {
          "Key": "NODEJS_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz\""
        },
        {
          "Key": "LIBPCRE_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://ftp.pcre.org/pub/pcre/pcre2-10.33.tar.gz\""
        },
        {
          "Key": "GIT_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://www.kernel.org/pub/software/scm/git/git-2.24.0.tar.gz\""
        },
        {
          "CmdLine": [
            "apt-get clean \u0026\u0026 apt-get update     \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y ca-certificates apt-transport-https     \u0026\u0026 apt-get clean \u0026\u0026 apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y     sudo wget curl build-essential cmake     libexpat1-dev gettext libz-dev     zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libre2-dev libreadline-dev     libncurses5-dev libffi-dev libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev     openssh-server logrotate rsync python-docutils pkg-config"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"installing ruby.\"     \u0026\u0026 wget ${RUBY_DOWNLOAD_RUL} -O /tmp/ruby.tar.gz     \u0026\u0026 mkdir /tmp/ruby-src     \u0026\u0026 tar -xzf /tmp/ruby.tar.gz -C /tmp/ruby-src --strip-components=1     \u0026\u0026 cd /tmp/ruby-src     \u0026\u0026 ./configure --disable-install-rdoc --prefix=/usr/local/ruby     \u0026\u0026 make -j $(nproc)     \u0026\u0026 make install     \u0026\u0026 cd /tmp     \u0026\u0026 rm -rf /tmp/ruby-src /tmp/ruby.tar.gz     \u0026\u0026 ln -s /usr/local/ruby/bin/* /usr/local/bin/     \u0026\u0026 ln -s /usr/local/ruby/include/* /usr/local/include/     \u0026\u0026 ln -s /usr/local/ruby/lib/* /usr/local/lib/     \u0026\u0026 gem install bundler --version 1.17.3 --no-document"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"installing go.\"     \u0026\u0026 wget ${GOLANG_DOWNLOAD_URL} -O /tmp/go.tar.gz     \u0026\u0026 tar -C /usr/local -xzf /tmp/go.tar.gz     \u0026\u0026 rm /tmp/go.tar.gz"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"installing node.\"     \u0026\u0026 wget ${NODEJS_DOWNLOAD_URL} -O /tmp/node.tar.xz     \u0026\u0026 mkdir -p /usr/local/node     \u0026\u0026 tar -xf /tmp/node.tar.xz -C /usr/local/node --strip-components=1     \u0026\u0026 rm /tmp/node.tar.xz     \u0026\u0026 export PATH=/usr/local/node/bin:$PATH     \u0026\u0026 npm install --global yarn"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"installing libpcre dependency for git.\"     \u0026\u0026 cd /tmp     \u0026\u0026 wget ${LIBPCRE_DOWNLOAD_URL} -O pcre2.tar.gz     \u0026\u0026 mkdir -p /tmp/pcre2-src      \u0026\u0026 tar -zxf pcre2.tar.gz -C /tmp/pcre2-src --strip-components=1     \u0026\u0026 cd pcre2-src     \u0026\u0026 chmod +x configure     \u0026\u0026 ./configure --prefix=/usr/local/ --enable-jit --enable-shared=no --enable-static=yes     \u0026\u0026 make -j $(nproc) \u0026\u0026 make install     \u0026\u0026 rm -rf /tmp/pcre2.tar.gz /tmp/pcre2-src"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"installing git.\"     \u0026\u0026 cd /tmp     \u0026\u0026 wget ${GIT_DOWNLOAD_URL} -O git.tar.gz      \u0026\u0026 mkdir -p /tmp/git-src      \u0026\u0026 tar -zxf git.tar.gz -C /tmp/git-src --strip-components=1     \u0026\u0026 cd git-src     \u0026\u0026 chmod +x configure     \u0026\u0026 ./configure --with-libpcre --prefix=/usr/local/git     \u0026\u0026 make all -j $(nproc) \u0026\u0026 make install     \u0026\u0026 ln -s /usr/local/git/bin/* /usr/bin/      \u0026\u0026 rm -rf /tmp/git.tar.gz /tmp/git-src"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab-base-builder",
      "BaseName": "gitlab-base-packages-builder",
      "SourceCode": "FROM gitlab-base-packages-builder AS gitlab-base-builder",
      "Platform": "",
      "As": "gitlab-base-builder",
      "From": {
        "Stage": {
          "Named": "gitlab-base-packages-builder",
          "Index": 0
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_USER",
              "Value": "\"git\""
            },
            {
              "Key": "GITLAB_HOME",
              "Value": "\"/home/git\""
            },
            {
              "Key": "RAILS_ENV",
              "Value": "production"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GOROOT",
              "Value": "\"/usr/local/go\""
            },
            {
              "Key": "NODE_HOME",
              "Value": "\"/usr/local/node\""
            },
            {
              "Key": "YARN_BIN_GITLAB_USER",
              "Value": "\"${GITLAB_HOME}/.yarn/bin\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "echo \"configure git user.\"     \u0026\u0026 adduser --gecos 'GitLab' ${GITLAB_USER}     \u0026\u0026 passwd -d ${GITLAB_USER}     \u0026\u0026 sudo -HEu ${GITLAB_USER} git config --global core.autocrlf input     \u0026\u0026 sudo -HEu ${GITLAB_USER} git config --global gc.auto 0     \u0026\u0026 sudo -HEu ${GITLAB_USER} git config --global repack.writeBitmaps true"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab-shell-builder",
      "BaseName": "gitlab-base-builder",
      "SourceCode": "FROM gitlab-base-builder AS gitlab-shell-builder",
      "Platform": "",
      "As": "gitlab-shell-builder",
      "From": {
        "Stage": {
          "Named": "gitlab-base-builder",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_SHELL_INSTALL_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab-shell\""
            },
            {
              "Key": "GITLAB_SHELL_VERSION_TAG",
              "Value": "\"v10.2.0\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GITLAB_SHELL_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://gitlab.com/gitlab-org/gitlab-shell/-/archive/${GITLAB_SHELL_VERSION_TAG}/gitlab-shell-${GITLAB_SHELL_VERSION_TAG}.tar.gz\""
        },
        {
          "CmdLine": [
            "mkdir -p ${GITLAB_SHELL_INSTALL_DIR}     \u0026\u0026 wget ${GITLAB_SHELL_DOWNLOAD_URL} -O /tmp/gitlab-shell.tar.gz     \u0026\u0026 tar -zxf /tmp/gitlab-shell.tar.gz -C ${GITLAB_SHELL_INSTALL_DIR} --strip-components=1     \u0026\u0026 rm /tmp/gitlab-shell.tar.gz     \u0026\u0026 chown -R ${GITLAB_USER}: ${GITLAB_SHELL_INSTALL_DIR}     \u0026\u0026 cd ${GITLAB_SHELL_INSTALL_DIR}     \u0026\u0026 sudo -u ${GITLAB_USER} -H sh -c \"     export PATH=${GOROOT}/bin:$PATH;     cp config.yml.example config.yml; ./bin/install; ./bin/compile; rm -rf go_build\"     \u0026\u0026 rm -rf ${GITLAB_HOME}/repositories go_build"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab-workhorse-builder",
      "BaseName": "gitlab-base-builder",
      "SourceCode": "FROM gitlab-base-builder AS gitlab-workhorse-builder",
      "Platform": "",
      "As": "gitlab-workhorse-builder",
      "From": {
        "Stage": {
          "Named": "gitlab-base-builder",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_WORKHORSE_INSTALL_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab-workhorse\""
            },
            {
              "Key": "GITLAB_WORKHORSE_VERSION_TAG",
              "Value": "\"v8.14.0\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GITLAB_WORKHORSE_BUILD_DIR",
          "Name": "arg",
          "Value": "\"${GITLAB_HOME}/gitlab-workhorse-builder\""
        },
        {
          "Key": "GITLAB_WORKHORSE_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://gitlab.com/gitlab-org/gitlab-workhorse.git\""
        },
        {
          "CmdLine": [
            "git clone -q -b ${GITLAB_WORKHORSE_VERSION_TAG} --depth 1 ${GITLAB_WORKHORSE_DOWNLOAD_URL} ${GITLAB_WORKHORSE_BUILD_DIR}     \u0026\u0026 chown -R ${GITLAB_USER}: ${GITLAB_WORKHORSE_BUILD_DIR}     \u0026\u0026 sudo -u ${GITLAB_USER} -H sh -c \"     cd ${GITLAB_WORKHORSE_BUILD_DIR};     export PATH=${GOROOT}/bin:$PATH;     make install PREFIX=${GITLAB_WORKHORSE_INSTALL_DIR} \"     \u0026\u0026 rm -rf ${GITLAB_WORKHORSE_BUILD_DIR}"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab-gitaly-builder",
      "BaseName": "gitlab-base-builder",
      "SourceCode": "FROM gitlab-base-builder AS gitlab-gitaly-builder",
      "Platform": "",
      "As": "gitlab-gitaly-builder",
      "From": {
        "Stage": {
          "Named": "gitlab-base-builder",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_GITALY_INSTALL_DIR",
              "Value": "\"${GITLAB_HOME}/gitaly\""
            },
            {
              "Key": "GITLAB_GITALY_VERSION_TAG",
              "Value": "\"v1.67.0\""
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GITLAB_GITALY_BUILD_DIR",
          "Name": "arg",
          "Value": "\"${GITLAB_HOME}/gitlab-gitaly-builder\""
        },
        {
          "Key": "GITLAB_GITALY_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://gitlab.com/gitlab-org/gitaly.git\""
        },
        {
          "CmdLine": [
            "git clone -q -b ${GITLAB_GITALY_VERSION_TAG} --depth 1 ${GITLAB_GITALY_DOWNLOAD_URL} ${GITLAB_GITALY_BUILD_DIR}     \u0026\u0026 mkdir -p ${GITLAB_GITALY_INSTALL_DIR}     \u0026\u0026 chown -R ${GITLAB_USER}: ${GITLAB_GITALY_BUILD_DIR} ${GITLAB_GITALY_INSTALL_DIR}     \u0026\u0026 sudo -u ${GITLAB_USER} -H sh -c \"     cd ${GITLAB_GITALY_BUILD_DIR};     export PATH=${GOROOT}/bin:$PATH;     make install PREFIX=${GITLAB_GITALY_INSTALL_DIR};\"     \u0026\u0026 cp -a ${GITLAB_GITALY_BUILD_DIR}/ruby ${GITLAB_GITALY_INSTALL_DIR}     \u0026\u0026 rm -rf ${GITLAB_GITALY_INSTALL_DIR}/ruby/vendor/bundle/ruby/**/cache     \u0026\u0026 rm -rf ${GITLAB_GITALY_BUILD_DIR}"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab-builder",
      "BaseName": "gitlab-base-builder",
      "SourceCode": "FROM gitlab-base-builder AS gitlab-builder",
      "Platform": "",
      "As": "gitlab-builder",
      "From": {
        "Stage": {
          "Named": "gitlab-base-builder",
          "Index": 1
        }
      },
      "Commands": [
        {
          "Env": [
            {
              "Key": "GITLAB_INSTALL_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab\""
            },
            {
              "Key": "GITLAB_VERSION",
              "Value": "v12.4.3"
            }
          ],
          "Name": "env"
        },
        {
          "Key": "GITLAB_BUILD_DIR",
          "Name": "arg",
          "Value": "\"${GITLAB_HOME}/gitlab-build\""
        },
        {
          "Key": "GITLAB_DOWNLOAD_URL",
          "Name": "arg",
          "Value": "\"https://gitlab.com/gitlab-org/gitlab-foss.git\""
        },
        {
          "CmdLine": [
            "DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y libpq-dev     \u0026\u0026 git clone -q -b ${GITLAB_VERSION} --depth 1 ${GITLAB_DOWNLOAD_URL} ${GITLAB_BUILD_DIR}     \u0026\u0026 cd ${GITLAB_BUILD_DIR}     \u0026\u0026 chown -R ${GITLAB_USER}: ${GITLAB_BUILD_DIR}     \u0026\u0026 sudo -u ${GITLAB_USER} -H sh -c \"      export PATH=${GOROOT}/bin:${NODE_HOME}/bin:${YARN_BIN_GITLAB_USER}:$PATH;      bundle install -j $(nproc) --deployment --without development test mysql aws kerberos\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "cd ${GITLAB_BUILD_DIR}     \u0026\u0026 sudo -u ${GITLAB_USER} -H sh -c \"     export PATH=${GOROOT}/bin:${NODE_HOME}/bin:${YARN_BIN_GITLAB_USER}:$PATH;     cp ${GITLAB_BUILD_DIR}/config/database.yml.postgresql ${GITLAB_BUILD_DIR}/config/database.yml;     cp ${GITLAB_BUILD_DIR}/config/gitlab.yml.example ${GITLAB_BUILD_DIR}/config/gitlab.yml;     cp ${GITLAB_BUILD_DIR}/config/resque.yml.example  ${GITLAB_BUILD_DIR}/config/resque.yml;     bundle exec rake gettext:compile RAILS_ENV=production;     yarn install --production --pure-lockfile ;     yarn add ajv@^4.0.0;     bundle exec rake gitlab:assets:compile RAILS_ENV=production NODE_ENV=production NODE_OPTIONS='--max_old_space_size=2048';\"     \u0026\u0026 rm -rf ${GITLAB_BUILD_DIR}/node_modules"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "rm -rf ${GITLAB_HOME}/.cache     \u0026\u0026 rm -rf ${GITLAB_BUILD_DIR}/tmp/cache/* ${GITLAB_BUILD_DIR}/.git     \u0026\u0026 mkdir -p ${GITLAB_INSTALL_DIR}     \u0026\u0026 chown -R ${GITLAB_USER}: ${GITLAB_INSTALL_DIR}     \u0026\u0026 cp -a  ${GITLAB_BUILD_DIR}/. ${GITLAB_INSTALL_DIR}/"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    },
    {
      "Name": "gitlab",
      "BaseName": "debian:buster-slim",
      "SourceCode": "FROM debian:buster-slim AS gitlab",
      "Platform": "",
      "As": "gitlab",
      "From": {
        "Image": "debian:buster-slim"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"genshenchu@gmail.com\""
            },
            {
              "Key": "description",
              "Value": "\"gitlab images, which includes necessary gitlab components: gitlab-server, gitaly, gitlab-shell, gitlab-workhorse.\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "GITLAB_USER",
              "Value": "\"git\""
            },
            {
              "Key": "GITLAB_HOME",
              "Value": "\"/home/git\""
            },
            {
              "Key": "GITLAB_CONFIG_DIR",
              "Value": "\"/etc/gitlab\""
            },
            {
              "Key": "GITLAB_DATA_DIR",
              "Value": "\"/gitlab/data\""
            },
            {
              "Key": "GITLAB_PAGES_DATA_DIR",
              "Value": "\"/gitlab/gitlab-pages\""
            },
            {
              "Key": "GITLAB_CACHE_DIR",
              "Value": "\"/tmp/gitlab\""
            },
            {
              "Key": "GITLAB_LOG_DIR",
              "Value": "\"/var/log/gitlab\""
            },
            {
              "Key": "RAILS_ENV",
              "Value": "production"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "root:root",
          "From": "gitlab-base-packages-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/ruby",
            "/usr/local/ruby/"
          ]
        },
        {
          "Chown": "root:root",
          "From": "gitlab-base-packages-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "/usr/local/git",
            "/usr/local/git/"
          ]
        },
        {
          "CmdLine": [
            "adduser --disabled-login --gecos 'GitLab' ${GITLAB_USER}     \u0026\u0026 passwd -d ${GITLAB_USER}     \u0026\u0026 printf \"\\ndeb http://deb.debian.org/debian sid main\" \u003e\u003e /etc/apt/sources.list     \u0026\u0026 apt-get clean     \u0026\u0026 apt-get update -y \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y     sudo nodejs yarn ca-certificates curl openssh-server logrotate zip unzip     libxml2 libpq5 libicu63 libre2-5      postgresql-client-11      \u0026\u0026 export PATH=/usr/local/ruby/bin:$PATH     \u0026\u0026 mkdir -p /usr/local/bin /usr/local/include /usr/local/lib /usr/local/libexec /usr/local/share      \u0026\u0026 ln -s /usr/local/ruby/bin/* /usr/local/bin/     \u0026\u0026 ln -s /usr/local/ruby/include/* /usr/local/include/     \u0026\u0026 ln -s /usr/local/ruby/lib/* /usr/local/lib/     \u0026\u0026 ln -s /usr/local/git/bin/* /usr/bin/      \u0026\u0026 ln -s /usr/local/git/libexec/* /usr/local/libexec/     \u0026\u0026 ln -s /usr/local/git/share/* /usr/local/share/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "GIT_REPOSITORIES_DIR",
              "Value": "\"${GITLAB_HOME}/repositories\""
            },
            {
              "Key": "GITLAB_RUNTIME_DIR",
              "Value": "\"${GITLAB_CACHE_DIR}/runtime\""
            },
            {
              "Key": "GITLAB_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab\""
            },
            {
              "Key": "GITALY_DIR",
              "Value": "\"${GITLAB_HOME}/gitaly\""
            },
            {
              "Key": "GITLAB_SHELL_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab-shell\""
            },
            {
              "Key": "GITLAB_WORKHORSE_DIR",
              "Value": "\"${GITLAB_HOME}/gitlab-workhorse\""
            },
            {
              "Key": "WORKHORSE_LISTEN_NETWORK",
              "Value": "\"tcp\""
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "git:git",
          "From": "gitlab-shell-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "${GITLAB_SHELL_DIR}",
            "${GITLAB_SHELL_DIR}/"
          ]
        },
        {
          "Chown": "git:git",
          "From": "gitlab-workhorse-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "${GITLAB_WORKHORSE_DIR}",
            "${GITLAB_WORKHORSE_DIR}/"
          ]
        },
        {
          "Chown": "git:git",
          "From": "gitlab-gitaly-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "${GITALY_DIR}",
            "${GITALY_DIR}/"
          ]
        },
        {
          "Chown": "git:git",
          "From": "gitlab-builder",
          "Name": "copy",
          "SourcesAndDest": [
            "${GITLAB_DIR}",
            "${GITLAB_DIR}/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "create.sh",
            "entrypoint.sh",
            "/usr/local/sbin/"
          ]
        },
        {
          "CmdLine": [
            "chmod +x /usr/local/sbin/create.sh /usr/local/sbin/entrypoint.sh     \u0026\u0026 bash /usr/local/sbin/create.sh     \u0026\u0026 rm /usr/local/sbin/create.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "22/tcp",
            "8181/tcp"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "${GITLAB_DATA_DIR}",
            "${GITLAB_CONFIG_DIR}",
            "${GITLAB_LOG_DIR}"
          ]
        },
        {
          "CmdLine": [
            "/usr/local/sbin/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}