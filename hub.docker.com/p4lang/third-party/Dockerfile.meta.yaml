MetaArgs: null
Stages:
- As: ccache
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: CCACHE_DEPS
      Value: autoconf automake build-essential libmemcached-dev
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./ccache
    - /ccache/
  - Name: workdir
    Path: /ccache/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $CCACHE_DEPS
    Name: run
    PrependShell: true
  - Env:
    - Key: RUN_FROM_BUILD_FARM
      Value: "yes"
    Name: env
  - CmdLine:
    - ./autogen.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ./configure --enable-memcached
    Name: run
    PrependShell: true
  - CmdLine:
    - make
    Name: run
    PrependShell: true
  - CmdLine:
    - touch ccache.1
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ccache
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as ccache
- As: scapy-vxlan
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: SCAPY_VXLAN_DEPS
      Value: python python-pip python-setuptools
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./scapy-vxlan
    - /scapy-vxlan/
  - Name: workdir
    Path: /scapy-vxlan/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $SCAPY_VXLAN_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed wheel
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed .
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: scapy-vxlan
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as scapy-vxlan
- As: ptf
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: PTF_DEPS
      Value: build-essential libpcap-dev python python-dev python-pip python-setuptools
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./ptf
    - /ptf/
  - Name: workdir
    Path: /ptf/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $PTF_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed wheel
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed pypcap
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed .
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ptf
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as ptf
- As: nanomsg
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: NANOMSG_DEPS
      Value: build-essential cmake
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir /output
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./nanomsg
    - /nanomsg/
  - Name: workdir
    Path: /nanomsg/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $NANOMSG_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir build
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /nanomsg/build/
  - CmdLine:
    - cmake ..
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: nanomsg
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as nanomsg
- As: nnpy
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: NNPY_DEPS
      Value: build-essential libffi-dev python python-dev python-pip python-setuptools
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: nanomsg
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./nnpy
    - /nnpy/
  - Name: workdir
    Path: /nnpy/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $NNPY_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed wheel
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed cffi
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user --ignore-installed .
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: nnpy
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as nnpy
- As: thrift
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: THRIFT_DEPS
      Value: automake                 bison                 build-essential                 flex                 libboost-dev                 libboost-test-dev                 libevent-dev                 libssl1.0.0                 libssl-dev                 libtool                 pkg-config                 python                 python-dev                 python-pip                 python-setuptools
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./thrift
    - /thrift/
  - Name: workdir
    Path: /thrift/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $THRIFT_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - ./bootstrap.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ./configure --with-cpp=yes                 --with-python=yes                 --with-c_glib=no                 --with-java=no                 --with-ruby=no                 --with-erlang=no                 --with-go=no                 --with-nodejs=no                 --enable-tests=no
    Name: run
    PrependShell: true
  - CmdLine:
    - make
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install-strip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /thrift/lib/py/
  - CmdLine:
    - pip install --user --ignore-installed .
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: thrift
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as thrift
- As: protobuf
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: PROTOCOL_BUFFERS_DEPS
      Value: autoconf                           automake                           ca-certificates                           g++                           libffi-dev                           libtool                           make                           python-dev                           python-setuptools
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./protobuf
    - /protobuf/
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./protobuf-deps/googlemock
    - /protobuf/gmock
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./protobuf-deps/googletest
    - /protobuf/gmock/gtest
  - Name: workdir
    Path: /protobuf/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $PROTOCOL_BUFFERS_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - ./autogen.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - ./configure
    Name: run
    PrependShell: true
  - CmdLine:
    - make
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install-strip
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /protobuf/python/
  - CmdLine:
    - sed -i "s/extra_compile_args = \[\]/extra_compile_args = \['--std=c++11'\]/"
      setup.py
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /output/usr/local/lib/python2.7/site-packages
    Name: run
    PrependShell: true
  - CmdLine:
    - python setup.py install --user --cpp_implementation
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /output/usr/local/lib/python2.7/site-packages
  - CmdLine:
    - cat *.pth | grep -v "import sys" | sort -u > docker_protobuf.pth
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: protobuf
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as protobuf
- As: grpc
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: GRPC_DEPS
      Value: autoconf               automake               build-essential               cython               libtool               python-dev               python-pip               python-setuptools
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir -p /output/usr/local
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHONUSERBASE
      Value: /output/usr/local
    Name: env
  - Chown: ""
    From: protobuf
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./grpc
    - /grpc/
  - Name: workdir
    Path: /grpc/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $GRPC_DEPS
    Name: run
    PrependShell: true
  - CmdLine:
    - make prefix=/output/usr/local
    Name: run
    PrependShell: true
  - CmdLine:
    - make prefix=/output/usr/local install
    Name: run
    PrependShell: true
  - CmdLine:
    - pip install --user -rrequirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - env GRPC_PYTHON_BUILD_WITH_CYTHON=1 pip install --user --ignore-installed .
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: grpc
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as grpc
- As: libyang
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: LIBYANG_DEPS
      Value: build-essential                  cmake                  libpcre3-dev
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir /output
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./libyang
    - /libyang/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $LIBYANG_DEPS
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /libyang/
  - CmdLine:
    - mkdir build
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /libyang/build/
  - CmdLine:
    - cmake ..
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: libyang
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as libyang
- As: sysrepo
  BaseName: ubuntu:16.04
  Commands:
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: SYSREPO_DEPS
      Value: build-essential                  cmake                  libavl-dev                  libev-dev                  libprotobuf-c-dev                  protobuf-c-compiler
    Name: env
  - Env:
    - Key: CFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: CXXFLAGS
      Value: '"-Os"'
    Name: env
  - Env:
    - Key: LDFLAGS
      Value: '"-Wl,-s"'
    Name: env
  - CmdLine:
    - mkdir /output
    Name: run
    PrependShell: true
  - Chown: ""
    From: libyang
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - ./sysrepo
    - /sysrepo/
  - CmdLine:
    - apt-get update
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get install -y --no-install-recommends $SYSREPO_DEPS
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /sysrepo/
  - CmdLine:
    - mkdir build
    Name: run
    PrependShell: true
  - Name: workdir
    Path: /sysrepo/build/
  - CmdLine:
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=Off -DCALL_TARGET_BINS_DIRECTLY=Off
      ..
    Name: run
    PrependShell: true
  - CmdLine:
    - make DESTDIR=/output install
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: sysrepo
  Platform: ""
  SourceCode: FROM ubuntu:16.04 as sysrepo
- BaseName: ubuntu:16.04
  Commands:
  - Maintainer: Seth Fowler <sfowler@barefootnetworks.com>
    Name: maintainer
  - Key: DEBIAN_FRONTEND
    Name: arg
    Value: noninteractive
  - Key: MAKEFLAGS
    Name: arg
    Value: -j2
  - Env:
    - Key: CCACHE_RUNTIME_DEPS
      Value: libmemcached-dev
    Name: env
  - Env:
    - Key: SCAPY_VXLAN_RUNTIME_DEPS
      Value: python-minimal
    Name: env
  - Env:
    - Key: PTF_RUNTIME_DEPS
      Value: libpcap-dev python-minimal tcpdump
    Name: env
  - Env:
    - Key: NNPY_RUNTIME_DEPS
      Value: python-minimal
    Name: env
  - Env:
    - Key: THRIFT_RUNTIME_DEPS
      Value: libssl1.0.0 python-minimal
    Name: env
  - Env:
    - Key: GRPC_RUNTIME_DEPS
      Value: python-minimal python-setuptools
    Name: env
  - Env:
    - Key: SYSREPO_RUNTIME_DEPS
      Value: libpcre3 libavl1 libev4 libprotobuf-c1
    Name: env
  - CmdLine:
    - apt-get update &&     apt-get install -y --no-install-recommends $CCACHE_RUNTIME_DEPS                                                $SCAPY_VXLAN_RUNTIME_DEPS                                                $PTF_RUNTIME_DEPS                                                $NNPY_RUNTIME_DEPS                                                $THRIFT_RUNTIME_DEPS                                                $GRPC_RUNTIME_DEPS                                                $SYSREPO_RUNTIME_DEPS
      &&     rm -rf /var/cache/apt/* /var/lib/apt/lists/*
    Name: run
    PrependShell: true
  - Env:
    - Key: CCACHE_MEMCACHED_ONLY
      Value: "true"
    Name: env
  - Env:
    - Key: CCACHE_MEMCACHED_CONF
      Value: --SERVER=ccache
    Name: env
  - Env:
    - Key: CCACHE_COMPILERCHECK
      Value: content
    Name: env
  - Env:
    - Key: CCACHE_CPP2
      Value: "true"
    Name: env
  - Env:
    - Key: CCACHE_COMPRESS
      Value: "true"
    Name: env
  - Env:
    - Key: CCACHE_MAXSIZE
      Value: 1G
    Name: env
  - Chown: ""
    From: ccache
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: scapy-vxlan
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: ptf
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: nanomsg
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: nnpy
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: thrift
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: protobuf
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: grpc
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: libyang
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: sysrepo
    Name: copy
    SourcesAndDest:
    - /output/usr/local
    - /usr/local/
  - Chown: ""
    From: sysrepo
    Name: copy
    SourcesAndDest:
    - /output/etc
    - /etc/
  - CmdLine:
    - echo "import site; site.addsitedir('/usr/local/lib/python2.7/site-packages')"         >
      /usr/local/lib/python2.7/dist-packages/use_site_packages.pth
    Name: run
    PrependShell: true
  - CmdLine:
    - ldconfig
    Name: run
    PrependShell: true
  From:
    Image: ubuntu:16.04
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:16.04
