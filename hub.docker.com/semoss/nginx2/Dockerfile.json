{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "debian:9",
      "SourceCode": "FROM debian:9",
      "Platform": "",
      "From": {
        "Image": "debian:9"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"semoss@semoss.org\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$PATH:/opt/semosshome/apache-maven-3.5.4/bin:/opt/semoss-artifacts/artifacts/scripts:/opt/semosshome/nginx/scripts"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update\t\t\u0026\u0026 echo ------- installing packages ------- \t\u0026\u0026 apt-get install -y software-properties-common \t\u0026\u0026 apt-get install -y  openjdk-8-jdk \t\u0026\u0026 apt-get install -y wget \t\u0026\u0026 apt-get install -y git \t\u0026\u0026 apt-get install -y procps \t\u0026\u0026 apt-get install -y vim \t\u0026\u0026 apt-get install -y nano \t\u0026\u0026 apt-get install -y curl \t\u0026\u0026 apt-get install -y build-essential \t\u0026\u0026 echo ------- installing nginx ------- \t\u0026\u0026 mkdir /opt/nginx-files \t\u0026\u0026 cd /opt/nginx-files \t\u0026\u0026 wget https://nginx.org/download/nginx-1.13.1.tar.gz \u0026\u0026 tar zxvf nginx-1.13.1.tar.gz \t\u0026\u0026 wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz \u0026\u0026 tar xzvf pcre-8.40.tar.gz \t\u0026\u0026 wget http://www.zlib.net/zlib-1.2.11.tar.gz \u0026\u0026 tar xzvf zlib-1.2.11.tar.gz \t\u0026\u0026 wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz \u0026\u0026 tar xzvf openssl-1.1.0f.tar.gz \t\u0026\u0026 echo ------- installing nginx sticky module ------- \t\u0026\u0026 git clone https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng.git \t\u0026\u0026 rm -rf *.tar.gz \t\u0026\u0026 cd /opt/nginx-files/nginx-1.13.1 \t\u0026\u0026 ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log --pid-path=/run/nginx.pid  --lock-path=/var/lock/nginx.lock --user=www-data --group=www-data --build=Ubuntu --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-openssl=/opt/nginx-files/openssl-1.1.0f --with-openssl-opt=enable-ec_nistp_64_gcc_128 --with-openssl-opt=no-nextprotoneg --with-openssl-opt=no-weak-ssl-ciphers --with-openssl-opt=no-ssl3  --with-pcre=/opt/nginx-files/pcre-8.40 --with-pcre-jit --with-zlib=/opt/nginx-files/zlib-1.2.11  --with-compat --with-file-aio --with-threads  --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module  --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_slice_module --with-http_ssl_module --with-http_sub_module --with-http_stub_status_module --with-http_v2_module  --with-http_secure_link_module --with-mail  --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module  --with-stream_ssl_preread_module --with-debug  --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now'  --add-module=/opt/nginx-files/nginx-sticky-module-ng \t\u0026\u0026 make \t\u0026\u0026 make install \t\u0026\u0026 mkdir -p /var/lib/nginx \u0026\u0026 nginx -t \t\u0026\u0026 cd /etc/systemd/system \t\u0026\u0026 wget https://raw.githubusercontent.com/prabhuk12/nginx/master/nginx_service \t\u0026\u0026 mv nginx_service nginx.service \t\u0026\u0026 systemctl enable nginx.service \t\u0026\u0026 echo ------- testing nginx install ------ \t\u0026\u0026 nginx \t\u0026\u0026 echo ------- installing maven ------- \t\u0026\u0026 mkdir /opt/semosshome \t\u0026\u0026 cd /opt/semosshome \t\u0026\u0026 wget -P /opt/semosshome https://apache.claz.org/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz \t\u0026\u0026 cd /opt/semosshome \u0026\u0026 tar -xvf /opt/semosshome/apache-maven-3.5.4-bin.tar.gz \u0026\u0026 rm /opt/semosshome/apache-maven-3.5.4-bin.tar.gz \t\u0026\u0026 echo ------- installing semoss-artifacts ------- \t\u0026\u0026 git config --global http.sslverify false \t\u0026\u0026 cd /opt \u0026\u0026 git clone https://github.com/SEMOSS/semoss-artifacts.git \t\u0026\u0026 chmod 777 /opt/semoss-artifacts/artifacts/scripts/* \t\u0026\u0026 /opt/semoss-artifacts/artifacts/scripts/update_latest_dev_cluster.sh \t\u0026\u0026 echo ------- cloning nginx conf files ------- \t\u0026\u0026 cd /opt/semosshome \u0026\u0026 git clone https://github.com/prabhuk12/nginx.git \t\u0026\u0026 chmod 777 /opt/semosshome/nginx/scripts/* \t\u0026\u0026 echo ------- configuring nginx ------- \t\u0026\u0026 cp /etc/nginx/mime.types /opt/semosshome/nginx/conf/mime.types \t\u0026\u0026 echo ------- cleaning up ------- \t\u0026\u0026 apt-get clean all"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/opt/semosshome/nginx/scripts"
        },
        {
          "CmdLine": [
            "start_nginx.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}