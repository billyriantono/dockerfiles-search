{
  "MetaArgs": [
    {
      "Key": "UBUNTU_VERSION",
      "DefaultValue": "18.04",
      "ProvidedValue": null,
      "Value": "18.04"
    }
  ],
  "Stages": [
    {
      "Name": "",
      "BaseName": "ubuntu:${UBUNTU_VERSION}",
      "SourceCode": "FROM ubuntu:${UBUNTU_VERSION}",
      "Platform": "",
      "From": {
        "Image": "ubuntu:${UBUNTU_VERSION}"
      },
      "Commands": [
        {
          "Key": "MINICONDA_VERSION",
          "Name": "arg",
          "Value": "4.5.12"
        },
        {
          "Key": "CONDA_VERSION",
          "Name": "arg",
          "Value": "4.5.12"
        },
        {
          "Env": [
            {
              "Key": "NB_USER",
              "Value": "\"ec2-user\""
            },
            {
              "Key": "NB_UID",
              "Value": "\"500\""
            },
            {
              "Key": "NB_GID",
              "Value": "\"500\""
            }
          ],
          "Name": "env"
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "DEBIAN_FRONTEND",
              "Value": "noninteractive"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get -yq dist-upgrade  \u0026\u0026 apt-get install -yq --no-install-recommends     wget     bzip2     ca-certificates     sudo     locales     fonts-liberation     run-one  \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"en_US.UTF-8 UTF-8\" \u003e /etc/locale.gen \u0026\u0026     locale-gen"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Env": [
            {
              "Key": "CONDA_DIR",
              "Value": "/home/$NB_USER/anaconda3"
            },
            {
              "Key": "SHELL",
              "Value": "/bin/bash"
            },
            {
              "Key": "NB_USER",
              "Value": "$NB_USER"
            },
            {
              "Key": "NB_UID",
              "Value": "$NB_UID"
            },
            {
              "Key": "NB_GID",
              "Value": "$NB_GID"
            },
            {
              "Key": "LC_ALL",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANG",
              "Value": "en_US.UTF-8"
            },
            {
              "Key": "LANGUAGE",
              "Value": "en_US.UTF-8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "PATH",
              "Value": "$CONDA_DIR/bin:$PATH"
            },
            {
              "Key": "HOME",
              "Value": "/home/$NB_USER"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/jupyter/fix-permissions",
            "/usr/local/bin/fix-permissions"
          ]
        },
        {
          "CmdLine": [
            "sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"auth requisite pam_deny.so\" \u003e\u003e /etc/pam.d/su \u0026\u0026     sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers \u0026\u0026     sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers \u0026\u0026     groupadd -g $NB_GID $NB_USER \u0026\u0026     useradd -m -s /bin/bash -u $NB_UID -g $NB_GID $NB_USER \u0026\u0026     mkdir -p $CONDA_DIR \u0026\u0026     chown $NB_USER:$NB_GID $CONDA_DIR \u0026\u0026     chmod g+w /etc/passwd \u0026\u0026     fix-permissions $HOME \u0026\u0026     fix-permissions \"$(dirname $CONDA_DIR)\""
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"$NB_USER ALL=(ALL:ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "Name": "workdir",
          "Path": "$HOME"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/miniconda-md5",
            "/tmp/miniconda-md5/"
          ]
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     echo \"$(cat miniconda-md5/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh.md5) *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \u0026\u0026     /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \u0026\u0026     rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \u0026\u0026     echo \"conda ${CONDA_VERSION}\" \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \u0026\u0026     $CONDA_DIR/bin/conda config --system --set auto_update_conda false \u0026\u0026     $CONDA_DIR/bin/conda config --system --set show_channel_urls true \u0026\u0026     $CONDA_DIR/bin/conda install --quiet --yes conda \u0026\u0026     $CONDA_DIR/bin/conda update --all --quiet --yes \u0026\u0026     conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     conda clean --all -y \u0026\u0026     rm -rf /home/$NB_USER/.cache/yarn \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "conda install --quiet --yes 'tini=0.18.0' \u0026\u0026     conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 \u003e\u003e $CONDA_DIR/conda-meta/pinned \u0026\u0026     conda clean --all -y \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Key": "JUPYTER_NB_VERSION",
          "Name": "arg",
          "Value": "6.0.0"
        },
        {
          "Key": "JUPYTER_LAB_VERSION",
          "Name": "arg",
          "Value": "1.0.4"
        },
        {
          "CmdLine": [
            "conda install --quiet --yes     \"notebook=$JUPYTER_NB_VERSION\"     \"jupyterlab=$JUPYTER_LAB_VERSION\" \u0026\u0026     conda clean --all -y \u0026\u0026     jupyter notebook --generate-config \u0026\u0026     rm -rf $CONDA_DIR/share/jupyter/lab/staging \u0026\u0026     rm -rf /home/$NB_USER/.cache/yarn \u0026\u0026     fix-permissions $CONDA_DIR \u0026\u0026     fix-permissions /home/$NB_USER"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends     build-essential     git     jed     libsm6     libxext-dev     libxrender1     lmodern     netcat     pandoc     python-dev     texlive-fonts-recommended     texlive-generic-recommended     texlive-latex-base     texlive-latex-extra     texlive-xetex     tzdata     unzip     nano     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends ffmpeg \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "CmdLine": [
            "conda install --yes 'nb_conda=2.2.1' \u0026\u0026     conda clean --all -y \u0026\u0026     jupyter nbextension install nb_conda --py --sys-prefix --symlink \u0026\u0026     jupyter nbextension enable nb_conda --py --sys-prefix \u0026\u0026     jupyter serverextension enable nb_conda --py --sys-prefix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "sed -ie \"s/\\(for env in info.'envs'.\\)/\\1 if env != root_env['dir']/g\" $CONDA_DIR/lib/python*/site-packages/nb_conda/envmanager.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "python -m nb_conda_kernels.install --disable"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "CmdLine": [
            "conda install --yes 'nbexamples' \u0026\u0026     conda clean --all -y \u0026\u0026     jupyter nbextension install --py nbexamples --sys-prefix \u0026\u0026     jupyter nbextension enable --py nbexamples --sys-prefix \u0026\u0026     jupyter serverextension enable --py nbexamples --sys-prefix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/nbexamples-sagemaker",
            "$CONDA_DIR/lib/python3.7/site-packages/nbexamples/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/nbexamples-sagemaker/static",
            "$CONDA_DIR/share/jupyter/nbextensions/nbexamples/"
          ]
        },
        {
          "Env": [
            {
              "Key": "SAMPLE_NOTEBOOKS_DIR",
              "Value": "$HOME/sample-notebooks"
            }
          ],
          "Name": "env"
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/sample-notebooks",
            "$SAMPLE_NOTEBOOKS_DIR"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "fix-permissions $SAMPLE_NOTEBOOKS_DIR"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "CmdLine": [
            "$SAMPLE_NOTEBOOKS_DIR/update_examples.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "apt-get update \u0026\u0026     apt-get install -y --no-install-recommends openssh-client \u0026\u0026     rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "CmdLine": [
            "conda install --yes \"jupyterlab-git\" \u0026\u0026     conda clean --all -y \u0026\u0026     jupyter labextension install @jupyterlab/git \u0026\u0026     jupyter serverextension enable --py jupyterlab_git \u0026\u0026     npm cache clean --force"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "Key": "DOCKER_VERSION",
          "Name": "arg",
          "Value": "19.03.1"
        },
        {
          "CmdLine": [
            "cd /tmp \u0026\u0026     export CODE_NAME=$(cat /etc/*-release | grep -oP \"UBUNTU_CODENAME=\\K\\w+\") \u0026\u0026     wget https://download.docker.com/linux/ubuntu/dists/${CODE_NAME}/pool/stable/amd64/docker-ce-cli_${DOCKER_VERSION}~3-0~ubuntu-${CODE_NAME}_amd64.deb -O docker-ce-cli.deb \u0026\u0026     sudo dpkg -i docker-ce-cli.deb \u0026\u0026     rm -f docker-ce-cli.deb"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"alias docker='sudo /usr/bin/docker'\" \u003e\u003e $HOME/.bashrc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "df -h"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "pip install --no-cache-dir awscli"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Key": "INSTALL_OPTIONAL_PACKAGES",
          "Name": "arg",
          "Value": null
        },
        {
          "CmdLine": [
            "if [ ! -z $INSTALL_OPTIONAL_PACKAGES]; then     apt-get update \u0026\u0026 apt-get install -yq --no-install-recommends $INSTALL_OPTIONAL_PACKAGES;     fi     \u0026\u0026 rm -rf /var/lib/apt/lists/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "Env": [
            {
              "Key": "NOTEBOOK_DIR",
              "Value": "$HOME/SageMaker"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "mkdir $NOTEBOOK_DIR \u0026\u0026     sed -ie \"/^#c.NotebookApp.notebook_dir/c\\c.NotebookApp.notebook_dir = '$NOTEBOOK_DIR'\" ~/.jupyter/jupyter_notebook_config.py"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/custom",
            "$HOME/.jupyter/custom"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/jupyter/start.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/jupyter/start-notebook.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/jupyter/start-singleuser.sh",
            "/usr/local/bin/"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "utils/jupyter/jupyter_notebook_config.py",
            "/etc/jupyter/"
          ]
        },
        {
          "Name": "user",
          "User": "root"
        },
        {
          "CmdLine": [
            "fix-permissions /etc/jupyter/"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "user",
          "User": "$NB_UID"
        },
        {
          "Name": "expose",
          "Ports": [
            "8888"
          ]
        },
        {
          "CmdLine": [
            "tini",
            "-g",
            "--"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "CmdLine": [
            "start-notebook.sh"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}