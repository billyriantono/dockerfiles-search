MetaArgs: null
Stages:
- As: base
  BaseName: php:7.3-fpm-alpine
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.14.0
    Name: env
  - CmdLine:
    - 'GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8     && CONFIG="        --prefix=/etc/nginx         --sbin-path=/usr/sbin/nginx         --modules-path=/usr/lib/nginx/modules         --conf-path=/etc/nginx/nginx.conf         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --pid-path=/var/run/nginx.pid         --lock-path=/var/run/nginx.lock         --http-client-body-temp-path=/var/cache/nginx/client_temp         --http-proxy-temp-path=/var/cache/nginx/proxy_temp         --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp         --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp         --http-scgi-temp-path=/var/cache/nginx/scgi_temp         --user=nginx         --group=nginx         --with-http_ssl_module         --with-http_realip_module         --with-http_addition_module         --with-http_sub_module         --with-http_dav_module         --with-http_flv_module         --with-http_mp4_module         --with-http_gunzip_module         --with-http_gzip_static_module         --with-http_random_index_module         --with-http_secure_link_module         --with-http_stub_status_module         --with-http_auth_request_module         --with-http_xslt_module=dynamic         --with-http_image_filter_module=dynamic         --with-http_geoip_module=dynamic         --with-threads         --with-stream         --with-stream_ssl_module         --with-stream_ssl_preread_module         --with-stream_realip_module         --with-stream_geoip_module=dynamic         --with-http_slice_module         --with-mail         --with-mail_ssl_module         --with-compat         --with-file-aio         --with-http_v2_module     "     &&
      addgroup -S nginx     && adduser -D -S -h /var/cache/nginx -s /sbin/nologin
      -G nginx nginx     && apk add --no-cache --virtual .build-deps         gcc         libc-dev         make         openssl-dev         pcre-dev         zlib-dev         linux-headers         curl         gnupg         libxslt-dev         gd-dev         geoip-dev     &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz     &&
      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc     &&
      export GNUPGHOME="$(mktemp -d)"     && found='''';     for server in         ha.pool.sks-keyservers.net         hkp://keyserver.ubuntu.com:80         hkp://p80.pool.sks-keyservers.net:80         pgp.mit.edu     ;
      do         echo "Fetching GPG key $GPG_KEYS from $server";         gpg --keyserver
      "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes
      && break;     done;     test -z "$found" && echo >&2 "error: failed to fetch
      GPG key $GPG_KEYS" && exit 1;     gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz     &&
      rm -rf "$GNUPGHOME" nginx.tar.gz.asc     && mkdir -p /usr/src     && tar -zxC
      /usr/src -f nginx.tar.gz     && rm nginx.tar.gz     && cd /usr/src/nginx-$NGINX_VERSION     &&
      ./configure $CONFIG --with-debug     && make -j$(getconf _NPROCESSORS_ONLN)     &&
      mv objs/nginx objs/nginx-debug     && mv objs/ngx_http_xslt_filter_module.so
      objs/ngx_http_xslt_filter_module-debug.so     && mv objs/ngx_http_image_filter_module.so
      objs/ngx_http_image_filter_module-debug.so     && mv objs/ngx_http_geoip_module.so
      objs/ngx_http_geoip_module-debug.so     && mv objs/ngx_stream_geoip_module.so
      objs/ngx_stream_geoip_module-debug.so     && ./configure $CONFIG     && make
      -j$(getconf _NPROCESSORS_ONLN)     && make install     && rm -rf /etc/nginx/html/     &&
      mkdir /etc/nginx/conf.d/     && mkdir -p /usr/share/nginx/html/     && install
      -m644 html/index.html /usr/share/nginx/html/     && install -m644 html/50x.html
      /usr/share/nginx/html/     && install -m755 objs/nginx-debug /usr/sbin/nginx-debug     &&
      install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so     &&
      install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so     &&
      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so     &&
      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so     &&
      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules     && strip /usr/sbin/nginx*     &&
      strip /usr/lib/nginx/modules/*.so     && rm -rf /usr/src/nginx-$NGINX_VERSION         &&
      apk add --no-cache --virtual .gettext gettext     && mv /usr/bin/envsubst /tmp/         &&
      runDeps="$(         scanelf --needed --nobanner --format ''%n#p'' /usr/sbin/nginx
      /usr/lib/nginx/modules/*.so /tmp/envsubst             | tr '','' ''\n''             |
      sort -u             | awk ''system("[ -e /usr/local/lib/" $1 " ]") == 0 { next
      } { print "so:" $1 }''     )"     && apk add --no-cache --virtual .nginx-rundeps
      $runDeps     && apk del .build-deps     && apk del .gettext     && mv /tmp/envsubst
      /usr/local/bin/         && apk add --no-cache tzdata         && ln -sf /dev/stdout
      /var/log/nginx/access.log     && ln -sf /dev/stderr /var/log/nginx/error.log'
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/nginx/nginx.conf
    - /etc/nginx/nginx.conf
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - Env:
    - Key: ELASTICSEARCH_HOSTS_STRING
      Value: '''elasticsearch:9200'''
    Name: env
  - Env:
    - Key: ELASTIC_SEARCH_INDEX_PREFIX
      Value: ''''''
    Name: env
  - Env:
    - Key: APP_SECRET
      Value: bef043dff42c07c95949d8bfddf1081f
    Name: env
  - CmdLine:
    - docker-php-ext-install     opcache
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing     gnu-libiconv     sudo
    Name: run
    PrependShell: true
  - Env:
    - Key: LD_PRELOAD
      Value: /usr/lib/preloadable_libiconv.so php
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.utf8
    - Key: LANG
      Value: en_US.utf8
    - Key: LANGUAGE
      Value: en_US.utf8
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/nginx/nginx-site.conf
    - /etc/nginx/conf.d/nginx-site.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/php-ini-overrides.ini
    - /usr/local/etc/php/php.ini
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/docker-php-entrypoint
    - /usr/local/bin/
  - CmdLine:
    - 'echo "www-data ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/nginx, /usr/local/sbin/php-fpm"
      >> /etc/sudoers'
    Name: run
    PrependShell: true
  - CmdLine:
    - sudo -E php-fpm -D && sudo nginx -g "daemon off;"
    Name: cmd
    PrependShell: true
  - Name: user
    User: www-data
  - Name: workdir
    Path: /var/www/html
  From:
    Image: php:7.3-fpm-alpine
  Name: base
  Platform: ""
  SourceCode: FROM php:7.3-fpm-alpine as base
- As: development
  BaseName: base
  Commands:
  - Env:
    - Key: APP_ENV
      Value: dev
    Name: env
  - Name: user
    User: root
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/docker-cmd-development
    - /usr/local/bin/docker-cmd-development
  - CmdLine:
    - chmod +x /usr/local/bin/docker-cmd-development
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-cmd-development
    Name: cmd
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/docker-install-composer
    - /usr/local/bin/docker-install-composer
  - CmdLine:
    - chmod +x /usr/local/bin/docker-install-composer && docker-install-composer
    Name: run
    PrependShell: true
  - Key: www_data_uid
    Name: arg
    Value: null
  - Key: www_data_gid
    Name: arg
    Value: null
  - CmdLine:
    - if [ -n "$www_data_uid" ]; then deluser www-data && (addgroup -g $www_data_gid
      www-data || addgroup -g 82 www-data) && adduser -u $www_data_uid -D -S -G www-data
      www-data; fi
    Name: run
    PrependShell: true
  - Name: user
    User: www-data
  - CmdLine:
    - composer global require hirak/prestissimo
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: development
  Platform: ""
  SourceCode: FROM base as development
- As: production-builder
  BaseName: php:7.3-fpm-alpine
  Commands:
  - Env:
    - Key: APP_ENV
      Value: prod
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/docker-install-composer
    - /usr/local/bin/docker-install-composer
  - CmdLine:
    - chmod +x /usr/local/bin/docker-install-composer && docker-install-composer
    Name: run
    PrependShell: true
  - CmdLine:
    - composer global require hirak/prestissimo
    Name: run
    PrependShell: true
  - Chown: www-data:www-data
    From: ""
    Name: copy
    SourcesAndDest:
    - /
    - /var/www/html
  - CmdLine:
    - composer install -o --no-dev
    Name: run
    PrependShell: true
  From:
    Image: php:7.3-fpm-alpine
  Name: production-builder
  Platform: ""
  SourceCode: FROM php:7.3-fpm-alpine as production-builder
- As: production
  BaseName: base
  Commands:
  - Env:
    - Key: APP_ENV
      Value: prod
    Name: env
  - Chown: www-data:www-data
    From: production-builder
    Name: copy
    SourcesAndDest:
    - /var/www/html
    - /var/www/html
  - CmdLine:
    - php bin/console cache:warmup
    Name: run
    PrependShell: true
  From:
    Stage:
      Index: 0
      Named: base
  Name: production
  Platform: ""
  SourceCode: FROM base as production
