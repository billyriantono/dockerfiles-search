MetaArgs:
- DefaultValue: '"ubuntu"'
  Key: PLATFORM
  ProvidedValue: null
  Value: '"ubuntu"'
Stages:
- BaseName: ${PLATFORM}
  Commands:
  - Key: PLATFORM
    Name: arg
    Value: '"ubuntu"'
  - Key: BROWSER
    Name: arg
    Value: '"chrome"'
  - Key: CHROME_VERSION
    Name: arg
    Value: '"current"'
  - Key: CHROME_INSTALL_CMD
    Name: arg
    Value: '"google-chrome"'
  - Key: CHROME_RELEASE
    Name: arg
    Value: '"stable"'
  - Key: CHROME_REPO
    Name: arg
    Value: '"main"'
  - Key: CHROME_DRIVER_VER
    Name: arg
    Value: '"72"'
  - Key: FIREFOX_REL
    Name: arg
    Value: null
  - Key: FIREFOX_VER
    Name: arg
    Value: null
  - Key: GECKODRIVER_VER
    Name: arg
    Value: null
  - Key: PYTHON_VERSION
    Name: arg
    Value: '"3"'
  - Env:
    - Key: DISPLAY
      Value: :99
    Name: env
  - CmdLine:
    - echo "---------------------------------------"     && echo "BEGINNING RUN Command"     &&
      echo "---------------------------------------"     && echo "$PLATFORM"     &&
      echo "---------------------------------------"     && case "$PLATFORM" in "ubuntu:latest"
      )       echo "---------------------------------------"       && echo "Linux
      Image Build Start"       && echo "---------------------------------------"       &&
      mkdir -p /tmp       && if [ "$BROWSER" = "" ]; then BROWSER="chrome"; fi       &&
      case "$BROWSER" in "chrome" )         echo "---------------------------------------"         &&
      echo "Get commands to Install Chrome"         && echo "---------------------------------------"         &&
      if [ "$CHROME_VERSION" = "" ]; then CHROME_VERSION="current"; fi         &&
      if [ "$CHROME_RELEASE" = "" ]; then CHROME_RELEASE="stable"; fi         && if
      [ "$CHROME_REPO" = "" ]; then CHROME_REPO="main"; fi         && if [ "$CHROME_DRIVER_VER"
      = "" ]; then CHROME_DRIVER_VER="main"; fi         && echo "---------------------------------------"         &&
      echo "Chrome install command is $CHROME_INSTALL_CMD"         && echo "---------------------------------------"         &&
      echo "The chrome release is $CHROME_RELEASE"         && echo "---------------------------------------"         &&
      echo "The chrome repository is $CHROME_REPO"         && echo "---------------------------------------"
      ;;       esac       && echo "---------------------------------------"       &&
      echo "Install needed linux stuff/libraries"       && echo "---------------------------------------"       &&
      apt-get update --assume-yes && apt-get install --assume-yes         curl         unzip         wget         apt-transport-https         ca-certificates         libgconf-2-4         libnss3         libnspr4         libasound2         libatk-bridge2.0-0         libnspr4         xdg-utils         libatk1.0-0         libxss1         libx11-xcb1         libc6         libcairo2         libcups2         libdbus-1-3         libgdk-pixbuf2.0-0         libgtk-3-0         chromium-codecs-ffmpeg-extra         gnupg         gnupg2       &&
      echo "---------------------------------------"       && echo "First apt-get
      update/install is completed"       && echo "---------------------------------------"       &&
      echo "Get ODBC packages"       && echo "---------------------------------------"       &&
      curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -       &&
      curl https://packages.microsoft.com/config/ubuntu/14.04/prod.list > /etc/apt/sources.list.d/mssql-release.list       &&
      echo "---------------------------------------"       && echo "Install ODBC packages"       &&
      echo "---------------------------------------"       && apt-get update -y       &&
      ACCEPT_EULA=Y apt-get -y install msodbcsql17        && ACCEPT_EULA=Y apt-get
      install -y  mssql-tools       && ACCEPT_EULA=Y apt-get install -y  unixodbc-dev       &&
      echo export PATH="$PATH":/opt/mssql-tools/bin >> ~/.bash_profile       && echo
      export PATH="$PATH":/opt/mssql-tools/bin >> ~/.bashrc       && echo "---------------------------------------"       &&
      if [ "$PYTHON_VERSION" = "" ]; then echo "Python 2 being installed" ; else echo
      "Python 3 being installed" ; fi       && echo "---------------------------------------"       &&
      if [ "$PYTHON_VERSION" = "3" ] ; then echo "Starting python 3 and selenium install"
      apt-get update --assume-yes && apt-get install --assume-yes python3-pip       &&
      echo "---------------------------------------"       && pip3 install -U selenium
      behave pytest pyodbc requests faker; fi       && echo "---------------------------------------"       &&
      if [ "$PYTHON_VERSION" != "3" ]; then echo "Starting python 2 and selenium install"
      apt-get install --assume-yes python-pip python       && echo "---------------------------------------"       &&
      pip install selenium behave pytest requests faker ; fi       && case "$BROWSER"
      in "chrome" )         echo "---------------------------------------"         &&
      echo "Install chromedriver per chrome browser version installed"         &&
      echo "---------------------------------------"         && echo $CHROME_VERSION         &&
      echo "---------------------------------------"         && if [ "$CHROME_VERSION"
      = "previous" ]; then CHROME_RELEASE="xenial" CHROME_REPO="universe" CHROME_INSTALL_CMD="chromium-browser";
      fi         && if [ "$CHROME_VERSION" = "beta" ]; then CHROME_INSTALL_CMD="google-chrome-beta"
      CHROME_RELEASE="stable" CHROME_REPO="main"; fi         && if [ "$CHROME_VERSION"
      = "unstable" ]; then CHROME_INSTALL_CMD="google-chrome-unstable" CHROME_RELEASE="stable"
      CHROME_REPO="main"; fi         && if [ "$CHROME_VERSION" = "current"  ]; then
      CHROME_INSTALL_CMD="google-chrome-stable" CHROME_RELEASE="stable" CHROME_REPO="main";
      fi         && wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub
      | apt-key add -         && if [ "$CHROME_VERSION" = "current" ] || [ "$CHROME_VERSION"
      = "beta" ]; then sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/
      stable main" >> /etc/apt/sources.list.d/google-chrome.list'         && apt-get
      -y update         && apt-get install -y ${CHROME_INSTALL_CMD}; fi         &&
      if [ "$CHROME_VERSION" = "previous" ]; then apt-get install -y ${CHROME_INSTALL_CMD};
      fi         && system_type=$(uname -m)         && echo "---------------------------------------"         &&
      echo "$system_type"         && echo "---------------------------------------"         &&
      echo "$CHROME_VERSION"         && echo "---------------------------------------"         &&
      echo "Get the chrome browser version currently setup and extract the version"         &&
      echo "Use that extract version to get the chromedriver needed"         && echo
      "---------------------------------------"         && if [ "$CHROME_VERSION"
      = "beta" ]; then version=$(/usr/bin/google-chrome-beta -version); fi         &&
      if [ "$CHROME_VERSION" = "current" ]; then version=$(/usr/bin/google-chrome
      -version); fi         && if [ "$CHROME_VERSION" = "previous" ]; then version=$(/usr/bin/google-chrome-beta
      -version); fi         && echo "---------------------------------------"         &&
      echo "$version"         && echo "---------------------------------------"         &&
      IFS=" "         && set $version         && new_version=$3         && echo "---------------------------------------"         &&
      echo "$new_version"         && echo "---------------------------------------"         &&
      IFS=.         && set $new_version         && echo "---------------------------------------"         &&
      echo "$1"         && echo "---------------------------------------"         &&
      url="http://chromedriver.storage.googleapis.com/LATEST_RELEASE_"$1""         &&
      echo "---------------------------------------"         && echo "$url"         &&
      echo "---------------------------------------"         && driver_ver=$(wget
      -qO- "$url")         && echo "---------------------------------------"         &&
      echo "$driver_ver"         && echo "---------------------------------------"         &&
      if [ "$CHROME_VERSION" = "previous" ]; then driver_ver="${CHROME_DRIVER_VER}";
      fi         && echo "---------------------------------------"         && echo
      "$driver_ver"         && echo "---------------------------------------"         &&
      if [ "$system_type" = "i686" ]; then bit="32"; elif [ "$system_type" = "x86_64"
      ]; then bit="64"; fi         && echo "---------------------------------------"         &&
      echo "$bit"         && echo "---------------------------------------"         &&
      mkdir -p /tmp/chromedriver         && curl "https://chromedriver.storage.googleapis.com/${driver_ver}/chromedriver_linux${bit}.zip"
      > /tmp/chromedriver/chromedriver.zip         && unzip -qqo /tmp/chromedriver/chromedriver
      chromedriver -d /usr/local/bin/         && rm -rf /tmp/chromedriver/chromedriver.zip         &&
      chmod +x /usr/local/bin/chromedriver         && if [ "$CHROME_VERSION" = "previous"
      ]; then ln -snf "/usr/local/bin/chromium-browser /usr/bin/google-chrome"; fi         &&
      if [ "$CHROME_VERSION" = "beta" ]; then ln -snf "/usr/bin/google-chrome-beta
      /usr/bin/google-chrome-beta"; fi         && if [ "$CHROME_VERSION" = "current"
      ]; then ln -snf "/usr/bin/google-chrome /usr/bin/google-chrome"; fi         &&
      echo "---------------------------------------"         && echo "End of Chrome
      and Chrome driver install"         && echo "---------------------------------------"
      ;;      esac       && case "$BROWSER" in "firefox" )         echo "---------------------------------------"         &&
      echo "Beginning Firefox and Gecko Driver Install"         && echo "---------------------------------------"         &&
      echo "$FIREFOX_VER"         && echo "---------------------------------------"         &&
      if [ "$FIREFOX_VER" = "current"  ]; then FIREFOX_INSTALL_CMD="firefox-stable";
      fi         && system_type=$(uname -m)         && echo "---------------------------------------"         &&
      echo "$system_type"         && echo "---------------------------------------"         &&
      if [ "$FIREFOX_REL" = "current" ]; then apt-get update && apt-get install -y
      firefox; fi         && echo "---------------------------------------"         &&
      echo "---------------------------------------"         && if [ "$system_type"
      = "i686" ]; then bit="32"; elif [ "$system_type" = "x86_64" ]; then bit="64";
      fi         && echo "---------------------------------------"         && echo
      "$bit"         && echo "---------------------------------------"         &&
      mkdir -p /tmp/geckodriver         && cd /tmp/geckodriver         && wget -O
      /tmp/geckodriver/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v0.21.0/geckodriver-v0.21.0-linux64.tar.gz         &&
      tar -xf /tmp/geckodriver/geckodriver.tar.gz -C /usr/bin         && rm -rf /tmp/geckogeckodriver.tar.gz         &&
      chmod +x /usr/bin/geckodriver         && echo "-----------ENDING FIREFOX SETUP------------"
      ;;       esac       && echo "-----------ENDING Linux SETUP------------" ;;     esac
    Name: run
    PrependShell: true
  - CmdLine:
    - bash
    Name: cmd
    PrependShell: false
  From:
    Image: ${PLATFORM}
  Name: ""
  Platform: ""
  SourceCode: FROM ${PLATFORM}
