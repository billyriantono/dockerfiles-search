{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.3",
      "SourceCode": "FROM alpine:3.3",
      "Platform": "",
      "From": {
        "Image": "alpine:3.3"
      },
      "Commands": [
        {
          "Maintainer": "Chanchai Junlouchai \"neverlock@gmail.com\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.10.1"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GPG_KEYS",
              "Value": "B0F4253373F8F6F510D42178520A9993A1C052F8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CONFIG",
              "Value": "\"\t--prefix=/etc/nginx \t--sbin-path=/usr/sbin/nginx \t--modules-path=/usr/lib/nginx/modules \t--conf-path=/etc/nginx/nginx.conf \t--error-log-path=/var/log/nginx/error.log \t--http-log-path=/var/log/nginx/access.log \t--pid-path=/var/run/nginx.pid \t--lock-path=/var/run/nginx.lock \t--http-client-body-temp-path=/var/cache/nginx/client_temp \t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \t--user=nginx \t--group=nginx \t--with-http_ssl_module \t--with-http_realip_module \t--with-http_addition_module \t--with-http_sub_module \t--with-http_dav_module \t--with-http_flv_module \t--with-http_mp4_module \t--with-http_gunzip_module \t--with-http_gzip_static_module \t--with-http_random_index_module \t--with-http_secure_link_module \t--with-http_stub_status_module \t--with-http_auth_request_module \t--with-http_xslt_module=dynamic \t--with-http_image_filter_module=dynamic \t--with-http_geoip_module=dynamic \t--with-http_perl_module=dynamic \t--with-threads \t--with-stream \t--with-stream_ssl_module \t--with-http_slice_module \t--with-mail \t--with-mail_ssl_module \t--with-file-aio \t--with-http_v2_module \t--with-ipv6 \t\""
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "addgroup -S nginx \t\u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t\tperl-dev \t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEYS\" \t\u0026\u0026 gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t\u0026\u0026 rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \t\u0026\u0026 mkdir -p /usr/src \t\u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz \t\u0026\u0026 rm nginx.tar.gz \t\u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION \t\u0026\u0026 ./configure $CONFIG --with-debug \t\u0026\u0026 make \t\u0026\u0026 mv objs/nginx objs/nginx-debug \t\u0026\u0026 mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \t\u0026\u0026 mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \t\u0026\u0026 mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \t\u0026\u0026 mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \t\u0026\u0026 ./configure $CONFIG \t\u0026\u0026 make \t\u0026\u0026 make install \t\u0026\u0026 rm -rf /etc/nginx/html/ \t\u0026\u0026 mkdir /etc/nginx/conf.d/ \t\u0026\u0026 mkdir -p /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/ \t\u0026\u0026 install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t\u0026\u0026 install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \t\u0026\u0026 ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t\u0026\u0026 strip /usr/sbin/nginx* \t\u0026\u0026 strip /usr/lib/nginx/modules/*.so \t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --virtual .nginx-rundeps $runDeps \t\u0026\u0026 apk del .build-deps \t\u0026\u0026 rm -rf /usr/src/nginx-$NGINX_VERSION \t\u0026\u0026 apk add --no-cache gettext \t\t\u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log \t\u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.conf",
            "/etc/nginx/nginx.conf"
          ]
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "nginx.vh.default.conf",
            "/etc/nginx/conf.d/default.conf"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "Env": [
            {
              "Key": "TELEGRAF_VERSION",
              "Value": "0.13.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache --virtual .build-deps wget gnupg tar ca-certificates \u0026\u0026     update-ca-certificates \u0026\u0026     gpg --keyserver hkp://ha.pool.sks-keyservers.net         --recv-keys 05CE15085FC09D18E99EFB22684A14CF2582E0C5 \u0026\u0026     wget -q https://dl.influxdata.com/telegraf/releases/telegraf-${TELEGRAF_VERSION}-static_linux_amd64.tar.gz.asc \u0026\u0026     wget -q https://dl.influxdata.com/telegraf/releases/telegraf-${TELEGRAF_VERSION}-static_linux_amd64.tar.gz \u0026\u0026     gpg --batch --verify telegraf-${TELEGRAF_VERSION}-static_linux_amd64.tar.gz.asc telegraf-${TELEGRAF_VERSION}-static_linux_amd64.tar.gz \u0026\u0026     mkdir -p /usr/src /etc/telegraf \u0026\u0026     tar -C /usr/src -xzf telegraf-${TELEGRAF_VERSION}-static_linux_amd64.tar.gz \u0026\u0026     mv /usr/src/telegraf*/telegraf.conf /etc/telegraf/ \u0026\u0026     chmod +x /usr/src/telegraf*/* \u0026\u0026     cp -a /usr/src/telegraf*/* /usr/bin/ \u0026\u0026     rm -rf *.tar.gz* /usr/src /root/.gnupg \u0026\u0026     apk del .build-deps"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "8092/udp",
            "8094",
            "8125/udp"
          ]
        },
        {
          "CmdLine": [
            "apk add --update alpine-sdk         \u0026\u0026 apk add --update perl         \u0026\u0026 apk add --update libssl1.0"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root"
        },
        {
          "CmdLine": [
            "git clone https://github.com/wg/wrk.git"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/root/wrk"
        },
        {
          "CmdLine": [
            "make         \u0026\u0026 mv /root/wrk/wrk /usr/local/bin         \u0026\u0026 rm -rf /root/wrk         \u0026\u0026 apk del --purge alpine-sdk         \u0026\u0026 apk add libgcc"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "From": "",
          "Name": "copy",
          "SourcesAndDest": [
            "entrypoint.sh",
            "/entrypoint.sh"
          ]
        },
        {
          "CmdLine": [
            "chmod 755 /entrypoint.sh"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "/entrypoint.sh"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        }
      ]
    }
  ]
}