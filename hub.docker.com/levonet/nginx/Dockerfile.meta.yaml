MetaArgs: null
Stages:
- As: build
  BaseName: alpine:3.10
  Commands:
  - Env:
    - Key: NGINX_VERSION
      Value: 1.17.7
    Name: env
  - Env:
    - Key: NJS_MODULE_VERSION
      Value: 0.3.7
    Name: env
  - Env:
    - Key: REDIS_MODULE_VERSION
      Value: 0.3.9
    Name: env
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - '*.patch'
    - /tmp/
  - CmdLine:
    - "GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t&& addgroup -S nginx \t&&
      adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&& apk add
      --no-cache \t\tcurl \t\tgcc \t\tgettext \t\tgit \t\tgnupg1 \t\tlibc-dev \t\tlinux-headers
      \t\tmake \t\topenssl-dev \t\tpcre-dev \t\treadline-dev \t\tzlib-dev \t&& curl
      -fSL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz
      \t&& curl -fSL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc
      -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found=''; \tfor
      server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80
      \t\tpgp.mit.edu \t; do \t\techo \"Fetching GPG key $GPG_KEYS from $server\";
      \t\tgpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\"
      && found=yes && break; \tdone; \ttest -z \"$found\" && echo >&2 \"error: failed
      to fetch GPG key $GPG_KEYS\" && exit 1; \tgpg --batch --verify nginx.tar.gz.asc
      nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \t&& mkdir -p /usr/src
      \t&& tar -zxC /usr/src -f nginx.tar.gz \t&& rm nginx.tar.gz \t&& cd /usr/src/nginx-${NGINX_VERSION}
      \t\t&& git clone https://github.com/openresty/echo-nginx-module.git --depth=1
      \t\t&& git clone https://github.com/levonet/nginx-sticky-module-ng.git --depth=1
      \t\t&& git clone https://github.com/2Fast2BCn/nginx_upstream_check_module.git
      --depth=1 \t&& patch -p1 < /usr/src/nginx-${NGINX_VERSION}/nginx_upstream_check_module/check_1.14.0+.patch
      \t\t&& git clone https://github.com/google/ngx_brotli.git --depth=1 \t&& (cd
      ngx_brotli; git submodule update --init) \t\t&& mkdir -p /usr/src/nginx-${NGINX_VERSION}/ngx_http_redis
      \t&& curl -fSL https://people.freebsd.org/~osa/ngx_http_redis-${REDIS_MODULE_VERSION}.tar.gz
      -o ngx_http_redis.tar.gz \t&& tar -zxC /usr/src/nginx-${NGINX_VERSION}/ngx_http_redis
      -f ngx_http_redis.tar.gz --strip 1 \t\t&& git clone https://github.com/chobits/ngx_http_proxy_connect_module.git
      --depth=1 \t&& patch -p1 < /tmp/proxy_connect_rewrite_10158.patch \t\t&& git
      clone -b ${NJS_MODULE_VERSION} https://github.com/nginx/njs.git --depth=1 \t&&
      (cd njs; CFLAGS=\"-O2 -m64 -march=x86-64 -mfpmath=sse -msse4.2 -pipe -fPIC -fomit-frame-pointer\"
      ./configure; make njs; make test) \t\t&& CFLAGS=\"-pipe -m64 -Ofast -flto -mtune=generic
      -march=x86-64 -fPIE -fPIC -funroll-loops -fstack-protector-strong -mfpmath=sse
      -msse4.2 -ffast-math -fomit-frame-pointer -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2\"
      \t\t./configure \t\t\t--prefix=/etc/nginx \t\t\t--sbin-path=/usr/sbin/nginx
      \t\t\t--modules-path=/usr/lib/nginx/modules \t\t\t--conf-path=/etc/nginx/nginx.conf
      \t\t\t--error-log-path=/var/log/nginx/error.log \t\t\t--http-log-path=/var/log/nginx/access.log
      \t\t\t--pid-path=/var/run/nginx.pid \t\t\t--lock-path=/var/run/nginx.lock \t\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp
      \t\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
      \t\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp
      \t\t\t--user=nginx \t\t\t--group=nginx \t\t\t--with-compat \t\t\t--with-file-aio
      \t\t\t--with-http_addition_module \t\t\t--with-http_auth_request_module \t\t\t--with-http_degradation_module
      \t\t\t--with-http_gunzip_module \t\t\t--with-http_gzip_static_module \t\t\t--with-http_realip_module
      \t\t\t--with-http_secure_link_module \t\t\t--with-http_ssl_module \t\t\t--with-http_stub_status_module
      \t\t\t--with-http_v2_module \t\t\t--with-pcre \t\t\t--with-stream \t\t\t--with-stream_realip_module
      \t\t\t--with-stream_ssl_module \t\t\t--with-stream_ssl_preread_module \t\t\t--with-threads
      \t\t\t--add-module=/usr/src/nginx-${NGINX_VERSION}/nginx_upstream_check_module
      \t\t\t--add-module=/usr/src/nginx-${NGINX_VERSION}/ngx_http_proxy_connect_module
      \t\t\t--add-dynamic-module=/usr/src/nginx-${NGINX_VERSION}/echo-nginx-module
      \t\t\t--add-dynamic-module=/usr/src/nginx-${NGINX_VERSION}/nginx-sticky-module-ng
      \t\t\t--add-dynamic-module=/usr/src/nginx-${NGINX_VERSION}/ngx_brotli \t\t\t--add-dynamic-module=/usr/src/nginx-${NGINX_VERSION}/ngx_http_redis
      \t\t\t--add-dynamic-module=/usr/src/nginx-${NGINX_VERSION}/njs/nginx \t&& make
      -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/
      \t&& mkdir /etc/nginx/conf.d/ \t&& mkdir /etc/nginx/sites-enabled/ \t&& mkdir
      -p /usr/share/nginx/html/ \t&& install -m644 html/index.html /usr/share/nginx/html/
      \t&& install -m644 html/50x.html /usr/share/nginx/html/ \t&& install -m755 njs/build/njs
      /usr/bin/ \t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t&& strip
      /usr/bin/njs \t&& strip /usr/sbin/nginx \t&& strip /usr/lib/nginx/modules/*.so"
    Name: run
    PrependShell: true
  From:
    Image: alpine:3.10
  Name: build
  Platform: ""
  SourceCode: FROM alpine:3.10 AS build
- BaseName: alpine:3.10
  Commands:
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /etc/nginx
    - /etc/nginx
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /usr/sbin/nginx
    - /usr/sbin/nginx
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /usr/bin/njs
    - /usr/bin/njs
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /usr/bin/envsubst
    - /usr/local/bin/envsubst
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /usr/lib/nginx/
    - /usr/lib/nginx/
  - Chown: ""
    From: build
    Name: copy
    SourcesAndDest:
    - /usr/share/nginx
    - /usr/share/nginx
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.conf
    - /etc/nginx/nginx.conf
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - nginx.vh.default.conf
    - /etc/nginx/conf.d/default.conf
  - CmdLine:
    - "apk add --no-cache \t\tlibcrypto1.1 \t\tlibintl \t\tlibssl1.1 \t\tmusl \t\tpcre
      \t\treadline \t\ttzdata \t\tzlib \t&& addgroup -S nginx \t&& adduser -D -S -h
      /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&& mkdir -p /var/log/nginx
      \t&& ln -sf /dev/stdout /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log"
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "80"
  - Name: stopsignal
    Signal: SIGTERM
  - CmdLine:
    - nginx
    - -g
    - daemon off;
    Name: cmd
    PrependShell: false
  From:
    Image: alpine:3.10
  Name: ""
  Platform: ""
  SourceCode: FROM alpine:3.10
