MetaArgs: null
Stages:
- As: gocd-agent-unzip
  BaseName: alpine:latest
  Commands:
  - CmdLine:
    - apk --no-cache upgrade &&   apk add --no-cache curl &&   curl --fail --location
      --silent --show-error "https://download.gocd.org/binaries/19.7.0-9567/generic/go-agent-19.7.0-9567.zip"
      > /tmp/go-agent-19.7.0-9567.zip
    Name: run
    PrependShell: true
  - CmdLine:
    - unzip /tmp/go-agent-19.7.0-9567.zip -d /
    Name: run
    PrependShell: true
  - CmdLine:
    - mv /go-agent-19.7.0 /go-agent
    Name: run
    PrependShell: true
  From:
    Image: alpine:latest
  Name: gocd-agent-unzip
  Platform: ""
  SourceCode: FROM alpine:latest as gocd-agent-unzip
- BaseName: debian:stretch
  Commands:
  - Maintainer: ThoughtWorks, Inc. <support@thoughtworks.com>
    Name: maintainer
  - Labels:
    - Key: gocd.version
      Value: '"19.7.0"'
    - Key: description
      Value: '"GoCD agent based on debian version 9"'
    - Key: maintainer
      Value: '"ThoughtWorks, Inc. <support@thoughtworks.com>"'
    - Key: url
      Value: '"https://www.gocd.org"'
    - Key: gocd.full.version
      Value: '"19.7.0-9567"'
    - Key: gocd.git.sha
      Value: '"727ea9db824eb6971170ac2a886ff1072ff5a235"'
    Name: label
  - Chown: ""
    Name: add
    SourcesAndDest:
    - https://github.com/krallin/tini/releases/download/v0.18.0/tini-static-amd64
    - /usr/local/sbin/tini
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US:en
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: GO_JAVA_HOME
      Value: '"/gocd-jre"'
    Name: env
  - Key: UID
    Name: arg
    Value: "1000"
  - Key: GID
    Name: arg
    Value: "1000"
  - CmdLine:
    - "chmod 0755 /usr/local/sbin/tini &&   chown root:root /usr/local/sbin/tini &&
      \  useradd -u ${UID} -g root -d /home/go -m go &&   apt-get update &&   apt-get
      install -y --no-install-recommends                 ca-certificates                 git
      \t\twget \t\tsubversion \t\tmercurial \t\topenssh-client \t\tbash \t\tunzip
      \t\tcurl \t\tlocales \t\tprocps \t\tsysvinit-utils \t\tcoreutils \t\tg++ \t\tgcc
      \t\tlibc6-dev \t\tmake \t\tpkg-config &&   apt-get autoclean &&   echo 'en_US.UTF-8
      UTF-8' > /etc/locale.gen && /usr/sbin/locale-gen &&   curl --fail --location
      --silent --show-error 'https://github.com/AdoptOpenJDK/openjdk12-binaries/releases/download/jdk-12.0.1%2B12/OpenJDK12U-jre_x64_linux_hotspot_12.0.1_12.tar.gz'
      --output /tmp/jre.tar.gz &&   mkdir -p /gocd-jre &&   tar -xf /tmp/jre.tar.gz
      -C /gocd-jre --strip 1 &&   rm -rf /tmp/jre.tar.gz &&   mkdir -p /go-agent /docker-entrypoint.d
      /go /godata"
    Name: run
    PrependShell: true
  - Chown: ""
    Name: add
    SourcesAndDest:
    - docker-entrypoint.sh
    - /
  - Chown: ""
    From: gocd-agent-unzip
    Name: copy
    SourcesAndDest:
    - /go-agent
    - /go-agent
  - Chown: go:root
    From: ""
    Name: copy
    SourcesAndDest:
    - agent-bootstrapper-logback-include.xml
    - agent-launcher-logback-include.xml
    - agent-logback-include.xml
    - /go-agent/config/
  - CmdLine:
    - chown -R go:root /go-agent /docker-entrypoint.d /go /godata /docker-entrypoint.sh     &&
      chmod -R g=u /go-agent /docker-entrypoint.d /go /godata /docker-entrypoint.sh
    Name: run
    PrependShell: true
  - Env:
    - Key: GOLANG_VERSION
      Value: 1.12.7
    Name: env
  - CmdLine:
    - "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\"
      in \t\tamd64) goRelArch='linux-amd64'; goRelSha256='66d83bfb5a9ede000e33c6579a91a29e6b101829ad41fffb5c5bb6c900e109d9'
      ;; \t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='48edbe936e9eb74f259bfc4b621fafca4d4ec43156b4ee7bd0d979f257dcd60a'
      ;; \t\tarm64) goRelArch='linux-arm64'; goRelSha256='4da1f7198a8fa0c4067852656b6c10153a4eca5a26aca28ef02ae9f4a7939ba5'
      ;; \t\ti386) goRelArch='linux-386'; goRelSha256='ae2424b7ff557a708be12d3141f25b645966489ca49af1ad10b4fbe4c97d4c41'
      ;; \t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='8eda20600d90247efbfa70d116d80056e11192d62592240975b2a8c53caa5bf3'
      ;; \t\ts390x) goRelArch='linux-s390x'; goRelSha256='3374ac3d646555e50be790091b51849319cfcb176904048458c7f4252337fce8'
      ;; \t\t*) goRelArch='src'; goRelSha256='95e8447d6f04b8d6a62de1726defbb20ab203208ee167ed15f83d7978ce43b13';
      \t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not
      have a corresponding Go binary release; will be building from source\"; echo
      >&2 ;; \tesac; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\";
      \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c
      -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src'
      ]; then \t\techo >&2; \t\techo >&2 'error: UNIMPLEMENTED'; \t\techo >&2 'TODO
      install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall
      after build)'; \t\techo >&2; \t\texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\";
      \tgo version"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOPATH
      Value: /go
    Name: env
  - Env:
    - Key: PATH
      Value: $GOPATH/bin:/usr/local/go/bin:$PATH
    Name: env
  - CmdLine:
    - mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
    Name: run
    PrependShell: true
  - Name: workdir
    Path: $GOPATH
  - CmdLine:
    - /docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: user
    User: go
  From:
    Image: debian:stretch
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch
