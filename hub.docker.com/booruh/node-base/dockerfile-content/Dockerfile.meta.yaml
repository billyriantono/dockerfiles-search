MetaArgs:
- DefaultValue: "3.5"
  Key: ALPINE_VERSION
  ProvidedValue: null
  Value: "3.5"
Stages:
- As: baseimage
  BaseName: alpine:$ALPINE_VERSION
  Commands:
  - Maintainer: blueapple <blueapple1120@qq.com>
    Name: maintainer
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: zh_CN:zh
    Name: env
  - Env:
    - Key: LC_ALL
      Value: zh_CN.UTF-8
    Name: env
  - Env:
    - Key: GLIBC_VERSION
      Value: 2.26-r0
    Name: env
  - Name: user
    User: root
  - CmdLine:
    - mkdir -p /deployments
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_APP_DIR
      Value: /deployments
    - Key: JAVA_MAJOR_VERSION
      Value: "8"
    Name: env
  - Env:
    - Key: GOSU_VERSION
      Value: "1.11"
    Name: env
  - CmdLine:
    - '{         echo ''#!/bin/sh'';         echo ''set -e'';         echo;         echo
      ''dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'';     }
      > /usr/local/bin/docker-java-home     && chmod +x /usr/local/bin/docker-java-home'
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /usr/lib/jvm/java-1.8-openjdk
    Name: env
  - Env:
    - Key: PATH
      Value: $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u181
    Name: env
  - Env:
    - Key: JAVA_ALPINE_VERSION
      Value: 8.181.13-r0
    Name: env
  - CmdLine:
    - set -x     && apk add --no-cache         openjdk8="$JAVA_ALPINE_VERSION"     &&
      [ "$JAVA_HOME" = "$(docker-java-home)" ]
    Name: run
    PrependShell: true
  - CmdLine:
    - set -x     && apk add --no-cache --virtual     .gosu-deps     dpkg     tzdata     tree     ca-certificates     openssl     &&
      cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime     && echo "Asia/Shanghai"
      > /etc/timezone     && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print
      $NF }')"     && wget --no-check-certificate -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"     &&
      chmod +x /usr/local/bin/gosu     && ln -s /usr/local/bin/gosu /usr/bin/gosu     &&
      gosu nobody true     && apk del .gosu-deps dpkg
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --update &&     apk upgrade &&     apk add --no-cache     bash     bash-completion     curl     wget     vim     libgcc     ttf-dejavu     busybox     tree     tzdata     mkfontscale     mkfontdir     fontconfig     dumb-init     su-exec     coreutils     &&
      apk add --no-cache --virtual .build-deps     && wget -q -O /etc/apk/keys/sgerrand.rsa.pub
      https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub     && wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk     &&
      wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk     &&
      wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-i18n-${GLIBC_VERSION}.apk     &&
      wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-dev-${GLIBC_VERSION}.apk     &&
      apk add --allow-untrusted glibc-bin-${GLIBC_VERSION}.apk                                  glibc-${GLIBC_VERSION}.apk                                  glibc-i18n-${GLIBC_VERSION}.apk                                  glibc-dev-${GLIBC_VERSION}.apk     &&
      mkdir -p /usr/share/fonts                 /root/.local/share/fonts                 /root/.fonts                 /root/.cache/fontconfig                 /root/.fontconfig     &&
      /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 "$LANG"
      || true     && echo "export LANG=$LANG" > /etc/profile.d/locale.sh     && sed
      -i 's/securerandom.source\=file\:\/dev\/random/securerandom.source\=file\:\/dev\/urandom/g'
      /usr/lib/jvm/default-jvm/jre/lib/security/java.security     && rm -rf /glibc-bin-${GLIBC_VERSION}.apk     &&
      rm -rf /glibc-${GLIBC_VERSION}.apk     && rm -rf /glibc-i18n-${GLIBC_VERSION}.apk     &&
      rm -rf /glibc-dev-${GLIBC_VERSION}.apk     && rm -rf /var/cache/apk/*     &&
      rm -rf /var/lib/apt/lists/*     && rm -rf /etc/apk/keys/sgerrand.rsa.pub     &&
      apk del .build-deps                        tree                        tzdata                        glibc-i18n                        openssl     &&
      echo '            PS1='\''\[\e[01;33m\][\h \u:\[\e[01;34m\]\w\[\e[01;33m\]]\[\e[00m\]\$
      '\'' ;             eval `dircolors -b` ;             alias ls="ls --color=auto"
      ;             alias l="ls -lah" ;             alias ll="ls -lh" ;             alias
      l.="ls -d .* --color=auto" ;             alias mv="mv -i" ;             alias
      rm="rm -i" ;             export PATH='"${PATH}"'     ' >> /etc/profile     &&
      echo '. ~/.bashrc' > /root/.bash_profile     && echo '. /etc/profile' > /root/.bashrc
    Name: run
    PrependShell: true
  From:
    Image: alpine:$ALPINE_VERSION
  Name: baseimage
  Platform: ""
  SourceCode: FROM alpine:$ALPINE_VERSION as baseimage
