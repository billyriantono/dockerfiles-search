MetaArgs: null
Stages:
- BaseName: debian:stretch-slim
  Commands:
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get
      install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf
      /var/lib/apt/lists/*; \tfi"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates
      \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.7.0
    Name: env
  - CmdLine:
    - "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update
      && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev
      \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev
      \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake
      \t\ttk-dev \t\tuuid-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v
      gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& for server in ha.pool.sks-keyservers.net
      \              hkp://p80.pool.sks-keyservers.net:80               keyserver.ubuntu.com
      \              hkp://keyserver.ubuntu.com:80               pgp.mit.edu; do     gpg
      --keyserver \"$server\" --recv-keys \"$GPG_KEY\" && break || echo \"Trying new
      server...\"; \tdone \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz
      \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm
      -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar
      -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz
      \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"
      \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto
      '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type
      f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/
      { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut
      -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove
      -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/*
      \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o
      -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name
      '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&&
      python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: "18.1"
    Name: env
  - CmdLine:
    - "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';
      \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual
      $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;
      \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check
      \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind
      /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests
      \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\)
      \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - set -ex && pip install alembic psycopg2-binary
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999
      --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql;
      \tchown -R postgres:postgres /var/lib/postgresql"
    Name: run
    PrependShell: true
  - Env:
    - Key: GOSU_VERSION
      Value: "1.10"
    Name: env
  - CmdLine:
    - "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates
      wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg
      --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& for
      server in ha.pool.sks-keyservers.net               hkp://p80.pool.sks-keyservers.net:80
      \              keyserver.ubuntu.com               hkp://keyserver.ubuntu.com:80
      \              pgp.mit.edu; do     gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      && break || echo \"Trying new server...\"; \tdone \t&& gpg --batch --verify
      /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null
      && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc
      \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y
      --auto-remove ca-certificates wget"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale'
      /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;
      \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get
      update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef
      -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: en_US.utf8
    Name: env
  - CmdLine:
    - "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper;
      \trm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir /docker-entrypoint-initdb.d
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp
      -d)\"; \tfor server in ha.pool.sks-keyservers.net               hkp://p80.pool.sks-keyservers.net:80
      \              keyserver.ubuntu.com               hkp://keyserver.ubuntu.com:80
      \              pgp.mit.edu; do     gpg --keyserver \"$server\" --recv-keys \"$key\"
      && break || echo \"Trying new server...\"; \tdone; \tgpg --export \"$key\" >
      /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf
      --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
    Name: run
    PrependShell: true
  - Env:
    - Key: PG_MAJOR
      Value: "10"
    Name: env
  - Env:
    - Key: PG_VERSION
      Value: 10.5-2.pgdg90+1
    Name: env
  - CmdLine:
    - "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\";
      \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/
      stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get
      update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/
      stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase
      \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian
      stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac;
      \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark
      showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common
      pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck
      parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common
      pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark
      showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark;
      \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package:
      ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list;
      \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get
      install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 =
      false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\"
      \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get
      purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list;
      \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S
      \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mv -v \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\" /usr/share/postgresql/
      \t&& ln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\" \t&&
      sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample"
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql
      && chmod 2777 /var/run/postgresql
    Name: run
    PrependShell: true
  - Env:
    - Key: PATH
      Value: $PATH:/usr/lib/postgresql/$PG_MAJOR/bin
    Name: env
  - Env:
    - Key: PGDATA
      Value: /var/lib/postgresql/data
    Name: env
  - CmdLine:
    - 'mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
      # this 777 will be replaced by 700 at runtime (allows semi-arbitrary "--user"
      values)'
    Name: run
    PrependShell: true
  - Name: volume
    Volumes:
    - /var/lib/postgresql/data
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker-entrypoint.sh
    - /usr/local/bin/
  - CmdLine:
    - chmod 777 /usr/local/bin/docker-entrypoint.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - 'ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat'
    Name: run
    PrependShell: true
  - CmdLine:
    - docker-entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: expose
    Ports:
    - "5432"
  - CmdLine:
    - postgres
    Name: cmd
    PrependShell: false
  From:
    Image: debian:stretch-slim
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch-slim
