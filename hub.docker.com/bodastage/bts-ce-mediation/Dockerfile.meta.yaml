MetaArgs: null
Stages:
- BaseName: debian:stretch-slim
  Commands:
  - Labels:
    - Key: maintainer
      Value: Bodastage Engineering<engineering@bodastage.com>
    Name: label
  - Env:
    - Key: PATH
      Value: /usr/local/bin:$PATH
    Name: env
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get
      install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf
      /var/lib/apt/lists/*; \tfi"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates
      \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: GPG_KEY
      Value: 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    Name: env
  - Env:
    - Key: PYTHON_VERSION
      Value: 3.6.7
    Name: env
  - CmdLine:
    - "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update
      && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev
      \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev
      \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake
      \t\ttk-dev \t\tuuid-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v
      gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"
      \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& for server in ha.pool.sks-keyservers.net
      \              hkp://p80.pool.sks-keyservers.net:80               keyserver.ubuntu.com
      \              hkp://keyserver.ubuntu.com:80               pgp.mit.edu; do     gpg
      --no-tty --keyserver \"$server\" --recv-keys \"$GPG_KEY\" && break || echo \"Trying
      new server...\"; \tdone \t&& gpg --no-tty --batch --verify python.tar.xz.asc
      python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all ||
      :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python
      \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm
      python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query
      DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions
      \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip
      \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto
      '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type
      f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/
      { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut
      -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove
      -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/*
      \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o
      -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name
      '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&&
      python3 --version"
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s
      python3 python \t&& ln -s python3-config python-config"
    Name: run
    PrependShell: true
  - Env:
    - Key: PYTHON_PIP_VERSION
      Value: "18.1"
    Name: env
  - CmdLine:
    - "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get
      install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';
      \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual
      $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;
      \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check
      \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind
      /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests
      \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\)
      \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tzip
      \t\tunzip \t\txz-utils \t\twget \t\tgnupg \t\tfile \t\tprocps \t\tp7zip-full
      \t\tunrar-free \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - CmdLine:
    - "echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main 10\"
      > /etc/apt/sources.list.d/pgdg.list \t&& wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc
      | apt-key add - \t&& apt-get update \t&& apt-get install --allow-unauthenticated
      --no-install-recommends --no-upgrade  -y postgresql-client-10;"
    Name: run
    PrependShell: true
  - CmdLine:
    - "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip
      \t\txz-utils \t&& rm -rf /var/lib/apt/lists/*"
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: C.UTF-8
    Name: env
  - CmdLine:
    - "{ \t\techo '#!/bin/sh'; \t\techo 'set -e'; \t\techo; \t\techo 'dirname \"$(dirname
      \"$(readlink -f \"$(which javac || which java)\")\")\"'; \t} > /usr/local/bin/docker-java-home
      \t&& chmod +x /usr/local/bin/docker-java-home"
    Name: run
    PrependShell: true
  - CmdLine:
    - ln -svT "/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)" /docker-java-home
    Name: run
    PrependShell: true
  - Env:
    - Key: JAVA_HOME
      Value: /docker-java-home/jre
    Name: env
  - Env:
    - Key: JAVA_VERSION
      Value: 8u181
    Name: env
  - Env:
    - Key: JAVA_DEBIAN_VERSION
      Value: 8u212-b01-1~deb9u1
    Name: env
  - CmdLine:
    - "set -ex; \t\tif [ ! -d /usr/share/man/man1 ]; then \t\tmkdir -p /usr/share/man/man1;
      \tfi; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\topenjdk-8-jre=\"$JAVA_DEBIAN_VERSION\"
      \t; \trm -rf /var/lib/apt/lists/*; \t\t[ \"$(readlink -f \"$JAVA_HOME\")\" =
      \"$(docker-java-home)\" ]; \t\tupdate-alternatives --get-selections | awk -v
      home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\";
      print | \"update-alternatives --set-selections\" }'; \tupdate-alternatives --query
      java | grep -q 'Status: manual'"
    Name: run
    PrependShell: true
  - Key: AIRFLOW_VERSION
    Name: arg
    Value: 1.10.0
  - Key: AIRFLOW_HOME
    Name: arg
    Value: /usr/local/airflow
  - Key: AIRFLOW_DEPS
    Name: arg
    Value: '""'
  - Key: PYTHON_DEPS
    Name: arg
    Value: '""'
  - Env:
    - Key: AIRFLOW_GPL_UNIDECODE
      Value: "yes"
    Name: env
  - Env:
    - Key: LANGUAGE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LANG
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_ALL
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_CTYPE
      Value: en_US.UTF-8
    Name: env
  - Env:
    - Key: LC_MESSAGES
      Value: en_US.UTF-8
    Name: env
  - CmdLine:
    - "set -ex     && buildDeps='         freetds-dev         python3-dev         libkrb5-dev
      \        libsasl2-dev         libssl-dev         libffi-dev         libblas-dev
      \        liblapack-dev         libpq-dev         git     '     && apt-get update
      -yqq     && apt-get upgrade -yqq     && apt-get install -yqq --no-install-recommends
      \        $buildDeps         freetds-bin         build-essential         python3-pip
      \        python3-requests         default-libmysqlclient-dev         apt-utils
      \        curl         rsync         netcat         locales     && sed -i 's/^#
      en_US.UTF-8 UTF-8$/en_US.UTF-8 UTF-8/g' /etc/locale.gen     && locale-gen     &&
      update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8     && useradd -ms /bin/bash
      -d ${AIRFLOW_HOME} airflow     && pip install -U pip setuptools wheel     &&
      pip install Cython     && pip install pytz     && pip install pyOpenSSL     &&
      pip install ndg-httpsclient     && pip install pyasn1 \t&& pip install pika
      \t&& pip install xlrd     && pip install apache-airflow[crypto,celery,postgres,hive,mysql,jdbc,ssh${AIRFLOW_DEPS:+,}${AIRFLOW_DEPS}]==$AIRFLOW_VERSION
      \    && pip install 'redis>=2.10.5,<3'     && if [ -n \"${PYTHON_DEPS}\" ];
      then pip install ${PYTHON_DEPS}; fi     && apt-get purge --auto-remove -yqq
      $buildDeps     && apt-get clean     && rm -rf         /var/lib/apt/lists/*         /tmp/*
      \        /var/tmp/*         /usr/share/man         /usr/share/doc         /usr/share/doc-base"
    Name: run
    PrependShell: true
  - CmdLine:
    - apt-get update && apt-get install -y  pgloader     && rm -rf         /var/lib/apt/lists/*         /tmp/*         /var/tmp/*         /usr/share/man         /usr/share/doc         /usr/share/doc-base
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - script/entrypoint.sh
    - /entrypoint.sh
  - CmdLine:
    - chmod 777 /entrypoint.sh
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - config/airflow.cfg
    - ${AIRFLOW_HOME}/airflow.cfg
  - CmdLine:
    - 'chown -R airflow: ${AIRFLOW_HOME}'
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "5555"
    - "8080"
    - "8793"
  - Name: user
    User: airflow
  - Name: workdir
    Path: ${AIRFLOW_HOME}
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - webserver
    Name: cmd
    PrependShell: false
  From:
    Image: debian:stretch-slim
  Name: ""
  Platform: ""
  SourceCode: FROM debian:stretch-slim
