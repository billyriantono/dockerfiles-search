{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "jenkins/jnlp-slave:alpine",
      "SourceCode": "FROM jenkins/jnlp-slave:alpine",
      "Platform": "",
      "From": {
        "Image": "jenkins/jnlp-slave:alpine"
      },
      "Commands": [
        {
          "Name": "user",
          "User": "root"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_MASTER",
              "Value": "http://localhost:8080"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_SLAVE_NAME",
              "Value": "dind-node"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JENKINS_SLAVE_SECRET",
              "Value": "\"\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "JNLP_POSTGRESQL_VER",
              "Value": "\"42.2.5\""
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_CHANNEL",
              "Value": "stable"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DOCKER_VERSION",
              "Value": "19.03.2"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "CLAIR_SCANNER_VERSION",
              "Value": "8"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "DIND_COMMIT",
              "Value": "52379fa76dee07ca038624d639d9e14f4fb719ff"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "apk add --no-cache     btrfs-progs     ca-certificates     curl     e2fsprogs     e2fsprogs-extra     gcc     iproute2     iptables     libc-dev     libffi-dev     make     openssl-dev     py-pip     python-dev     sudo     xfsprogs     xz \t\tpigz \t;   curl -o /usr/local/lib/postgresql.jar -sS \"https://jdbc.postgresql.org/download/postgresql-${JNLP_POSTGRESQL_VER}.jar\"; \tif zfs=\"$(apk info --no-cache --quiet zfs)\" \u0026\u0026 [ -n \"$zfs\" ]; then \t\tapk add --no-cache zfs; \tfi"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "[ ! -e /etc/nsswitch.conf ] \u0026\u0026 echo 'hosts: files dns' \u003e /etc/nsswitch.conf"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\taarch64) dockerArch='aarch64' ;; \t\tppc64le) dockerArch='ppc64le' ;; \t\ts390x) dockerArch='s390x' ;; \t\t*) echo \u003e\u00262 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac;   \tif ! wget -O /usr/local/bin/clair-scanner \"https://github.com/arminc/clair-scanner/releases/download/v${CLAIR_SCANNER_VERSION}/clair-scanner_linux_amd64\"; then \t\techo \u003e\u00262 \"error: failed to download 'clair-scanner_linux_amd64 ${CLAIR_SCANNER_VERSION}\"; \t\texit 1; \tfi;   chmod +x /usr/local/bin/clair-scanner; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo \u003e\u00262 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version;   pip install docker-compose awscli \t\u0026\u0026 addgroup -S dockremap \t\u0026\u0026 adduser -S -G dockremap dockremap \t\u0026\u0026 echo 'dockremap:165536:65536' \u003e\u003e /etc/subuid \t\u0026\u0026 echo 'dockremap:165536:65536' \u003e\u003e /etc/subgid   \u0026\u0026 wget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \tchmod +x /usr/local/bin/dind"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            ".docker/base/",
            "/"
          ]
        },
        {
          "Name": "volume",
          "Volumes": [
            "/var/lib/docker"
          ]
        },
        {
          "Name": "expose",
          "Ports": [
            "2375"
          ]
        },
        {
          "CmdLine": [
            "jenkins-slave"
          ],
          "Name": "entrypoint",
          "PrependShell": false
        },
        {
          "Name": "user",
          "User": "jenkins"
        }
      ]
    }
  ]
}