{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.4",
      "SourceCode": "FROM alpine:3.4",
      "Platform": "",
      "From": {
        "Image": "alpine:3.4"
      },
      "Commands": [
        {
          "Maintainer": "NGINX Docker Maintainers \"docker-maint@nginx.com\"",
          "Name": "maintainer"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.8.1"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "CONFIG=\"\t\t--prefix=/etc/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic \t\t--with-http_perl_module=dynamic \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-http_slice_module \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-file-aio \t\t--with-http_v2_module \t\t--with-ipv6 \t\t--add-module=./nginx_upstream_check_module \t\t--add-module=./nginx-upsync-module \t\" \t\u0026\u0026 addgroup -S nginx \t\u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t\u0026\u0026 apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake \t\topenssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev \t\tperl-dev \t\tgit \t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t\u0026\u0026 curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \t\u0026\u0026 export GNUPGHOME=\"$(mktemp -d)\" \t\u0026\u0026 rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \t\u0026\u0026 mkdir -p /usr/src \t\u0026\u0026 tar -zxC /usr/src -f nginx.tar.gz \t\u0026\u0026 rm nginx.tar.gz \t\u0026\u0026 cd /usr/src/nginx-$NGINX_VERSION \t\u0026\u0026 git clone https://github.com/weibocom/nginx-upsync-module.git \t\u0026\u0026 git clone https://github.com/xiaokai-wang/nginx_upstream_check_module.git \t\u0026\u0026 cd nginx-upsync-module \t\u0026\u0026 git checkout nginx-upsync-1.8.x \t\u0026\u0026 cd .. \t\u0026\u0026 ./configure $CONFIG --with-debug \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 mv objs/nginx objs/nginx-debug \t\u0026\u0026 mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \t\u0026\u0026 mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \t\u0026\u0026 mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \t\u0026\u0026 mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \t\u0026\u0026 ./configure $CONFIG \t\u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN) \t\u0026\u0026 make install \t\u0026\u0026 rm -rf /etc/nginx/html/ \t\u0026\u0026 mkdir /etc/nginx/conf.d/ \t\u0026\u0026 mkdir -p /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/index.html /usr/share/nginx/html/ \t\u0026\u0026 install -m644 html/50x.html /usr/share/nginx/html/ \t\u0026\u0026 install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t\u0026\u0026 install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \t\u0026\u0026 install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \t\u0026\u0026 ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \t\u0026\u0026 strip /usr/sbin/nginx* \t\u0026\u0026 strip /usr/lib/nginx/modules/*.so \t\u0026\u0026 rm -rf /usr/src/nginx-$NGINX_VERSION \t\t\u0026\u0026 apk add --no-cache --virtual .gettext gettext \t\u0026\u0026 mv /usr/bin/envsubst /tmp/ \t\t\u0026\u0026 runDeps=\"$( \t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t| sort -u \t)\" \t\u0026\u0026 apk add --no-cache --virtual .nginx-rundeps $runDeps \t\u0026\u0026 apk del .build-deps \t\u0026\u0026 apk del .gettext \t\u0026\u0026 mv /tmp/envsubst /usr/local/bin/ \t\t\u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log \t\u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}