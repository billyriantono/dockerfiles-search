{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "alpine:3.7",
      "SourceCode": "FROM alpine:3.7",
      "Platform": "",
      "From": {
        "Image": "alpine:3.7"
      },
      "Commands": [
        {
          "Labels": [
            {
              "Key": "maintainer",
              "Value": "\"hgati \u003ccobays@gmail.com\u003e\""
            }
          ],
          "Name": "label"
        },
        {
          "Env": [
            {
              "Key": "TZ",
              "Value": "Asia/Seoul"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "NGINX_VERSION",
              "Value": "1.14.0"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "GEOIP_VERSION",
              "Value": "1.6.11"
            }
          ],
          "Name": "env"
        },
        {
          "Env": [
            {
              "Key": "ECHO_VERSION",
              "Value": "0.61"
            }
          ],
          "Name": "env"
        },
        {
          "CmdLine": [
            "set -x     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Installing build environment\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 apk --update add --no-cache --virtual .build-deps         gcc         libc-dev         make         openssl-dev         pcre-dev         zlib-dev         linux-headers         curl         gnupg         libxslt-dev         gd-dev     \u0026\u0026 runtime_packages=\"openssl pcre zlib libgcc\"     \u0026\u0026 apk add ${runtime_packages}     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Installing timezone (tzdata)\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 apk add --update --no-cache tzdata     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading echo-nginx-module\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/openresty/echo-nginx-module/archive/v${ECHO_VERSION}.tar.gz         -O /tmp/echo-nginx-module.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf echo-nginx-module.tar.gz     \u0026\u0026 mv echo-nginx-module-${ECHO_VERSION} echo-nginx-module     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading nginx_accept_language_module\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/giom/nginx_accept_language_module/archive/master.zip         -O /tmp/nginx_accept_language_module.zip     \u0026\u0026 echo \"- 만약 동적모듈로서 설치하고싶으면, 아래주소에서 다운로드하세요 !\"     \u0026\u0026 echo \"- wget -P /tmp/ https://github.com/hgati/nginx_accept_language_module/archive/master.zip\"     \u0026\u0026 cd /tmp \u0026\u0026 unzip /tmp/nginx_accept_language_module.zip     \u0026\u0026 mv nginx_accept_language_module-* nginx_accept_language_module     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Installing geoip-api-c\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/maxmind/geoip-api-c/releases/download/v${GEOIP_VERSION}/GeoIP-${GEOIP_VERSION}.tar.gz         -O /tmp/GeoIP.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf GeoIP.tar.gz \u0026\u0026 mv GeoIP-* GeoIP     \u0026\u0026 cd GeoIP     \u0026\u0026 ./configure --prefix=/usr     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make check     \u0026\u0026 make install     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading GeoIP database\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 mkdir /usr/share/GeoIP \u0026\u0026 cd /tmp     \u0026\u0026 wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz     \u0026\u0026 gunzip GeoIP.dat.gz     \u0026\u0026 wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz     \u0026\u0026 gunzip GeoLiteCity.dat.gz     \u0026\u0026 mv GeoIP.dat GeoLiteCity.dat /usr/share/GeoIP/     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading ngx_cache_purge\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz -O /tmp/ngx_cache_purge.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf ngx_cache_purge.tar.gz \u0026\u0026 mv ngx_cache_purge-* ngx_cache_purge     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Installing LuaJIT\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz -O /tmp/LuaJIT.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf LuaJIT.tar.gz \u0026\u0026 mv LuaJIT-* LuaJIT \u0026\u0026 cd LuaJIT \u0026\u0026 make \u0026\u0026 make install     \u0026\u0026 echo \"- LuaJIT 2.0 찾을곳을 nginx의 빌드시스템에게 말하기:\"     \u0026\u0026 export LUAJIT_LIB=/usr/local/lib     \u0026\u0026 export LUAJIT_INC=/usr/local/include/luajit-2.0     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading ngx_devel_kit\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/simplresty/ngx_devel_kit/archive/v0.3.1rc1.tar.gz -O /tmp/ngx_devel_kit.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf ngx_devel_kit.tar.gz \u0026\u0026 mv ngx_devel_kit-* ngx_devel_kit     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Downloading lua-nginx-module\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 wget https://github.com/openresty/lua-nginx-module/archive/v0.10.12rc2.tar.gz -O /tmp/lua-nginx-module.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf lua-nginx-module.tar.gz \u0026\u0026 mv lua-nginx-module-* lua-nginx-module     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"Now Let's Installing NGINX\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 addgroup -S nginx     \u0026\u0026 adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx     \u0026\u0026 wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O /tmp/nginx.tar.gz     \u0026\u0026 cd /tmp \u0026\u0026 tar -xvzf nginx.tar.gz     \u0026\u0026 cd nginx-${NGINX_VERSION}     \u0026\u0026 ./configure         --prefix=/etc/nginx         --sbin-path=/usr/sbin/nginx         --modules-path=/usr/lib/nginx/modules         --conf-path=/etc/nginx/nginx.conf         --pid-path=/var/run/nginx.pid         --lock-path=/var/run/nginx.lock         --http-log-path=/var/log/nginx/access.log         --error-log-path=/var/log/nginx/error.log         --user=nginx         --group=nginx         --with-pcre-jit         --with-http_ssl_module         --with-http_realip_module         --with-stream_ssl_module         --with-stream_realip_module         --with-http_stub_status_module         --with-http_gzip_static_module         --with-http_v2_module         --with-http_auth_request_module         --with-http_geoip_module         --add-module=/tmp/nginx_accept_language_module         --add-module=/tmp/echo-nginx-module         --add-module=/tmp/ngx_cache_purge         --with-ld-opt=\"-Wl,-rpath,/usr/local/lib\"         --add-module=/tmp/ngx_devel_kit         --add-module=/tmp/lua-nginx-module     \u0026\u0026 make -j$(getconf _NPROCESSORS_ONLN)     \u0026\u0026 make install     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"관련 디렉토리 링크및 생성하기\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 mkdir -p /etc/nginx/conf.d /var/www/html     \u0026\u0026 mv /etc/nginx/html/* /var/www/html/ \u0026\u0026 rm -rf /etc/nginx/html     \u0026\u0026 ln -s /usr/lib/nginx/modules /etc/nginx/modules     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 echo \"필요없는 파일 정리하기\"     \u0026\u0026 echo \"==================================================\"     \u0026\u0026 apk del .build-deps     \u0026\u0026 rm -rf /tmp/*     \u0026\u0026 rm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Chown": "",
          "Name": "add",
          "SourcesAndDest": [
            "provision/custom-errors",
            "/etc/nginx/"
          ]
        },
        {
          "CmdLine": [
            "ln -sf /dev/stdout /var/log/nginx/access.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "ln -sf /dev/stderr /var/log/nginx/error.log"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "CmdLine": [
            "echo \"http://dl-4.alpinelinux.org/alpine/edge/community\" \u003e\u003e /etc/apk/repositories     \u0026\u0026 apk --update add --no-cache dos2unix     \u0026\u0026 find /etc/nginx -type f -print0 | xargs -0 dos2unix     \u0026\u0026 apk del dos2unix"
          ],
          "Name": "run",
          "PrependShell": true
        },
        {
          "Name": "workdir",
          "Path": "/var/www"
        },
        {
          "Name": "expose",
          "Ports": [
            "443",
            "80"
          ]
        },
        {
          "CmdLine": [
            "nginx",
            "-g",
            "daemon off;"
          ],
          "Name": "cmd",
          "PrependShell": false
        }
      ]
    }
  ]
}