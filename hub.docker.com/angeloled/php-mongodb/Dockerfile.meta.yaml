MetaArgs: null
Stages:
- BaseName: nginx:1.10.1-alpine
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Giuseppe Iannelli <giuseppe.iannelli@mosaicoon.com>, Pietro Bonaccorso
        <pietro.b@mosaicoon.com>"'
    Name: label
  - Labels:
    - Key: description
      Value: '"Nginx, PHP 7 stack running on alpine with supervisord"'
    Name: label
  - Env:
    - Key: APP_CWD
      Value: '''/app/code'''
    - Key: NGINX_SERVER_START
      Value: '"ON"'
    - Key: NGINX_CLIENTMAXBODYSIZE
      Value: '''8M'''
    - Key: VHOST_ROOT
      Value: '''/app/code'''
    - Key: VHOST_INDEX
      Value: '''index.php'''
    - Key: PHP_MAXEXECUTIONTIME
      Value: '''30'''
    - Key: PHP_MEMORYLIMIT
      Value: '''128M'''
    - Key: PHP_DISPLAYERRORS
      Value: '''Off'''
    - Key: PHP_DISPLASTARTUPERRORS
      Value: '''Off'''
    - Key: PHP_ERRORREPORTING
      Value: '''E_ALL & ~E_DEPRECATED & ~E_STRICT'''
    - Key: PHP_VARIABLESORDER
      Value: '''GPCS'''
    - Key: PHP_POSTMAXSIZE
      Value: '''8M'''
    - Key: PHP_UPLOADMAXFILESIZE
      Value: '''2M'''
    - Key: PHP_SHORTOPENTAG
      Value: '''Off'''
    - Key: PHP_MODULE_PTHREADS_ENABLE
      Value: '"OFF"'
    - Key: PHP_MODULE_MONGODB_ENABLE
      Value: '"ON"'
    - Key: PHP_MODULE_KAFKA_ENABLE
      Value: '"ON"'
    - Key: FPM_USER
      Value: '''application'''
    - Key: FPM_GROUP
      Value: '''application'''
    - Key: FPM_LISTEN
      Value: '''127.0.0.1:9000'''
    - Key: FPM_CLEARENV
      Value: '''no'''
    - Key: FPM_CUSTOM_LOGFILE_BASE
      Value: '"/var/log/php-fpm/"'
    - Key: FPM_CUSTOM_LOGFILE
      Value: '"$FPM_CUSTOM_LOGFILE_BASE/custom.log"'
    - Key: APP_USER
      Value: ${FPM_USER}
    - Key: APP_GROUP
      Value: ${FPM_GROUP}
    Name: env
  - Env:
    - Key: PHP_INI_DIR
      Value: '''/usr/local/etc/php'''
    - Key: PHP_EXTRA_CONFIGURE_ARGS
      Value: '''--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --enable-maintainer-zts
        --enable-zip --with-libdir=/usr/lib'''
    - Key: GPG_KEYS
      Value: '''1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763'''
    - Key: PHP_VERSION
      Value: '''7.0.11'''
    - Key: PHP_FILENAME
      Value: '''php-7.0.11.tar.xz'''
    - Key: PHP_SHA256
      Value: '''d4cccea8da1d27c11b89386f8b8e95692ad3356610d571253d00ca67d524c735'''
    Name: env
  - CmdLine:
    - "apk add --no-cache --virtual .persistent-deps \t\tca-certificates \t\tcurl
      \    freetype     libjpeg     libpng     libvpx     libldap     libmcrypt \t\ttar
      \t\txz"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data
      www-data   && mkdir -p $PHP_INI_DIR/conf.d"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t&& mkdir
      -p /usr/src \t&& cd /usr/src \t&& curl -fSL \"https://secure.php.net/get/$PHP_FILENAME/from/this/mirror\"
      -o php.tar.xz \t&& echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - \t&& curl
      -fSL \"https://secure.php.net/get/$PHP_FILENAME.asc/from/this/mirror\" -o php.tar.xz.asc
      \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& for key in $GPG_KEYS; do \t\tgpg
      --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone \t&& gpg
      --batch --verify php.tar.xz.asc php.tar.xz \t&& rm -r \"$GNUPGHOME\" \t&& apk
      del .fetch-deps"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -xe \t&& apk add --no-cache --virtual .build-deps     autoconf     bison
      \    curl-dev     file     freetype-dev     g++     gcc     libc-dev     libedit-dev
      \    libjpeg-turbo-dev     libmcrypt-dev     libpng-dev \t\tlibxml2-dev     make
      \    pkgconf     re2c     openldap-dev \t\topenssl-dev \t\tsqlite-dev"
    Name: run
    PrependShell: true
  - CmdLine:
    - "mkdir -p /usr/src/php   && tar -Jxf /usr/src/php.tar.xz -C /usr/src/php --strip-components=1
      \t&& cd /usr/src/php \t&& ./configure \t\t--with-config-file-path=\"$PHP_INI_DIR\"
      \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t--disable-cgi     --enable-exif
      \t\t--enable-ftp     --enable-fpm     --enable-mailparse     --enable-maintainer-zts
      \t\t--enable-mbstring \t\t--enable-mysqlnd     --enable-pcntl     --enable-soap
      \    --enable-sockets     --enable-zip \t\t--with-curl     --with-fpm-user=www-data
      \    --with-fpm-group=www-data     --with-gd     --with-freetype-dir=/usr/lib/
      \    --with-jpeg-dir=/usr/lib     --with-png-dir=/usr/lib     --with-vpx-dir=/usr/lib
      \    --with-ldap-sasl     --with-libdir=/usr/lib \t\t--with-libedit     --with-mcrypt
      \     --with-mysqli=mysqlnd     --with-pdo-mysql=mysqlnd \t\t--with-openssl
      \t\t--with-zlib   && make -j\"$(getconf _NPROCESSORS_ONLN)\" \t&& make install
      \t&& make test \t&& make clean"
    Name: run
    PrependShell: true
  - CmdLine:
    - cp /usr/src/php/php.ini-production $PHP_INI_DIR/php.ini
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - docker/
    - /docker/
  - CmdLine:
    - "touch /docker/configurations/php/conf.d/pthreads.ini   && pecl config-set php_ini
      /docker/configurations/php/conf.d/pthreads.ini  \t&& pear config-set php_ini
      /docker/configurations/php/conf.d/pthreads.ini  \t&& pecl install pthreads"
    Name: run
    PrependShell: true
  - CmdLine:
    - "touch /docker/configurations/php/conf.d/mongodb.ini   && pecl config-set php_ini
      /docker/configurations/php/conf.d/mongodb.ini  \t&& pear config-set php_ini
      /docker/configurations/php/conf.d/mongodb.ini  \t&& pecl install mongodb"
    Name: run
    PrependShell: true
  - CmdLine:
    - "touch $PHP_INI_DIR/conf.d/redis.ini   && pecl config-set php_ini $PHP_INI_DIR/conf.d/redis.ini
      \ \t&& pear config-set php_ini $PHP_INI_DIR/conf.d/redis.ini  \t&& pecl install
      redis"
    Name: run
    PrependShell: true
  - CmdLine:
    - "touch $PHP_INI_DIR/conf.d/ssh.ini   && pecl config-set php_ini /docker/configurations/php/conf.d/ssh.ini
      \ \t&& pear config-set php_ini /docker/configurations/php/conf.d/ssh.ini  \t&&
      pecl install ssh2-1.0"
    Name: run
    PrependShell: true
  - CmdLine:
    - apk add --no-cache git bash python
    Name: run
    PrependShell: true
  - CmdLine:
    - cd /usr/src/   && git clone https://github.com/edenhill/librdkafka.git   &&
      cd librdkafka/   && ./configure   && make -j"$(getconf _NPROCESSORS_ONLN)"   &&
      make install   && cd /usr/src/   && rm -rf /usr/src/librdkafka/   && echo "librdkafka
      built"   && git clone https://github.com/arnaud-lb/php-rdkafka.git   && cd php-rdkafka/   &&
      git checkout php7   && git reset --hard 4e6a07438bf1664f995c76ad74800d57100e525d   &&
      phpize   && ./configure   && make all -j"$(getconf _NPROCESSORS_ONLN)"   &&
      make install   && cd /usr/src/   && rm -rf /usr/src/php-rdkafka   && echo 'extension="rdkafka.so"'
      > /docker/configurations/php/conf.d/kafka.ini
    Name: run
    PrependShell: true
  - CmdLine:
    - "cd /usr/src   && rm -rf /usr/src/php* \t&& runDeps=\"$( \t\tscanelf --needed
      --nobanner --recursive /usr/local \t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2);
      print \"so:\" $2 }' \t\t\t| sort -u \t\t\t| xargs -r apk info --installed \t\t\t|
      sort -u \t)\" \t&& apk add --no-cache --virtual .php-rundeps $runDeps \t&& apk
      del .build-deps"
    Name: run
    PrependShell: true
  - CmdLine:
    - "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g'
      php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default
      php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default
      php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf';
      \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log
      = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this
      to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2';
      \t\techo; \t\techo 'clear_env = <FPM_CLEARENV>;'     echo; \t\techo '; Ensure
      worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output
      = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo
      'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = [::]:9000';
      \t} | tee php-fpm.d/zz-docker.conf"
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -fSL https://getcomposer.org/composer.phar -o /usr/bin/composer && chmod
      +x /usr/bin/composer
    Name: run
    PrependShell: true
  - CmdLine:
    - apk --update add supervisor
    Name: run
    PrependShell: true
  - CmdLine:
    - mkdir -p $FPM_CUSTOM_LOGFILE_BASE /var/log/supervisord/     && mkfifo -m 666
      $FPM_CUSTOM_LOGFILE     && touch /var/log/supervisord/supervisord.log     &&
      mkdir /crontabs
    Name: run
    PrependShell: true
  - Name: expose
    Ports:
    - "443"
    - "80"
  - CmdLine:
    - apk --update add openssh
    Name: run
    PrependShell: true
  - Expression: RUN bash /docker/scripts/bootstrap.sh
    Name: onbuild
  - CmdLine:
    - bash /docker/scripts/bootstrap.sh
    Name: run
    PrependShell: true
  - CmdLine:
    - bash
    - /docker/scripts/entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - Name: workdir
    Path: $APP_CWD
  - CmdLine:
    - start-stack
    Name: cmd
    PrependShell: false
  From:
    Image: nginx:1.10.1-alpine
  Name: ""
  Platform: ""
  SourceCode: FROM nginx:1.10.1-alpine
