MetaArgs: null
Stages:
- BaseName: ubuntu:latest
  Commands:
  - Labels:
    - Key: maintainer
      Value: '"Johann Visagie <johann@visagie.za.net>"'
    Name: label
  - CmdLine:
    - set -x     && apt-get -y update     && apt-get install -y --no-install-recommends
      ca-certificates       build-essential       bzip2       curl libcurl4-openssl-dev       git       gosu       libldap-dev       libreadline-dev       libssl-dev       libxml2-dev       locales       openssl       python3       python3-dev       python3-pip       zlib1g-dev     &&
      rm -rf /var/lib/apt/lists/*     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias
      en_US.UTF-8
    Name: run
    PrependShell: true
  - Env:
    - Key: LANG
      Value: '"en_US.utf8"'
    - Key: PG_MAJOR
      Value: '"10"'
    - Key: PG_VERSION
      Value: '"10.3"'
    - Key: PGHTTP_VERSION
      Value: '"1.2.2"'
    - Key: PGDATA
      Value: '"/data"'
    - Key: POSTGRES_USER
      Value: '"postgres"'
    - Key: POSTGRES_GROUP
      Value: '"postgres"'
    - Key: PYTHON
      Value: '"/usr/bin/python3"'
    Name: env
  - CmdLine:
    - mkdir /src     && curl -s       https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2       |
      tar xvjC /src     && cd /src/postgresql-${PG_VERSION}     && ./configure       --with-openssl       --with-libxml       --enable-thread-safety       --with-python       --with-ldap       --prefix=/usr/local     &&
      make install     && make install -C contrib/adminpack     && make install -C
      contrib/pgcrypto
    Name: run
    PrependShell: true
  - CmdLine:
    - curl -sL       https://github.com/pramsey/pgsql-http/archive/v${PGHTTP_VERSION}.tar.gz       |
      tar xvzC /src     && cd /src/pgsql-http-${PGHTTP_VERSION}     && make install
    Name: run
    PrependShell: true
  - Chown: ""
    From: ""
    Name: copy
    SourcesAndDest:
    - requirements.txt
    - entrypoint.sh
    - /
  - CmdLine:
    - pip3 install --upgrade --no-cache-dir pip setuptools wheel     && pip3 install
      --no-cache-dir -r /requirements.txt
    Name: run
    PrependShell: true
  - CmdLine:
    - git clone https://github.com/wjv/Multicorn.git -b nocache /src/Multicorn     &&
      cd /src/Multicorn     && make install
    Name: run
    PrependShell: true
  - CmdLine:
    - groupadd -r "${POSTGRES_GROUP}" --gid=999 && useradd -r -g "${POSTGRES_GROUP}"
      --uid=999 "${POSTGRES_USER}"
    Name: run
    PrependShell: true
  - CmdLine:
    - sed -i -e '/^xterm/{' -e 'n; s/^/#/' -e '}' /root/.bashrc
    Name: run
    PrependShell: true
  - Key: MYPG_DEBUG
    Name: arg
    Value: null
  - CmdLine:
    - if [ -z "${MYPG_DEBUG}" ]; then       apt-get purge -y --auto-remove ca-certificates         build-essential         bzip2         curl         git       &&
      rm -rf /src /requirements.txt;     fi
    Name: run
    PrependShell: true
  - CmdLine:
    - /entrypoint.sh
    Name: entrypoint
    PrependShell: false
  - CmdLine:
    - postgres
    Name: cmd
    PrependShell: false
  - Name: expose
    Ports:
    - "5432"
  - Health:
      Interval: 300000000000
      Retries: 3
      Test:
      - CMD-SHELL
      - gosu postgres pg_ctl -D /data status
      Timeout: 5000000000
    Name: healthcheck
  From:
    Image: ubuntu:latest
  Name: ""
  Platform: ""
  SourceCode: FROM ubuntu:latest
