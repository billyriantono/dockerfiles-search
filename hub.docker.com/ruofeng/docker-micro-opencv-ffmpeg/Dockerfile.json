{
  "MetaArgs": null,
  "Stages": [
    {
      "Name": "",
      "BaseName": "docker.io/python:3-alpine",
      "SourceCode": "FROM docker.io/python:3-alpine",
      "Platform": "",
      "From": {
        "Image": "docker.io/python:3-alpine"
      },
      "Commands": [
        {
          "Maintainer": "Chao Hu \u003cchao@ngs.tech\u003e",
          "Name": "maintainer"
        },
        {
          "CmdLine": [
            "echo http://nl.alpinelinux.org/alpine/edge/testing \u003e\u003e /etc/apk/repositories \u0026\u0026 \tapk update \u0026\u0026 \tapk add \ttzdata \tlibass \tlibstdc++ \tlibpng \tlibjpeg \txvidcore \tx264-libs \tx265 \tlibvpx \tlibvorbis \topus \tlame \tfdk-aac     \tcurl \tlibtool \tboost-dev \tfreetype \u0026\u0026 \tapk add --virtual build-deps \tfdk-aac-dev \tfreetype-dev \tx264-dev \tx265-dev \tyasm \tyasm-dev \tlibogg-dev \tlibvorbis-dev \topus-dev \tlibvpx-dev \tlame-dev \txvidcore-dev \tlibass-dev \topenssl-dev \tmusl-dev \tmake \tcmake \tgcc \tg++ \tbuild-base \tlibjpeg-turbo-dev \tlibpng-dev \tlibjasper \tclang-dev \tclang \tlinux-headers     \tautomake \tautoconf \tgit \u0026\u0026 \texport SRC=/usr \texport FFMPEG_VERSION=3.3.2 \tDIR=$(mktemp -d) \u0026\u0026 cd ${DIR} \u0026\u0026 \tcurl -Os http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \u0026\u0026 \ttar xzvf ffmpeg-${FFMPEG_VERSION}.tar.gz \u0026\u0026 \tcd ffmpeg-${FFMPEG_VERSION} \u0026\u0026 \t./configure --prefix=\"${SRC}\" --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --bindir=\"${SRC}/bin\" \t--extra-libs=-ldl --enable-version3 --enable-libmp3lame --enable-pthreads --enable-libx264 --enable-libxvid --enable-gpl \t--enable-postproc --enable-nonfree --enable-avresample --enable-libfdk-aac --disable-debug --enable-small --enable-openssl \t--enable-libx265 --enable-libopus --enable-libvorbis --enable-libvpx --enable-libfreetype --enable-libass \t--enable-shared --enable-pic \u0026\u0026 \tmake -j4 \u0026\u0026 \tmake install \u0026\u0026 \tmake distclean \u0026\u0026 \thash -r \u0026\u0026 \tcd /tmp \u0026\u0026 \trm -rf ${DIR} \u0026\u0026 \tln -s /usr/include/locale.h /usr/include/xlocale.h \u0026\u0026 \tpip install --no-cache-dir \tCython==0.25.2 \tnumpy==1.13.1 \tPillow==4.2.1 \tav==0.3.3 \u0026\u0026 \texport OPENCV_VERSION=3.2.0 \texport CC=/usr/bin/clang \texport CXX=/usr/bin/clang++ \u0026\u0026 \tDIR=$(mktemp -d) \u0026\u0026 cd ${DIR} \u0026\u0026 \tcurl -sSL -Os https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz \u0026\u0026 \ttar xzvf ${OPENCV_VERSION}.tar.gz \u0026\u0026 \tcd opencv-${OPENCV_VERSION} \u0026\u0026 \tmkdir build \u0026\u0026 \tcd build \u0026\u0026 \tcmake -D CMAKE_BUILD_TYPE=RELEASE \t-D INSTALL_C_EXAMPLES=OFF \t-D INSTALL_PYTHON_EXAMPLES=OFF \t-D CMAKE_INSTALL_PREFIX=/usr/local \t-D BUILD_EXAMPLES=OFF .. \u0026\u0026 \tmake -j4 \u0026\u0026 \tmake install \u0026\u0026 \tcp ${DIR}/opencv-${OPENCV_VERSION}/build/lib/python3/cv2.cpython-36m-x86_64-linux-gnu.so /usr/local/lib/python3.6/cv2.so \u0026\u0026 \tcd /tmp \u0026\u0026 \trm -rf ${DIR} \u0026\u0026 \trm -rf /var/cache/apk/*"
          ],
          "Name": "run",
          "PrependShell": true
        }
      ]
    }
  ]
}